[
    {
        "task": [
            "Эволюционное развитие конструкции модулей памяти, используемых в качестве ОЗУ компьютеров. Сверху вниз: DIP, SIPP, SIMM 30 pin, SIMM 72 pin, DIMM, DDR DIMM<<<Полупроводниковая статическая (англ. Static Random Access Memory, SRAM) — ячейки представляют собой полупроводниковые триггеры. Достоинства — небольшое энергопотребление, высокое быстродействие. Отсутствие необходимости производить «регенерацию». Недостатки — малый объём, высокая стоимость. Благодаря принципиальным достоинствам широко используется в качестве кеш-памяти процессоров в компьютерах.\nПолупроводниковая динамическая (англ. Dynamic Random Access Memory, DRAM) — каждая ячейка представляет собой конденсатор на основе перехода КМОП-транзистора. Достоинства — низкая стоимость, большой объём. Недостатки — необходимость периодического считывания и перезаписи каждой ячейки — т. н. «регенерации», и, как следствие, понижение быстродействия, большое энергопотребление. Процесс регенерации реализуется специальным контроллером, установленным на материнской плате или в центральном процессоре. DRAM обычно используется в качестве оперативной памяти (ОЗУ) компьютеров.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Запоминающее_устройство_с_произвольным_доступом"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Компьютерная_программа"
    },
    {
        "task": [
            "Главная отличительная особенность данного семейства ПК — аппаратная совместимость с IBM PC-компьютерами и установленные на них полноценные операционные системы, такие как:\n<<<семейство Microsoft Windows NT (Windows XP Tablet PC Edition, Windows 7).\nApple Mac OS X.\nLinux (полная настольная сборка одного из дистрибутивов этой ОС).>>>",
            "Главное достоинство:\n<<<Полная программная совместимость с огромным количеством программного обеспечения, написанным для полноценных операционных систем семейства Microsoft Windows NT (Windows XP Tablet PC Edition, Windows Vista, Windows 7), используемых также и на настольных компьютерах.>>>",
            "Недостатки по сравнению с интернет-планшетами, не совместимыми с IBM PC-компьютерами[3]:\n<<<Имеют старый интерфейс классических операционных систем Microsoft Windows, созданный для настольных компьютеров, только лишь немного адаптированный для мультитач-экранов[4];\nМенее энергоэффективны — меньше работают от одного заряда батареи;\nБолее тяжёлые;\nБолее дорогие.>>>",
            "Главная отличительная особенность данного семейства компьютеров — это аппаратная несовместимость с IBM PC-компьютерами и установленная на них разновидность мобильных операционных систем, обычно используемых в смартфонах, таких как:\n<<<iOS (Apple).\nAndroid (Google).\nWindows RT (Microsoft).\nBlackBerry Tablet OS (BlackBerry).\nTizen (Intel / Samsung).\nOpen webOS (LG Electronics).\nSailfish OS (Jolla).\nMaemo OS (Nokia).>>>",
            "Или ориентированные на облачные сервисы и веб-приложения ОС, такие как:\n<<<Chrome OS (Google).\nJolicloud.>>>",
            "Основные качества, отличающие интернет-планшет от планшетного ПК:\n<<<низкая стоимость (в пределах 80—500$);\nсенсорный экран для работы при помощи пальцев;\nупрощённый пользовательский интерфейс (больше похож на интерфейс смартфона, чем ПК);\nразвитые средства беспроводного интернет-соединения (Wi-Fi, 3G/4G);\nдлительное время автономной работы, которым ранее могли похвастаться лишь сотовые телефоны;\nзащищённость от хакерских атак.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Планшетный_компьютер"
    },
    {
        "task": [
            "В настоящее время в интернете существует достаточно большое количество служб, обеспечивающих работу со всем спектром ресурсов.\nНаиболее известными среди них являются:\n<<<служба DNS, или система доменных имён, обеспечивающая возможность использования для адресации узлов сети мнемонических имён вместо числовых адресов;\nэлектронная почта (E-mail), обеспечивающая возможность обмена сообщениями одного человека с одним или несколькими абонентами;\nслужба IRC, предназначенная для поддержки текстового общения в реальном времени (chat);\nтелеконференции, или группы новостей (Usenet), обеспечивающие возможность коллективного обмена сообщениями;\nслужба FTP — система файловых архивов, обеспечивающая хранение и пересылку файлов различных типов;\nслужба Telnet, предназначенная для управления удалёнными компьютерами в терминальном режиме;\nWorld Wide Web (WWW, W3, «Всемирная паутина») — гипертекстовая (гипермедиа) система, предназначенная для интеграции различных сетевых ресурсов в единое информационное пространство;\nПотоковое мультимедиа.>>>",
            "Для стандартных служб также стандартизируется и интерфейс взаимодействия с протоколами транспортного уровня. В частности, за каждым программным сервером резервируются стандартные номера TCP- и UDP-портов, которые остаются неизменными независимо от особенностей той или иной фирменной реализации как компонентов сервиса, так и транспортных протоколов. Номера портов клиентского программного обеспечения так жёстко не регламентируются. Это объясняется следующими факторами:\n<<<во-первых, на пользовательском узле может функционировать несколько копий клиентской программы, и каждая из них должна однозначно идентифицироваться транспортным протоколом, то есть за каждой копией должен быть закреплён свой уникальный номер порта;\nво-вторых, клиенту важна регламентация портов сервера, чтобы знать, куда направлять запрос, а сервер сможет ответить клиенту, узнав адрес из поступившего запроса.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Интернет"
    },
    {
        "task": [
            "Помимо обычных сотовых телефонов, существуют такие разновидности, как:\n<<<Камерофон — мобильные телефоны с функцией фотоаппарата и/или видеокамеры. В настоящее время данное название практически вышло из обихода в первоначальном понимании, поскольку большинство современных аппаратов оснащено встроенными фото/видеокамерами. Тем не менее, так часто называют мультимедийные телефоны с расширенными фотовозможностями (в частности, телефоны с высоким качеством камеры).\nМультимедийный телефон (плеерфон, мьюзикфон, музыкальный телефон) — специализированные мобильные телефоны с расширенными возможностями воспроизведения аудио- и видеофайлов и т. п.. Этот термин, как и «камерофон», выходит из употребления, поскольку большая часть современных средних по цене аппаратов может проигрывать цифровые фонограммы и оснащается разъёмом для карты памяти. Тем не менее, в ряде мультимедийных телефонов упор делается именно на аудиовозможностях (например, Sony Ericsson серии W (Walkman) со встроенным плеером, Motorola серии ROKR; W, Nokia серии X, являющиеся в основном бюджетными телефонами, за некоторыми исключениями).\nСмартфон — мобильный телефон с полноценной операционной системой (Symbian OS, Windows Mobile, Palm OS, GNU/Linux, Android, Apple iOS, MeeGo и др.). Такие телефоны позволяют устанавливать любые новые программы, поддерживаемые данной операционной системой и расширяющие их функциональность: IM-клиенты, офисные пакеты, органайзеры, аудио- и видеопроигрыватели, программы управления звонками, браузеры и т. д. Для смартфонов существуют и вирусы (в то время как возможность внедрения в обычные телефоны деструктивного кода весьма затруднительна, в силу закрытости ОС).  С появлением таких телефонов в русском языке за телефонами, не обладающими такими функциями (в частности, «кнопочными», т. к. большинство современных смартфонов имеет сенсорный экран вместо клавиатуры и дисплея), закрепился жаргонный термин «звонилка».\nКоммуникатор — карманный персональный компьютер (КПК) с функциями мобильного телефона. Иная ветвь мобильных устройств по отношению к смартфонам, но имеющая тенденцию к сближению между ними (в настоящее время функциональность и тех и других в целом сходится). Как и смартфоны, работают под управлением операционных систем, открытых для разработки сторонних приложений.  Возможности смартфонов и коммуникаторов, как и любых «старших» компьютеров, зависят от установленных программ и «железа».\nБизнес-телефон — телефон со специализированными функциями для корпоративных пользователей. Такие телефоны позволяют просматривать текстовые документы и электронные таблицы, работать с электронной почтой, синхронизировать данные органайзера с корпоративным сервером и т. п. Значительная часть бизнес-телефонов является смартфонами или коммуникаторами, часто встречаются устройства с QWERTY-клавиатурой. Иногда такие телефоны, обладая значительной функциональностью, лишены фотокамеры (для организаций с повышенными требованиями безопасности).\nИмиджевый телефон — телефоны, главная особенность которых — стильный внешний вид и броская функциональность (в частности — автоматизированное раскрытие). В имиджевых телефонах часто применяются необычные форм-факторы и стильные (и дорогостоящие) материалы — при изготовлении таких телефонов для отделки корпуса нередко используются благородные металлы и драгоценные камни. Функциональность таких устройств обычно невысока, хотя, в виде исключения, среди них встречаются смартфоны и коммуникаторы. Примером имиджевых телефонов являются модели от Vertu, хотя таковые обычно имеются и в линейках моделей у многих производителей.\nОдноразовый телефон — телефон, обладающий базовой функциональностью (зачастую без дисплея и даже SIM-карты, некоторые в формате кредитной карты), предназначенный для звонков до исчерпания баланса или до окончания заряда батарей[3][4], далее выбрасываемый или утилизируемый.\nТелефон для пожилых людей («бабушкофон», «дедушкофон») — телефон, обладающий базовой функциональностью, кнопкой SOS, большими кнопками и крупным шрифтом на дисплее (зачастую монохромном). Также эти телефоны могут снабжаться светодиодом, выполняющим функцию фонарика.>>>",
            "Базовые[править | править код]<<<телефонный справочник\nголосовое управление\nвибровызов («виброзвонок») — полезен в зашумлённых местах, или же там, где нельзя нарушать тишину\nсменные мелодии звонков (чаще всего форматов MIDI, MMF, WAV, MP3 и AAC)\nподключение гарнитуры (Hands Free) (наушники + микрофон)\nгромкоговорящая связь («громкая связь»)\nчасы\nбудильник\nсекундомер\nтаймер\nкалендарь\nкалькулятор\nхранение данных (встроенная флэш-память, поддержка сменных карт флэш-памяти (MMC,RS MMC, SD, Memory Stick, MicroSD, Memory Stick Micro, Mini SD и др.), также жёсткий диск)\nигры и приложения (на Java (J2ME), Brew, Android, Windows Mobile)>>>",
            "Деловые[править | править код]<<<инженерный калькулятор\nконвертер валют\nдиктофон\nорганайзер\nконференц-связь — в этом режиме могут разговаривать несколько человек (для работы функции необходима поддержка функции оператора)\nОрганайзер паролей — возможность записать несколько паролей и скрыть их под единым паролем>>>",
            "Фотосъёмка с мобильного устройства<<<радиоприёмник\nцифровой проигрыватель\nвидеопроигрыватель\nТВ-тюнер\nкараоке (LG F1200)\nцифровой фотоаппарат, цифровая видеокамера (см. камерафон)\nпростые графические и видеоредакторы\nTrackID — сервис, встроенный в телефоны Sony Ericsson (серия Walkman (начиная с W810), K-серия), позволяющий узнать название и исполнителя музыкального произведения\nФункция получения некоторой информации от радиостанции (RDS)>>>",
            "Обмен сообщениями[править | править код]<<<SMS — служба коротких сообщений SMS (Short Message Service)\nEMS — служба расширенных сообщений EMS (Enhanced Message Service — расширение SMS, позволяющее форматировать текст, добавлять смайлик, черно-белые (а иногда и цветные) изображения, звуки и простые мелодии)\nMMS — служба мультимедийных сообщений MMS (Multimedia Messaging Service) позволяет добавлять в сообщения звук, изображение (например, фотографию) или небольшой видеоролик.\nВстроенный или дополнительно устанавливаемый IM-клиент\nCB (Cell Broadcast) — приём информационных сообщений от оператора>>>",
            "Обмен данными[править | править код]<<<через факс\nчерез модем (в том числе доступ в Интернет, по протоколам CSD, GPRS, EDGE, HSDPA, EV-DO, Wi-Fi, WiMAX и др.)\nчерез встроенный WAP-браузер\nчерез встроенный или дополнительно устанавливаемый Веб-браузер\nчерез средства для работы с электронной почтой\nчерез дата-кабель\nчерез ИК порт\nчерез Bluetooth\nчерез WiFi\nчерез NFC>>>",
            "Иногда производители сотовых телефонов включают в них и более экзотические функции[5]:\n<<<GPS\nPush-to-talk (PTT) — в этом режиме телефон имитирует портативную рацию\nфонарик\nфотокамера (присутствует во всех новых телефонах)\nпринтер (Polaroid HS-RSS)\nсканер изображений\nкомпас\nсканер отпечатков пальцев\nпреобразование речи в текст и наоборот (некоторые аппараты Samsung и Nokia)\nвидеокамера (присутствует во всех новых телефонах)\nLocation-based services\nСолнечная панель (Samsung S7550 Blue Earth) (позволяет заряжать телефон от солнца, 1 час = 10 мин разговора)\nШагомер (Samsung S7550 Blue Earth) (количество сохранённых деревьев, потраченной энергии, уменьшение выброса CO2)\nТВ-тюнер (аналоговый или цифровой; многие китайские модели)\nПроектор, встроенный в телефон (многие китайские модели, а также фирменные)\nТелефон-часы (многие китайские модели)\niFan — зарядка iPhone силой ветра (крепится на руль велосипеда)\nТеплогенератор, встроенный в телефон Nokia E-Cu (концепт)>>>",
            "Телефоны могут:\n<<<иметь внешнюю или встроенную (внутреннюю) антенну\nразличаться по количеству дисплеев: с одним, двумя, редко — с тремя.\nобладать как обычным, так и сенсорным дисплеем.\nобладать как обычной телефонной 3×4, так и расширенной (напр. BlackBerry) клавиатурой, также полноценной (или урезанной) QWERTY-клавиатурой, также клавиатурой со шрифтом Брайля, могут и вообще не иметь клавиатуры (см. форм-фактор Lipstick).\nиметь как один, так и два (стерео) встроенных динамика\nработать как в одном типе сети (напр. GSM), так и в нескольких\nработать в одном диапазоне (напр. GSM 800 МГц), так и в нескольких\nиметь слот для карты памяти>>>",
            "Также существуют такие исполнения сотовых телефонов, как:\n<<<Стационарный — аналогичен обычному проводному телефону. Используется вместо обычного телефона там, где проведение выделенной телефонной линии невозможно или нецелесообразно (телефонизации удалённых объектов: склады, цеха, бытовки, дачи или коттеджи). Имеет встроенный аккумулятор и обычно внешнюю антенну (штыревую всенаправленную), что позволяет использовать аппарат в зонах слабого приёма сигнала сотовой сети. Конечно, такие телефоны хотя и являются сотовыми, но не являются мобильными.\nАвтомобильный — аналогичен стационарному, но предназначен для установки в автомобиль и обычно оптимизирован для удобной работы в автомобиле. Питание имеет от автомобильного аккумулятора (Nokia 810).>>>",
            "(Samsung A100) Один из первых складных телефонов компании Samsung производства 2000 года<<<Моноблок (т. н. классический) — корпус не содержит движущихся частей.\nс сенсорным дисплеем — смартфон, где отсутствуют какие-либо клавиши (за исключением двух-трёх), а для каких либо действий используется прикосновения пальцев или стилуса к экрану (Nokia N8, Samsung Galaxy S5, IPhone 5s и др.)\nС флипом — с откидной крышкой, закрывающей клавиатуру. Обычно на этой крышке располагают микрофон, что позволяет телефону иметь удобное расстояние между микрофоном и динамиком даже при небольшом размере телефона. Одно время были очень популярны, на данный же момент такая конструкция почти не используется, главным образом из-за распространения «раскладушек» и падения цен на них.\n«Раскладушка» («книжка», «лягушка», «жаба», «ракушка») — складной корпус, состоящий из двух частей и напоминающий блокнот или пудреницу. Обычно на верхней крышке находится дисплей и динамик, а в нижней части — клавиатура и микрофон. Помимо внутреннего (основного) дисплея, такой телефон часто имеет и небольшой внешний дисплей, доступный в сложенном состоянии. Обычно раскладушки раскрываются на угол меньше 180 градусов, но существуют и модели этого форм-фактора, раскладываемые на 180 градусов.\nПсевдораскладушка — похожа на «раскладушку», но экран находится в нижней её части, а на откидной крышке только динамик. В отличие от флипа, верхняя крышка «псевдораскладушки» закрывает и дисплей. Часто в верхней крышке оставляют отверстие или делают часть крышки (а иногда и всю) прозрачной, чтобы можно было видеть дисплей в закрытом состоянии.\nДвойная раскладушка — корпус, который может быть как горизонтальной, так и вертикальной «раскладушкой». Применяется в коммуникаторах: вертикальное открытие даёт доступ к телефонным функциям, а горизонтальное — к большому экрану и полноценной QWERTY-клавиатуре.\nСлайдер — состоит из двух частей, одна из которых сдвигается (обычно вверх) относительно другой.\nБоковой слайдер — похож по принципу на обычный слайдер, но корпус выезжает не вверх, а вбок, иногда откидываясь при этом под небольшим углом. Применяется, как правило, в коммуникаторах и смартфонах, обычно оснащеных сенсорным экраном.\nРотатор — телефон, где вторая половина не откидывается (в отличие от раскладушки), а поворачивается относительно первой.\nРотационная раскладушка — телефон, вторая половина которого может как поворачиваться (rotary), так и откидываться.\nБраслет (наручный телефон, часофон) — телефон, носимый на запястье.\nТубус (англ. Lipstick) — корпус, по форме напоминающий тюбик губной помады, пенал или авторучку. Обладает нетрадиционными органами управления (часто только джойстик). Применяется в имиджевых моделях.\nMMS-камера — устройство, пересылающее фотографию охраняемого объекта в виде MMS-сообщения, позволяет прослушивать охраняемое помещение.>>>",
            "Основные производители[править | править код]<<<\nMotorola — Список моделей сотовых телефонов Motorola :: Категория:Мобильные телефоны Motorola\nNokia — Список моделей сотовых телефонов Nokia :: Категория:Мобильные телефоны Nokia\nLG — Категория:Мобильные телефоны LG :: Шаблон:Сотовые телефоны LG\nSony Ericsson — Список моделей сотовых телефонов Sony Ericsson :: Категория:Мобильные телефоны Sony Ericsson\nSamsung — Список моделей сотовых телефонов Samsung :: Категория:Мобильные телефоны Samsung\nSiemens — Сотовые телефоны Siemens :: Категория:Мобильные телефоны Siemens (подразделение продано фирме BenQ)>>>",
            "В России[править | править код]<<<Атлас — М-663С «Атлас»\nBeeline (ВымпелКом)>>>",
            "Компьютерные программы для работы с мобильным телефоном:\n<<<BlackBerry Desktop Software\nHTC Sync и HTC Sync Manager\nMobile Phone Manager (Siemens)\nNokia PC Suite\nSamsung Kies\nSony Ericsson PC Suite\nSony PC Companion\niTunes\nZune>>>",
            "В искусстве и культуре<<<В фильме Чарли Чаплина «Цирк» в кадр попала женщина, своими манерами поведения напоминающая сотового абонента. Однако, дата выхода фильма — 1928 год. На самом деле в руке она держит одну из первых моделей электрического слухового аппарата.\nStar Trek (1966—1969) — герои сериала общались друг с другом при помощи коммуникаторов. Идея создания мобильного телефона возникла у доктора Мартина Купера именно во время просмотра этого телесериала[44].\nМобильный телефон (мобила) стал неотъемлемым атрибутом так называемого нового русского в начале-середине 90-х годов.\nВ 2003 году вышел саундтрек Сергея Шнурова «Мобильник» к фильму «Бумер».\nВ 2004 году вышел фильм режиссёра Дэвида Р. Эллиса «Сотовый».\nВ 2006 году вышел роман «Мобильник» известного американского писателя Стивена Кинга.\nВ 2007 на экраны вышел фильм режиссёра Джеймса Хута «Чёртов мобильник».\nВ 2010 году вышел видеоклип на песню «Telephone» в исполнении Леди Гаги и Бейонсе.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Сотовый_телефон"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Система_мгновенного_обмена_сообщениями"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Пиксель"
    },
    {
        "task": [
            "Кэш центрального процессора разделён на несколько уровней. Максимальное количество кэшей — четыре. В универсальном процессоре в настоящее время число уровней может достигать трёх. Кэш-память уровня N+1, как правило, больше по размеру и имеет более низкие скорости доступа и передачи данных, чем кэш-память уровня N.\n<<<Самым быстрым является кэш первого уровня — L1 cache (level 1 cache). По сути, он является неотъемлемой частью процессора, поскольку расположен на одном с ним кристалле и входит в состав функциональных блоков. В современных процессорах обычно L1 разделён на два кэша — кэш команд (инструкций) и кэш данных (Гарвардская архитектура). Большинство процессоров без L1 не может функционировать. L1 работает на частоте процессора, и, в общем случае, обращение к нему может производиться каждый такт. Зачастую является возможным выполнять несколько операций чтения/записи одновременно.>>>",
            "Самым быстрым является кэш первого уровня — L1 cache (level 1 cache). По сути, он является неотъемлемой частью процессора, поскольку расположен на одном с ним кристалле и входит в состав функциональных блоков. В современных процессорах обычно L1 разделён на два кэша — кэш команд (инструкций) и кэш данных (Гарвардская архитектура). Большинство процессоров без L1 не может функционировать. L1 работает на частоте процессора, и, в общем случае, обращение к нему может производиться каждый такт. Зачастую является возможным выполнять несколько операций чтения/записи одновременно.<<<Вторым по быстродействию является кэш второго уровня — L2 cache, который обычно, как и L1, расположен на одном кристалле с процессором. В ранних версиях процессоров L2 реализовывался в виде отдельного набора микросхем памяти на материнской плате. Объём - L2 от 128 кбайт до 1—12 Мбайт. В современных многоядерных процессорах кэш второго уровня, находясь на том же кристалле, является памятью раздельного пользования — при общем объёме кэша в n Мбайт на каждое ядро приходится по n/c Мбайта, где c — количество ядер процессора.>>>",
            "Вторым по быстродействию является кэш второго уровня — L2 cache, который обычно, как и L1, расположен на одном кристалле с процессором. В ранних версиях процессоров L2 реализовывался в виде отдельного набора микросхем памяти на материнской плате. Объём - L2 от 128 кбайт до 1—12 Мбайт. В современных многоядерных процессорах кэш второго уровня, находясь на том же кристалле, является памятью раздельного пользования — при общем объёме кэша в n Мбайт на каждое ядро приходится по n/c Мбайта, где c — количество ядер процессора.<<<Кэш третьего уровня наименее быстродействующий, но он может быть очень большим — более 24 Мбайт. L3 медленнее предыдущих кэшей, но всё равно значительно быстрее, чем оперативная память. В многопроцессорных системах находится в общем пользовании и предназначен для синхронизации данных различных L2.>>>",
            "Кэш третьего уровня наименее быстродействующий, но он может быть очень большим — более 24 Мбайт. L3 медленнее предыдущих кэшей, но всё равно значительно быстрее, чем оперативная память. В многопроцессорных системах находится в общем пользовании и предназначен для синхронизации данных различных L2.<<<Существует четвёртый уровень кэша, применение которого оправдано только для многопроцессорных высокопроизводительных серверов и мейнфреймов. Обычно он реализован отдельной микросхемой.>>>",
            "Применение кэширования внешних накопителей обусловлено следующими факторами:\n<<<скорость доступа процессора к оперативной памяти в сотни и более раз больше, чем к памяти внешних накопителей;\nпроизводительность дисковых устройств хранения (жесткие, гибкие, оптические диски) максимальна при чтении-записи нескольких последовательно расположенных блоков и значительно уменьшается при одиночных запросах в разные места диска, что связано с инерцией механического привода головки.\nкрайне неравномерная частота обращения к различным блокам памяти внешних накопителей:\nиспользование части блоков несколькими процессами одновременно, по чтению и записи (например, в базах данных)\nочень частое чтение части блоков (индексные файлы, каталоги в файловой системе)\nочень частая запись части блоков (файлы логов, журналов, баз данных; метаданные файловой системы).>>>",
            "Существуют две основные политики записи кэш-памяти — сквозная запись (write-through) и отложенная запись (write-back):\n<<<Сквозная запись — запись производится непосредственно в основную память (и дублируется в кэш), то есть запись не кэшируется.\nОтложенная запись — запись данных производится в кэш. Запись же в основную память производится позже (при вытеснении или по истечении времени), группируя в одной операции несколько операций записи в соседние ячейки. Технология обратной записи на некоторое время делает данные в основной памяти неактуальными, для самого ЦП эти неактуальности не заметны, но перед обращением к памяти другого ведущего системной шины (контроллера DMA, bus-master-устройства шины PCI) кэш должен быть записан в память принудительно. При использовании обратной записи в многопроцессорной системе кэши различных ЦП должны быть согласованы (или процессоры должны использовать одну кэш-память).>>>",
            "Изначально все заголовки буферов помещаются в список свободных буферов. Если процесс намеревается прочитать или модифицировать блок, то он выполняет следующий алгоритм:\n<<<пытается найти в хеш-таблице заголовок буфера с заданным номером;\nв случае, если полученный буфер занят, ждёт его освобождения;\nв случае, если буфер не найден в хеш-таблице, берёт первый буфер из хвоста списка свободных;\nв случае, если список свободных буферов пуст, то выполняется алгоритм вытеснения (см. ниже);\nв случае, если полученный буфер помечен как «грязный», выполняет асинхронную запись содержимого буфера во внешнюю память.\nудаляет буфер из хеш-таблицы, если он был помещён в неё;\nпомещает буфер в хеш-таблицу с новым номером.>>>",
            "Таким образом:\n<<<если процесс прочитал некоторый блок в буфер, то велика вероятность, что другой процесс при чтении этого блока найдёт буфер в оперативной памяти;\nзапись данных во внешнюю память выполняется только тогда, когда не хватает «чистых» буферов, либо по запросу.>>>",
            "Если список свободных буферов пуст, то выполняется алгоритм вытеснения буфера. Алгоритм вытеснения существенно влияет на производительность кэша. Существуют следующие алгоритмы:\n<<<Реализуемые с помощью таймера:\nLRU (англ. Least Recently Used) — вытесняется буфер, неиспользованный дольше всех;\nMRU (англ. Most Recently Used) — вытесняется последний использованный буфер;\nРеализуемые с помощью счётчика:\nLFU[англ.] (англ. Least Frequently Used) — вытесняется буфер, использованный реже всех;\nARC[англ.] (англ. Adaptive Replacement Cache) — алгоритм вытеснения, комбинирующий LRU и LFU, запатентованный IBM.>>>",
            "Кэш оперативной памяти состоит из следующих элементов:\n<<<набор страниц оперативной памяти, разделённых на буферы, равные по длине блоку данных соответствующего устройства внешней памяти;\nнабор заголовков буферов, описывающих состояние соответствующего буфера;\nхеш-таблицы, содержащей соответствие номера блока заголовку;\nсписки свободных буферов.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Кэш"
    },
    {
        "task": [
            "Существовали и другие варианты объединения ячеек в массив, но они не прижились.\n<<<\n\n\nПрограммирование флеш-памяти\n\n\n\nСтирание флеш-памяти\n\n>>>",
            "NOR-флеш наиболее применима в устройствах с энергонезависимой памятью относительно небольшого объёма, требующих быстрого доступа по случайным адресам и с гарантией отсутствия сбойных элементов:\n<<<Встраиваемая память программ однокристальных микроконтроллеров. Типовые объёмы — от 1 кбайта до 1 Мбайта.\nСтандартные микросхемы ПЗУ произвольного доступа для работы вместе с микропроцессором.\nСпециализированные микросхемы начальной загрузки компьютеров (POST и BIOS), процессоров ЦОС и программируемой логики. Типовые объёмы — единицы и десятки мегабайт.\nМикросхемы хранения среднего размера данных, например, DataFlash. Обычно снабжаются интерфейсом SPI и упаковываются в миниатюрные корпуса. Типовые объёмы — от сотен кбайт до технологического максимума.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Флеш-память"
    },
    {
        "task": [
            "К аппаратному обеспечению обычно относят:\n<<<центральный процессор (процессоры)\nоперативную память\nсистемную логику\nпериферийные устройства\nсетевое оборудование>>>",
            "Примеры аппаратной реализации алгоритмов, которые могли бы быть реализованы программно:\n<<<3D графика\nDMA-режим работы IDE устройств\nFIFO-буффер у COM-портов\nФизический процессор для обсчёта поведения объектов в компьютерных играх\nМатематический сопроцессор, ускоряющий операции с плавающей запятой (в современных процессорах интегрирован)\nФункции файрвола>>>",
            "В состав системного блока входят:\n<<<материнская плата с припаянными или установленными на ней:\nЧипсет — взаимосвязанный набор микросхем, логика которого в наибольшей степени определяет то, каковы прочие элементы компьютера.\nцентральный процессор\nBIOS — программное обеспечение в ПЗУ материнской платы.\nкулер охлаждения процессора как основного тепловыделяющего элемента современного компьютера.\nоперативная память и кэш\nслоты расширения шин — PCI, PCI-E, USB, FireWire, AGP (устарела), ISA (устарела), EISA (устарела)\nконтроллеры устройств — хранения: IDE, SCSI, SATA, SAS или других типов, находящиеся непосредственно на материнской плате (встроенные) либо на платах расширения.\nвидеоконтроллер (встроенный или в виде отдельной платы), передающий сигнал на монитор\nзвуковой контроллер\nсетевой интерфейс (сетевая плата)\nблок питания\nсистема охлаждения — дополнительные элементы охлаждения (вентиляторы, механические элементы, части водяной системы охлаждения), необходимые при установке блоков, имеющих повышенное тепловыделение (видеокарт, вычислительных сопроцессоров).>>>",
            "Через контроллеры к материнской плате при помощи шлейфов кабелей, сигнальных и питания, подключаются находящиеся внутри системного блока возможные элементы:\n<<<жёсткий диск (их может быть несколько, они могут быть объединены в RAID-массив)\nSSD\nнакопитель на гибких дисках\nоптический накопитель типа CD-ROM и другие устройства.>>>",
            "Кроме того, в аппаратное обеспечение компьютера также входят внешние (по отношению к системному блоку) компоненты — периферийные устройства в различных сочетаниях:\n<<<Устройства ввода\nкомпьютерная клавиатураклавиатура\nмышь, трекбол или тачпад\nграфический планшет\nджойстик\nсканер\nмикрофон\nустройства вывода\nмонитор\nколонки/наушники\nпечатающие устройства типа принтера или плоттера\nдля связи используются различные модемы и сетевое оборудование: маршрутизатор, сетевой коммутатор, беспроводная точка доступа.\nустройства ввода-вывода для технологий виртуальной реальности.>>>",
            "Разработка аппаратных средств обычно осуществляется на следующих этапах[7]:\n<<<разработка схем аппаратных элементов;\nреализация аппаратных элементов (в виде печатной платы или их комбинации);\nтестирование аппаратных элементов в лабораторных условиях;\nинтеграция системы;\nтестирование аппаратных средств в полевых условиях.>>>",
            "Сходства с разработкой программного обеспечения[9] очевидны:\n<<<Модель>>>",
            "Пользователи взаимодействуют с продуктами различными способами, продукты взаимодействуют с другими продуктами, и продукты производят выходные данные, учитывая входные данные.\n<<<Требования>>>",
            "У него есть функциональные (обращенные к пользователю) и нефункциональные (не обращенные к пользователю) требования.\n<<<Сложность>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Аппаратное_обеспечение"
    },
    {
        "task": [
            "Основные функции:\n<<<Исполнение запросов программ (ввод и вывод данных, запуск и остановка других программ, выделение и освобождение дополнительной памяти и др.).\nЗагрузка программ в оперативную память и их выполнение.\nСтандартизованный доступ к периферийным устройствам (устройства ввода-вывода).\nУправление оперативной памятью (распределение между процессами, организация виртуальной памяти).\nУправление доступом к данным на энергонезависимых носителях (таких как жёсткий диск, оптические диски и др.), организованным в той или иной файловой системе.\nОбеспечение пользовательского интерфейса.\nСохранение информации об ошибках системы.>>>",
            "Дополнительные функции:\n<<<Параллельное или псевдопараллельное выполнение задач (многозадачность).\nЭффективное распределение ресурсов вычислительной системы между процессами.\nРазграничение доступа различных процессов к ресурсам.\nОрганизация надёжных вычислений (невозможности одного вычислительного процесса намеренно или по ошибке повлиять на вычисления в другом процессе), основана на разграничении доступа к ресурсам.\nВзаимодействие между процессами: обмен данными, взаимная синхронизация.\nЗащита самой системы, а также пользовательских данных и программ от действий пользователей (злонамеренных или по незнанию) или приложений.\nМногопользовательский режим работы и разграничение прав доступа (см.: аутентификация, авторизация).>>>",
            "Операционные системы нужны:\n<<<если нужен универсальный механизм сохранения данных;\nдля предоставления программам системных библиотек с часто используемыми подпрограммами;\nдля распределения полномочий;\nнеобходима возможность имитации «одновременного» исполнения нескольких программ на одном компьютере;\nдля управления процессами выполнения отдельных программ.>>>",
            "Таким образом, современные универсальные операционные системы можно охарактеризовать, прежде всего, как:\n<<<использующие файловые системы (с универсальным механизмом доступа к данным),\nмногопользовательские (с разделением полномочий),\nмногозадачные (с разделением времени).>>>",
            "Многозадачность и распределение полномочий требуют определённой иерархии привилегий компонентов в самой операционной системе. В составе операционной системы различают три группы компонентов:\n<<<ядро, содержащее планировщик; драйверы устройств, непосредственно управляющие оборудованием; сетевая подсистема, файловая система;\nсистемные библиотеки;\nоболочка с утилитами.>>>",
            "Объекты ядра ОС:\n<<<процессы,\nфайлы,\nсобытия,\nпотоки,\nсемафоры,\nмьютексы,\nканалы,\nфайлы, проецируемые в память.>>>",
            "Задуманная и реализованная в 1969 году Кеном Томпсоном при участии нескольких коллег (включая Денниса Ритчи и Брайана Кернигана), операционная система UNIX (первоначально UNICS, что обыгрывало название Multics) собрала в себя многие черты более ранних систем, но обладала целым рядом свойств, отличающих её от большинства предшественниц:\n<<<простая метафорика (два ключевых понятия: вычислительный процесс и файл);\nкомпонентная архитектура: принцип «одна программа — одна функция» плюс мощные средства связывания различных программ для решения возникающих задач («оболочка»);\nминимизация ядра (кода, выполняющегося в «реальном» (привилегированном) режиме процессора) и количества системных вызовов;\nнезависимость от аппаратной архитектуры и реализация на машиннонезависимом языке программирования (язык программирования Си стал побочным продуктом разработки UNIX);\nунификация файлов.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Операционная_система"
    },
    {
        "task": [
            "Для получения трёхмерного изображения на плоскости требуются следующие шаги:\n<<<моделирование — создание трёхмерной математической модели сцены и объектов в ней;\nтекстурирование — назначение поверхностям моделей растровых или процедурных текстур (подразумевает также настройку свойств материалов — прозрачность, отражения, шероховатость и пр.);\nосвещение — установка и настройка источников света;\nанимация (в некоторых случаях) — придание движения объектам;\nдинамическая симуляция (в некоторых случаях) — автоматический расчёт взаимодействия частиц, твёрдых/мягких тел и пр. с моделируемыми силами гравитации, ветра, выталкивания и др., а также друг с другом;\nрендеринг (визуализация) — построение проекции в соответствии с выбранной физической моделью;\nкомпозитинг (компоновка) — доработка изображения;\nвывод полученного изображения на устройство вывода — дисплей или специальный принтер.>>>",
            "Моделирование сцены (виртуального пространства моделирования) включает в себя несколько категорий объектов:\n<<<Геометрия (построенная с помощью различных техник (например, создание полигональной сетки) модель, например, здание);\nМатериалы (информация о зрительных свойствах модели, например, цвет стен и отражающая/преломляющая способность окон);\nИсточники света (настройки направления, мощности, спектра освещения);\nВиртуальные камеры (выбор точки и угла построения проекции);\nСилы и воздействия (настройки динамических искажений объектов, применяется в основном в анимации);\nДополнительные эффекты (объекты, имитирующие атмосферные явления: свет в тумане, облака, пламя и пр.)>>>",
            "Наиболее популярными пакетами сугубо для моделирования являются:\n<<<Pixologic Zbrush;\nAutodesk Mudbox, Autodesk 3Ds Max;\nRobert McNeel & Assoc. Rhinoceros 3D;\nTrimble SketchUp.\nBlender\nКомпас (САПР)\nCinema4D>>>",
            "Заключается в создании, направлении и настройке виртуальных источников света. При этом в виртуальном мире источники света могут иметь негативную интенсивность, отбирая свет из зоны своего «отрицательного освещения». Как правило, пакеты 3D-графики предоставляют следующие типы источников освещения:\n<<<Omni light (Point light) — всенаправленный;\nSpot light — конический (прожектор), источник расходящихся лучей;\nDirectional light — источник параллельных лучей;\nArea light (Plane light) — световой портал, излучающий свет из плоскости;\nPhotometric — источники света, моделируемые по параметрам яркости свечения в физически измеримых единицах, с заданной температурой накала.>>>",
            "Одно из главных призваний трёхмерной графики — придание движения (анимация) трёхмерной модели, либо имитация движения среди трёхмерных объектов.\nУниверсальные пакеты трёхмерной графики обладают весьма богатыми возможностями по созданию анимации. Существуют также узкоспециализированные программы, созданные сугубо для анимации и обладающие очень ограниченным набором инструментов моделирования:\n<<<Autodesk MotionBuilder\nPMG Messiah Studio>>>",
            "Существует несколько технологий рендеринга, часто комбинируемых вместе. Например:\n<<<Z-буфер (используется в OpenGL и DirectX 10);\nСканлайн (scanline) — он же Ray casting («бросание луча», упрощённый алгоритм обратной трассировки лучей) — расчёт цвета каждой точки картинки построением луча из точки зрения наблюдателя через воображаемое отверстие в экране на месте этого пикселя «в сцену» до пересечения с первой поверхностью. Цвет пикселя будет таким же, как цвет этой поверхности (иногда с учётом освещения и т. д.);\nТрассировка лучей (рейтрейсинг, англ. raytracing) — то же, что и сканлайн, но цвет пикселя уточняется за счёт построения дополнительных лучей (отражённых, преломлённых и т. д.) от точки пересечения луча взгляда. Несмотря на название, применяется только обратная трассировка лучей (то есть как раз от наблюдателя к источнику света), прямая крайне неэффективна и потребляет слишком много ресурсов для получения качественной картинки;\nГлобальное освещение (англ. global illumination, radiosity) — расчёт взаимодействия поверхностей и сред в видимом спектре излучения с помощью интегральных уравнений.>>>",
            "Наиболее популярными системами рендеринга являются:\n<<<PhotoRealistic RenderMan (PRMan)\nMental ray\nV-Ray\nCoronaRenderer\nArnold Render\nFinalRender\nBrazil R/S\nCycles\nTurtle\nMaxwell Render\nFryrender\nIndigo Renderer\nLuxRender\nPOV-Ray\nСмута>>>",
            "Вследствие большого объёма однотипных вычислений рендеринг можно разбивать на потоки (распараллеливать). Поэтому для рендеринга весьма актуально использование многопроцессорных систем. В последнее время активно ведётся разработка систем рендеринга, использующих GPU вместо CPU, и уже сегодня их эффективность для таких вычислений намного выше.\nК таким системам относятся:\n<<<Refractive Software Octane Render\nAAA studio FurryBall\nRandomControl ARION (гибридная)\nCycles\nV-Ray GPU Next\nLuxRender\nIray>>>",
            "Программные пакеты, позволяющие создавать трёхмерную графику, то есть моделировать объекты виртуальной реальности и создавать на основе этих моделей изображения, очень разнообразны. Последние годы устойчивыми лидерами в этой области являются коммерческие продукты, такие, как:\n<<<Autodesk 3ds Max\nAutodesk Maya\nAutodesk Softimage\nBlender\nCinema 4D\nHoudini\nModo\nLightWave 3D\nCaligari Truespace\nUnreal Engine\nUnity>>>",
            "Технологии апсемплинга, позволяющие большей части графического конвейера работать с более низким разрешением для повышения производительности, а затем вывести из этого изображение с более высоким разрешением, которое приближается к тому же уровню детализации, как если бы изображение было отрисовано с этим более высоким разрешением (это позволяет использовать более высокие графические настройки и/или частоту кадров для заданного выходного разрешения, в зависимости от предпочтений пользователя):\n<<<Deep learning super sampling (DLSS[англ.]) — семейство технологий улучшения и масштабирования изображений в реальном времени, разработанных компанией Nvidia, которые являются эксклюзивными для линейки видеокарт RTX, и доступны в ряде видеоигр (последняя версия DLSS 3.0).\nDeep learning anti-aliasing[англ.] – на основе алгоритмов сглаживания DLSS 2.0 без какого-либо масштабирования;\nFidelityFX Super Resolution (FSR, производная GPUOpen[англ.]) — конкурирующая технология от AMD (последняя версия FSR 3.0); в отличие от DLSS, доступен на любом «железе», но в то же время компания рекомендует хотя бы минимальную видеокарту с RT-ядрами; поддерживается в ограниченном числе игр;\nIntel XeSS[англ.] — технология от Intel, основанная на ИИ;\nLSFG — встроен в программу Lossless Scaling от Valve (работает на любых видеокартах, даже встроенных)[1].>>>",
            "Основные используемые в настоящее время технологии показа стереофильмов[4]:\n<<<Dolby 3D\nXpanD\nRealD\nIMAX>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Трёхмерная_графика"
    },
    {
        "task": [
            "Мышь стала основным координатным устройством ввода из-за следующих особенностей:\n<<<Очень низкая цена по сравнению с остальными устройствами, например как сенсорных экранов и т.д;\nМышь пригодна для длительной работы. В первые годы мультимедиа кинорежиссёры любили показывать «компьютеры будущего» с сенсорным интерфейсом, но на поверку такой способ ввода довольно утомителен, так как руки нужно держать на весу;\nВысокая точность позиционирования курсора. Мышью (за исключением некоторых «неудачных» моделей) легко попасть в нужное место экрана;\nМышь позволяет выполнять множество разных манипуляций — двойные и тройные щелчки, перетаскивания, жесты, нажатие одной кнопки во время перетаскивания другой и т. д. Поэтому в одной руке можно сконцентрировать большое количество органов управления — многокнопочные мыши позволяют управлять, например, браузером вообще без привлечения клавиатуры.\n\n\n>>>",
            "\nНедостатки<<<Для работы требуется ровная гладкая поверхность достаточных размеров (за исключением гироскопических мышей);\nНеустойчивость к песку и вибрациям. По этой причине мышь практически не применяется в военных устройствах. Трекбол требует меньше места для работы и не требует перемещать руку, не может потеряться, имеет большую стойкость к внешним воздействиям, более надёжен.>>>",
            "Недостатки оптических преобразователей первого поколения:\n<<<необходимость использования специального коврика и невозможность его замены другим. Кроме всего прочего, коврики разных оптических мышей часто не были взаимозаменяемыми и не выпускались отдельно;\nнеобходимость определённой ориентации мыши относительно коврика, в противном случае мышь работала неправильно;\nчувствительность мыши к загрязнению коврика (ведь пользователь трогает его когда нужно) — преобразователь плохо воспринимал штриховку на загрязнённых местах коврика;\nвысокая стоимость устройства.>>>",
            "В таких мышах известны только преимущества, к которым относятся:\n<<<более высокие надёжность и разрешение;\nотсутствие заметного свечения (сенсору достаточно слабой подсветки лазером видимого или, возможно, инфракрасного диапазона);\nнизкое энергопотребление;\nимеются полностью интегрированные решения, когда лазер подсветки выполняется на том же кристалле, что и сенсор[5].>>>",
            "Производители постоянно стараются добавить на топовые модели дополнительные кнопки, чаще всего — кнопки под большой или указательный и реже — под средний палец. Некоторые кнопки служат для внутренней настройки мыши (например, для изменения чувствительности) или двойные-тройные щелчки (для программ и игр), на другие — в драйвере и/или специальной утилитой назначаются некоторые системные функции, например:\n<<<горизонтальная прокрутка;\nдвойное нажатие (double click);\nнавигация в браузерах и файловых менеджерах;\nуправление уровнем громкости и воспроизведением аудио- и видеоклипов;\nзапуск приложений и т. п.\n>>>",
            "Игроки различают три основных способа хвата мыши[7]:\n<<<Пальцами. Пальцы лежат плашмя на кнопках, верхняя часть ладони упирается в «пятку» мыши. Нижняя часть ладони — на столе. Преимущество — точные движения мыши.\nКогтеобразный. Пальцы согнуты и упираются в кнопки только кончиками. «Пятка» мыши в центре ладони. Преимущество — удобство щелчков.\nЛадонью. Вся ладонь лежит на мыши, «пятка» мыши, как и в когтеобразном хвате, упирается в центр ладони. Хват более приспособлен для размашистых движений шутеров.>>>",
            "Отличительной особенностью мышей как класса устройств является хорошая стандартизованность аппаратных протоколов.\n<<<Для взаимодействия с мышью по интерфейсу RS-232 стандартом де-факто является протокол MS Mouse фирмы Microsoft, разработанный для MS-DOS и поддержанный в ней драйвером mouse.com. Конкурирующий интерфейс IBM PC Mouse был вытеснен с рынка к середине 1990-x годов.\nДля мыши PS/2, управляемой контроллером i8042, роль стандарта играет спецификация IBM, впервые опубликованная в документации к компьютерам PS/2; позднее спецификация была расширена для поддержки колеса прокрутки.\nБазовый протокол (англ. boot protocol) для USB-мышей входит в спецификацию USB 1.1 (приложение B.2)[8].>>>",
            "Благодаря этой особенности один стандартный драйвер, входящий в поставку ОС, и даже BIOS компьютера могут работать практически с любой мышью. Дополнительное ПО нужно лишь для поддержания специфичных возможностей изделия. Дополнительные возможности нестандартны и имеют ограниченную программную поддержку.\n<<<Для Windows к такой мыши прилагается программа привязки нестандартных компонентов мыши к событиям в ОС.\nВ дистрибутивах Linux доступна программа btnx, связывающая (переназначающая) манипуляции с мышью (в том числе и стандартные) с заданной пользователем комбинацией клавиш.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Компьютерная_мышь"
    },
    {
        "task": [
            "Компиля́ция — сборка программы, включающая:\n<<<трансляцию всех модулей программы, написанных на одном или нескольких исходных языках программирования высокого уровня и/или языке ассемблера, в эквивалентные программные модули на низкоуровневом языке, близком машинному коду (абсолютный код, объектный модуль, иногда на язык ассемблера)[2][3][4] или непосредственно на машинном языке или ином двоичнокодовом низкоуровневом командном языке;\nпоследующую сборку исполняемой машинной программы, в том числе вставка в программу кода всех функций, импортируемых из статических библиотек и/или генерация кода запроса к ОС на загрузку динамических библиотек, из которых  функции будут вызываться программой.>>>",
            "Входная информация для компилятора есть:\n<<<на фазе трансляции: исходный код программы, являющийся описанием алгоритма или программы на предметно-ориентированном языке программирования;\nна фазе компоновки: сгенерированные на фазе трансляции файлы объектных кодов модулей программы, а также файлы объектных кодов статических библиотек и данные об используемых динамических библиотеках.>>>",
            "Компили́ровать — проводить сборку машинной программы, включая:\n<<<трансляцию с предметно-ориентированного языка на машинно-ориентированный язык[3],\nкомпоновка исполняемой машинно-ориентированной программы из сгенерированных на фазе трансляции объектных модулей — модулей, содержащих части кода программы на машинно-ориентированного кода программы.>>>",
            "Виды компиляторов<<<Векторизующий. Базируется на трансляторе, транслирующем исходный код в машинный код компьютеров, оснащённых векторным процессором.\nГибкий. Сконструирован по модульному принципу, управляется таблицами и запрограммирован на языке высокого уровня или реализован с помощью компилятора компиляторов.\nДиалоговый. См.: диалоговый транслятор.\nИнкрементальный. Пересобирает программу, заново транслируя только изменённые фрагменты программы без перетрансляции всей программы.\nИнтерпретирующий (пошаговый). Последовательно выполняет независимую компиляцию каждого отдельного оператора (команды) исходной программы.\nКомпилятор компиляторов. Транслятор, воспринимающий формальное описание языка программирования и генерирующий компилятор для этого языка.\nОтладочный. Устраняет отдельные виды синтаксических ошибок.\nРезидентный. Постоянно находится в оперативной памяти и доступен для повторного использования многими задачами.\nСамокомпилируемый. Написан на том же языке программирования, с которого осуществляется трансляция.\nУниверсальный. Основан на формальном описании синтаксиса и семантики входного языка. Составными частями такого компилятора являются: ядро, синтаксический и семантический загрузчики.>>>",
            "Также все компиляторы условно можно разделить на две группы:\n<<<Компиляторы с конкретных языков программирования. (Примеры: GCC, gnat, clang, xcode, gfortran.)\nКомпиляторы как системы сборки программ. Таковы например довольно распространенная в UNIX- и Linux-системах система Makefile и распространенная в Windows-системах cmake. Работа последних (например в Makefile) очень часто управляется встроенным входным интерпретируемым языком, на котором и прописывается порядок самой компиляции программы.>>>",
            "Виды компиляции[2]:\n<<<Пакетная. Компиляция нескольких исходных модулей в одном задании.\nПострочная. Машинный код порождается и затем исполняется для каждой завершённой грамматической конструкции языка. Внешне воспринимается как интерпретация, но имеет иное устройство.\nУсловная. На фазе трансляции результат трансляции зависит от условий, прописанных в исходном транслируемом тексте программы директивами компилятора. (Яркий пример — работа препроцессора языка С и производных от него.) Так, в зависимости от значения некой константы некая транслятор заданную часть транслируемого исходного текста программы транслирует или пропускает (игнорирует).>>>",
            "Процесс компиляции состоит из следующих этапов:\n<<<Трансляция программы — трансляция всех или только изменённых модулей исходной программы.\nКомпоновка машинно-ориентированной программы.>>>",
            "Структурные реализации компилятора могут быть следующими:\n<<<И транслятор, и компоновщик могут целиком входить в состав компилятора как исполняемые программы.\nКомпилятор сам выполняет лишь трансляцию компилируемой программы, компоновка же программы выполняется вызываемой компилятором отдельной программой-компоновщиком. Практически все современные компиляторы построены по такой схеме.\nПакет программ, включающий в себя трансляторы с разных языков программирования и компоновщики.>>>",
            "Трансляция программы как неотъемлемая составляющая компиляции включает в себя:\n<<<Лексический анализ. На этом этапе последовательность символов исходного файла преобразуется в последовательность лексем.\nСинтаксический (грамматический) анализ. Последовательность лексем преобразуется в древо разбора.\nСемантический анализ. На этой фазе древо разбора обрабатывается с целью установления его семантики (смысла) — например, привязка идентификаторов к их объявлениям, типам данных, проверка совместимости, определение типов выражений и т. д. Результат обычно называется «промежуточным представлением/кодом», и может быть дополненным древом разбора, новым деревом, абстрактным набором команд или чем-то ещё, удобным для дальнейшей обработки.\nОптимизация. Выполняется удаление излишних конструкций и упрощение кода с сохранением его смысла. Оптимизация может быть на разных уровнях и этапах — например, над промежуточным кодом или над конечным машинным кодом.\nГенерация кода. Из промежуточного представления порождается код на целевом машинно-ориентированном языке.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Компилятор"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Цифровая_дистрибуция"
    },
    {
        "task": [
            "Терминология<<<Открытый (исходный) текст — данные (не обязательно текстовые), передаваемые без использования криптографии или другими словами незашифрованные данные.\nШифротекст, шифрованный (закрытый) текст — данные, полученные после применения криптосистемы (обычно — с некоторым указанным ключом). Другое название: криптограмма.\nШифр, криптосистема — семейство обратимых преобразований открытого текста в шифрованный.\nКлюч — параметр шифра, определяющий выбор конкретного преобразования данного текста. В современных шифрах криптографическая стойкость шифра целиком определяется секретностью ключа (принцип Керкгоффса). Также выделяют ключ шифрования (encryption key) и ключ расшифрования (decryption key)\nШифрование — процесс нормального применения криптографического преобразования открытого текста на основе алгоритма и ключа, в результате которого возникает шифрованный текст.\nРасшифровывание — процесс нормального применения криптографического преобразования шифрованного текста в открытый.\nАсимметричный шифр, двухключевой шифр, шифр с открытым ключом — шифр, в котором используются два ключа, шифрующий и расшифровывающий. При этом, зная лишь ключ зашифровывания, нельзя расшифровать сообщение, и наоборот.\nОткрытый ключ — тот из двух ключей асимметричной системы, который свободно распространяется. Шифрующий для секретной переписки и расшифровывающий — для электронной подписи.\nСекретный ключ, закрытый ключ — тот из двух ключей асимметричной системы, который хранится в секрете.>>>",
            "Открытый (исходный) текст — данные (не обязательно текстовые), передаваемые без использования криптографии или другими словами незашифрованные данные.\nШифротекст, шифрованный (закрытый) текст — данные, полученные после применения криптосистемы (обычно — с некоторым указанным ключом). Другое название: криптограмма.\nШифр, криптосистема — семейство обратимых преобразований открытого текста в шифрованный.\nКлюч — параметр шифра, определяющий выбор конкретного преобразования данного текста. В современных шифрах криптографическая стойкость шифра целиком определяется секретностью ключа (принцип Керкгоффса). Также выделяют ключ шифрования (encryption key) и ключ расшифрования (decryption key)\nШифрование — процесс нормального применения криптографического преобразования открытого текста на основе алгоритма и ключа, в результате которого возникает шифрованный текст.\nРасшифровывание — процесс нормального применения криптографического преобразования шифрованного текста в открытый.\nАсимметричный шифр, двухключевой шифр, шифр с открытым ключом — шифр, в котором используются два ключа, шифрующий и расшифровывающий. При этом, зная лишь ключ зашифровывания, нельзя расшифровать сообщение, и наоборот.\nОткрытый ключ — тот из двух ключей асимметричной системы, который свободно распространяется. Шифрующий для секретной переписки и расшифровывающий — для электронной подписи.\nСекретный ключ, закрытый ключ — тот из двух ключей асимметричной системы, который хранится в секрете.<<<Криптоанализ — наука, изучающая математические методы нарушения конфиденциальности и целостности информации.\nКриптоаналитик — учёный, создающий и применяющий методы криптоанализа.\nКриптография и криптоанализ составляют криптологию, как единую науку о создании и взломе шифров (такое деление привнесено с запада, до этого в СССР и России не применялось специального деления).\nКриптографическая атака — попытка криптоаналитика вызвать отклонения в атакуемой защищённой системе обмена информацией. Успешную криптографическую атаку называют взлом или вскрытие.\nДешифрование (дешифровка) — процесс извлечения открытого текста без знания криптографического ключа на основе известного шифрованного. Термин дешифрование обычно применяют по отношению к процессу криптоанализа шифротекста (криптоанализ сам по себе, вообще говоря, может заключаться и в анализе криптосистемы, а не только зашифрованного ею открытого сообщения).\nКриптографическая стойкость — способность криптографического алгоритма противостоять криптоанализу.>>>",
            "Криптоанализ — наука, изучающая математические методы нарушения конфиденциальности и целостности информации.\nКриптоаналитик — учёный, создающий и применяющий методы криптоанализа.\nКриптография и криптоанализ составляют криптологию, как единую науку о создании и взломе шифров (такое деление привнесено с запада, до этого в СССР и России не применялось специального деления).\nКриптографическая атака — попытка криптоаналитика вызвать отклонения в атакуемой защищённой системе обмена информацией. Успешную криптографическую атаку называют взлом или вскрытие.\nДешифрование (дешифровка) — процесс извлечения открытого текста без знания криптографического ключа на основе известного шифрованного. Термин дешифрование обычно применяют по отношению к процессу криптоанализа шифротекста (криптоанализ сам по себе, вообще говоря, может заключаться и в анализе криптосистемы, а не только зашифрованного ею открытого сообщения).\nКриптографическая стойкость — способность криптографического алгоритма противостоять криптоанализу.<<<Имитозащита — защита от навязывания ложной информации. Другими словами, текст остаётся открытым, но появляется возможность проверить, что его не изменяли ни случайно, ни намеренно. Имитозащита достигается обычно за счёт включения в пакет передаваемых данных имитовставки.\nИмитовставка — блок информации, применяемый для имитозащиты, зависящий от ключа и данных.\nЭлектронная цифровая подпись, или электронная подпись — асимметричная имитовставка (ключ защиты отличается от ключа проверки). Другими словами, такая имитовставка, которую проверяющий не может подделать.\nЦентр сертификации — сторона, чья честность неоспорима, а открытый ключ широко известен. Электронная подпись центра сертификации подтверждает подлинность открытого ключа.>>>",
            "Имитозащита — защита от навязывания ложной информации. Другими словами, текст остаётся открытым, но появляется возможность проверить, что его не изменяли ни случайно, ни намеренно. Имитозащита достигается обычно за счёт включения в пакет передаваемых данных имитовставки.\nИмитовставка — блок информации, применяемый для имитозащиты, зависящий от ключа и данных.\nЭлектронная цифровая подпись, или электронная подпись — асимметричная имитовставка (ключ защиты отличается от ключа проверки). Другими словами, такая имитовставка, которую проверяющий не может подделать.\nЦентр сертификации — сторона, чья честность неоспорима, а открытый ключ широко известен. Электронная подпись центра сертификации подтверждает подлинность открытого ключа.<<<Хеш-функция — функция, которая преобразует сообщение произвольной длины в число («свёртку») фиксированной длины. Для криптографической хеш-функции (в отличие от хеш-функции общего назначения) сложно вычислить обратную и даже найти два сообщения с общей хеш-функцией.\nГибри́дная криптосисте́ма — это система шифрования, совмещающая преимущества криптосистемы с открытым ключом с производительностью симметричных криптосистем.>>>",
            "Для современной криптографии характерно использование открытых алгоритмов шифрования, предполагающих использование вычислительных средств. Известно более десятка проверенных алгоритмов шифрования, которые при использовании ключа достаточной длины и корректной реализации алгоритма криптографически стойки. Распространённые алгоритмы:\n<<<симметричные DES, AES, ГОСТ 28147-89, Camellia, Twofish, Blowfish, IDEA, RC4 и др.;\nасимметричные RSA и Elgamal (Эль-Гамаль);\nхеш-функций MD4, MD5, MD6, SHA-1, SHA-2, ГОСТ Р 34.11-2012 («Стрибог») .>>>",
            "В основе построения криптостойких систем лежит многократное использование относительно простых преобразований, так называемых криптографических примитивов.\nКлод Шеннон известный американский математик и электротехник предложил использовать подстановки (англ. substitution) и перестановки (англ. permutation). Схемы, которые реализуют эти преобразования, называются SP-сетями. Нередко используемыми криптографическими примитивами являются также преобразования типа циклический сдвиг или гаммирование. Ниже приведены основные криптографические примитивы и их использование.\n<<<Симметричное шифрование. Заключается в том, что обе стороны-участники обмена данными имеют абсолютно одинаковые ключи для шифрования и расшифровки данных. Данный способ осуществляет преобразование, позволяющее предотвратить просмотр информации третьей стороной. Пример: книжный шифр.>>>",
            "Симметричное шифрование. Заключается в том, что обе стороны-участники обмена данными имеют абсолютно одинаковые ключи для шифрования и расшифровки данных. Данный способ осуществляет преобразование, позволяющее предотвратить просмотр информации третьей стороной. Пример: книжный шифр.<<<Асимметричное шифрование. Предполагает использовать в паре два разных ключа — открытый и секретный(закрытый). В асимметричном шифровании ключи работают в паре — если данные шифруются открытым ключом, то расшифровать их можно только соответствующим секретным ключом и наоборот — если данные шифруются секретным ключом, то расшифровать их можно только соответствующим открытым ключом. Использовать открытый ключ из одной пары и секретный с другой — невозможно. Каждая пара асимметричных ключей связана математическими зависимостями. Данный способ также нацелен на преобразование информации от просмотра третьей стороной.>>>",
            "Асимметричное шифрование. Предполагает использовать в паре два разных ключа — открытый и секретный(закрытый). В асимметричном шифровании ключи работают в паре — если данные шифруются открытым ключом, то расшифровать их можно только соответствующим секретным ключом и наоборот — если данные шифруются секретным ключом, то расшифровать их можно только соответствующим открытым ключом. Использовать открытый ключ из одной пары и секретный с другой — невозможно. Каждая пара асимметричных ключей связана математическими зависимостями. Данный способ также нацелен на преобразование информации от просмотра третьей стороной.<<<Подписи используются для подтверждения личности с древних времёнЦифровые подписи. Цифровые подписи используются для установления подлинности документа, его происхождения и авторства, исключает искажения информации в электронном документе.>>>",
            "Подписи используются для подтверждения личности с древних времёнЦифровые подписи. Цифровые подписи используются для установления подлинности документа, его происхождения и авторства, исключает искажения информации в электронном документе.<<<Хеширование. Преобразование входного массива данных произвольной длины в выходную битовую строку фиксированной длины. Такие преобразования также называются хеш-функциями или функциями свёртки, а их результаты называют хеш-кодом, контрольной суммой или дайджестом сообщения (англ. message digest). Результаты хеширования статистически уникальны. Последовательность, отличающаяся хотя бы одним байтом, не будет преобразована в то же самое значение.>>>",
            "В Российской Федерации коммерческая деятельность, связанная с использованием криптографических средств, подлежит обязательному лицензированию. С 22 января 2008 года действовало постановление Правительства РФ от 29 декабря 2007 № 957 (отменено постановлением Правительства РФ от 16 апреля 2012 г. № 313) «Об утверждении положений о лицензировании отдельных видов деятельности, связанных с шифровальными (криптографическими) средствами», которым приняты положения о лицензировании деятельности по:\n<<<распространению шифровальных (криптографических) средств;\nтехническому обслуживанию шифровальных (криптографических) средств;\nпредоставлению услуг в области шифрования информации;\nразработке, производству шифровальных (криптографических) средств, защищённых с использованием шифровальных (криптографических) средств информационных и телекоммуникационных систем.>>>",
            "Постановление Правительства РФ от 16 апреля 2012 г. № 313 «Об утверждении Положения о лицензировании деятельности по разработке, производству, распространению шифровальных (криптографических) средств, информационных систем и телекоммуникационных систем, защищённых с использованием шифровальных (криптографических) средств, выполнению работ, оказанию услуг в области шифрования информации, техническому обслуживанию шифровальных (криптографических) средств, информационных систем и телекоммуникационных систем, защищённых с использованием шифровальных (криптографических) средств (за исключением случая, если техническое обслуживание шифровальных (криптографических) средств, информационных систем и телекоммуникационных систем, защищённых с использованием шифровальных (криптографических) средств, осуществляется для обеспечения собственных нужд юридического лица или индивидуального предпринимателя)» отменило действие постановления Правительства Российской Федерации от 29 декабря 2007 г. № 957 «Об утверждении положений о лицензировании отдельных видов деятельности, связанных с шифровальными (криптографическими) средствами» и вводит новые[какие?] ограничения[4].\n<<<Национальный технологический центр по цифровой криптографии  (НТЦЦК) будет обеспечивать частно-государственное взаимодействие и развитие технологий криптографии. Проект реализуется Минцифры совместно с ФСБ; создание НТЦЦК предусмотрено федеральным проектом «Информационная безопасность» национальной программы «Цифровая экономика». Изначально планировалось создать данный центр в 2024 г., но из-за геополитической ситуации сроки запуска НТЦЦК были перенесены на конец 2022 — начало 2023 гг. Расходы федерального бюджета на создание центра в 2021-2024 гг. составят 11,5 млрд руб.[5]>>>",
            "США разрешает экспорт программного обеспечения без ограничений, если все следующие пункты выполнены:\n<<<код регулируется экспортными ограничениями ECCN 5D002[уточнить];\nкод публично доступен;\nпослано уведомление в Бюро промышленности и безопасности США.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Криптография"
    },
    {
        "task": [
            "Этапы производства компакт-дисков<<<Мастеринг — процесс подготовки данных для запуска в серию. (также см. SPARS-код)\nФотолитография — процесс изготовления штампа диска. На стеклянный диск наносится слой фоторезиста, на который производится запись информации. Фоторезист — полимерный светочувствительный материал, который под действием света изменяет свои физико-химические свойства.\nЗапись информации. Запись производится лазерным лучом, мощность которого модулируется записываемой информацией. Для создания пита мощность лазера повышается, что приводит к разрушению химических связей молекул фоторезиста, в результате чего он «задубевает».\nПроявка фоторезиста. Поверхность фоторезиста подвергается травлению (кислотному, щелочному, плазменному), при котором удаляются те области фоторезиста, которые не были экспонированы лазерным лучом.\nГальванопластика. Проявленный стеклянный мастер-диск помещается в гальваническую ванну, где на его поверхность производится электролитическое осаждение тонкого слоя никеля.\nШтамповка дисков методом литья под давлением с использованием полученного штампа.\nНапыление зеркального металлического (алюминий, золото, серебро и др.) слоя на информационный слой.\nНанесение защитного лака.\nНанесение графического изображения — лейбла (от англ. Label).>>>",
            "Суть технологии записи высокой плотности заключается в применении двух новых принципов, которые позволяют записывать вдвое больше информации на обычном носителе — диске CD-R.\n<<<Длина пита на диске уменьшается до 0,62 мкм.[уточнить] Длина пита обычного CD составляет 0,83 мкм.[уточнить] Это означает, что HD-BURN увеличивает ёмкость диска в 1,35 раза. Длина пита 0,62 мкм была выбрана для того, чтобы все существующие DVD Video-плееры и приводы DVD-ROM смогли считывать HD-BURN-диски после незначительной модернизации.\nПрименяется иная система коррекции ошибок: вместо CIRC (Cross Interleaved Reed Solomon Code — перемежающийся код Рида — Соломона) используется RS-PC (RS-PRODUCT Code) с модуляцией 8-16. Это позволило увеличить ёмкость ещё в 1,49 раза. По сообщению Sanyo, система коррекции ошибок RS-PC не только более компактна, но и эффективней, чем CIRC.[источник не указан 4238 дней]>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Компакт-диск"
    },
    {
        "task": [
            "Устройства ввода графической информации:\n<<<сканер;\nвидео- и веб-камера;\nцифровой фотоаппарат;\nплата видеозахвата, карта для приёма спутникового ТВ.>>>",
            "Устройства ввода звуковой информации:\n<<<микрофон;\nдиктофон[источник не указан 485 дней].>>>",
            " Указательные (координатные) устройства:\n<<<компьютерная мышь;\nтрекбол;\nтачпад;\nсветовое перо;\nграфический планшет;\nсенсорный экран или тачскрин;\nджойстик;\nустройства, основанные на компьютерном зрении, например Kinect.>>>",
            "Игровые устройства ввода:\n<<<геймпад;\nкомпьютерный руль;\nтанцевальная платформа;>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Устройство_ввода"
    },
    {
        "task": [
            "Типы видеопамяти[18]:\n<<<Ранние видеокарты не предъявляли особых требований к быстродействию и использовали стандартные типы памяти — статические Static RAM (например, в адаптере MDA) или динамические Dynamic RAM.\nFPM DRAM (Fast Page Mode Dynamic RAM — динамическое ОЗУ с быстрым страничным доступом) — основной тип видеопамяти, идентичный используемой в системных платах. Использует асинхронный доступ, при котором управляющие сигналы не привязаны жёстко к тактовой частоте системы. Активно применялся примерно до 1996 года.\nVRAM (Video RAM — видео ОЗУ) — так называемая двухпортовая DRAM. Этот тип памяти обеспечивает доступ к данным со стороны сразу двух устройств, то есть имеется возможность одновременно писать данные в какую-либо ячейку памяти, и одновременно с этим читать данные из какой-нибудь соседней ячейки. За счёт этого позволяет совмещать во времени вывод изображения на экран и его обработку в видеопамяти, что сокращает задержки при доступе и увеличивает скорость работы. То есть RAMDAC может свободно выводить на экран монитора раз за разом экранный буфер, ничуть не мешая видеопроцессору осуществлять какие-либо манипуляции с данными. Но это всё та же DRAM, и скорость у неё не слишком высокая.\nWRAM (Window RAM) — вариант VRAM, с увеличенной на ~25 % пропускной способностью и поддержкой некоторых часто применяемых функций, таких, как отрисовка шрифтов, перемещение блоков изображения и т. п. Применяется практически только на акселераторах фирмы Matrox и Number Nine, поскольку требует специальных методов доступа и обработки данных. Наличие всего одного производителя данного типа памяти (Samsung) сильно сократило возможности её использования. Видеоадаптеры, построенные с использованием данного типа памяти, не имеют тенденции к падению производительности при установке больших разрешений и частот обновления экрана, на однопортовой же памяти в таких случаях RAMDAC всё большее время занимает шину доступа к видеопамяти, и производительность видеоадаптера может сильно упасть.\nEDO DRAM (Extended Data Out DRAM — динамическое ОЗУ с расширенным временем удержания данных на выходе) — тип памяти с элементами конвейеризации, позволяющий несколько ускорить обмен блоками данных с видеопамятью приблизительно на 25 %.\nSDRAM (Synchronous Dynamic RAM — синхронное динамическое ОЗУ) пришёл на замену EDO DRAM и других асинхронных однопортовых типов памяти. После того, как произведено первое чтение из памяти или первая запись в память, последующие операции чтения или записи происходят с нулевыми задержками. Этим достигается максимально возможная скорость чтения и записи данных.\nDDR SDRAM (Double Data Rate) — вариант SDRAM с передачей данных по как по нарастающему, так и по ниспадающему фронту тактового сигнала, что даёт удвоение скорости работы памяти. Дальнейшее развитие пока происходит в виде очередного уплотнения числа пакетов в одном такте шины — DDR2 SDRAM (GDDR2), DDR3 SDRAM и т. д.\nSGRAM (Synchronous Graphics RAM — синхронное графическое ОЗУ) вариант DRAM с синхронным доступом. В принципе, работа SGRAM полностью аналогична SDRAM, но дополнительно поддерживаются ещё некоторые специфические функции, типа блоковой и масочной записи. В отличие от VRAM и WRAM, SGRAM является однопортовой, однако может открывать две страницы памяти как одну, эмулируя двухпортовость других типов видеопамяти.\nMDRAM (Multibank DRAM — многобанковое ОЗУ) — вариант DRAM, разработанный фирмой MoSys, организованный в виде множества независимых банков объёмом по 32 КиБ каждый, работающих в конвейерном режиме.\nRDRAM (RAMBus DRAM) — память, использующая специальный канал передачи данных (Rambus Channel), представляющий собой шину данных шириной в один байт. По этому каналу удаётся передавать информацию очень большими потоками, наивысшая скорость передачи данных для одного канала на сегодняшний момент составляет 1600 МБ/с (частота 800 МГц, данные передаются по обоим срезам импульса). На один такой канал можно подключить несколько чипов памяти. Контроллер этой памяти работает с одним каналом Rambus, на одной микросхеме логики можно разместить четыре таких контроллера, значит, теоретически можно поддерживать до 4 таких каналов, обеспечивая максимальную пропускную способность в 6,4 Гб/с. Минус этой памяти — нужно читать информацию большими блоками, иначе её производительность резко падает.>>>",
            "Характеристики<<<Ширина шины памяти, измеряется в битах — количество бит информации, передаваемой за такт. Важный параметр в производительности карты.\nОбъём видеопамяти, измеряется в мегабайтах — объём собственной оперативной памяти видеокарты. Больший объём далеко не всегда означает большую производительность.>>>",
            "Видеокарты, интегрированные в набор системной логики материнской платы или являющиеся частью ЦПУ, обычно не имеют собственной видеопамяти и используют для своих нужд часть оперативной памяти компьютера (UMA — Unified Memory Access).\n<<<частоты ядра и памяти — измеряются в мегагерцах, чем больше, тем быстрее видеокарта будет обрабатывать информацию.\nтекстурная и пиксельная скорость заполнения, измеряется в млн. пикселей в секунду, показывает количество выводимой информации в единицу времени.>>>",
            "Затем поколения ускорителей в видеокартах можно считать по версии DirectX, которую они поддерживают. Различают следующие поколения:\n<<<DirectX 7 — карта не поддерживает шейдеры, все картинки рисуются наложением текстур;\nDirectX 8 — поддержка пиксельных шейдеров версий 1.0, 1.1 и 1.2, в DX 8.1 ещё и версию 1.4, поддержка вершинных шейдеров версии 1.0;\nDirectX 9 — поддержка пиксельных шейдеров версий 2.0, 2.0a и 2.0b, 3.0;\nDirectX 10 — поддержка унифицированных шейдеров версии 4.0;\nDirectX 10.1 — поддержка унифицированных шейдеров версии 4.1;\nDirectX 11 — поддержка унифицированных шейдеров версии 5.0;\nDirectX 12 — поддержка унифицированных шейдеров версии 6.0;>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Видеокарта"
    },
    {
        "task": [
            "Способы связи клавиатуры с компьютером[править | править код]<<<Непосредственное подключение матрицы к процессору — применялось в микрокомпьютерах 1970-80-х. Опросом матрицы занимался процессор, периодически прерывая работу текущей программы. Достоинства такого подхода — дешевизна и максимальная гибкость, возможно например опрашивать не всю матрицу. Недостатки: трата процессорного времени на опрос клавиатуры; необходимость подключения клавиатуры многопроводным шлейфом; несовместимость клавиатур разных моделей компьютеров. Примеры компьютеров с такой клавиатурой: ZX-Spectrum, Commodore PET.\nПередача ASCII-символа — применялась в терминалах и некоторых компьютерах 1970-80-х. Процессор освобождён от опроса клавиатуры, этим занимается специальный контроллер. Этот контроллер возвращает ASCII-код символа исходя из нажатой клавиши и положения клавиш-модификаторов. Такой способ требует меньше нагрузки на процессор, чем предыдущий, но нет возможности считывать состояние клавиш-модификаторов, определить, нажата ли та или иная клавиша в текущий момент, а также ограничивает использование сочетаний клавиш. Кроме того, раскладка такой клавиатуры задана жёстко, для переключения раскладки требуется внесение изменений в схему контроллера. Примеры компьютеров с такой клавиатурой: Apple II, БК-0010.\nПередача скан-кода — наиболее распространённый способ с появлением IBM PC. В этом случае опросом также занимается контроллер клавиатуры, например для PC (PS/2)-клавиатур аналогичный Intel 8042[3]. Однако каждой клавише, в том числе клавишам-модификаторам, присваивается собственный скан-код, не соотносящийся напрямую с кодом символа ASCII. При нажатии или отпускании клавиши передаётся этот скан-код и признак нажатия/отпускания. Сопоставление скан-кода с кодом символа производится программным обеспечением самого компьютера. Данный подход совмещает достоинства двух предыдущих.>>>",
            "По своему назначению клавиши на клавиатуре условно делятся на основные группы[источник не указан 694 дня]:\n<<<буквенно-цифровые клавиши [⇨];\nклавиши цифровой клавиатуры (англ. numeric keypad) [⇨];\nклавиши управления, клавиши-модификаторы [⇨];\nфункциональные клавиши [⇨];\nклавиши управления курсором;>>>",
            "Дополнительные группы:\n<<<мёртвые клавиши;\nспециализированные клавиши [⇨].>>>",
            "Многие современные компьютерные клавиатуры помимо стандартного набора из 104 клавиш снабжаются дополнительными клавишами (как правило, другого размера и формы), которые предназначены для управления некоторыми основными функциями компьютера:\n<<<для управления громкостью звука: громче, тише, включить или выключить звук;\nдля управления лотком в приводе для компакт-дисков: извлечь диск, принять диск;\nдля управления проигрывателем: воспроизводить, поставить на паузу, остановить воспроизведение, промотать запись вперёд или назад, перейти к следующей или предыдущей записи;\nдля управления сетевыми возможностями компьютера: открыть почтовую программу, открыть браузер, показать домашнюю страницу, двигаться вперёд или назад по истории посещённых страниц, открыть поисковую систему;\nдля запуска часто используемых программ: открыть калькулятор, открыть файловый менеджер;\nдля управления состоянием окон операционной системы: свернуть окно, закрыть окно, перейти к следующему или к предыдущему окну;\nдля управления состоянием компьютера: перевести в ждущий режим, перевести в спящий режим, пробудить компьютер, выключить компьютер.>>>",
            "С целью экономии места на рабочем столе или для того, чтобы уместить клавиатуру на устройстве, на котором полноразмерная клавиатура не может поместиться, производители клавиатур могут располагать клавиши на клавиатуре в не стандартном порядке или удалять клавиши с клавиатуры. Компактные программируемые клавиатуры популярны, например, среди геймеров и системных администраторов, так как такую клавиатуру легче носить с собой. Наиболее популярные форматы компактных клавиатур:\n<<<80 % или TKL (от англ. tenkeyless — буквально «без десяти клавиш») — клавиатура стандартной раскладки без цифрового блока. Цифровой блок также может эмулироваться в пределах основной буквенно-цифровой клавиатуры при включении режима NumLock;\n75 % — распространённый на ноутбуках формат, при котором клавиши Home, End, PgUp и PgDown могут либо располагаться в один столбец по правому краю клавиатуры, либо эмулироваться через клавишу Fn совместно с курсорными клавишами. Малоиспользуемые клавиши (Scroll Lock, Pause, Insert), как правило, тоже эмулируются;\n60 % — формат, при котором клавиатуры состоят исключительно из буквенно-цифрового блока, клавиш-модификаторов, клавиш Esc, ↵ Enter и ← Backspace. Все остальные клавиши (F1-F12, стрелки и другие) эмулируются с помощью клавиши Fn. Наиболее известный представитель — Happy Hacking Keyboard[англ.].>>>",
            "80 % или TKL (от англ. tenkeyless — буквально «без десяти клавиш») — клавиатура стандартной раскладки без цифрового блока. Цифровой блок также может эмулироваться в пределах основной буквенно-цифровой клавиатуры при включении режима NumLock;\n75 % — распространённый на ноутбуках формат, при котором клавиши Home, End, PgUp и PgDown могут либо располагаться в один столбец по правому краю клавиатуры, либо эмулироваться через клавишу Fn совместно с курсорными клавишами. Малоиспользуемые клавиши (Scroll Lock, Pause, Insert), как правило, тоже эмулируются;\n60 % — формат, при котором клавиатуры состоят исключительно из буквенно-цифрового блока, клавиш-модификаторов, клавиш Esc, ↵ Enter и ← Backspace. Все остальные клавиши (F1-F12, стрелки и другие) эмулируются с помощью клавиши Fn. Наиболее известный представитель — Happy Hacking Keyboard[англ.].<<<\n\n\nКлавиатура «IBM Model M Space Saving» без цифрового блока\n\n\n\nКлавиатура формата 75 %\n\n\n\n60 % — Happy Hacking Keyboard Professional 2[англ.].\n\n\n\nBluetooth-клавиатура для мобильных устройств с клавишами уменьшенного размера\n\n\n\nБеспроводная клавиатура компьютера Apple\n\n>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Компьютерная_клавиатура"
    },
    {
        "task": [
            "Важнейшие характеристики ЖК-дисплеев:\n<<<тип матрицы — определяется технологией, по которой изготовлен ЖК-дисплей;\nкласс матрицы; стандарт ISO 13406-2 выделяет четыре класса матриц по допустимому количеству «битых пикселей»;\nразрешение — горизонтальный и вертикальный размеры, выраженные в пикселях. В отличие от ЭЛТ-мониторов, ЖК-дисплеи имеют одно фиксированное разрешение, а поддержка остальных реализуется путём интерполяции (ЭЛТ-мониторы также имеют фиксированное количество пикселей, которые также состоят из красных, зелёных и синих точек, однако из-за особенностей технологии при выводе нестандартного разрешения в интерполяции нет необходимости);\nразмер точки (размер пикселя) — расстояние между центрами соседних пикселей. Непосредственно связан с физическим разрешением;\nсоотношение сторон экрана (пропорциональный формат) — отношение ширины к высоте (5:4, 4:3, 3:2 (15÷10), 8:5 (16÷10), 5:3 (15÷9), 16:9 и др.);\nвидимая диагональ — размер самой панели, измеренный по диагонали. Площадь дисплеев зависит также от формата: при одинаковой диагонали, монитор формата 4:3 имеет бо́льшую площадь, чем монитор формата 16:9;\nконтрастность — отношение яркостей самой светлой и самой тёмной точек при заданной яркости подсветки. В некоторых мониторах используется адаптивный уровень подсветки с использованием дополнительных ламп, приведённая для них цифра контрастности (так называемая динамическая) не относится к статическому изображению;\nяркость — количество света, излучаемое дисплеем (обычно измеряется в канделах на квадратный метр);\nвремя отклика — минимальное время, необходимое пикселю для изменения своей яркости. Составляется из двух величин:\nвремя буферизации (input lag). Высокое значение мешает в динамичных играх; обычно умалчивается; измеряется сравнением с кинескопом в скоростной съёмке. По состоянию на 2011-й год в пределах 20—50 мс; в отдельных ранних моделях достигало 200 мс;\nвремя переключения. Указывается в характеристиках монитора. Высокое значение ухудшает качество видео; методы измерения неоднозначны. По состоянию на 2016-й год практически во всех мониторах заявленное время переключения составляет 1—6 мс;\nугол обзора — угол, при котором падение контраста достигает заданного, для разных типов матриц и разными производителями вычисляется по-разному, и часто не подлежит сравнению. Некоторые производители указывают в технических параметрах своих мониторов углы обзора, такие, к примеру, как: CR 5:1 — 176/176°, CR 10:1 — 170/160°. Аббревиатура CR (англ. contrast ratio) обозначает уровень контрастности при указанных углах обзора относительно контрастности при взгляде перпендикулярно экрану. В приведённом примере, при углах обзора 170°/160° контрастность в центре экрана снижается до значения не ниже, чем 10:1, при углах обзора 176°/176° — не ниже, чем до значения 5:1.>>>",
            "Конструктивно дисплей состоит из следующих элементов:\n<<<ЖК-матрицы (первоначально — плоский пакет стеклянных пластин, между слоями которого и располагаются жидкие кристаллы; в 2000-е годы начали применяться гибкие материалы на основе полимеров);\nисточников света для подсветки;\nконтактного жгута (проводов);\nкорпуса, чаще пластикового, с металлической рамкой для придания жёсткости.>>>",
            "Состав пикселя ЖК-матрицы:\n<<<два прозрачных электрода;\nслой молекул, расположенный между электродами;\nдва поляризационных фильтра, плоскости поляризации которых (как правило) перпендикулярны.>>>",
            "Аналогами MVA являются технологии:\n<<<PVA (patterned vertical alignment) от Samsung;\nSuper PVA от Sony-Samsung (S-LCD);\nSuper MVA от Chi Mei Optoelectronics[англ.];\nASV (advanced super view), также называется ASVA (axially symmetric vertical alignment) от Sharp. Дальнейшее развитие технологии ASV — UV2A (Ultraviolet-induced Multi-domain Vertical Alignment)[30];\nAMVA от AU Optronics[англ.].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Жидкокристаллический_дисплей"
    },
    {
        "task": [
            "Чтобы взаимодействие разработчиков происходило по принципу научного сотрудничества, необходимо было обеспечить, чтобы исходные тексты программ оставались доступными для чтения и критики всему научному сообществу с сохранением авторства произведений. Для этого Ричард Столлман сформулировал понятие свободное программное обеспечение, в котором отразились принципы открытой разработки программ в научном сообществе, сложившемся в американских университетах в 1970-е годы. Столлман явно сформулировал эти принципы, они же — критерии свободного программного обеспечения. Эти критерии оговаривают те права, которые авторы свободных программ передают любому пользователю:\n<<<Программу можно свободно использовать с любой целью («нулевая свобода»).\nМожно изучать, как программа работает, и адаптировать её для своих целей («первая свобода»). Условием этого является доступность исходного текста программы.\nМожно свободно распространять копии программы — в помощь товарищу («вторая свобода»).\nПрограмму можно свободно улучшать и публиковать свою улучшенную версию — с тем, чтобы принести пользу всему сообществу («третья свобода»). Условием этой третьей свободы является доступность исходного текста программы и возможность внесения в него модификаций и исправлений.>>>",
            "Пользователи, которые бы иначе предпочли свободное ПО несвободному, продолжают использовать несвободное по следующим причинам:\n<<<В странах, где неавторизованное распространение объектов авторского права является обычным делом, нет ни юридического, ни экономического стимула переходить на свободное ПО. К тому же пользователи, привыкшие к проприетарному ПО, не хотят тратить время на изучение свободного аналога, если это не даёт им прямой выгоды в короткий срок.\nВ некоторых отраслях мало или вообще нет свободного ПО высокого качества.[28] А именно:\nПрограммное обеспечение, в котором доля работы программиста мала по сравнению с работой художника, редактора и т. д. Например: квесты и многие другие жанры игр, электронные словари.\nРазвивающиеся отрасли, для которых мало пригодных к использованию общепринятых алгоритмов, — машинный перевод, распознавание речи с большим словарём и, в меньшей степени, синтез речи. Кроме того, требуется ручная обработка большого количества текстовых или аудиоданных.\nОтрасли, связанные со сложной высокооплачиваемой работой (фотообработка, инженерное проектирование), — так как создать программу, близкую по сложности и качеству к проприетарным стандартам де‐факто очень трудно, то свободных аналогов меньше, чем в других отраслях, и пользователю не всегда удаётся найти подходящий для него продукт.\nОтрасли, в которых существуют платные или собственнические стандарты де-факто, например Pantone в допечатной подготовке.\nДля аппаратного обеспечения в отраслях, где господствует лишь несколько производителей, в свободном доступе часто отсутствуют не только драйверы, но и спецификации.\nРазнообразие лицензий тоже может иметь отрицательное влияние. Пример (не очень удачный): драйвер файловой системы ZFS выпущен под лицензией, несовместимой с GNU GPL 2, и потому долгое время мог быть использован[уточнить] на самой популярной платформе для СПО — Linux — только посредством FUSE, приводившего к сильному замедлению производительности этой ФС. Однако вскоре вышла и реализация ZFS в виде модуля ядра для Linux (то есть полноценно), единственным условием использования которого является недопустимость их совместного (слитного) распространения.[29]\nПроприетарное ПО из-за маркетинговых методов настолько популярно, что пользователи не знают о существовании других подобных программ.\nПроприетарное ПО зачастую использует собственные форматы файлов и протоколы обмена, описание которых отсутствует в свободном доступе. Поэтому переход может быть затруднён проблемами совместимости с другим ПО или с существующими форматами файлов (вариант замыкания на поставщике).\nНекоторое проприетарное ПО как требует огромных финансовых затрат на создание и поддержание в нужном качестве, так и либо чрезвычайно сложно, либо содержит большое количество различных патентов из других источников, к примеру драйверы видеоускорителей. В свою очередь, из-за стартовой, малой процентной распространённости открытого решения компания-производитель не способна существенно повысить финансирование, а значит, предоставить качественную поддержку этой области. Как результат, количество ПО, использующего и требующего качественных драйверов, невелико — что, соответственно, сдерживает распространённость открытых решений. В связи с тем драйвера для видеоускорителей под Linux, хоть и предоставляются всеми крупными компаниями, но являются или полностью закрытыми и менее эффективными, чем их варианты под Windows, или открытыми, но сознательно создаваемыми менее производительными и функциональными[30].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Свободное_программное_обеспечение"
    },
    {
        "task": [
            "В настоящее время значимыми являются несколько семейств процессоров ARM:\n<<<ARM7 (с тактовой частотой до 60-72 МГц), предназначенные, например, для недорогих мобильных телефонов и встраиваемых решений средней производительности. В настоящее время активно вытесняется новым семейством Cortex.\nARM9, ARM11 (с частотами до 1 ГГц) для более мощных телефонов, карманных компьютеров и встраиваемых решений высокой производительности.\nCortex A — новое семейство процессоров на смену ARM9 и ARM11.\nCortex M — новое семейство процессоров на смену ARM7, также призванное занять новую для ARM нишу встраиваемых решений низкой производительности. В семействе присутствуют четыре значимых ядра:\nCortex-M0, Cortex-M0+ (более энергоэффективное) и Cortex-M1 (оптимизировано для применения в ПЛИС) с архитектурой ARMv6-M;\nCortex-M3 с архитектурой ARMv7-M;\nCortex-M4 (добавлены SIMD-инструкции, опционально FPU) и Cortex-M7 (FPU с поддержкой чисел одинарной и двойной точности) с архитектурой ARMv7E-M;\nCortex-M23 и Cortex-M33 с архитектурой ARMv8-M ARMv8-M .>>>",
            "Уже давно существует справочное руководство по архитектуре ARM, которое разграничивает все типы интерфейсов, которые поддерживает ARM, так как детали реализации каждого типа процессора могут различаться.\nАрхитектура развивалась с течением времени и, начиная с ARMv7, были определены 3 профиля:\n<<<A (application) — для устройств, требующих высокой производительности (смартфоны, планшеты);\nR (real time) — для приложений, работающих в реальном времени;\nM (microcontroller) — для микроконтроллеров и недорогих встраиваемых устройств[3].>>>",
            "Процессор может находиться в одном из следующих операционных режимов:\n<<<User mode — обычный режим выполнения программ. В этом режиме выполняется большинство программ.\nFast Interrupt (FIQ) — режим быстрого прерывания (меньшее время срабатывания).\nInterrupt (IRQ) — основной режим прерывания.\nSystem mode — защищённый режим для использования операционной системой.\nAbort mode — режим, в который процессор переходит при возникновении ошибки доступа к памяти (доступ к данным или к инструкции на этапе prefetch конвейера).\nSupervisor mode — привилегированный пользовательский режим.\nUndefined mode — режим, в который процессор входит при попытке выполнить неизвестную ему инструкцию.>>>",
            "Особенности AArch64:\n<<<Новый набор команд A64\n31 регистр общего назначения, каждый длиной 64 бита\nОтдельные регистры SP и PC\nИнструкции имеют размер 32 бита и многие совпадают с командами A32\nБольшинство инструкций работает как с 32-, так и с 64-битными аргументами\nАдреса имеют размер 64 бита\nУлучшения Advanced SIMD (NEON) enhanced\nС 16 до 32 увеличено количество 128-битных регистров, доступных через NEON, VFPv4, криптоинструкции AES, SHA\nПоддерживает вычисления с числами с плавающей запятой двойной точности (64-бит double)\nПолная совместимость с IEEE 754\nНовая система исключений>>>",
            "Новый набор команд A64\n31 регистр общего назначения, каждый длиной 64 бита\nОтдельные регистры SP и PC\nИнструкции имеют размер 32 бита и многие совпадают с командами A32\nБольшинство инструкций работает как с 32-, так и с 64-битными аргументами\nАдреса имеют размер 64 бита\nУлучшения Advanced SIMD (NEON) enhanced\nС 16 до 32 увеличено количество 128-битных регистров, доступных через NEON, VFPv4, криптоинструкции AES, SHA\nПоддерживает вычисления с числами с плавающей запятой двойной точности (64-бит double)\nПолная совместимость с IEEE 754\nНовая система исключений<<<Трансляция виртуальных адресов из 48-битного формата работает с помощью существующих механизмов LPAE>>>",
            "Архитектура ARM обладает следующими особенностями RISC:\n<<<Архитектура загрузки/хранения\nНет поддержки нелинейного (не выровненного по словам) доступа к памяти (теперь поддерживается в процессорах ARMv6, за некоторыми исключениями, и полностью в ARMv7)\nРавномерный 16х32-битный регистровый файл\nФиксированная длина команд (32 бита) для упрощения декодирования за счет снижения плотности кода. Позднее режим Thumb повысил плотность кода.\nОднотактное исполнение>>>",
            "Чтобы компенсировать простой дизайн, в сравнении с современными процессорами вроде Intel 80286 или Motorola 68020 были использованы некоторые особенности дизайна:\n<<<Арифметические инструкции заменяют условные коды, только когда это необходимо\n32-битное многорегистровое циклическое сдвиговое устройство, которое может быть использовано без потерь производительности в большинстве арифметических инструкций и адресных расчетов.\nМощные индексированные адресные режимы\nРегистр ссылок для быстрого вызова функций листьев\nПростые, но быстрые, с двумя уровнями приоритетов подсистемы прерываний с включенными банками регистров.>>>",
            "ARM предоставляет 31 регистр общего назначения разрядностью 32 бита. В зависимости от режима и состояния процессора пользователь имеет доступ только к строго определённому набору регистров. В ARM state разработчику постоянно доступны 17 регистров:\n<<<13 регистров общего назначения (r0..r12).\nStack Pointer (r13) — содержит указатель стека выполняемой программы.\nLink register (r14) — содержит адрес возврата в инструкциях ветвления.\nProgram Counter (r15) — биты [31:1] содержат адрес выполняемой инструкции.\nCurrent Program Status Register (CPSR) — содержит флаги, описывающие текущее состояние процессора. Модифицируется при выполнении многих инструкций: логических, арифметических, и др.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/ARM_(архитектура)"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Свободное_и_открытое_программное_обеспечение"
    },
    {
        "task": [
            "Серверное оборудование зачастую предназначено для обеспечения работы сервисов в режиме 24/7, поэтому часто комплектуется дублирующими элементами, позволяющими обеспечить «пять девяток» (99,999 %; время недоступности сервера или простой системы составляет менее 6 минут в год). Для этого конструкторами при создании серверов создаются специальные решения, отличные от создания обычных компьютеров:\n<<<Память имеет повышенную устойчивость к сбоям. Например для i386-совместимых серверов, модули оперативной памяти и кэша имеет усиленную технологию коррекции ошибок (англ. Error Checking and Correction, ECC). На некоторых других платформах, например SPARC (Sun Microsystems), вся память имеет коррекцию ошибок. Для собственных мэйнфреймов IBM разработала специальную технологию Chipkill™.\nПовышение надёжности сервера достигается резервированием, в том числе с горячим подключением и заменой (англ. Hot-swap) критически важных компонентов:\nпри необходимости вводится дублирование процессоров (например, это важно для непрерывности выполнения сервером задачи долговременного расчёта — в случае отказа одного процессора вычисления не обрываются, а продолжаются, пусть и на меньшей скорости)\nблоков питания,\nжёстких дисков в составе массива RAID и самих контроллеров дисков,\nгрупп вентиляторов, обеспечивающих охлаждение компонентов сервера.\nВ функции аппаратного мониторинга входят дополнительные каналы для контроля большего количества параметров сервера: датчики температуры (самостоятельно контролирует температурные режимы процессоров, модулей памяти, отсеков с жёсткими дисками), электронные счётчики импульсов, (встроены в вентиляторы, выполняют функции тахометров и позволяют, в зависимости от температуры, регулировать скорость их вращения), постоянный контроль напряжения питания компонентов сервера (позволяет сигнализировать об эффективности работы блоков питания), сторожевой таймер (не позволяет остаться незамеченным зависанию системы, автоматически производя принудительную перезагрузку сервера).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Сервер_(аппаратное_обеспечение)"
    },
    {
        "task": [
            "\nПринцип действия и способы применения транзисторов существенно зависят от их типа и внутренней структуры.\n<<<Биполярные\nn-p-n-структуры, «обратной проводимости».\np-n-p-структуры, «прямой проводимости».>>>",
            "В биполярном транзисторе носители заряда движутся от эмиттера через тонкую базу к коллектору. База отделена от эмиттера и коллектора p-n-переходами. Ток протекает через транзистор лишь тогда, когда носители заряда инжектируются из эмиттера в базу через p-n-переход. В базе они являются неосновными носителями заряда и легко захватываются другим p-n-переходом между базой и коллектором, ускоряясь при этом. В базовом слое носители заряда распространяются за счёт диффузионного механизма, если нет градиента легирующей примеси в слое базы, или под действием электрического поля при неравномерном легировании базы. Для повышения быстродействия прибора толщина базового слоя должна быть как можно тоньше, но чрезмерное снижение толщины базы вызывает снижение предельно допустимого напряжения коллектора. Управление током между эмиттером и коллектором осуществляется изменением напряжения между базой и эмиттером, от которого зависят условия инжекции носителей заряда в базу и ток базы.<<<Полевые\nс p-n-переходом.\nс изолированным затвором — МДП-транзистор.>>>",
            "Другие разновидности транзисторов[править | править код]<<<Однопереходные транзисторы.\nМногоэмиттерные транзисторы (применяются в транзисторно-транзисторной логике для построения логических элементов И-НЕ)[12][13].\nБаллистические транзисторы.\nОдномолекулярный транзистор[14].\nФототранзисторы.\nДиэлектрические транзисторы>>>",
            "Основная статья: Составной транзистор<<<Транзисторы со встроенными резисторами (Resistor-equipped transistors (RETs)) — биполярные транзисторы со встроенными в один корпус резисторами.\nТранзистор Дарлингтона, пара Шиклаи — комбинация двух биполярных транзисторов, работающая как биполярный транзистор с высоким коэффициентом усиления по току.\nна транзисторах одной структуры;\nна транзисторах разной структуры.\nЛямбда-диод — двухполюсник, сочетание из двух полевых транзисторов, имеющая, как и туннельный диод, значительный участок с отрицательным дифференциальным сопротивлением.\nБиполярный транзистор, управляемый полевым транзистором с изолированным затвором (IGBT) — силовой электронный прибор, предназначенный в основном для управления электрическими приводами.>>>",
            "По рассеиваемой в виде тепла мощности различают:\n<<<маломощные транзисторы до 100 мВт;\nтранзисторы средней мощности от 0,1 до 1 Вт;\nмощные транзисторы (больше 1 Вт).>>>",
            "По исполнению[править | править код]<<<дискретные транзисторы;\nкорпусные\nдля свободного монтажа\nдля установки на радиатор\nдля автоматизированных систем пайки\nбескорпусные\nтранзисторы в составе интегральных схем.>>>",
            "По материалу и конструкции корпуса[править | править код]<<<В металлостеклянном/металлокерамическом корпусе.>>>",
            "Материал корпуса — металл. Материал изоляторов, через которые проходят выводы — стекло либо керамика. Имеют наибольший диапазон температур окружающей среды и максимальную защищённость от воздействия внешних факторов.<<<В пластмассовом корпусе.>>>",
            "Отличаются меньшей стоимостью и более мягкими допустимыми условиями эксплуатации. У мощных приборов в пластмассовом корпусе кроме выводов часто имеется металлический теплоотвод — кристаллодержатель для монтажа прибора на внешний радиатор.<<<Бескорпусные — применяются в составе гибридных микросхем и микромодулей.>>>",
            "Прочие типы[править | править код]<<<Одноэлектронные транзисторы содержат квантовую точку (т. н. «остров») между двумя туннельными переходами. Ток туннелирования управляется напряжением на затворе, связанном с ним ёмкостной связью[15].\nБиотранзистор.>>>",
            "Схемы включения биполярного транзистора[править | править код]<<<с общим эмиттером (ОЭ) — осуществляет усиление как по току, так и по напряжению — наиболее часто применяемая схема;\nс общим коллектором (ОК) — осуществляет усиление только по току — применяется для согласования высокоимпедансных источников сигнала с низкоомными сопротивлениями нагрузок;\nс общей базой (ОБ) — усиление только по напряжению, в силу своих недостатков в однотранзисторных каскадах усиления применяется редко (в основном в усилителях СВЧ), обычно в составных схемах (например, каскодных).>>>",
            "Полевые транзисторы как с p-n-переходом (канальные), так и МОП (МДП) имеют следующие схемы включения:\n<<<с общим истоком (ОИ) — аналог ОЭ биполярного транзистора;\nс общим стоком (ОС) — аналог ОК биполярного транзистора;\nс общим затвором (ОЗ) — аналог ОБ биполярного транзистора.>>>",
            "Вне зависимости от типа транзистора, принцип применения его един:\n<<<Источник питания питает электрической энергией нагрузку, которой может быть громкоговоритель, реле, лампа накаливания, вход другого, более мощного транзистора, электронной лампы. Именно источник питания даёт нужную энергию для работы любой схемы усиления электрического сигнала с помощью транзистора. Сам по себе транзистор усиливать мощность не может. Он является только одним из элементов схемы усиления, хотя и самым главным. С его помощью схема, за счёт небольшой мощности, управляет выходной мощностью, в десятки и сотни раз превышающую мощность управления.\nТранзистор же используется для ограничения силы тока, поступающего в нагрузку, и включается в разрыв между источником питания и нагрузкой. То есть транзистор представляет собой некий вариант полупроводникового резистора, сопротивление которого можно очень быстро изменять.\nВыходное сопротивление транзистора меняется в зависимости от напряжения на управляющем электроде. Важно то, что это напряжение, а также сила тока, потребляемая входной цепью транзистора, гораздо меньше напряжения и силы тока в выходной цепи.>>>",
            "Это положение не всегда верно: так в схеме с общим коллектором ток на выходе в β раз больше, чем на входе, напряжение же на выходе несколько ниже входного; в схеме с общей базой увеличивается напряжение на выходе по сравнению с входом, но выходной ток немного меньше входного. Таким образом, в схеме с общим коллектором происходит усиление только по току, а в схеме ОБ — только по напряжению. За счёт контролируемого управления источником питания достигается усиление сигнала либо по току, либо по напряжению, либо по мощности (схемы с общим эмиттером).\n<<<Если мощности входного сигнала недостаточно для «раскачки» входной цепи применяемого транзистора, или конкретный транзистор не даёт нужного усиления, применяют каскадное включение транзисторов, когда более чувствительный и менее мощный транзистор управляет энергией источника питания на входе более мощного транзистора. Также подключение выхода одного транзистора ко входу другого может использоваться в генераторных схемах типа мультивибратора. В этом случае применяются одинаковые по мощности транзисторы.>>>",
            "Транзистор применяется в:\n<<<Усилительных схемах. Работает, как правило, в усилительном режиме[16][17][18].>>>",
            "Существуют экспериментальные разработки полностью цифровых усилителей, на основе ЦАП, состоящих из мощных транзисторов[19][20]. Транзисторы в таких усилителях работают в ключевом режиме.\n<<<Генераторах сигналов. В зависимости от типа генератора транзистор может использоваться либо в ключевом (генерация прямоугольных сигналов), либо в линейном усилительном режиме (генерация сигналов произвольной формы).\nЭлектронных ключах. Транзисторы работают в ключевом режиме. Ключевые схемы можно условно назвать усилителями (регенераторами) цифровых сигналов. Иногда электронные ключи применяют и для управления силой тока в аналоговом виде. Это применяется, когда нагрузка обладает достаточно большой инерционностью, а напряжение и сила тока в ней регулируются не амплитудой, а шириной импульсов. На подобном принципе основаны бытовые диммеры для ламп накаливания и нагревательных приборов, а также импульсные источники питания, приводы электродвигателей.>>>",
            "Основные преимущества, которые позволили транзисторам заменить своих предшественников (вакуумные лампы) в большинстве электронных устройств:\n<<<малые размеры и небольшой вес, что способствует развитию миниатюризации электронных устройств;\nвысокая степень автоматизации и групповой характер операций на многих этапах технологического процесса изготовления, что ведёт к постоянному снижению удельной стоимости при массовом производстве;\nнизкие рабочие напряжения, что позволяет использовать транзисторы в небольших по габаритам и энерговооружённости электронных устройствах с питанием от малогабаритных электрохимических источников тока;\nне требуется дополнительного времени на разогрев катода после включения, что позволяет достичь почти мгновенной готовности к работе транзисторных устройств сразу после подачи питания;\nмалая, по сравнению с лампами, рассеиваемая мощность, в том числе из-за отсутствия разогрева катода, что способствует повышению энергоэффективности, облегчает отвод избыточного тепла и позволяет повышать компактность устройств;\nвысокая надёжность и бо́льшая физическая прочность, стойкость к механическим ударам и вибрации, что позволяет избежать проблем при использовании устройств в условиях любых ударных и вибрационных нагрузок;\nочень продолжительный срок службы — некоторые транзисторные устройства находились в эксплуатации более 50 лет и при этом не потеряли своей работоспособности;\nвозможность объединения множества элементов в едином миниатюрном конструктивном модуле позволяет значительно повысить степень интеграции и облегчает разработку комбинированных схем высокой сложности, что не представляется возможным с вакуумными лампами.>>>",
            "Недостатки (ограничения)[править | править код]<<<Обычные кремниевые транзисторы не работают при напряжениях выше 1 кВ, вакуумные лампы могут работать с напряжениями на несколько порядков выше 1 кВ (для коммутации цепей с напряжением свыше 1 кВ разработаны IGBT транзисторы);\nПрименение транзисторов в мощных радиовещательных и СВЧ передатчиках нередко оказывается технически и экономически нецелесообразным: требуется параллельное включение и согласование многих сравнительно маломощных усилителей. Мощные и сверхмощные генераторные лампы с воздушным или водяным охлаждением анода, а также магнетроны, клистроны, лампы бегущей волны (ЛБВ) обеспечивают лучшее соотношение частотных характеристик, мощностей и приемлемой стоимости.\nТранзисторы значительно более уязвимы, чем вакуумные лампы, к действию сильных электромагнитных импульсов, которые, в том числе, являются одним из поражающих факторов ядерного взрыва;\nЧувствительность к радиации и воздействию космических излучений (созданы специальные радиационно-стойкие микросхемы для электронных устройств космических аппаратов).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Транзистор"
    },
    {
        "task": [
            "Таблицы УДК состоят из следующих частей:\n<<<структура, свойства и принципы УДК;\nметодические указания по применению УДК;\nосновные разделы УДК;\nалфавитно-предметные указатели (АПУ) к основным разделам УДК;\nвспомогательные таблицы УДК;\nалфавитно-предметные указатели к вспомогательным таблицам.>>>",
            "Общие определители[править | править код]<<<«=…» — Определители языка, на котором написан классифицируемый документ.\n«(0…)» — Определители формы классифицируемого документа: книга, периодическое издание, реферат, …\n«(1/9)» — Определители места.\n«(=…)» — Определители народов.\n«\"…\"» — Определители времени.\n«-…» — Другие общие определители: свойств, материалов и лиц.>>>",
            "Специальные определители «−1/-9», «.01/.09» и «'1/'9» имеют ограниченные сферы применения. Каждый из этих видов определителей используется для обозначения характерной повторяющейся детализации в тех разделах основной таблицы, для которых они разработаны и в которых помещены, а иногда и в некоторых других разделах, если это специально оговорено. Таким образом, в отличие от общих определителей (вспомогательная таблица «I»), группа или подгруппа специальных определителей с одной и той же нотацией может иметь различное значение в разных разделах УДК, например, «−3» в «54», «62» и «82» или «.02» в «06», «53», «54», «57», «621.3», «629.656», «677» и «7». Однако в одном разделе они всегда обозначают одинаковые повторяющиеся характеристики, независимо от того, используются ли они с основным индексом УДК, под которым перечисляются, или же добавляются к подразделам этого индекса.\n<<<В УДК используются специальные определители трёх видов:\nопределители с дефисом «−1/-9» (кроме «−0», см. таблицу «1k»), выполняющие в основном аналитическую или дифференцирующую функцию, служат для обозначения элементов, составных частей, свойств и других признаков предметов, выраженных основным индексом УДК, при котором приведена таблица этих определителей, и его непосредственными подразделениями. Например, определители «−1/-9» в разделах «62/69» обозначают технологические характеристики и детали машин, в разделах «82/89» — литературные формы и жанры (поэзия, драматургия, роман и т. д.);\nопределители с точкой и нулём «.01/.09» более разнообразны по применению и содержанию и часто разработаны с большей степенью детализации, чем «−1/-9». Они содержат такие повторяющиеся характеристики, как аспект рассмотрения, деятельность, процессы, операции, машины и оборудование. Например, определители «.07/.08», помещённые в разделе «35», могут применяться во всех разделах «31/39»; определители «.01/.09» имеются в классе «5» (например, в разделах «523», «528», «53», «54», «556», «57/59»), в классах «8» и «9»; особенно широко они используются в классе «6»;\nопределители с апострофом «'1/'9», в отличие от «−1/-9» и (ещё более) от «.01/.09», выполняют, главным образом, синтетическую или интегрирующую функцию и служат для создания комплексно-предметной нотации путём объединения отдельных составляющих элементов, компонентов и других характеристик; в одних случаях эти элементы явно представлены в качестве полностью приведённых таблиц, в других — образуются из соответствующих подразделений основного индекса при помощи параллельного подразделения «'1/'9» ? «.1/.9».\nВсе три вида специальных определителей могут быть применены:\nв виде единичных определителей какого-либо одного типа, (например, «547.29-41 Реагенты для органических кислот»; «882.09 Критика в русской литературе»);\nв комбинации однотипных определителей, (например, «62-242-436 Поршни двигателей сферические»; «678.652’737’21 Поликонденсатные меламинформальдегиды»);\nв комбинированной цепи определителей разных видов, (например, «329.12’23.052 Либерально-республиканские оппозиционные партии»; «882-31.09 Русский роман, критика»).\nРекомендуемая форма методических указаний о применении определителей с апострофом в тех разделах УДК, где методические указания даны не полностью: «Для обозначения… подразделения… могут применяться в качестве специального определителя со знаком «'» (апостроф), заменяющим…» (например в «553.3/.4» для уточнения залежей сложных полиметаллических руд подразделения «.3/.4» из «553» можно использовать в качестве специальных определителей «'3/'4», где знак «'» (апостроф) заменяет «553»; в «622.34» — для обозначения разработки месторождений сложных полиметаллических руд подразделения «622.341/.349» могут применяться в качестве специальных определителей «'41/'49», где знак «'» (апостроф) заменяет «622.3»).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Универсальная_десятичная_классификация"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Плагин"
    },
    {
        "task": [
            "\n\nНазвание\nАкроним\nФормфактор\nТСЗАП\n\n\nPC Card\nPCMCIA\n85,6 × 54 × 3,3 мм\nНет\n\n\nCompactFlash I\nCF-I\n43 × 36 × 3,3 мм\nНет\n\n\nCompactFlash II\nCF-II\n43 × 36 × 5,5 мм\nНет\n\n\nSmartMedia\nSM / SMC\n45 × 37 × 0,76 мм\nНет\n\n\nMemory Stick\nMS\n50,0 × 21,5 × 2,8 мм\nMagicGate\n\n\nMemory Stick Duo\nMSD\n31,0 × 20,0 × 1,6 мм\nMagicGate\n\n\nMemory Stick PRO Duo\nMSPD\n31,0 × 20,0 × 1,6 мм\nMagicGate\n\n\nMemory Stick PRO-HG Duo\nMSPDX\n31,0 × 20,0 × 1,6 мм\nMagicGate\n\n\nMemory Stick Micro M2\nM2\n15,0 × 12,5 × 1,2 мм\nMagicGate\n\n\nMiniature Card\n\n37 × 45 × 3,5 мм\nНет\n\n\nMultimedia Card\nMMC\n32 × 24 × 1,5 мм\nНет\n\n\nReduced Size Multimedia Card\nRS-MMC\n16 × 24 × 1,5 мм\nНет\n\n\nMMCmicro Card\nMMCmicro\n12 × 14 × 1,1 мм\nНет\n\n\nSecure Digital card\nSD\n32 × 24 × 2,1 мм\nCPRM\n\n\nSxS\nSxS\n\nнеизвестно\n\n\nUniversal Flash Storage\nUFS\n15 × 11 × 0,74 мм[4]\nнеизвестно\n\n\nminiSD card\nminiSD\n21,5 × 20 × 1,4 мм\nCPRM\n\n\nmicroSD card (TransFlash)\nmicroSD, TF\n15 × 11 × 0,7 мм\nCPRM\n\n\nxD-Picture Card\nxD\n20 × 25 × 1,7 мм\nНет\n\n\nIntelligent Stick\niStick\n24 × 18 × 2,8 мм\nНет\n\n\nSerial Flash Module\nSFM\n45 × 15 мм\nНет\n\n\nµ card\nµcard\n32 × 24 × 1 мм\nнеизвестно\n\n\nNT Card\nNT NT+\n44 × 24 × 2,5 мм\nНет\n<<<\n\n\nSecure Digital (SD)\n\n\n\nCompactFlash (CF-I)\n\n\n\nMemory Stick\n\n\n\nMultiMediaCard (MMC)\n\n\n\nSmartMedia\n\n\n\nxD-Picture Card (xD)\n\n>>>",
            "Картридер имеет вид флешки и позволяет читать карты памяти разных форматов<<<SD to CF (Secure Digital SD to CF CompactFlash Card Adapter Type II)\nSDHC to CF\nMicro SD/TF to CF\nMS to CF\nMicroSD (TF) to MS/MS Pro Duo\nMS to PC card\nMicro SD to SD\nUSB (типа флешки)>>>",
            "Ёмкости в скобках относятся к официальным картам памяти, выпущенным в первых партиях.\n<<<Линейка Microsoft Xbox:\nXbox Memory Unit (8 Мбайт)\nXbox 360 Memory Unit (64 Мбайт/256 Мбайт/512 Мбайт)\nЛинейка Nintendo:\nNintendo 64 Controller Pak (256 Кбит/32 Кбайт), поделённых на 123 страницы\nNintendo GameCube Memory Card версии: 59 блоков (4 Мбит/512 Кбайт), 251 блок (16 Мбит/2 Мбайт) и 1019 блоков (64 Мбит/8 Мбайт)\nWii Nintendo GameCube совместимая с Multimedia Card или совместимая с картой Secure Digital до 2 GB\nNintendo DSi совместимая с картой Secure Digital\nSega Dreamcast Visual Memory Unit (VMU) (128 Кбайт поделённых на 200 блоков)\nКарта памяти Sega Saturn может иметь 20 блоков с записями игр.\nЛинейка Sony PlayStation:\nКарта памяти PlayStation (1 Мбит/128 Кбайт, поделённых на 15 блоков).\nPlayStation 2 использует карты 8 Мбайт для своего собственного контента и поддерживает карты памяти PlayStation для обратной совместимости. Сторонними производителями выпускаются карты большей ёмкости, но они не поддерживаются официально.\nДля ранних моделей PlayStation 3 характерна интеграция с CompactFlash, Secure Digital и Memory Stick PRO Duo. Внешние устройства позволяют импортировать и экспортировать сохранения на карты памяти PlayStation и PlayStation 2.\nМодели PSP-1000, −2000, −3000 и −E1000 используют для хранения данных Memory Stick PRO Duo, тогда как модель PSP Go использует Memory Stick Micro.\nPlayStation Vita использует карты памяти собственного формата (от 4 до 64 Гбайт).\nПортативная игровая консоль GP2X на базе GNU/Linux использует карты SD/MMC.\nNeo Geo AES, разработанная в 1990 г. фирмой SNK Playmore, была первой игровой консолью, использующей карты памяти. Карты памяти AES совместимы также с Neo-Geo MVS для игровых автоматов.>>>",
            "Причины поломок карт памяти<<<Для снижения себестоимости, производители карт памяти иногда могут устанавливать низкокачественные микросхемы NAND памяти с очень низким показателем максимального количества циклов записи в ячейку памяти;\nНекорректное извлечение карты памяти из устройства. При этом может произойти сбой и карта памяти выйдет из строя. Поэтому рекомендуется предварительно «извлечь» в системе карту памяти или штатно выключить устройство, а только потом вытаскивать карту памяти из разъёма;\nРазличные механические воздействия на карту памяти: удары, падения, вибрация. При этом на карте памяти может отойти заводская пайка или треснуть печатная плата, на которой распаяны все элементы;\nИспользование карты памяти в видеорегистраторе автомобиля с циклической записью. Из-за очень частой записи информации в ячейки памяти, использование карт памяти в видеорегистраторах очень сильно ускоряет процесс износа микросхем NAND памяти[6];>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Карта_памяти"
    },
    {
        "task": [
            "На разных операционных системах и средах — независимо от того, как технически достигнута работа в них — стандартные элементы интерфейса имеют разные размеры. Поэтому простое жёсткое позиционирование элементов интерфейса невозможно — в другой операционной системе (среде) они могут «налезать» друг на друга, «расплываться», «пьянеть». Существует несколько подходов:\n<<<Единый стиль, общий для всех операционных систем, программы выглядят одинаково под всеми системами. Так работают интерфейсные библиотеки Java наподобие Swing.\nПлюс: можно жёстко расставлять элементы управления на манер Delphi, оригинальный стиль.\nМинус: системе приходится иметь свои экранные шрифты, и стиль отличается от стиля ОС.\nСамоадаптирующийся (адаптивный) интерфейс, подстраивающий сетку под реальные размеры элементов управления. Типичные примеры — Qt, wxWidgets, XUL.\nПлюс: стандартный стиль операционной системы, очень быстрый и «скинующийся» под Windows XP, Vista и Windows 7, и некоторая автоматизация локализации.\nМинус: чтобы собрать самоадаптирующуюся (адаптивную) сетку, требуется квалифицированный программист, а также затруднена плотная компоновка.\nГибридный подход реализован в GTK+.\nПлюс: шрифты можно брать из системы, а не «тащить» свои, а также некоторая автоматизация локализации.\nМинус: берёт все недостатки от первых двух подходов. Стиль отличается от стиля операционной системы, затруднена плотная компоновка.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Кроссплатформенность"
    },
    {
        "task": [
            "Выражения сходны с большинством других процедурных языков программирования, но в первых вариантах Бейсика их набор был довольно бедным. В самых ранних вариантах число ключевых слов не достигало даже 20. Вот набор основных программных конструкций и интерактивных команд, которые были реализованы практически в любой Бейсик-системе конца 1970-х годов:\n<<<LIST — вывод на монитор текста программы в правильной последовательности строк. В зависимости от реализации команда поддерживала параметры — диапазон строк, который требуется вывести. Иногда поддерживался вариант LLIST — вывод на печатающее устройство.\nRUN — запуск текущей программы с первого оператора строки с самым маленьким номером. Мог поддерживаться параметр — номер строки, с которого нужно начинать исполнение.\nREM — комментарий. Текст, находившийся после ключевого слова и до конца строки, на исполнение программы не влиял. Многие интерпретаторы также поддерживали в качестве знака начала комментария одиночную кавычку '.\nINPUT \"Приглашение: \", Переменная — вывод на монитор текста \"Приглашение: \" и ожидание, пока пользователь не введёт значение и не нажмёт Enter. После этого в Переменную запишется введённое значение. В простейших реализациях приглашение в INPUT не поддерживалось и его нужно было выводить отдельным оператором PRINT (см. ниже).\nPRINT «Текст»; Переменная; Переменная; «Текст» — вывод на монитор последовательно перечисленных объектов (текста и значений переменных). В зависимости от реализации, по-разному воспринимались разделители: в одних случаях разделитель приводил к выводу хотя бы одного пробела, в других — значения выводились подряд и разделители нужно было добавлять вручную. Разделитель «;» выполнял также функцию подавления перевода на следующую строку.\nCLS — очистка экрана терминала. В зависимости от реализации, конструкции и режима работы терминала текстовый курсор переносился либо в верхний левый, либо в нижний левый угол.\nLET — присваивание (формат «LET Переменная = Значение»). В абсолютном большинстве версий оператор LET поддерживался, но был факультативным — присваивания переменным значений записывались без LET).\nDIM — описание массива. В отличие от обычных переменных, массивы требовали описания. Максимальное число размерностей массива определялось только реализацией\nDATA — набор данных, размещаемых прямо в тексте программы (аналог константы или массива-константы).\nREAD — команда считывания из набора DATA.\nGOTO Lbl — команда безусловного перехода на метку Lbl.\nON… GOTO — команда вычисляемого перехода — после ON должно было идти вычисляемое выражение или переменная, а после GOTO — набор меток через запятую. Значение выражения указывало номер метки, на которую нужно перейти.\nIF … THEN … — обычный оператор ветвления. После IF размещается логическое условие, после THEN — оператор, который должен быть выполнен при истинности этого условия. Для сокращения записи многие реализации поддерживали соглашение — если после THEN идёт число, то это — метка, на которую нужно перейти, то есть форма «IF … THEN 150» равнозначна «IF … THEN GOTO 150». Также могли поддерживаться формы «IF … GOTO…»\nFOR ПеременнаяЦикла=НачальноеЗначение TO КонечноеЗначение STEP Шаг — заголовок цикла с шагом. Инициирует цикл, в котором Переменная последовательно проходит ряд значений от НачальноеЗначение до КонечноеЗначение с шагом Шаг. Тело цикла ограничивается заголовком и ключевым словом NEXT. Часть STEP могла опускаться — в этом случае шаг был равен единице. Когда ПеременнаяЦикла выходит за указанные пределы, происходит переход за соответствующий оператор NEXT.\nNEXT — завершение тела цикла с шагом. Оператор показывает, что необходимо перейти на заголовок текущего исполняемого цикла FOR и продолжить работу. В более развитых реализациях NEXT мог содержать список переменных цикла через запятую — это означало, что в данной точке программы завершается тело не одного, а нескольких циклов. Применение NEXT с переменной также страховало от нарушения логики программы, так как вызывало ошибку времени выполнения, если при выполнении этой команды оказывалось, что активен цикл не по той переменной, имя которой указано.\nWHILE Условие — заголовок цикла с предусловием. Цикл завершался, если условие оказывалось ложно. В этом случае происходил переход за соответствующий заголовку оператор WEND.\nWEND — завершение тела цикла WHILE. Аналог NEXT но для цикла с предусловием.\nGOSUB Метка — переход к подпрограмме, начинающейся с Метки. Возврат происходит при достижении оператора RETURN. Рекурсивный вызов процедуры был, как правило, запрещён и приводил к ошибке времени выполнения.\nRETURN — оператор возврата из подпрограммы. Выполняется безусловный переход на оператор, следующий за командой GOSUB, которой был произведён переход к подпрограмме.\nEND — завершение выполнения программы. Система выходит в интерпретатор и пользователю выдаётся приглашение на ввод команд.\nCHAIN — загрузка диапазона строк программы с внешнего носителя.\nOPEN — открытие файла данных на внешнем носителе.\nCLOSE — закрытие файла данных на внешнем носителе.\nGET — последовательное чтение значений указанных переменных из файла с перемещением файлового указателя за последний считанный символ.\nPUT — последовательная запись значений указанных переменных в файл с перемещением файлового указателя за последний записанный символ.\nDELETE — команда интерактивного режима — удаление строки с указанным номером.\nSAVE — команда интерактивного режима — сохранение текущей программы в файле на внешнем носителе.\nLOAD — команда интерактивного режима — загрузка в память программы из файла на внешнем носителе. Как правило, по умолчанию она приводила к уничтожению ранее загруженной программы и данных.\nRENUM — команда интерактивного режима — перенумерация всех или заданного диапазона строк программы начиная с заданного числа с указанным шагом. По умолчанию — перенумеруются все строки программы с шагом 10.>>>",
            "Бейсик поздних версий (начиная с Turbo Basic и Visual Basic) резко отличается от ранних вариантов. Фактически, это новый язык, который во многом ближе к Фортрану или Паскалю, чем к исходному Бейсику. Основные изменения версий 1990-х годов состоят в следующем:\n<<<Отказались от представления программы как неструктурированного набора пронумерованных строк. Номера строк превратились в обычные метки, которые стали необязательными и перестали влиять на порядок исполнения программы. Если ранее строка с номером 15 всегда шла в программе раньше строки с номером 20, то теперь порядок исполнения стал определяться порядком расположения строк в исходном коде. Метки перестали быть только числовыми.\nВ языке появились именованные подпрограммы с параметрами, механизм вызова подпрограмм стал обычным: подпрограмма вызывается по имени, с указанием списка фактических параметров.\nПоявилась рекурсия.\nБыли введены структурные управляющие конструкции, в результате для организации обычных ветвлений и циклов перестало быть необходимым использование оператора GOTO и меток строк.\nСущественно расширилась номенклатура типов данных, появилась возможность явно описывать типы обычных переменных.\nСтали необязательными типизирующие суффиксы в именах переменных, хотя их использование не запрещалось.\nВ более поздних версиях появилась обработка исключений и поддержка элементов ООП.\nБыли введены механизмы поддержки модульности — появилась возможность без «фокусов» (типа динамической загрузки модулей с помощью явных системных вызовов) разделять программу на несколько файлов исходного кода.\nПоявились средства для работы с цветной графикой и звуковой картой.\nVisual Basic, ориентированный на разработку Windows-приложений с графическим интерфейсом пользователя, был выполнен интегрированным с графическим дизайнером интерфейса, что позволило быстро писать простые программы под Windows.\nПоявились кроссплатформенные реализации, например, FreeBASIC и PureBasic.>>>",
            "Советские:\n<<<Вильнюсский университет — Вильнюс\nВЦ СО АН СССР — Новосибирск\nПО «ВЭФ» — Рига\nНижегородский государственный университет имени Н. И. Лобачевского — Нижний Новгород>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Бейсик"
    },
    {
        "task": [
            "Скриншоты наиболее распространённых дистрибутивов<<<\n\n\nUbuntu 22.04 \"Jammy Jellyfish\"\n\n\n\nDebian 10 \"Buster\"\n\n\n\nFedora 31\n\n\n\nLinux Mint 19.1 \"Tessa\"\n\n\n\nelementary OS 5.0 \"Hera\"\n\n\n\nArch Linux\n\n\n\nopenSUSE 15.1\n\n\n\nZorin OS 15\n\n\n\nGentoo Linux 10.1\n\n\n\nOpenMandriva Lx 4.0\n\n\n\nSlackware 15.0\n\n>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Дистрибутив_Linux"
    },
    {
        "task": [
            "Если в Европе, Америке и др. регионах при написании используются только два варианта — «email» или «e-mail» (причём рекомендации о том, писать дефис или нет, разнятся: например, с марта 2011 года одно из стилистических руководств — AP Stylebook — рекомендует писать сокращение от «электронная почта» как «email», а не «e-mail»[2]), то в русском языке присутствует значительная вариативность. Наиболее часто[источник не указан 1416 дней] в кириллических текстах также используется «e-mail», то есть написание латиницей без транслитерации (визуальное восприятие других форм написания хуже[источник не указан 1416 дней]), но можно встретить и другие написания:\n<<<электронная почта, эл. почта;\nинтернет-почта[3];\nимейл (транскрипция с английского)[4];\nе-мейл, емейл, емайл, е-мэйл, мейл (различные варианты транслитерации и её сокращения).>>>",
            "Де-факто в официальных русскоязычных документах[источник не указан 1416 дней]:\n<<<в тексте (в смысле «способ связи») употребляют выражение «электронная почта»;\nв списке контактов используют префикс «e-mail» (E-mail: user@example.com).>>>",
            "В терминологии электронной почты выделяются следующие компоненты:\n<<<MTA (англ. mail transfer agent — агент пересылки почты) — отвечает за пересылку почты между почтовыми серверами; как правило, первый MTA в цепочке получает сообщение от MUA, последний передаёт сообщение к MDA; возможна реализация с отправкой почты через smart host.\nMDA (англ. mail delivery agent — агент доставки почты) — отвечает за доставку почты конечному пользователю.\nMUA (англ. mail user agent — почтовый агент пользователя; в русской нотации закрепился термин почтовый клиент) — программа, обеспечивающая пользовательский интерфейс, отображающая полученные письма и предоставляющая возможность отвечать, создавать, перенаправлять письма.\nMRA[англ.] (англ. mail retrieval agent) — почтовый сервер, забирающий почту с другого сервера по протоколам, предназначенным для MDA[9].>>>",
            "Основываясь на работе протоколов, можно разделить их по двум основным критериям:\n<<<производительность сервера — в этом отношении IMAP более требователен к ресурсам, нежели POP3, так как вся работа по обработке почты (такая как поиск) ложится на плечи сервера, POP3 только передаёт почту клиенту;\nпропускная способность канала — здесь IMAP в выигрыше: POP3 передаёт тела всех писем целиком, тогда как IMAP может передавать отдельные части сообщений, например только текстовую, а остальное — по запросу.>>>",
            "При передаче по протоколу SMTP электронное письмо состоит из следующих частей.\n<<<Данные SMTP-конверта, полученные сервером. Часть этих данных может отсутствовать в самом сообщении. Так, например, в RCPT TO (envelope to) содержится список получателей письма, при этом в самом письме получатель может быть не указан. Эта информация передаётся за пределы сервера только в рамках протокола SMTP, и смена протокола при доставке почты (например, на узле-получателе в ходе внутренней маршрутизации) может приводить к потере этой информации. В большинстве случаев эта информация недоступна конечному получателю, который использует не-SMTP-протоколы (POP3, IMAP) для доступа к почтовому ящику. Для возможности контролировать работоспособность системы эта информация обычно сохраняется в журналах почтовых серверов.\nСамо сообщение (в терминологии протокола SMTP — 'DATA'), которое, в свою очередь, состоит из следующих частей, разделённых пустой строкой:\nзаголовки (англ. headers) письма — в них указывается служебная информация и пометки почтовых серверов, через которые прошло письмо, пометки о приоритете, указание на адрес и имя отправителя и получателя письма, тема письма и другая информация;\nтело (англ. body) письма — в нём находится собственно сообщение письма.>>>",
            "Данные SMTP-конверта содержат в себе параметры, которые задаются одноимёнными командами:\n<<<Параметр HELO/EHLO — содержит имя (FQDN) отправляющего узла, либо адрес-литерал отправляющего узла.\nПараметр MAIL FROM — содержит e-mail отправителя. Адрес может быть произвольным (в том числе несуществующим, что допускается протоколом SMTP; однако RFC 5321 содержит рекомендацию использовать или Null Reverse-Path для специальных сообщений, или существующий e-mail[11]), но именно это значение используется для формирования уведомлений об ошибках доставки сообщений (а не значение из поля From заголовка сообщения). Этот адрес, так же, может проверяться при первичной проверке на спам[12] и в иных случаях[каких?]. При отправке сообщения обычный почтовый клиент формирует MAIL FROM из содержимого поля From.\nПараметр RCPT TO — наиболее важное содержимое конверта для доставки почты, содержит электронный адрес одного или нескольких получателей. При формировании SMTP-конверта RCPT TO может использоваться несколько раз. При отправке сообщения обычный почтовый клиент формирует список для RCPT TO из содержимого полей сообщения To, Cc и Bcc.>>>",
            "Заголовки письма описываются стандартами RFC:\n<<<RFC 2076 — Common Internet Message Headers (общепринятые стандарты заголовков сообщений), включает в себя информацию из других RFC: RFC 822, RFC 1036, RFC 1123, RFC 1327, RFC 1496, RFC 1521, RFC 1766, RFC 1806, RFC 1864, RFC 1911).\nRFC 4021 — Registration of Mail and MIME Header Fields (регистрация почты и поля заголовков MIME).>>>",
            "Часто используемые заголовки[править | править код]<<<Return-Path: (RFC 821, RFC 1123) — адрес возврата в случае неудачи, когда невозможно доставить письмо по адресу назначения. Может отличаться от MAIL FROM и заголовков From:, Sender: или Reply-To:, но обычно совпадает с MAIL FROM.\nReceived: (RFC 822, RFC 1123) — данные о прохождении письма через каждый конкретный почтовый сервер (MTA). При прохождении через несколько почтовых серверов (обычная ситуация), новые заголовки дописываются над предыдущими, в конечном итоге журнал перемещения будет записан в обратном порядке (от ближайшего к получателю узла к самому дальнему).\nMIME-Version: (RFC 1521) — версия MIME, с которым это сообщение создано. Зачастую этот заголовок создаётся раньше всех остальных, поэтому он обычно самый первый (то есть последний в списке).\nFrom: (RFC 822, RFC 1123, RFC 1036) — имя и адрес отправителя (именно в этом заголовке появляется текстовое поле с именем отправителя). Может не совпадать с return-path и даже не совпадать с заголовком SMTP MAIL FROM:.\nSender: (RFC 822, RFC 1123) — отправитель письма. Добавлено для возможности указать, что письмо от чьего-то имени (from) отправлено другой персоной (например, секретарём от имени начальника). Некоторые почтовые клиенты показывают сообщение при наличии sender и from как «сообщение от 'sender' от имени 'from'». Sender является информационным заголовком (и также может отличаться от заголовка SMTP MAIL FROM).\nTo: (RFC 822, RFC 1123) — имя и адрес получателя. Может содержаться несколько раз (если письмо адресовано нескольким получателям). На основании этого поля формируется содержимое поля SMTP RCPT TO.\nCc: (RFC 822, RFC 1123) — (от англ. carbon copy) содержит имена и адреса вторичных получателей письма, к которым направляется копия. Участвует в формировании поля SMTP RCPT TO, как и поле «To».\nBcc: (RFC 822, RFC 1123) — (от англ. blind carbon copy) содержит имена и адреса получателей письма, чьи адреса не следует показывать другим получателям. Участвует в формировании поля SMTP RCPT TO, как поля «To» и «Cc», но отсутствует в отправляемом сообщении.\nReply-To: (RFC 822, RFC 1036) — имя и адрес, куда следует адресовать ответы на это письмо. Если, например, письмо рассылается роботом, то в качестве Reply-To будет указан адрес почтового ящика, готового принять ответ на письмо.\nMessage-ID: (RFC 822, RFC 1036) — уникальный идентификатор сообщения. Состоит из адреса узла-отправителя и номера (уникального в пределах узла). Алгоритм генерации уникального номера зависит от сервера/клиента. Выглядит примерно так: AAB77AA2175ADD4BACECE2A49988705C0C93BB7B4A@example.com. Вместе с другими идентификаторами используется для поиска прохождения конкретного сообщения по журналам почтовой системы (почтовые системы фиксируют прохождение письма по его Message-ID) и для указания на письмо из других писем (используется для группировки и построения цепочек писем). Обычно создаётся почтовым клиентом (MUA) в момент составления письма.\nIn-Reply-To: (RFC 822) — указывает на Message-ID, для которого это письмо является ответом (с помощью этого почтовые клиенты могут легко выстраивать цепочку переписки — каждый новый ответ содержит Message-ID для предыдущего сообщения).\nSubject: (RFC 822, RFC 1036) — тема письма.\nDate: (RFC 822, RFC 1123, RFC 1036) — дата отправки письма.\nContent-Type: (RFC 1049, RFC 1123, RFC 1521, RFC 1766) — тип содержимого письма (HTML, RTF, Plain text) и кодировка, в которой создано письмо (см. ниже про кодировки).\nReturn-Receipt-To: (RFC 2076) — e-mail, куда почтовый сервер получателя должен отправить уведомление о доставке. В RFC 2076 упоминается в разделе «Not Internet standard», в силу этого может не поддерживаться серверами.\nDisposition-Notification-To: (RFC 3798) — e-mail, куда почтовый клиент получателя должен отправить уведомление о доставке, если это разрешит пользователь (посредством настроек и т. п.).>>>",
            "В настоящий момент существуют следующие модели коммерческого применения почтовых систем:\n<<<Домашние и корпоративные почтовые системы — функционируют на собственном или арендованном оборудовании владельца почтовой системы (обычно он же является и владельцем домена, в котором работает почтовый сервер).\nУслуга приёма/отправки электронной почты осуществляется сторонней организацией. Организация (персона) владеет доменом и самостоятельно хранит архив переписки.\nУслуги приёма/отправки и хранения почты осуществляет сторонняя организация на своих мощностях. Заказчик получает доступ к системе исполнителя для отправки писем и для доступа к архиву писем. Почтовый домен при этом находится в собственности заказчика.\nПриём, отправка, хранение писем осуществляет исполнитель, почтовый домен принадлежит исполнителю. Большинство подобных сервисов бесплатны и работают за счёт показа рекламы пользователю или являются бесплатным дополнением к другим сервисам исполнителя (подробнее см.: Почтовый сервис#Бесплатные).>>>",
            "Почтовая система позволяет организовать сложные системы, основанные на пересылке почты от одного ко многим абонентам, это:\n<<<Почтовые рассылки — письмо от одного адреса с одинаковым (или меняющимся по шаблону) содержимым, рассылаемое подписчикам рассылки. Технически может быть организовано как отправка множества писем (используется при шаблонных письмах) или как отправка письма со множеством получателей (в полях TO, CC, BCC). Для управления крупными почтовыми рассылками (более 10—50 абонентов) используются специализированные программы (например, mailman). Правильно организованная почтовая рассылка должна контролировать возврат писем (сообщения о невозможности доставить письмо) с исключением недоступных адресатов из списка рассылки, позволять подписчикам отписываться от рассылок. Нежелательные почтовые рассылки называются спамом и существенно осложняют функционирование почтовых систем.\nГруппы переписки — специализированный тип почтовой рассылки, в которой письмо на адрес группы (обычный почтовый адрес, обработкой почты которого занимается специализированная программа) рассылается всем участникам группы. Является аналогом новостных конференций, эхоконференций. Правильно настроенная почтовая рассылка должна контролировать циклы (два робота рассылок, подписанные друг на друга способны создать бесконечный цикл пересылки писем), ограничивать список участников рассылки, имеющих право на помещение сообщения, выполнять прочие требования к почтовой рассылке.>>>",
            "Примеры программ управления рассылками:\n<<<mailman;\nSympa;\nMajordomo.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Электронная_почта"
    },
    {
        "task": [
            "Правовая охрана компьютерных программ возможна по двум разным правовым режимам:\n<<<Режимом авторского права,\nРежимом патентного права.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Проприетарное_программное_обеспечение"
    },
    {
        "task": [
            "Ниже перечислены некоторые отличия синтаксических конструкций Delphi от семейства C-подобных языков (C/C++/Java/C#):\n<<<В Delphi формальное начало любой программы чётко отличается от других участков кода и должно располагаться в определённом, единственном в рамках проекта, исходном файле с расширением dpr (тогда как другие файлы исходных текстов программы имеют расширение pas).>>>",
            "В С-подобных языках программирования в качестве входа обычно используется глобальная функция или статический метод с именем main и определённым списком параметров, причём такая функция может быть расположена в любом из файлов исходного текста проекта.<<<В Delphi идентификаторы типов, переменных, а равно и ключевые слова читаются независимо от регистра: например, идентификатор SomeVar полностью эквивалентен somevar. Регистро-зависимые идентификаторы в начале компьютерной эпохи ускоряли процесс компиляции, и кроме того, позволяли использовать очень короткие имена, порой отличающиеся лишь регистром.>>>",
            "И хотя к настоящему времени обе эти практики − использование нескольких идентификаторов, различающихся лишь регистром, равно как и чрезмерная их лаконичность, осуждены и не рекомендованы к применению, практически все унаследованные от С языки − C++, Java, C# − являются регистро-зависимыми, что, с одной стороны, требует достаточно большой внимательности к объявлению и использованию идентификаторов, а с другой — принуждает писать более строгий код, когда каждая переменная имеет чётко определённое имя (вариации регистра могут вызвать путаницу и ошибки).<<<В Delphi в исходных файлах .pas (которые, как правило, и содержат основное тело программы) на уровне языковых средств введено строгое разделение на интерфейсный раздел и раздел реализации. В интерфейсной части содержатся лишь объявления типов и методов, тогда как код реализации в интерфейсной части не допускается на уровне компиляции. Подобное разделение свойственно также языкам C/C++, где в рамках культуры и парадигмы программирования вводится разделение на заголовочные и собственно файлы реализации, но подобное разделение не обеспечивается на уровне языка или компилятора.>>>",
            "В C# и Java такое разделение утрачено вовсе − реализация метода, как правило, следует сразу же после его объявления. Инкапсуляция обеспечивается лишь принадлежностью метода к той или иной области видимости. Для просмотра одной только интерфейсной части модуля исходного кода используются специальные средства.<<<В Delphi метод или функция чётко определяются зарезервированными для этого ключевыми словами procedure или function, тогда как в C-подобных языках различие обуславливается ключевым словом, определяющим тип возвращаемого значения: //Delphi\nprocedure DoSomething (aParam: Integer); //не возвращает значения\nfunction Calculate (aParam1, aParam2: Integer): Integer; //возвращает целочисленный результат\n//C#\nvoid DoSomething(int aParam); // не возвращает значения\n{\n// code\n}\nint Calculate(int aParam1, aParam2); // возвращает целочисленный результат\n{\n// code\n}\n>>>",
            "Тем сложнее в C#/C++ выглядят такие конструкции, как объявление типа «указатель на метод»: //C++: объявление типа pCalc, указателя на функцию-член, принимающую два целочисленных параметра и возвращающую целочисленный результат\ntypedef int (TSomeClass::*pCalc)(int, int);\n\nВ вышеуказанном примере объявление типа отличается от объявления переменной ключевым словом typedef, имя типа, pCalc, указывается в середине выражения, в скобках. //C#: объявление типа pCalc, указателя на функцию-член, принимающую два целочисленных параметра и возвращающую целочисленный результат\npublic delegate int pCalc(int aParam1, int aParam2);\n\nВ вышеуказанном примере объявление типа отличается от объявления переменной специальным ключевым словом delegate, имя типа указывается в середине выражения. //Delphi\ntype pCalc = function(aParam1, aParam2: Integer): Integer of object;\n\nВ вышеуказанном примере объявление типа отличается от объявления переменной специальным ключевым словом type, применением знака равенства (в случае переменной используется двоеточие), имя типа идёт сразу после ключевого слова.<<<В Delphi начало и конец программного блока выделяются ключевыми словами begin и end, тогда как в C-подобных языках программирования для этих целей используются фигурные скобки: {}. Таким образом, возможно, в Delphi достигается лучшая читаемость кода для лиц с ослабленным зрением. С другой стороны, фигурные скобки могут быть более интуитивными при визуальном восприятии, выполняя функцию пиктограммы. //C#\nif (bVal) {\n//код, состоящий из нескольких инструкций\n}\nif (bVal2) /* код, состоящий из одной инструкции */;\n>>>",
            "В вышеуказанном примере фигурные скобки обозначают составную инструкцию, то есть блок инструкций. Поскольку в команде ветвления для одной инструкции допускается выражение без фигурных скобок, то для условного выражения круглые скобки обязательны. В сложных условных выражениях количество вложенных скобочных конструкций может быть велико. //Delphi\nif bVal then begin\n// код, состоящий из нескольких инструкций\nend;\nif bVal2 then (* код, состоящий из одной инструкции *);\n\nВ Delphi условное выражение всегда отделяется от следующей инструкции ключевым словом then, что избавляет от необходимости заключать условие в круглые скобки.<<<В C-подобных языках в целях подобного отделения условное выражение цикла заключается в круглые скобки: while (condition) { // цикл с \"предусловием\"\n// тело цикла\n};\ndo {\n// тело другого цикла\n} while (condition2); // конец цикла с \"постусловием\", тело выполняется хотя бы однажды\n>>>",
            "В Delphi циклы с предусловием и постусловием различаются сильнее: конец цикла с постусловием труднее принять за начало цикла с предусловием. Но порой такое различие может вызвать путаницу (необходимо помнить, что в цикле until указывается условие выхода). while condition do begin//условием продолжения цикла является истинность выражения, следующего за словом while, как C/C#\n//тело цикла\nend;\nrepeat//начало цикла с постусловием\n//тело цикла\nuntil not condition2;//истинность выражения, следующего за словом until - это условие ВЫХОДА из цикла, в отличие от C/C#\n<<<В Delphi операция присвоения значения переменной обозначается при помощи двоеточия со знаком равенства, :=, что является заимствованием из математической нотации. Знак равенства без двоеточия — это оператор проверки равенства, возвращающий булево значение. Напротив, в C-подобных языках оператором присваивания является одинарный знак равенства, а оператором проверки равенства — двойной, ==. В силу того, что в этих языках программирования присваивание является лишь выражением, возвращающим значение переменной слева, не так уж редки следующие неочевидные для новичка ошибки: // C++\nint iVal = 12;\nwhile (iVal = 1) {\n// по замыслу программиста, данное тело цикла не должно выполняться, если на входе iVal имеет значение, отличное от единицы\n// однако, в результате ошибочной замены знака == на одиночный =, iVal будет присвоено значение 1, а цикл окажется бесконечным\n}\n>>>",
            "В Delphi подобная ошибка невозможна хотя бы уже потому, что присваивание в этом языке — операция, не возвращающая значения.<<<В Delphi объектное и объектно-ориентированное программирование хоть и поощряется, однако не является единственно возможным. Так, допустимо (в отличие от C#) объявление и использование глобальных или статических функций и переменных.>>>",
            "Несмотря на такую акцентированную на объектность парадигму, в C# отсутствует понятие виртуального конструктора, то есть создания экземпляра класса, точный тип которого на этапе компиляции неизвестен, а известен лишь базовый класс этого экземпляра. Отчасти этот недостаток может быть скомпенсирован посредством интерфейсов или reflection, однако подобные решения не являются стандартными для языка. type\n  TAnimal = class abstract\n  protected\n    FPersonalName: string;\n  public\n    constructor Create(const PersonalName: string); virtual; abstract;\n    function GetSpecieName: string; virtual; abstract; // возвращает биологический вид животного\n    property Name: string read FPersonalName;\n  end;\n\n  TAnimalClass = class of TAnimal; // метакласс, могущий ссылаться на любой класс, унаследованный от TAnimal\n\n  ...\n\nfunction CreateAnAnimal(const FactAnimalClass: TAnimalClass; const Name: string): TAnimal;\nbegin\n  Result := FactAnimalClass.Create(Name); // функция не знает, животное какого именно вида будет создано, хотя \"кличка\" известна. Конкретная реализация вида скрыта.\nend;\n\nКроме того, в отличие от C# и C++, где вызов конструктора базового класса непременно осуществляется ещё до входа в тело конструктора унаследованного класса, в Delphi этот вызов делается явно. Таким образом, его можно отложить или вовсе опустить в специальных целях. Очевидно, в отличие от C#, возможен контроль над исключениями в базовых конструкторах.<<<Для наиболее гибкой и эффективной реализации объектно-ориентированного подхода в Delphi введены два механизма полиморфного вызова: классический виртуальный, а также динамический: если в случае классического виртуального вызова адреса всех виртуальных функций будут содержаться в таблице виртуальных методов каждого класса, то в случае с динамическим вызовом указатель на метод существует лишь в таблице того класса, в котором он был задан или перекрыт.>>>",
            "Подобная оптимизация имеет своей целью уменьшение размера статической памяти, занимаемой под таблицы методов. Экономия может быть существенна для длинных иерархий классов с очень большим количеством виртуальных методов. В C-подобных языках динамические полиморфные вызовы не применяются.<<<В отличие от C#, язык Delphi допускает создание (инициализацию) экземпляра класса, содержащего абстрактные (не имеющие реализации) методы. Чтобы исключить возможность создания экземпляра класса, не достаточно объявить в нём абстрактные методы. Необходимо использовать в описании класса ключевое слово abstract. Таким образом, в настоящее время классы, имеющие абстрактные методы (в отличие от ранних реализаций Delphi), не считаются абстрактными. При помощи механизма виртуальных функций код базового класса, имеющего абстрактные методы, определяет на этапе выполнения, перекрыт ли в фактическом экземпляре класса конкретный абстрактный метод, и в зависимости от этого или вызывает перекрытый метод, или создаёт исключение EAbstractError.>>>",
            "Также Delphi допускает перекрытие любого конкретного виртуального метода базового класса абстрактным в классе-потомке: type\nTMyBase = class(TObject)\n  function A: integer; virtual; // метод A имеет реализованное тело в разделе implementation\nend;\n\nTMyDerived = class(TMyBase)\n  function A: integer; override; abstract; // метод перекрыт как абстрактный, тела не имеет,\n// и при этом перекрывает (скрывает) реализованный в базовом классе\nend;\n\nprocedure Test;\nvar m: TMyBase;\nbegin\n  m := TMyDerived.Create; // мы создали класс с абстрактным методом\n  m.A; // вызов A полиморфный, и мы получаем исключение типа EAbstractError, пытаясь выполнить абстрактный метод\nend;\n<<<В отличие от C++, язык C# обладает унаследованной от Delphi концепцией свойств класса: псевдополей, которые, в ряде случаев, могут более интуитивно, по сравнению с методами, отражать, а также изменять состояние объекта. public class Date{//данный пример взят с [http://msdn.microsoft.com/en-us/library/w86s7x04.aspx msdn]\n    private int month = 7;  // Backing store\n\n    public int Month{\n        get{ return month; }\n        set{\n            if ((value > 0) && (value < 13)) {\n                month = value;\n            }\n        }//set\n    }//prop\n}//class\n>>>",
            "Как Delphi, так и C# допускают использование индексируемых свойств: в этом случае синтаксис доступа к такому свойству аналогичен доступу к элементу массива. Однако, если в Delphi число индексируемых свойств, равно как и число индексаторов, может быть произвольным, в C# индексатор применим лишь к специальному свойству по умолчанию. Кроме того, в Delphi свойство по умолчанию не только может быть индексируемым, также оно может быть перегружено по типу индексатора: TMyObject = class\nprotected\n  function getStr(Name: string): string; virtual;\n  function getStrByIx(Index: Integer): string; virtual;\n  function getBy2Indicies(X, Y: Integer): string; virtual;\npublic\n  property Value[Name: string]: string  read getStr; default;\n  property Value[Index: Integer]: string read getStrByIx; default;\n  property Value[X, Y: Integer]: string read getBy2Indicies; default; //количество\nend;\n<<<Языки Java и C# были изначально спроектированы для создания программ, работающих в управляемой среде, где управлением временем жизни объектов занимается эта среда: так что ручное управление памятью не допускается. Удобство и безопасность этого подхода отрицательно влияют на производительность.>>>",
            "Delphi оказал огромное влияние на создание концепции языка C# для платформы .NET[источник не указан 4387 дней]. Многие его элементы и концептуальные решения вошли в состав С#. Одной из причин называют переход Андерса Хейлсберга, одного из ведущих разработчиков Дельфи, из компании Borland Ltd. в Microsoft Corp.\n<<<Версия 8 способна генерировать байт-код исключительно для платформы .NET. Это первая среда, ориентированная на разработку многоязычных приложений (лишь для платформы .NET);\nПоследующие версии (обозначаемые годами выхода, а не порядковыми номерами, как это было ранее) могут создавать как приложения Win32, так и байт-код для платформы .NET.>>>",
            "25 августа 2008 года компания Embarcadero, новый хозяин CodeGear, опубликовала пресс-релиз на Delphi for Win32 2009[10]. Версия привнесла множество нововведений в язык, как то[11]:\n<<<По умолчанию полная поддержка Юникода во всех частях языка, VCL и RTL; замена обращений ко всем функциям Windows API на юникодные аналоги (то есть MessageBox вызывает MessageBoxW, а не MessageBoxA).\nОбобщённые типы, они же generics.\nАнонимные методы.\nНовая директива компилятора $POINTERMATH [ON|OFF].\nФункция Exit теперь может принимать параметры в соответствии с типом функции.>>>",
            "Компиляторы<<<Embarcadero Delphi (ранее наз. CodeGear Delphi и Borland Delphi) — вероятно, наиболее известный компилятор, который является последователем Borland Pascal и Turbo Pascal. Используется Win16 (Delphi 1), Win32 (Delphi 2 и позже), Win64 (Delphi 16 (XE2) и позже), а также .NET 1.x, 2.0 (Delphi 8, Delphi 2005-Delphi 2007). Поддержка .NET впоследствии выделена в отдельный продукт, известный как (несовместимый с Delphi) Oxygene.\nFree Pascal (FPC) — свободный компилятор Object Pascal, который поддерживает различные диалекты Паскаля, включая Turbo Pascal (с некоторыми оговорками), Delphi и собственные диалекты. На текущий момент FPC может генерировать код для x86, x86-64, PowerPC, SPARC и процессоров ARM, а также для различных операционных систем, в том числе для Microsoft Windows, Linux, FreeBSD, Mac OS. Существует несколько сред разработки программного обеспечения для FPC (одна из самых известных представителей — Lazarus).\nGNU Pascal (отдельно разработанная версия из GCC). Не ставит целью продолжение серии диалектов Delphi как составляющей Паскаля, но тем не менее содержит режим совместимости с Borland Pascal, и очень медленно приспосабливает компоненты языка Delphi. Не подходит для компиляции больших проектов, содержащих код Delphi, но его поддерживает большинство операционных систем и архитектур.\nOxygene (ранее известен как Chrome) — компилятор ограниченно совместимого с Delphi языка, который интегрирован в Microsoft Visual Studio. Также доступен в виде компилятора с вольной командной строкой CLI. Использует .NET и моноплатформы. Прежде продавался под маркой Embarcadero Delphi Prism.\nMIDletPascal — язык программирования с Delphi-подобным синтаксисом и одноимённый компилятор, который преобразует исходный код в компактный и быстрый байт-код Java.\nPocketStudio — основанная на Паскале IDE для Palm OS.\nVirtual Pascal — Бесплатный компилятор и текстовая IDE для Win32, OS/2 и Linux. На тот момент очень быстрый и весьма совместимый (частично поддерживаются конструкции Delphi 5). Внешне очень похож на текстовую среду Borland Pascal 7, хотя отсутствует совместимая с ним графика, например. Однако разработка окончилась в 2004 году, а исходники открыты не были. С тех пор FPC ушёл намного вперёд и в целом для программирования лучше он. Тем не менее VP остаётся очень неплохим вариантом быстрой замены ещё более устаревших версий Borland Pascal для школы/института, учитывая родную работу в Win32 без проблем с русскими кодировками.>>>",
            "Расширения файлов<<<.pas — исходный код модуля (pascal)\n.dpr — исходный код проекта (pascal)\n.dproj — исходный код проекта (xml)\n.dproj.local — исходный код проекта (xml)\n.dfm — исходный код формы\n.dpk — исходный код проекта пакета\n.bpl — скомпилированный пакет\n.dcu — скомпилированный модуль\n.exe — скомпилированное приложение\n.res — ресурсы\n.dsk — привязки к файлам\n.identcache — кэшированные привязки к файлам>>>",
            "Среди многих распространённых программных продуктов, написанных на Delphi, можно найти[12]:\n<<<Продукция Embarcadero: Embarcadero Delphi, Embarcadero C++ Builder, Borland JBuilder 1 и 2 версии.\nАдминистрирование и разработка баз данных: MySQL Tools, IBExpert, Open Server.\nИнженерное программное обеспечение: Altium Designer, SprutCAM.\nФайловые менеджеры: Total Commander, Frigate, ViewFD, FreeCommander.\nПросмотрщики графики: FastStone Image Viewer, FuturixImager, drComRead.\nРедакторы графики: IcoFX.\nВидео- и аудиопроигрыватели: Light Alloy, The KMPlayer, AIMP, X-Amp, Nata Player.\nПрограммы мгновенного обмена сообщениями: QIP 2012, R&Q, The Bat!, PopTray, FeedDemon, MyChat, Skype (до покупки Microsoft).\nКлиенты файлообменных сетей: Shareman, Ares Galaxy.\nСоздание музыки: FL Studio, Guitar Pro (до версии 6.0).\nРазработка программного обеспечения: Dev-C++, DUnit, Game Maker, Inno Setup, PyScripter, PE Explorer.\nВеб-разработка: Macromedia HomeSite, PHPEdit.\nТекстовые редакторы: BirEdit, Notepad GNU, Bred (до версии Bred 3), PSPad.\nУчёт и налогообложение: Меркурий-ERP, «Бюджет 21», «Парус», AVARDA (до версии 6.x включительно), r_keeper, Traider Alpha.\nСистема электронной очереди «МАКСИМА»[13].\nПрограммы хранения и обработки медицинских изображений Makhaon Worsktation, Makhaon Storage\nПрограммы для создания анимаций: Pivot Stickfigure Animator.\nПрограммы для сжатия данных: ALZip, PowerArchiver, IZArc.\nНахождение и уничтожение шпионского ПО и вредоносных программ: Spybot — Search & Destroy.\nКомпьютерные игры: Age of Wonders, «Космические рейнджеры», Космические рейнджеры HD: Революция, Venom. Codename: Outbreak, Space Empires V, «Правда о девятой роте».\nЛаунчер портативных программ: PortableApps.\nДефрагментация диска: SmartDefrag.\nРазличные системные утилиты: TreeSize.\nТерминал для работы с COM-портом: TerminalTMB.>>>",
            "Некоторые изменения языка, осуществлённые компанией Embarcadero (разработчиком языка) в так называемых NextGen-компиляторах языка Delphi, намеренно нарушили совместимость с накопленной базой исходного кода. Эти изменения были отрицательно восприняты широким кругом опытных Delphi-разработчиков, поскольку, хотя и приближали язык к парадигме языков .NET, но сломали традицию высокой обратной совместимости и существенно затруднили перенос имеющегося исходного кода в программное обеспечение для мобильных платформ.\nУказанные ниже изменения поставили под сомнение самую парадигму мультиплатформенной разработки на базе единого исходного кода, рекламируемую Embarcadero.\n<<<введение индексации строк по нулевой базе>>>",
            "Со времён Pascal исторически сложилось, что встроенный строковый тип индексировался с базой в единицу: «нулевой» элемент строки возвращал длину строки. По мере введения новых («длинных» и «юникодных») строковых типов данный порядок индексации сохранялся, обеспечивая почти бесшовный перенос кодовой базы на обновлённые версии языка. Однако со введением nextgen-компиляции парадигма изменилась: в новых компиляторах строки стали индексироваться по нулевой базе, как и в семействе С-подобных языков (C++, C#, Java), при этом в «классических» компиляторах для Windows и Mac OS парадигма единичной индексации была сохранена.\n<<<введение безальтернативного механизма подсчёта ссылок для экземпляров классов>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Delphi_(язык_программирования)"
    },
    {
        "task": [
            "На телетайпе интерфейс командной строки был единственным возможным[источник не указан 506 дней]. На видеотерминалах интерфейс командной строки может применяться по следующим причинам[источник не указан 1213 дней]:\n<<<Более скромные требования к ресурсам по сравнению с другими видами интерфейсов.\nПри большом наборе возможных команд опытные пользователи могут работать с приложением быстрее, чем с системой меню.\nИнтерфейс командной строки может быть естественно расширен до пакетного интерфейса, а команды стать частью сценарного языка. Выполнение сценария (скрипта) подобно вводу команд по очереди в командную строку. Примеры — .bat-файлы в DOS и Windows, shell-скрипты в Unix-системах.>>>",
            "Параметры команд могут иметь самый разный формат. В основном применяются следующие правила:\n<<<параметры разделяются пробелами (и отделяются от названия команды пробелом)\nпараметры, содержащие пробелы, обрамляются кавычками-апострофами (') или двойными кавычками (\")\nесли параметр используется для обозначения включения какой-либо опции, выключенной по умолчанию, он начинается с косой черты (/) или дефиса (-)\nесли параметр используется для включения/выключения какой-либо опции, он начинается (или заканчивается) знаком плюс или минус (для включения и выключения соответственно)\nесли параметр указывает действие из группы действий, назначенных команде, он не начинается со специальных символов\nесли параметр указывает объект, к которому применяется действие команды, он не начинается со специальных символов\nесли параметр указывает дополнительный параметр какой-либо опции, то он имеет формат /опция:дополнительный_параметр (вместо косой черты также может употребляться дефис)>>>",
            "/map dm1 /skill:2<<</ — символ начала команды\nmap — название команды (переход на другой уровень)\ndm1 — обязательный параметр (название уровня)\n/skill:2 — дополнительный параметр (задание уровня сложности)>>>",
            "Основные сферы применения интерфейса командной строки:\n<<<операционные системы\nчаты\nкомпьютерные игры[1]>>>",
            "Консоль Asterisk<<<САПР\nAutoCAD\nтекстовые редакторы\nVim\nБраузеры\nVimperator — расширение для браузера Firefox, позволяющее управлять им, как редактором Vim\nразличные клиенты IRC\nAsterisk>>>",
            "Достоинства<<<Легкость автоматизации. Shell script в UNIX-подобных системах является полноценным интерпретируемым языком программирования и способен автоматизировать любую системную задачу. В Windows присутствует их примитивный аналог — пакетные файлы, и более мощный аналог — powershell. По сути, это — простейшая программируемость. С графическим интерфейсом без поддержки программой командной строки это сделать почти невозможно.\nМожно управлять программами, не имеющими графического интерфейса (например, выделенным сервером).\nЛюбую команду можно вызвать небольшим количеством нажатий.\nМожно обращаться к командам для разных исполнимых файлов почти мгновенно и непосредственно, тогда как в GUI приходится сначала запускать, а затем закрывать графический интерфейс для каждого исполнимого файла.\nПросмотрев содержимое консоли, можно повторно увидеть промелькнувшее сообщение, которое вы не успели прочитать.\nМожно пользоваться удаленным компьютером с любого устройства подключаемого к Интернету или локальной сети (ПК, субноутбук, КПК, сотовый телефон, портативная игровая консоль) без особых затрат трафика (единицы килобайт за сеанс).\nОтсутствие деталей интерфейса, таких как пусковые панели и рамки окон, что при равных разрешениях позволяет вместить значительно больше текста на страницу.\nВозможность работы через стандартизированные линии передачи данных, такие как RXD, TXD в RS232, на небольшой скорости (наиболее часто 9600 бод), делает этот интерфейс основным, а порой и единственно возможным, для встраиваемых систем, систем с небольшой вычислительной мощностью, иных недорогих и экономичных устройств. Принтеры, жёсткие диски, роутеры, датчики пожарной охраны — лишь малая часть примеров такого оборудования.\nЛегче отладка сообществом. Если пользователь столкнулся с проблемой или ошибкой, на интернет-форуме достаточно оставить копию диалога пользователя и ЭВМ. Такой листинг имеет однозначное толкование (в том числе по порядку ввода и появления сообщений), в отличие от графического интерфейса, когда нужно не только отправить копию экрана, и порой не одну (что уже само по себе может быть проблемно), но также и входящие данные (какую «галочку» и где нажать, и тому подобное). К тому же, копия экрана одной и той же программы может существовать на разных языках, что усложнит отладку международным сообществом.\nПоскольку данный стандарт существует десятки лет без особых изменений, можно быть уверенным, что не только личный опыт, но и руководства, опыт сообщества, и другие наработки по работе с командной строкой, будут востребованы и полезны ещё длительное время, не придётся переучиваться и тратить время на адаптацию к новым возможностям либо искать замену внезапно исключённым функциям, работа останется доведённой до автоматизма - что особенно важно в профессиональной среде.[3]>>>",
            "Недостатки<<<Интерфейс командной строки не является «дружелюбным» для пользователей, которые начали знакомство с компьютером с графического режима, из-за почти отсутствующих возможностей интуитивного обнаружения (англ. discoverabililty).[4]\nНеобходимость изучения синтаксиса команд и запоминания сокращений, осложняющаяся тем, что каждая команда может иметь свои собственные обозначения.[4]\nБез автодополнения, ввод длинных и содержащих спецсимволы параметров с клавиатуры может быть затруднительным.\nОтсутствие «аналогового» ввода. Например подбор громкости с помощью озвученного ползунка позволяет выставить подходящую громкость быстрее, чем командой вроде aumix -v 90. (Однако, озвученный ползунок вполне может быть псевдографическим, что реализовано в большинстве консольных плееров).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Интерфейс_командной_строки"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Микропроцессор"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Интегрированная_среда_разработки"
    },
    {
        "task": [
            "Определения из нормативных документов, в том числе стандартов:\n<<<База данных — представленная в объективной форме совокупность самостоятельных материалов (статей, расчётов, нормативных актов, судебных решений и иных подобных материалов), систематизированных таким образом, чтобы эти материалы могли быть найдены и обработаны с помощью электронной вычислительной машины (ЭВМ)[5]\nБаза данных — совокупность данных, организованных в соответствии с концептуальной структурой, описывающей характеристики этих данных и взаимоотношения между ними, которая поддерживает одну или более областей применения[6].>>>",
            "Определения из авторитетных монографий:\n<<<База данных — организованная в соответствии с определёнными правилами и поддерживаемая в памяти компьютера совокупность данных, характеризующая актуальное состояние некоторой предметной области и используемая для удовлетворения информационных потребностей пользователей[7].\nБаза данных — некоторый набор перманентных (постоянно хранимых) данных, используемых прикладными программными системами какого-либо предприятия[8].\nБаза данных — совместно используемый набор логически связанных данных (и описание этих данных), предназначенный для удовлетворения информационных потребностей организации[9].>>>",
            "В определениях наиболее часто (явно или неявно) присутствуют следующие отличительные признаки[10]:\n<<<БД хранится и обрабатывается в вычислительной системе.Таким образом, любые внекомпьютерные хранилища информации (архивы, библиотеки, картотеки и т. п.) базами данных не являются.\nДанные в БД логически структурированы (систематизированы) с целью обеспечения возможности их эффективного поиска и обработки в вычислительной системе.Структурированность подразумевает явное выделение составных частей (элементов), связей между ними, а также типизацию элементов и связей, при которой с типом элемента (связи) соотносится определённая семантика и допустимые операции[11].\nБД включает схему, или метаданные, описывающие логическую структуру БД в формальном виде (в соответствии с некоторой метамоделью).В соответствии с ГОСТ Р ИСО МЭК ТО 10032-2007, «постоянные данные в среде базы данных включают в себя схему и базу данных. Схема включает в себя описания содержания, структуры и ограничений целостности, используемые для создания и поддержки базы данных. База данных включает в себя набор постоянных данных, определённых с помощью схемы. Система управления данными использует определения данных в схеме для обеспечения доступа и управления доступом к данным в базе данных»[1].>>>",
            "В классификацию по модели данных обычно включают:\n<<<иерархические;\nобъектные или объектно-ориентированные;\nобъектно-реляционные;\nреляционные;\nсетевые;\nфункциональные.>>>",
            "Также базы данных могут классифицироваться по содержимому, например, могут быть географическими, историческими, научными, мультимедийными. Для некоторых форм содержания строятся специализированные СУБД, либо добавляются специализированные возможности в СУБД общего назначения, среди таковых баз данных:\n<<<пространственные (англ. spatial database): базы с пространственными свойствами сущностей предметной области, используются в геоинформационных системах;\nвременны́е (темпоральные, англ. temporal database): поддерживают какой-либо аспект времени, не считая времени, определяемого пользователем.>>>",
            "По степени распределённости базы данных подразделяются на следующие классы:\n<<<централизованные (сосредоточенные; англ. centralized database) — полностью поддерживаемые на одном компьютере\nраспределённые (англ. distributed database), составные части которых размещаются в различных узлах компьютерной сети в соответствии с каким-либо критерием.>>>",
            "Среди распределённых баз данных выделяют:\n<<<сегментированные: разделённые на независимые сегменты, каждый из которых управляется отдельным экземпляром сервера базы данных, размещаемым, как правило, на отдельном вычислительном узле;\nтиражированные (реплицированные; англ. replicated database): одни и те же данные разнесены под управление различных экземпляров СУБД;\nнеоднородные (англ. heterogeneous distributed database): фрагменты распределённой базы в разных узлах сети поддерживаются средствами более одной СУБД.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/База_данных"
    },
    {
        "task": [
            "где:\n<<<\n\n\n\nn\n\n\n{\\displaystyle n}\n\n — количество цифр (знаков) в числе,\n\n\n\n\n\na\n\nk\n\n\n\n\n{\\displaystyle a_{k}}\n\n — значения цифр из множества {0,1},\n\n\n\n\nk\n\n\n{\\displaystyle k}\n\n — порядковый номер цифры.>>>",
            "где:\n<<<\n\n\n\nm\n\n\n{\\displaystyle m}\n\n — количество цифр дробной части числа,\n\n\n\n\n\na\n\nk\n\n\n\n\n{\\displaystyle a_{k}}\n\n — значения цифр из множества \n\n\n\n{\n0\n,\n1\n}\n\n\n{\\displaystyle \\{0,1\\}}\n\n.>>>",
            "Если в исходном числе есть целая часть, то она преобразуется отдельно от дробной. Перевод дробного числа из десятичной системы счисления в двоичную осуществляется по следующему алгоритму:\n<<<Дробь умножается на основание двоичной системы счисления (2);\nВ полученном произведении выделяется целая часть, которая принимается в качестве старшего разряда числа в двоичной системе счисления;\nАлгоритм завершается, если дробная часть полученного произведения равна нулю или если достигнута требуемая точность вычислений. В противном случае вычисления продолжаются над дробной частью произведения.>>>",
            "Двоичная система используется в цифровых устройствах, поскольку является наиболее простой и соответствует требованиям:\n<<<Чем меньше значений существует в системе, тем проще изготовить отдельные элементы, оперирующие этими значениями. В частности, две цифры двоичной системы счисления могут быть легко представлены многими физическими явлениями: есть ток (ток больше пороговой величины) — нет тока (ток меньше пороговой величины), индукция магнитного поля больше пороговой величины или нет (индукция магнитного поля меньше пороговой величины) и т. д.\nЧем меньше количество состояний у элемента, тем выше помехоустойчивость и тем быстрее он может работать. Например, чтобы закодировать три состояния через величину напряжения, тока или индукции магнитного поля, потребуется ввести два пороговых значения и два компаратора,>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Двоичная_система_счисления"
    },
    {
        "task": [
            "Возможны две физические (в частности электронные) реализации бита (одного двоичного разряда):\n<<<однофазный («однопроводный») бит (двоичный разряд). Используется один выход двоичного триггера. Нулевой уровень обозначает либо сигнал логического «0», либо неисправность схемы. Высокий уровень обозначает либо сигнал логической «1», либо исправность схемы. Дешевле двухфазной реализации, но менее надёжен;\nдвухфазный (парафазный, «двухпроводный») бит (двоичный разряд). Используются оба выхода двоичного триггера. При исправной схеме один из двух уровней высокий, другой — низкий. Неисправность схемы опознаётся либо высоким уровнем на обоих проводах (на обеих фазах), либо низким уровнем на обоих проводах (на обеих фазах). Дороже однофазной реализации, но более надёжен.>>>",
            "В международном стандарте МЭК (IEC) 60027-2 2005 года[6] для применения в электротехнической и электронной областях рекомендуются обозначения:\n<<<«bit» для обозначения бита;\n«o» или «B» для обозначения октета или байта. «о» — единственное указанное обозначение во французском языке.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Бит"
    },
    {
        "task": [
            "Монолитное ядро предоставляет богатый набор абстракций оборудования. Все части монолитного ядра работают в одном адресном пространстве. Это такая схема операционной системы, при которой все компоненты её ядра являются составными частями одной программы, используют общие структуры данных и взаимодействуют друг с другом путём непосредственного вызова процедур. Монолитное ядро — старейший способ организации операционных систем. Примером систем с монолитным ядром является большинство UNIX-систем.\n<<<Достоинства: Скорость работы, упрощённая разработка модулей.\nНедостатки: Поскольку всё ядро работает в одном адресном пространстве, сбой в одном из компонентов может нарушить работоспособность всей системы.>>>",
            "Микроядро предоставляет только элементарные функции управления процессами и минимальный набор абстракций для работы с оборудованием. Бо́льшая часть работы осуществляется с помощью специальных пользовательских процессов, называемых сервисами. Решающим критерием «микроядерности» является размещение всех или почти всех драйверов и модулей в сервисных процессах, иногда с явной невозможностью загрузки любых модулей расширения в собственно микроядро, а также разработки таких расширений. Примером системы с микроядром является Symbian OS.\n<<<Достоинства: Устойчивость к сбоям оборудования, ошибкам в компонентах системы. Основное достоинство микроядерной архитектуры — высокая степень модульности ядра операционной системы. Это существенно упрощает добавление в него новых компонентов. В микроядерной операционной системе можно, не прерывая её работы, загружать и выгружать новые драйверы, файловые системы и т. д. Существенно упрощается процесс отладки компонентов ядра, так как новая версия драйвера может загружаться без перезапуска всей операционной системы. Компоненты ядра операционной системы ничем принципиально не отличаются от пользовательских программ, поэтому для их отладки можно применять обычные средства. Микроядерная архитектура повышает надежность системы, поскольку ошибка на уровне непривилегированной программы менее опасна, чем отказ на уровне режима ядра.\nНедостатки: Передача данных между процессами требует накладных расходов.>>>",
            "Классические микроядра предоставляют лишь очень небольшой набор низкоуровневых примитивов, или системных вызовов, реализующих базовые сервисы операционной системы.\n<<<Сервисные процессы (в принятой в семействе UNIX терминологии — «демоны») активно используются в самых различных ОС для задач типа запуска программ по расписанию (UNIX и Windows NT), ведения журналов событий (UNIX и Windows NT), централизованной проверки паролей и хранения пароля текущего интерактивного пользователя в специально ограниченной области памяти (Windows NT). Тем не менее, не следует считать ОС микроядерными только из-за использований такой архитектуры.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Ядро_операционной_системы"
    },
    {
        "task": [
            "Суперкомпьютеры используются в сферах:\n<<<где для решения задачи применяется численное моделирование, сопряженное с очень большим объёмом сложных вычислений;\nгде требуется большой объём сложных вычислений, обработка большого количества данных в реальном времени, или решение задачи может быть найдено простым перебором множества значений множества исходных параметров (см. Метод Монте-Карло).>>>",
            "Совершенствование методов численного моделирования происходило одновременно с совершенствованием вычислительных машин. Чем сложнее были задачи, тем выше были требования к создаваемым машинам. Чем быстрее были машины, тем сложнее были задачи, которые на них можно было решать. Поначалу суперкомпьютеры применялись почти исключительно для оборонных задач: расчёты по ядерному и термоядерному оружию, ядерным реакторам, проектированию подводных кораблей. Потом, по мере совершенствования математического аппарата численного моделирования, развития знаний в других сферах науки — суперкомпьютеры стали применяться и в мирных расчётах и расчётах двойного назначения, создавая новые научные дисциплины, как то:\n<<<численный прогноз погоды,\nвычислительная биология и медицина,\nвычислительная химия,\nвычислительная гидродинамика,\nвычислительная лингвистика и проч., — где достижения информатики сливались с достижениями прикладной науки.>>>",
            "Ниже приведён неполный список областей применения суперкомпьютеров:\n<<<Математические проблемы:\nКриптография\nСтатистика>>>",
            "Математические проблемы:\nКриптография\nСтатистика<<<Физика высоких энергий:\nЯдерная физика, физика плазмы, анализ данных экспериментов, проведённых на ускорителях микрочастиц;\nразработка и совершенствование атомных и термоядерных взрывных устройств, управление ядерным арсеналом, моделирование ядерных взрывов;\nмоделирование жизненного цикла ядерных топливных элементов, проекты ядерных и термоядерных реакторов.>>>",
            "Физика высоких энергий:\nЯдерная физика, физика плазмы, анализ данных экспериментов, проведённых на ускорителях микрочастиц;\nразработка и совершенствование атомных и термоядерных взрывных устройств, управление ядерным арсеналом, моделирование ядерных взрывов;\nмоделирование жизненного цикла ядерных топливных элементов, проекты ядерных и термоядерных реакторов.<<<Наука о Земле:\nпрогноз погоды, состояния морей и океанов;\nпрогноз эволюции климата и её последствий;\nисследование процессов, происходящих в земной коре, для предсказания землетрясений и извержений вулканов;\nанализ данных геологической разведки для поиска и оценки нефтяных и газовых месторождений, моделирование процесса выработки месторождений;\nмоделирование растекания рек во время паводка, растекания нефти во время аварий;>>>",
            "Наука о Земле:\nпрогноз погоды, состояния морей и океанов;\nпрогноз эволюции климата и её последствий;\nисследование процессов, происходящих в земной коре, для предсказания землетрясений и извержений вулканов;\nанализ данных геологической разведки для поиска и оценки нефтяных и газовых месторождений, моделирование процесса выработки месторождений;\nмоделирование растекания рек во время паводка, растекания нефти во время аварий;<<<Вычислительная биология: фолдинг белка, расшифровка ДНК;>>>",
            "Вычислительная биология: фолдинг белка, расшифровка ДНК;<<<Вычислительная химия и медицина: изучение строения вещества и природы химической связи как в изолированных молекулах, так и в конденсированном состоянии, поиск и создание новых катализаторов и лекарств.>>>",
            "Вычислительная химия и медицина: изучение строения вещества и природы химической связи как в изолированных молекулах, так и в конденсированном состоянии, поиск и создание новых катализаторов и лекарств.<<<Физика:\nгазодинамика: газотурбинные двигатели, горение топлива, аэродинамические процессы для создания совершенных форм крыла и лопаток, фюзеляжей самолётов, ракет, кузовов автомобилей;\nгидродинамика: течение жидкостей по трубам, по руслам рек, обтекание корабельных корпусов;\nматериаловедение: создание новых материалов с заданными свойствами, анализ распределения динамических нагрузок в конструкциях, моделирование крэш-тестов при конструировании автомобилей;\nв качестве сервера для искусственных нейронных сетей[2][3]\nсоздание принципиально новых способов вычисления и обработки информации (Квантовый компьютер[4][5], Искусственный интеллект[6][7])>>>",
            "Первые суперкомпьютеры имели производительность порядка 1 кфлопс, то есть 1000 операций с плавающей точкой в секунду. В США компьютер, имевший производительность в 1 МФлопс (1 миллион флопсов) (CDC 6600), был создан в 1964 году. Известно, что в 1963 году в московском НИИ-37 (позже НИИ ДАР) был разработан компьютер на основе модулярной арифметики с производительностью 2,4 млн оп/с. Это был экспериментальный компьютер второго поколения (на дискретных транзисторах) Т340-А[8] (гл. конструктор Д. И. Юдицкий). Однако прямое сравнение производительности модулярных и классических («фон-неймановских») ЭВМ некорректно. Модулярная арифметика оперирует только с целыми числами. Представление вещественных чисел в модулярных ЭВМ возможно только в формате с фиксированной запятой, недостатком коего является существенное ограничение диапазона представимых чисел.\n<<<Планка в 1 миллиард флопс (1 Гигафлопс) была преодолена суперкомпьютерами NEC SX-2 в 1983 году с результатом 1.3 Гфлопс.\nВ 1996 году суперкомпьютером ASCI Red взят барьер в 1 триллион флопс (1 Тфлопс).\nРубеж 1 квадриллион флопс (1 Петафлопс) перейден в 2008 году суперкомпьютером IBM Roadrunner.\nРубеж 1 квинтиллион флопс (1 Эксафлопс) перейден в 2022 году суперкомпьютером Frontier.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Суперкомпьютер"
    },
    {
        "task": [
            "Деннис Ритчи, один из создателей Unix, выразил своё мнение, что Unix-подобные системы, такие, как Linux, являются де-факто Unix-системами. Эрик Рэймонд предложил разделить Unix-подобные системы на 3 типа:\n<<<Генетический Unix: Системы, исторически связанные с кодовой базой AT&T. Большинство, но не все коммерческие дистрибутивы Unix-систем попадают под эту категорию. Так же, как и BSD-системы, которые являются результатами работы университета Беркли в поздних 1970-х и ранних 1980-х. В некоторых из этих систем отсутствует код AT&T, но до сих пор прослеживается происхождение от разработки AT&T.\nUNIX по товарному знаку, или бренду: эти системы, в основном коммерческого характера, были определены The Open Group как соответствующие Единой спецификации UNIX, и им разрешено носить имя UNIX. Большинство этих систем — коммерческие производные кодовой базы UNIX System V в той или иной форме (например, Amiga UNIX), хотя некоторые (например, z/OS компании IBM) заслужили торговую марку через слой совместимости с POSIX, не являясь, по сути, Unix. Многие старые Unix-системы не подходят под это определение.\nUnix по функциональности: В целом, любая система, поведение которой примерно соответствует спецификации UNIX. К таким системам можно отнести Linux, Minix и BSD/OS, которые ведут себя подобно Unix-системе, но не имеют генетических связей с кодовой базой AT&T. Большинство свободных/открытых реализаций Unix, являясь генетическим Unix или нет, подпадают под ограниченное определение этой категории в связи с дороговизной сертификации The Open Group, которая стоит несколько тысяч долларов.>>>",
            "Исследовательские системы<<<Unix (разработана Bell Labs в 1970 году, идея Кена Томпсона)\nMach (от разработчиков ядер ОС в CMU; см.: NeXTSTEP)\nxv6 (учебная ОС, сделанная в MIT)\nK42 (разрабатывается в IBM)\nMISS (первая отечественная[уточнить] Unix-подобная операционная система)\nДЕМОС (советский клон Unix)\nИНМОС (Инструментальная мобильная операционная система — разработана в СССР в 1985 году в ИНЭУМ Институт электронных управляющих машин, головное КБ Минприбора).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Unix-подобная_операционная_система"
    },
    {
        "task": [
            "Хронология<<<1943 — У. Маккалок и У. Питтс формализуют понятие нейронной сети в фундаментальной статье о логическом исчислении идей и нервной активности[2]. В начале своего сотрудничества с Питтсом Н. Винер предлагает ему вакуумные лампы в качестве средства для реализации эквивалентов нейронных сетей[5].\n1948 — опубликована книга Н. Винера о кибернетике. Основной идеей стало представление сложных биологических процессов математическими моделями.\n1949 — Д. Хебб предлагает первый алгоритм обучения.\nВ 1958 Ф. Розенблатт изобретает однослойный перцептрон и демонстрирует его способность решать задачи классификации[6]. Перцептрон использовали для распознавания образов, прогнозирования погоды. К моменту изобретения перцептрона завершилось расхождение теоретических работ Маккалока с «кибернетикой» Винера; Маккалок и его последователи вышли из состава «Кибернетического клуба».\nВ 1960 году Бернард Уидроу[англ.] совместно со своим студентом Хоффом на основе дельта-правила (формулы Уидроу) разработали Адалин, который сразу начал использоваться для задач предсказания и адаптивного управления. Адалин был построен на базе созданных ими же (Уидроу — Хоффом) новых элементах — мемисторах[7][8].\nВ 1963 году в Институте проблем передачи информации АН СССР А. П. Петровым проводится исследование задач, «трудных» для перцептрона[9]. На эту работу в области моделирования ИНС в СССР опирался М. М. Бонгард в своей работе как «сравнительно небольшой переделкой алгоритма (перцептрона) исправить его недостатки»[10].\nВ 1969 году М. Минский публикует формальное доказательство ограниченности перцептрона и показывает, что он не способен решать некоторые задачи (проблема «чётности» и «один в блоке»), связанные с инвариантностью представлений.\nВ 1972 году Т. Кохонен и Дж. Андерсон[англ.] независимо предлагают новый тип нейронных сетей, способных функционировать в качестве памяти[11].\nВ 1973 году Б. В. Хакимов предлагает нелинейную модель с синапсами на основе сплайнов и внедряет её для решения задач в медицине, геологии, экологии[12].\n1974 — Пол Дж. Вербос[13] и Галушкин А. И.[14] одновременно изобретают алгоритм обратного распространения ошибки для обучения многослойных перцептронов[15].\n1975 — Фукусима[англ.] представляет когнитрон — самоорганизующуюся сеть, предназначенную для инвариантного распознавания образов, но это достигается только при помощи запоминания практически всех состояний образа.\n1982 — Дж. Хопфилд показал, что нейронная сеть с обратными связями может представлять собой систему, минимизирующую энергию (сеть Хопфилда). Кохоненом представлены модели сети, обучающейся без учителя (нейронная сеть Кохонена), решающей задачи кластеризации, визуализации данных (самоорганизующаяся карта Кохонена) и другие задачи предварительного анализа данных.\n1986 — Дэвидом И. Румельхартом, Дж. Е. Хинтоном и Рональдом Дж. Вильямсом[16], а также независимо и одновременно С. И. Барцевым и В. А. Охониным[17], переоткрыт и развит метод обратного распространения ошибки.\n2007 — Джеффри Хинтоном в университете Торонто созданы алгоритмы глубокого обучения многослойных нейронных сетей. Хинтон при обучении нижних слоёв сети использовал ограниченную машину Больцмана (RBM — Restricted Boltzmann Machine). По Хинтону необходимо использовать много примеров распознаваемых образов (например, множество лиц людей на разных фонах). После обучения получается готовое быстро работающее приложение, способное решать конкретную задачу (например, осуществлять поиск лиц на изображении).>>>",
            "Используемые архитектуры нейросетей[править | править код]<<<Обучение с учителем:\nПерцептрон\nСвёрточные нейронные сети\nОбучение без учителя:\nСети адаптивного резонанса\nСмешанное обучение:\nСеть радиально-базисных функций>>>",
            "Используемые архитектуры нейросетей[править | править код]<<<Обучение без учителя:>>>",
            "Используемые архитектуры нейросетей[править | править код]<<<Обучение с учителем:>>>",
            "Перцептрон<<<Смешанное обучение:>>>",
            "Используемые архитектуры нейросетей[править | править код]<<<Обучение с учителем:>>>",
            "Перцептрон<<<Смешанное обучение:>>>",
            "Используемые архитектуры нейросетей[править | править код]<<<Обучение с учителем:>>>",
            "Перцептрон<<<Обучение без учителя:>>>",
            "Используемые архитектуры нейросетей[править | править код]<<<Обучение без учителя:>>>",
            "Этапы решения задач<<<Сбор данных для обучения;\nПодготовка и нормализация данных;\nВыбор топологии сети;\nЭкспериментальный подбор характеристик сети;\nЭкспериментальный подбор параметров обучения;\nСобственно обучение;\nПроверка адекватности обучения;\nКорректировка параметров, окончательное обучение;\nВербализация сети[21] с целью дальнейшего использования.>>>",
            "Выбор данных для обучения сети и их обработка является самым сложным этапом решения задачи. Набор данных для обучения должен удовлетворять нескольким критериям:\n<<<репрезентативность — данные должны иллюстрировать истинное положение вещей в предметной области;\nнепротиворечивость — противоречивые данные в обучающей выборке приведут к плохому качеству обучения сети.>>>",
            "Исходные данные преобразуются к виду, в котором их можно подать на входы сети. Каждая запись в файле данных называется обучающей парой или обучающим вектором. Обучающий вектор содержит по одному значению на каждый вход сети и, в зависимости от типа обучения (с учителем или без), по одному значению для каждого выхода сети. Обучение сети на «сыром» наборе, как правило, не даёт качественных результатов. Существует ряд способов улучшить «восприятие» сети.\n<<<Нормировка выполняется, когда на различные входы подаются данные разной размерности. Например, на первый вход сети подаются величины со значениями от нуля до единицы, а на второй — от ста до тысячи. При отсутствии нормировки значения на втором входе будут всегда оказывать существенно большее влияние на выход сети, чем значения на первом входе. При нормировке размерности всех входных и выходных данных сводятся воедино;\nквантование выполняется над непрерывными величинами, для которых выделяется конечный набор дискретных значений. Например, квантование используют для задания частот звуковых сигналов при распознавании речи;\nфильтрация выполняется для «зашумлённых» данных.>>>",
            "В разделе не хватает ссылок на источники (см. рекомендации по поиску). Информация должна быть проверяема, иначе она может быть удалена. Вы можете отредактировать статью, добавив ссылки на авторитетные источники в виде сносок. (7 декабря 2023)<<<Аналоговые нейронные сети (используют информацию в форме действительных чисел);\nДвоичные нейронные сети (оперируют с информацией, представленной в двоичном виде);\nОбразные нейронные сети (оперируют с информацией, представленной в виде образов: знаков, иероглифов, символов).>>>",
            "В разделе не хватает ссылок на источники (см. рекомендации по поиску). Информация должна быть проверяема, иначе она может быть удалена. Вы можете отредактировать статью, добавив ссылки на авторитетные источники в виде сносок. (7 декабря 2023)<<<Обучение с учителем — выходное пространство решений нейронной сети известно;\nОбучение без учителя — нейронная сеть формирует выходное пространство решений только на основе входных воздействий. Такие сети называют самоорганизующимися;\nОбучение с подкреплением — система назначения штрафов и поощрений от среды.>>>",
            "В разделе не хватает ссылок на источники (см. рекомендации по поиску). Информация должна быть проверяема, иначе она может быть удалена. Вы можете отредактировать статью, добавив ссылки на авторитетные источники в виде сносок. (7 декабря 2023)<<<Сети с фиксированными связями (весовые коэффициенты нейронной сети выбираются сразу, исходя из условий задачи, при этом: \n\n\n\n\nd\n\nW\n\n/\n\nd\nt\n=\n0\n\n\n{\\displaystyle {\\boldsymbol {d}}W/dt=0}\n\n, где W — весовые коэффициенты сети);\nСети с динамическими связями (для них в процессе обучения происходит настройка синаптических связей, то есть \n\n\n\n\nd\n\nW\n\n/\n\nd\nt\n≠\n0\n\n\n{\\displaystyle {\\boldsymbol {d}}W/dt\\not =0}\n\n, где W — весовые коэффициенты сети).>>>",
            "Радиально-базисная сеть характеризуется тремя особенностями:\n<<<единственный скрытый слой;\nтолько нейроны скрытого слоя имеют нелинейную активационную функцию;\nсинаптические веса связей входного и скрытого слоёв равны единице.>>>",
            "Начальное вложение сетки в пространство данных выбирается произвольным образом. В авторском пакете SOM_PAK предлагаются варианты случайного начального расположения узлов в пространстве и вариант расположения узлов в плоскости. После этого узлы начинают перемещаться в пространстве согласно следующему алгоритму:\n<<<Случайным образом выбирается точка данных \n\n\n\nx\n\n\n{\\displaystyle x}\n\n.\nОпределяется ближайший к \n\n\n\nx\n\n\n{\\displaystyle x}\n\n узел карты (BMU — Best Matching Unit).\nЭтот узел перемещается на заданный шаг по направлению к \n\n\n\nx\n\n\n{\\displaystyle x}\n\n. Однако он перемещается не один, а увлекает за собой определённое количество ближайших узлов из некоторой окрестности на карте. Из всех двигающихся узлов наиболее сильно смещается центральный — ближайший к точке данных — узел, а остальные испытывают тем меньшие смещения, чем дальше они от BMU. В настройке карты различают два этапа — этап грубой (ordering) и этап тонкой (fine-tuning) настройки. На первом этапе выбираются большие значения окрестностей и движение узлов носит коллективный характер — в результате карта «расправляется» и грубым образом отражает структуру данных; на этапе тонкой настройки радиус окрестности равен 1-2 и настраиваются уже индивидуальные положения узлов. Кроме этого, величина смещения равномерно затухает со временем, то есть она велика в начале каждого из этапов обучения и близка к нулю в конце.\nАлгоритм повторяется определённое число эпох (понятно, что число шагов может сильно изменяться в зависимости от задачи).>>>",
            "Вычислительные системы, основанные на нейронных сетях, обладают рядом качеств, которые отсутствуют в машинах с архитектурой фон Неймана (но присущи мозгу человека):\n<<<массовый параллелизм;\nраспределённое представление информации и вычисления;\nспособность к обучению и обобщению;\nадаптивность;\nсвойство контекстуальной обработки информации;\nтолерантность к ошибкам;\nнизкое энергопотребление.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Нейронная_сеть"
    },
    {
        "task": [
            "В России подготовка специалистов в этой области ведется по следующим направлениям:\n<<<01.03.02 «Прикладная математика и информатика»\n02.03.01 «Математика и компьютерные науки»\n02.03.02 «Фундаментальная информатика и информационные технологии»\n02.03.03 «Математическое обеспечение и администрирование информационных систем»\n09.02.03 «Программирование в компьютерных системах»\n09.02.07 «Информационные системы и программирование»\n09.03.01 «Информатика и вычислительная техника»\n09.03.02 «Информационные системы и технологии»\n09.03.03 «Прикладная информатика»\n09.03.04 «Программная инженерия»\n09.03.05 «Информационно-аналитические системы безопасности»\n10.03.01 «Информационная безопасность»\n10.05.03 «Информационная безопасность автоматизированных систем»\n10.05.01 «Компьютерная безопасность»\n38.03.05 «Бизнес-информатика»>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Программист"
    },
    {
        "task": [
            "Запрос «Пузырь криптовалют»[d] перенаправляется сюда. На эту тему нужно создать отдельную статью.<<<\nКриптовалюты часто сравниваются с пирамидными схемами и экономическими пузырями, такими как, например, пузырь на рынке недвижимости.[89][90] Говард Маркс[англ.] из Oaktree Capital Management[англ.] заявил в 2017 году, что цифровые валюты являются «не чем иным, как необоснованной манией (или, возможно, пирамидной схемой), основанной на желании придать вес чему-то, чего имеется очень мало или совсем ничего, кроме того, что люди будут платить за это», и сравнил это с тюльпаноманией (1637), финансовой пирамидой Компании Южных морей (1720) и пузырём доткомов (1999)[91]. Есть и примеры явного мошенничества в данной сфере: паразитируя на неинформированности населения об особенностях криптовалют, была создана система OneCoin, которая позиционировалась как криптовалюта, но при этом изначально являлась финансовой пирамидой; вся информация была централизована только у компании-эмитента, и последняя могла произвольно изменять любые данные, так как не было блокчейна, его лишь имитировала обычная база SQL[92].\nРоберт Шиллер, американский учёный-экономист, лауреат премии по экономике памяти Альфреда Нобеля, считает, что биткойн демонстрирует схожесть с экономическим пузырём[93][94]. При этом любая коммерция, использующая криптовалюты, пострадает от их огромной нестабильности.\nПол Кругман, также нобелевский лауреат по экономике, очень скептичен относительно утверждений, что будущее финансов именно за криптоактивами. Он обращает внимание, что криптовалюты так и не обрели широкого применения, кроме сферы нелегальной деятельности. Он также указывает на схожесть рынка криптовалют с «пузырем» на рынке субстандартного ипотечного кредитования 2007—2008 годов[95][96].\nБывший глава ФРС, Алан Гринспен назвал bitcoin пузырём без присущей валюте ценности[97].\n14 марта 2014 года бизнесмен Уоррен Баффет в телевизионной передаче «Squawk Box» назвал bitcoin «миражом» и посоветовал «держаться от него подальше»[98].\nАвстралийский экономист Джон Квиггин в статье «Пузырь биткойн и плохая гипотеза»[99] утверждает, что «Биткойн является лучшим примером чистого пузыря». Как и любой денежный актив, от золота до табака и долларов США, ценность биткойнов будет сохраняться, пока люди готовы его принять. Но готовность брать активы всегда зависит от той ценности актива, которая зависит от его применимости, а не исключительно от готовности других людей им владеть. Табак можно курить, из золота можно делать ювелирные изделия, долларами США можно погасить обязательства перед правительством США. Но у биткойна источник ценности отсутствует. Если биткойны перестанут принимать при оплате товаров и услуг, то их стоимость гарантированно станет нулевой. При этом биткойны демонстрируют несостоятельность гипотезы эффективного рынка, согласно которой рыночную стоимость актива определяет текущая оценка стоимости услуг или потока дохода, которые актив будет генерировать. Криптовалюты непосредственно никаких доходов не генерируют, а значит, их цена должна стремиться к нулю.\nЭксперты инвестиционного банка Goldman Sachs, сопоставив котировки биткойна, Ethereum и акций компаний, анонсировавших внедрение технологии блокчейн в свой бизнес, сделали вывод, что вокруг криптоиндустрии образовался огромный пузырь[100].\nВ октябре 2017 главный управляющий компании BlackRock Ларри Финк (Larry Fink) заявил, что биткойн является «индексом отмывания денег»[101]. Многие другие авторы считают, что цифровые деньги могут стать инструментами для анонимных интернет-преступников[77]; отмывание денег через криптовалюты может быть достигнуто посредством анонимных транзакций[77], поскольку этот способ обмена сложно (а в некоторых случаях, невозможно) отследить; он может упростить уклонение от уплаты налогов для физических лиц[77].\nПервый заместитель председателя Центрального банка Российской Федерации Ксения Юдаева сообщила: «В ходе обсуждения на „Большой двадцатке“ было отмечено, что криптоактивы как расчётное средство „в сотни раз менее эффективны, чем традиционные платёжные системы“»[102].\nВ июне 2022 года Билл Гейтс заявил, что криптовалюты «на 100 % основаны на теории большего дурака»[103].\nВ декабре 2022 года глава Резервного банка Индии Шактиканта Дас заявил, что следующий мировой финансовый кризис могут вызвать частные криптовалюты из-за их сугубо спекулятивной природы. Он считает, что подобные частные проекты государство должно запретить и даже не начинать регулировать, так как любое регулирование позволит расти спекулятивым операциям, что неизбежно приведёт к финансовому кризису[104].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Криптовалюта"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Бесплатное_программное_обеспечение"
    },
    {
        "task": [
            "В реальном режиме память делится на следующие участки:\n<<<основная область памяти (англ. conventional memory),\nрасширенная память (EMS),\nдополнительная память (XMS),\nUpper Memory Area (UMA),\nHigh Memory Area (HMA).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Оперативная_память"
    },
    {
        "task": [
            "Средства<<<вывода информации из устройства к пользователю — весь доступный диапазон воздействий на организм человека (зрительных, слуховых, тактильных, обонятельных и т. д.) — экраны (дисплеи, проекторы) и лампочки, динамики, зуммеры и сирены, вибромоторы и т. д. и т. п.\nввода информации/команд пользователем в устройство — множество всевозможных устройств для контроля состояния человека — кнопки, переключатели, потенциометры, датчики положения и движения, сервоприводы, жесты лицом[источник не указан 514 дней] и руками, даже съём мозговой активности пользователя.>>>",
            "Методы<<<набор правил, заложенных разработчиком устройства, согласно которым совокупность действий пользователя должна привести к необходимой реакции устройства и выполнения требуемой задачи — так называемый логический интерфейс.>>>",
            "В разделе не хватает ссылок на источники (см. рекомендации по поиску). Информация должна быть проверяема, иначе она может быть удалена. Вы можете отредактировать статью, добавив ссылки на авторитетные источники в виде сносок. (8 октября 2022)<<<Визуальный\nТекстовый (в частности, интерфейс командной строки)\nГрафический\nОконный\nWIMP\nWeb-ориентированный\nИндуктивный\nМасштабируемый\nТактильный\nЖестовый\nГолосовой\nМатериальный (осязательный)\nНейрокомпьютерный интерфейс>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Интерфейс_пользователя"
    },
    {
        "task": [
            "Можно выделить следующие виды графического пользовательского интерфейса:\n<<<простой: типовые экранные формы и стандартные элементы интерфейса, обеспечиваемые самой подсистемой GUI;\nистинно-графический, двумерный: нестандартные элементы интерфейса и оригинальные метафоры, реализованные собственными средствами приложения или сторонней библиотекой;\nтрёхмерный.>>>",
            "Недостатки<<<Большее потребление ресурсов в сравнении с текстовым интерфейсом.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Графический_интерфейс_пользователя"
    },
    {
        "task": [
            "Основные особенности Си:\n<<<простая языковая база, из которой в стандартную библиотеку вынесены многие существенные возможности, вроде математических функций или функций работы с файлами;\nориентация на процедурное программирование;\nсистема типов, предохраняющая от бессмысленных операций;\nиспользование препроцессора для абстрагирования однотипных операций;\nдоступ к памяти через использование указателей;\nнебольшое число ключевых слов;\nпередача параметров в функцию по значению, а не по ссылке (передача по ссылке эмулируется с помощью указателей);\nналичие указателей на функции и статические переменные;\nобласти видимости имён;\nструктуры и объединения — определяемые пользователем собирательные типы данных, которыми можно манипулировать как одним целым.>>>",
            "В то же время в Си отсутствуют:\n<<<вложенные функции;\nпрямое возвращение нескольких значений из функций;\nсопрограммы;\nсредства автоматического управления памятью;\nвстроенные средства объектно-ориентированного программирования;\nсредства функционального программирования.>>>",
            "Несмотря на широкое распространение идеи нуль-терминированных строк и удобство их использования в некоторых алгоритмах, у них есть несколько серьёзных недостатков.\n<<<Необходимость добавления в конец строки терминального символа не даёт возможность получить подстроку без необходимости её копирования, а функций для работы с указателем на подстроку и её длиной в языке не предусмотрено.\nЕсли требуется заранее выделять память под результат алгоритма на основе входных данных, каждый раз требуется обходить всю строку для подсчёта её длины.\nПри работе с большими объёмами текста подсчёт длины может оказаться узким местом.\nРабота со строкой, которая по ошибке не терминирована нулём, может приводить к неопределённому поведению программы, в том числе к ошибкам сегментирования, ошибкам переполнения буфера и к уязвимостям.>>>",
            "В число возможностей препроцессора входит:\n<<<подмена заданной лексемы текстом с помощью директивы #define, включая возможность создания параметризованных шаблонов текста (вызываются аналогично функциям), а также отменять подобные подмены, что даёт возможность осуществлять подмену на ограниченных участках текста программы;\nусловное встраивание и удаление кусков из текста, включая сами директивы, с помощью условных команд #ifdef, #ifndef, #if, #else и #endif;\nвстраивание в текущий файл текста из другого файла с помощью директивы #include.>>>",
            "Программа представляет собой набор файлов с кодом на языке Си, которые могут компилироваться в объектные файлы. Объектные файлы затем проходят этап компоновки друг с другом, а также со внешними библиотеками, в результате чего получается итоговый исполняемый файл или библиотека. Связь файлов друг с другом, равно как и с библиотеками, требует описания прототипов используемых функций, внешних переменных и необходимых типов данных в каждом файле. Такие данные принято выносить в отдельные заголовочные файлы, которые подключаются с помощью директивы #include в тех файлах, где требуется та или иная функциональность, и позволяют организовывать систему, похожую на систему модулей. Модулем в таком случае может выступать:\n<<<набор отдельных файлов с исходным кодом, для которых представлен интерфейс в виде заголовочных файлов;\nобъектная библиотека или её часть, с соответствующими заголовочными файлами;\nсамодостаточный набор из одного или более заголовочных файлов (интерфейсная библиотека);\nстатическая библиотека или её часть с соответствующими заголовочными файлами;\nдинамическая библиотека или её часть с соответствующими заголовочными файлами.>>>",
            "В качестве маркеров ошибок обычно выступают следующие значения:\n<<<-1 для типа int в случаях, когда отрицательный диапазон результата не используется[56];\n-1 для типа ssize_t (POSIX)[57];\n(size_t) -1 для типа size_t[56];\n(time_t) -1 при использовании некоторых функций для работы со временем[56];\nNULL для указателей[56];\nEOF при потоковой работе с файлами[56];\nненулевой код ошибки[56].>>>",
            "Более сложной является обработка ошибок в математических функциях из заголовочного файла math.h, в которых могут возникать 3 типа ошибок[64]:\n<<<выход за пределы диапазона входных значений;\nполучение бесконечного результата для конечных входных данных;\nвыход результата за пределы диапазона используемого типа данных.>>>",
            "Предотвращение двух из трёх типов ошибок сводится к проверкам входных данных на область допустимых значений. Однако предсказать выход результата за пределы типа крайне сложно. Поэтому стандартом языка предусмотрена возможность анализа математических функций на ошибки. Начиная со стандарта C99 такой анализ возможен двумя способами, в зависимости от значения, хранимого в макросе math_errhandling.\n<<<Если выставлен бит MATH_ERRNO, то переменную errno необходимо предварительно сбросить в 0, а после вызова математической функции — проверить на ошибки EDOM и ERANGE.\nЕсли выставлен бит MATH_ERREXCEPT, то возможные математические ошибки предварительно сбрасываются функцией feclearexcept() из заголовочного файла fenv.h, а после вызова математической функции —тестируются с помощью функции fetestexcept().>>>",
            "Некоторые компиляторы идут в комплекте с компиляторами других языков программирования (включая C++) или являются составной частью среды разработки программного обеспечения.\n<<<GNU Compiler Collection (GCC) полностью поддерживает стандарты C99 и C17 (C11 с исправлениями)[68]. Также поддерживает расширения GNU, защиту кода с помощью санитайзеров и набор дополнительных возможностей, в том числе атрибуты.\nClang также полностью поддерживает стандарты C99[69] и C17[70]. Разрабатывается во многом совместимым с компилятором GCC, в том числе поддерживает расширения GNU и защиту кода санитайзерами.>>>",
            "Несмотря на то, что стандартная библиотека входит в стандарт языка, её реализации идут отдельно от компиляторов. Поэтому стандарты языка, поддерживаемые компилятором и библиотекой, могут различаться.\n<<<Открытая библиотека glibc является основной во многих дистрибутивах GNU/Linux, поддерживает стандарты C11 и POSIX.1-2008[71], а также предоставляет набор исправлений и дополнительных возможностей от GNU.\nОткрытая библиотека musl задумывалась в качестве более легковесной замены для glibc, используется как библиотека по умолчанию в дистрибутиве Alpine Linux[72], Void Linux[73].\nБиблиотека CRT от Microsoft поддерживает стандарт C99, поставляется как компонент в составе Windows 10[74].>>>",
            "Интегрированные среды разработки[править | править код]<<<CLion полностью поддерживает C99, но поддержка С11 — частичная[75], сборка основана на CMake.\nCode::Blocks — свободная кроссплатформенная интегрированная среда разработки для языков Си, C++, D, Fortran. Поддерживает более двух десятков компиляторов. С компилятором GCC доступен Си всех версий от C90 до C17.\nEclipse — свободная интегрированная среда разработки, поддерживающая язык Си стандарта С99. Имеет модульную архитектуру, что даёт возможность подключения поддержки разных языков программирования и дополнительных возможностей. Доступен модуль для интеграции с Git, однако отсутствует интеграция с CMake.\nKDevelop — свободная интегрированная среда разработки, поддерживающая некоторые особенности языка Си из стандарта C11. Позволяет управлять проектами, использующими разные языки программирования, включая C++ и Python, поддерживает систему сборки CMake. Имеет встроенную поддержку Git на уровне работы с файлами и настраиваемое форматирование исходного кода для разных языков.\nMicrosoft Visual Studio лишь частично поддерживает стандарты C99 и C11, поскольку ориентируется на разработку под C++, однако имеет встроенную поддержку CMake.>>>",
            "Поскольку язык Си не предоставляет средств для безопасного написания кода, а многие элементы языка способствуют появлению ошибок, написание качественного и отказоустойчивого кода можно гарантировать только с помощью создания автоматизированных тестов. Для упрощения такого тестирования существуют различные реализации сторонних библиотек модульного тестирования.\n<<<Библиотека Check предоставляет фреймворк для тестирования программного кода на языке Си в общепринятом стиле xUnit. Среди возможностей можно упомянуть запуск тестов в отдельных процессах через fork(), что позволяет распознавать в тестах ошибки сегментирования[76], а также даёт возможность задавать максимальное время исполнения отдельных тестов.\nБиблиотека Google Test также предоставляет тестирование по принципам xUnit, но предназначена для тестирования кода на языке C++, что позволяет её использовать для тестирования кода и на языке Си. Также поддерживает изолированное тестирование отдельных частей программы. Одним из достоинств библиотеки является разделение макросов тестирования на утверждения и ошибки, что может облегчить отладку кода.>>>",
            "По проявлениям ошибок не всегда можно сделать однозначный вывод о проблемном месте в коде, однако локализовать проблему часто помогают различные средства отладки.\n<<<Gdb — интерактивный консольный отладчик для различных языков, в том числе и для Си.\nValgrind является средством динамического анализа кода, может выявлять ошибки в коде непосредственно во время выполнения программы. Поддерживает выявление: утечек, обращений в неинициализированную память, обращений по неверным адресам (в том числе переполнение буфера). Также поддерживает исполнение в режиме профилирования с помощью профайлера callgrind[77].\nKCacheGrind — графический интерфейс для визуализации результатов профилирования, полученных с помощью профайлера callgrind[78].>>>",
            "Иногда, в целях переноса тех или иных библиотек, функций и инструментов, написанных на Си, в иную среду, требуется компиляция Си-кода на язык более высокого уровня или в код виртуальной машины, предназначенной для такого языка. Следующие проекты предназначены для этих целей:\n<<<Emscripten[79] — компилятор из LLVM-байт-кода (например, полученный из C++) в JavaScript.\nFlascc[англ.] (старое название — Alchemy)[80] — компилятор из Си/C++ в ActionScript Virtual Machine (AVM2). Позволяет использовать Си-библиотеки в Flash- и Adobe AIR-приложениях.\nClue[81] — компилятор из ANSI Си в Lua, JavaScript, Perl, Java, Common Lisp.\nAMPC[82] — компилятор из Си в виртуальную машину Java.>>>",
            "Также для Си существуют и другие инструменты, облегчающие и дополняющие разработку, включая статические анализаторы и утилиты для форматирования кода. Статический анализ помогает выявлять потенциальные ошибки и уязвимости. А автоматическое форматирование кода упрощает организацию совместной работы в системах контроля версий, минимизируя конфликты из-за стилевых правок.\n<<<Cppcheck — статический анализатор кода для языков Си и C++ с открытыми исходными текстами, иногда выдаёт ложные срабатывания, которые можно подавлять специально оформленными комментариями в коде.\nClang-format — утилита командной строки для форматирования исходного кода согласно заданному стилю, который может указываться в специально оформленном файле конфигурации. Обладает множеством параметров и несколькими встроенными стилями. Разрабатывается в рамках проекта Clang[83].\nУтилиты Indent и GNU Indent также предоставляют форматирование кода, но параметры форматирования задаются в виде опций командной строки[84].>>>",
            "Синтаксис Си не включает специального механизма обработки ошибок. Стандартная библиотека поддерживает лишь простейшие средства: переменная (в случае POSIX — макрос) errno из заголовочного файла errno.h для установки кода последней ошибки и функции для получения сообщений об ошибках согласно кодам.[⇨] Такой подход приводит к необходимости писать большой объём повторяющегося кода, смешивая основной алгоритм с обработкой ошибок, к тому же он не является потокобезопасным. Причём даже в этом механизме нет единого порядка:\n<<<большинство функций стандартной библиотеки при ошибке возвращает маркер -1[⇨], а сам код требуется получать из errno, если функция его выставляет;\nв стандарте POSIX принято возвращать код ошибки напрямую, но не все функции этого стандарта так делают;\nво многих функциях, например, fopen(), fread() и fwrite(), выставление errno не стандартизировано и может отличаться в разных реализациях[55] (в POSIX требования более строгие и указаны некоторые из вариантов возможных ошибок[⇨]);\nесть функции, у которых маркер ошибки является одним из допустимых возвращаемых значений, и перед их вызовом приходится обнулять errno, чтобы быть уверенным, что код ошибки был установлен именно этой функцией[55].>>>",
            "Выпущено значительное количество исследований о правильном программировании на Си, от небольших статей до объёмных книг. Для поддержания качества кода на Си принимаются корпоративные и отраслевые стандарты. В частности:\n<<<MISRA C — стандарт, разработанный Motor Industry Software Reliability Association для использования Си в разработке встроенных систем транспортных средств. Сейчас MISRA C используется во многих отраслях, в том числе в военной, медицинской и аэрокосмической. Редакция 2013 года содержит 16 директив и 143 правила, включающие требования к коду и ограничения на использование определённых языковых средств (например, запрещено использование функций с переменным числом параметров). На рынке имеется около десятка инструментов проверки кода на соответствие MISRA C и несколько компиляторов со встроенной проверкой ограничений этого стандарта.\nCERT C Coding Standard — стандарт, разрабатываемый координационным центром CERT[111]. Он также имеет целью обеспечение надёжного и безопасного программирования на Си. Включает правила и рекомендации для разработчиков, в том числе примеры неправильного и правильного кода по каждому отдельно взятому случаю. Стандарт используется в разработке продуктов такими компаниями как Cisco и Oracle[112].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Си_(язык_программирования)"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Машинный_перевод"
    },
    {
        "task": [
            "Для некоторого ПО различают минимальные и рекомендуемые системные требования:\n<<<Минимальные системные требования - это набор характеристик и параметров, которые должны быть у компьютера или программного обеспечения, чтобы оно могло работать без серьезных проблем. Эти требования определяют минимальные характеристики аппаратного и программного обеспечения, необходимые для стабильной работы определенной программы, операционной системы или приложения.\nРекомендуемые системные требования - это более высокие характеристики аппаратного и программного обеспечения, которые обеспечивают более оптимальную производительность, качество и стабильность работы программы, операционной системы или приложения. Если ваш компьютер соответствует рекомендуемым требованиям, вы сможете использовать программу с большим комфортом и возможностями.>>>",
            "Минимальные системные требования для компьютерной игры Baldur's Gate 3:\n<<<Видеокарта — Nvidia GTX 970 / RX 480 (4GB+ of VRAM).\nОперационная система — Windows 10 64-bit.\nПроцессор — Intel I5 4690 / AMD FX 8350\nОперативная память — 8 Гб ОЗУ.\n150 Гб свободного места на жёстком диске (HDD).\nDirectX Версии 11>>>",
            "Рекомендованные системные требования для компьютерной игры Forza Horizon 5:\n<<<Видеокарта — NVidia GTX 1070 OR AMD RX 590\nОперационная система — Windows 10 версии 15063.0 или выше\nПроцессор —  Intel i5-8400 or AMD Ryzen 5 1500X.\nОперативная память — 16 Гб ОЗУ .\nСкорость Интернет-соединения — Широкополосное подключение к интернету.\n110  Гб свободного места на жёстком диске (HDD / SSD).\nDirectX Версии 12.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Системные_требования"
    },
    {
        "task": [
            "По территориальной распространённости:\n<<<BAN (Body Area Network — нательная компьютерная сеть) — сеть надеваемых или имплантированных компьютерных устройств;\nPAN (Personal Area Network) — персональная сеть, предназначенная для взаимодействия различных устройств, принадлежащих одному владельцу;\nLAN (ЛВС, Local Area Network) — локальная сеть, имеющая замкнутую инфраструктуру до выхода на поставщиков услуг; может описывать и маленькую офисную сеть, и сеть уровня большого завода, занимающего несколько сотен гектаров; иногда определяется как сеть «около шести миль (10 км) в радиусе»; локальные сети являются сетями закрытого типа, доступ к ним разрешён только ограниченному кругу пользователей, для которых работа в такой сети непосредственно связана с их профессиональной деятельностью;\nCAN (Campus Area Network) — кампусная сеть, объединяет локальные сети близко расположенных зданий;\nMAN (Metropolitan Area Network) — городские сети между учреждениями в пределах одного или нескольких городов, связывающие много локальных вычислительных сетей;\nWAN (Wide Area Network) — глобальная сеть, покрывающая большие географические регионы, включающие в себя как локальные сети, так и прочие телекоммуникационные сети и устройства. Пример WAN — сети с коммутацией пакетов (Frame relay), через которую могут «разговаривать» между собой различные компьютерные сети. Глобальные сети являются открытыми и ориентированы на обслуживание любых пользователей.>>>",
            "По архитектуре:\n<<<клиент-сервер[2];\nодноранговая сеть (децентрализованная или пиринговая сеть).>>>",
            "По типу сетевой топологии:\n<<<шина\nкольцо\nдвойное кольцо\nзвезда\nячеистая\nрешётка\nдерево\nсмешанная топология\nFat Tree>>>",
            "По типу среды передачи:\n<<<проводная (телефонный провод, коаксиальный кабель, витая пара, волоконно-оптический кабель);\nбеспроводная (передача информации по радиоволнам в определённом частотном диапазоне)>>>",
            "По функциональному назначению:\n<<<сеть хранения данных;\nсерверная ферма;\nсеть управления процессом;\nСеть SOHO, домовая сеть.>>>",
            "По скорости передачи:\n<<<низкоскоростная (до 10 Мбит/с),\nсреднескоростная (до 100 Мбит/с),\nвысокоскоростная (свыше 100 Мбит/с);>>>",
            "По сетевым операционным системам:\n<<<на основе Windows\nна основе Unix\nна основе NetWare\nна основе Cisco>>>",
            "По необходимости поддержания постоянного соединения:\n<<<пакетная сеть, например, Фидонет и UUCP\nонлайновая сеть, например, Интернет и GSM>>>",
            "Примеры самостоятельных логических вычислительных сетей, использующих другие физические сети и среды передачи данных:\n<<<Коммутируемый (модемный) доступ\nВиртуальная частная сеть (VPN) и виртуальная локальная вычислительная сеть VLAN\nДаркнет\nБлокчейн>>>",
            "Сетевая модель OSI\n<<<Прикладной уровень\nУровень представления информации\nСеансовый уровень\nТранспортный уровень\nСетевой уровень\nКоммутация\nМаршрутизация\nКанальный уровень (Уровень связывания данных) — Спецификация IEEE 802 разделяет этот уровень на 2 подуровня — MAC (Media Access Control) регулирует доступ к разделяемой физической среде, LLC (Logical Link Control) обеспечивает обслуживание сетевого уровня.\nФизический уровень>>>",
            "Основная статья: Передача данных<<<Проводная связь, кабельные линии связи\nТелефонная сеть PSTN\nМодем и коммутируемый доступ\nВыделенные линии\nКоммутация пакетов\nFrame relay\nPDH\nEthernet\nRS-232\nПередача по оптоволоконному кабелю\nSynchronous optical networking\nFiber distributed data interface\nБеспроводная связь\nБлижнего радиуса действия\nBluetooth\nHuman Area Network\nСреднего радиуса действия\nIEEE 802.11\nNetsukuku\nIEEE 802.16e WiMAX\nДальнего радиуса действия\nСпутниковая связь\nMMDS\nSMDS\nПередача данных при помощи мобильных телефонов\nCSD\nGPRS\nHSCSD\nEDGE\nUMTS\nHSDPA\nHSUPA\nCDMA\nLTE\nIEEE 802.16e WiMAX\nCDPD\nPaging networks\nDataTAC\nMobitex\nMotient>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Вычислительная_сеть"
    },
    {
        "task": [
            "В процессе программирования в настоящее время широко используются интегрированные среды разработки[9][10], в состав которых обычно входят:\n<<<редактор для ввода и редактирования текста программ[10];\nтранслятор для преобразования текста программы в машинное представление;\nотладчик для отладки (поиска и устранения ошибок);\nкомпоновщик для сборки программы из нескольких модулей;\nдругие служебные модули и инструменты.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Программирование"
    },
    {
        "task": [
            "Субъективное качество видео измеряется по следующей методике:\n<<<Выбираются видеопоследовательности для использования в тесте\nВыбираются параметры системы измерения\nВыбирается метод показа видео и подсчёта результатов измерения\nПриглашается необходимое число экспертов (обычно не меньше 15)\nПроводится сам тест\nПодсчитывается средняя оценка на основе оценок экспертов.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Видео"
    },
    {
        "task": [
            " Основные показатели элементов, зависящие от химсостава, находятся в следующих пределах:\n<<<напряжение единичного элемента:\nмаксимальное: 4,2 В (или 4,35/4,40 В для высоковольтных);[5]\nминимальное: 2,5 В (или 2,8/3,0 В для высоковольтных);\nудельная энергоёмкость: 110…270 Вт·ч/кг;[6]\nвнутреннее сопротивление: 4…15 мОм;[7]\nчисло циклов заряд-разряд до снижения ёмкости до 80 %: 600;\nвремя быстрого заряда: 1 час;\nсаморазряд зависит от температуры хранения и степени заряда. При температуре 25 °C и заряде 100 % ≈1,6 % в месяц;\nток нагрузки относительно ёмкости С, представленной в А·ч:\nпостоянный: до 5С;\nимпульсный: до 50С;\nоптимальный: до 1С;\nдиапазон рабочих температур: от −20 °C до +60 °C (оптимальная +23 °C);[8]>>>",
            "В настоящее время в массовом производстве литий-ионных аккумуляторов используются три класса катодных материалов:\n<<<кобальтат лития LiCoO2 и твёрдые растворы на основе изоструктурного ему никелата лития\nлитий-марганцевая шпинель LiMn2O4\nлитий-феррофосфат LiFePO4.>>>",
            "Электрохимические схемы литий-ионных аккумуляторов:\n<<<литий-кобальтовые LiCoO2 + 6C → Li1-xCoO2 + LiC6\nлитий-ферро-фосфатные LiFePO4 + 6C → Li1-xFePO4 + LiC6>>>",
            "Преимущества<<<Низкий саморазряд.\nВысокая токоотдача.\nБольшое число циклов заряд-разряд.\nНе требуют обслуживания.>>>",
            "Широко применяемые литий-ионные аккумуляторы при перезаряде, несоблюдении условий заряда или при механическом повреждении часто бывают чрезвычайно огнеопасными.\n<<<Огнеопасны\nТеряют работоспособность при переразряде\nТеряют ёмкость на холоде>>>",
            "Экология[править | править код]<<<Для производства литий-ионных аккумуляторов требуется литий высокой степени чистоты, для получения одной тонны лития требуется переработка 100 тонн руды.\nявляется токсичным отходом.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Литий-ионный_аккумулятор"
    },
    {
        "task": [
            "В разделе не хватает ссылок на источники (см. рекомендации по поиску). Информация должна быть проверяема, иначе она может быть удалена. Вы можете отредактировать статью, добавив ссылки на авторитетные источники в виде сносок. (18 сентября 2021)<<<Структурированность стандартов цифрового обмена данными алгоритмов;\nШирокое использование компьютерного сохранения и предоставление информации в необходимом виде;\nПередача информации посредством цифровых технологий на практически безграничные расстояния[12].>>>",
            "Информационные технологии охватывают все ресурсы, необходимые для управления информацией, особенно компьютеры, программное обеспечение и сети, необходимые для создания, хранения, управления, передачи и поиска информации.\nИнформационные технологии могут быть сгруппированы следующим образом[14]:\n<<<Технические средства;\nКоммуникационные средства;\nОрганизационно-методическое обеспечение;\nСтандартизация.>>>",
            "Существуют следующие виды сетей передачи данных:\n<<<Телефонные сети — абонентские сети связи, для доступа к которым используются телефонные аппараты, АТС и оборудование передачи данных;\nКомпьютерные сети — сети, оконечными устройствами которых являются компьютеры.>>>",
            "По данным Statista, в октябре 2021 года использование поисковых систем распределялось следующим образом:\n<<<Google — 86,64 %;\nBing — 7 %;\nYahoo! — 2,75 %[19].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Информационные_технологии"
    },
    {
        "task": [
            "В отличие от человека, для компьютера нет «хорошо написанного» или «плохо написанного» кода. Но то, как написан код, может сильно влиять на процесс сопровождения ПО. О качестве исходного кода можно судить по следующим параметрам:\n<<<читаемость кода (в том числе наличие комментариев к коду);\nлёгкость в поддержке, тестировании, отладке и устранении ошибок, модификации и портировании;\nэкономное использование ресурсов: памяти, процессора, дискового пространства;\nотсутствие замечаний, выводимых компилятором;\nотсутствие «мусора» — неиспользуемых переменных, недостижимых блоков кода, ненужных устаревших комментариев и т. д.;\nадекватная обработка ошибок;\nвозможность интернационализации интерфейса.>>>",
            "В таких случаях исходным кодом считается форма данной работы, предпочтительная для её редактирования. В лицензиях, предназначенных не только для ПО, она также может называться версией в «прозрачном формате». Это может быть, например:\n<<<для файла, сжатого с потерей данных — версия без потерь;\nдля рендера векторного изображения или трёхмерной модели — соответственно, векторная версия и модель;\nдля изображения текста — такой же текст в текстовом формате;\nдля музыки — файл во внутреннем формате музыкального редактора;\nи наконец, сам файл, если он удовлетворяет указанным условиям, либо если более удобной версии просто не существовало.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Исходный_код"
    },
    {
        "task": [
            "Аналоговый телевизионный тракт в общем виде включает в себя следующие устройства[91]:\n<<<Телевизионная передающая камера. Служит для преобразования изображения, получаемого при помощи объектива на мишени передающей трубки или полупроводниковой матрице, в телевизионный видеосигнал.\nТелекинопроектор. Преобразует изображение и звук на киноплёнке в телевизионный сигнал и позволяет демонстрировать кинофильмы по телевидению.\nВидеомагнитофон. Записывает и в нужный момент воспроизводит видеосигнал, сформированный передающей камерой или телекинопроектором.\nВидеомикшер. Позволяет переключаться между несколькими источниками изображения: камерами, видеомагнитофонами и другими.\nПередатчик. Несущий сигнал высокой частоты модулируется телевизионным сигналом и передаётся по радио или по проводам.\nПриёмник — телевизор. С помощью синхроимпульсов, содержащихся в видеосигнале, телевизионное изображение воспроизводится на экране приёмника (кинескоп, ЖК-дисплей, плазменная панель).>>>",
            "Любопытные факты<<<Папа Римский Франциск отказался от просмотра телепередач, в чём в 1990 году дал обет Деве Марии[99].\nПервым в мире массовым мероприятием, транслировавшимся по телевидению, стали Олимпийские игры в нацистской Германии[100].\nВ Южно-Африканской Республике телевизионные передачи начались только в 1976 году; до этого телевидение в ЮАР было запрещено из-за его предполагаемого вредного влияния на население.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Телевидение"
    },
    {
        "task": [
            "Локализация не ограничивается переводом интерфейса на другой язык. Это многоуровневая операция, первые шаги которой можно выполнить, даже оставив интерфейс нетронутым,[1] а последние — требуют взаимодействия программистов, дизайнеров и переводчиков[2]:\n<<<Обеспечить поддержку языка и национальных стандартов — необходимый минимум, чтобы программа могла выполнять свои функции в другой стране. Современные ОС берут на себя многие из этих вопросов, но и программист должен быть достаточно квалифицированным, чтобы использовать их возможности.\nКорректная работа в локализованной операционной системе[3], для игр на ТВ-приставках — стандарт телевидения (PAL или NTSC).\nСделать, чтобы программа отвечала товарным законам целевой страны. В частности: издать документацию на целевом языке, подогнать функциональность под патенты, антимонопольное законодательство, законы о печати, о хранении персональных данных… Так, в Windows 98 исчезла подсветка часовых поясов из-за спорных территорий: крайне трудно угодить обеим спорящим странам.[4]\nВывод на экран символов языка.[5] Подготовка локализованных шрифтов, если таковые нужны.[6] При этом адаптация под другую письменность может быть довольно сложной.[1]\nДругие действия с языком — ввод текста, алфавитная сортировка, строковые операции, орфографические словари, правила переносов[1] и т. д.\nСтандарты целевой страны, непосредственно связанные с функционированием программы:\nФормат даты, времени, дробных и многозначных чисел.\nОсобенности человеческих имён.\nСимволы валюты.\nФорматы бумаги.\nСистема мер.\nОсобенности законодательства.\nНалоговая система.\nВыдаваемые правительством документы — номер социального обеспечения, идентификационный номер налогоплательщика, номер паспорта.\nТребования к ПО для госструктур — открытость данных, стандарты шифрования и прочее.\nПеревод текстов в интерфейсе программы на целевой язык.\nВ сложном ПО не все части стоит переводить. Например, многие не согласны с переводом имён функций Excel на русский язык. Некоторые ошибки ОС выводятся, когда компьютер ещё не способен показывать русские буквы, при том, что специалист, кому эти сообщения адресованы, поймёт и английские.\nКорректное выравнивание и размещение элементов интерфейса с учётом того, что сообщения-строки в разных языках могут иметь существенно разные размеры (например, обычное сообщение на английском, будучи переведено на немецкий язык, как правило, становится длиннее на 17,3 %[7]). Кроме того, существуют языки с написанием справа налево (арабский, иврит) и сверху вниз (японский);\nЧрезвычайно важен перевод терминологии. Например, спорным является применяемый в Windows термин «обозреватель», обозначающий браузер.\nЕсли есть текст на изображениях, его нужно перерисовать. Если есть речевые сообщения, их надо наговорить.\nТонкая настройка под целевую страну.\nРабота со словоформами. Примером будет пресловутое «Найдено 3 файлов».\nДополнительные стандарты, не влияющие на основную функциональность программы. Например: формат даты/времени в медиаплеере, особенности типографики.\nОбеспечить интероперабельность локализированной программы с исходной. Например: мы ввели в документ формулу «x*2,5». Будет ли она работать, если открыть его в английской версии? Наладили сетевую игру русского с английским — не разорвёт ли связь, сославшись на несовпадение версий?\nОбеспечить интероперабельность программы с ПО, распространённым в целевой стране. Например, от страны к стране варьируются бухгалтерские программы, и «1С: Предприятие» мало известно за пределами стран СССР.\nУчёт национального менталитета. Например: красный цвет у русских ассоциируется не только с опасностью, но и с праздником. В играх зачастую приходится менять юмор, а изредка — даже корректировать сюжет (например, в Syberia 2 турецкий иммигрант Sirkos превратился в еврея Цукермана).\nАмериканский почтовый ящик, который мы привыкли видеть в программах электронной почтыПерерисовка графики (сплэш-экранов, значков, клипартов и т. д.) под реалии другой страны. Например, в разных странах могут выглядеть по-разному дорожные знаки, вилки и розетки, почтовый ящик. Глобус поворачивают к зрителю той частью света, на которую рассчитывается продукт. В Великобритании у выключателя включенным является нижнее положение, в бывшем СССР — верхнее. Значки перерисовывают крайне редко, поэтому дизайнеры изначально стараются сделать их как можно более «интернациональными».>>>",
            "Примеры языковых тегов:\n<<<Английский язык: en-GB (британский английский), en-US (американский английский), en-AU (австралийский английский).\nИспанский язык: es-ES (кастильский испанский, письменный и разговорный язык Испании), es-MX (мексиканский испанский), es-AR (аргентинский испанский), es-CO (колумбийский испанский).\nПортугальский язык: pt-PT (европейский португальский, письменный и разговорный язык Португалии), pt-BR (бразильский португальский).\nКитайский язык: zh-CN (материковый Китай, упрощённые иероглифы), zh-TW (Тайвань, традиционные иероглифы), zh-HK (Гонконг, традиционные иероглифы).\nРусский язык: ru-RU (русский, Россия).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Локализация_программного_обеспечения"
    },
    {
        "task": [
            "Применение<<<Русские счёты>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Десятичная_система_счисления"
    },
    {
        "task": [
            "«Хорошая» хеш-функция должна удовлетворять двум свойствам:\n<<<быстрое вычисление;\nминимальное количество «коллизий».>>>",
            "Введём обозначения:\n<<<\n\n\n\nK\n\n\n{\\displaystyle K}\n\n — количество «ключей» (входных данных);\n\n\n\n\nk\n\n\n{\\displaystyle k}\n\n — любой из «ключей» (входных данных);\n\n\n\n\nh\n(\nk\n)\n\n\n{\\displaystyle h(k)}\n\n — хеш-функция, имеющая не более \n\n\n\nM\n\n\n{\\displaystyle M}\n\n различных значений (выходных данных).>>>",
            "Преимущества алгоритма:\n<<<простота вычисления;\nотсутствие таких входных данных, для которых вероятность коллизии наибольшая;\nвозможность преобразования в идеальную хеш-функцию[5].>>>",
            "Описание[править | править код]<<<Функция \n\n\n\nh\n(\nk\n)\n:\nU\n→\n[\nm\n]\n\n\n{\\displaystyle h(k)\\colon U\\to [m]}\n\n называется идеальной хеш-функцией для \n\n\n\nS\n⊆\nU\n\n\n{\\displaystyle S\\subseteq U}\n\n, если инъективна на \n\n\n\nS\n\n\n{\\displaystyle S}\n\n.\nФункция \n\n\n\nh\n(\nk\n)\n:\nU\n→\n[\nm\n]\n\n\n{\\displaystyle h(k)\\colon U\\to [m]}\n\n называется минимальной идеальной хеш-функцией для \n\n\n\nS\n⊆\nU\n\n\n{\\displaystyle S\\subseteq U}\n\n, если является идеальной хеш-функцией и \n\n\n\nm\n=\nn\n=\n\n|\n\nS\n\n|\n\n\n\n{\\displaystyle m=n=|S|}\n\n.\nДля целого \n\n\n\nk\n≥\n1\n\n\n{\\displaystyle k\\geq 1}\n\n функция \n\n\n\nh\n(\nk\n)\n:\nU\n→\n[\nm\n]\n\n\n{\\displaystyle h(k)\\colon U\\to [m]}\n\n называется \n\n\n\nk\n\n\n{\\displaystyle k}\n\n-идеальной хеш-функцией (k-PHF) для \n\n\n\nS\n⊆\nU\n\n\n{\\displaystyle S\\subseteq U}\n\n, если для каждого \n\n\n\nj\n∈\n[\nm\n]\n\n\n{\\displaystyle j\\in [m]}\n\n имеем \n\n\n\n\n|\n\n{\nx\n∈\nS\n\n|\n\nh\n(\nx\n)\n=\nj\n}\n\n|\n\n≤\nk\n\n\n{\\displaystyle |\\{x\\in S|h(x)=j\\}|\\leq k}\n\n.>>>",
            "Большинство первых работ, описывающих хеширование, посвящено методам борьбы с коллизиями в хеш-таблицах. Тогда хеш-функции применялись при поиске текста в файлах большого размера. Существует два основных метода борьбы с коллизиями в хеш-таблицах:\n<<<метод цепочек (метод прямого связывания);\nметод открытой адресации.>>>",
            "Среди множества существующих хеш-функций принято выделять криптографически стойкие хеш-функции — хеш-функции, удовлетворяющие дополнительным требованиям, от чего пригодные для применения в криптографии. Хеш-функция \n\n\n\nH\n\n\n{\\displaystyle H}\n\n считается криптографически стойкой, если удовлетворяет трём основным требованиям, на которых основано большинство применений хеш-функций в криптографии:\n<<<необратимость: для заданных выходных данных (значения) out должно быть вычислительно неосуществимо найти входные данные (блок данных) in, для которых \n\n\n\nH\n(\ni\nn\n)\n=\no\nu\nt\n\n\n{\\displaystyle H(in)=out}\n\n;\nстойкость к коллизиям первого рода: для заданных входных данных (сообщения) in1 должно быть вычислительно неосуществимо подобрать другие входные данные (сообщение) in2, для которых \n\n\n\nH\n(\ni\nn\n1\n)\n=\nH\n(\ni\nn\n2\n)\n\n\n{\\displaystyle H(in1)=H(in2)}\n\n;\nстойкость к коллизиям второго рода: должно быть вычислительно неосуществимо подобрать пару таких входных данных (сообщений) \n\n\n\n(\ni\nn\n1\n,\ni\nn\n2\n)\n\n\n{\\displaystyle (in1,in2)}\n\n, которые имеют одинаковые выходные данные (хеш): \n\n\n\nH\n(\ni\nn\n1\n)\n=\nH\n(\ni\nn\n2\n)\n\n\n{\\displaystyle H(in1)=H(in2)}\n\n.>>>",
            "Данные требования не являются независимыми:\n<<<обратимая функция нестойка и к коллизиям первого рода, и к коллизиям второго рода;\nфункция, не стойкая к коллизиям первого рода, нестойка и к коллизиям второго рода; обратное неверно.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Хеш-функция"
    },
    {
        "task": [
            "Этот раздел не завершён. Вы поможете проекту, исправив и дополнив его.<<<Контекстно-свободная грамматика\nКонтекстно-зависимая грамматика\nРегулярный язык\nрегулярные выражения\nГрамматика с фразовой структурой\nLL(n)\nLALR(1)\nYacc\nANTLR\nParsec\nAST\nДерево разбора[англ.]\nАбстрактный синтаксис первого порядка[англ.]\nАбстрактный синтаксис высшего порядка[англ.]>>>",
            "Существует несколько подходов к определению семантики языков программирования. Основных три: операционная, аксиоматическая и денотационная.\n<<<При описании семантики в рамках операционного подхода обычно исполнение конструкций языка программирования интерпретируется с помощью некоторой воображаемой (абстрактной) ЭВМ.\nАксиоматическая семантика описывает последствия выполнения конструкций языка с помощью языка логики и задания пред- и постусловий.\nДенотационная семантика оперирует понятиями, типичными для математики — множества, соответствия, а также суждения, утверждения и др.>>>",
            "Формально язык программирования не имеет такого критерия как «уровень». Условно этот термин обычно означает одно из двух:\n<<<«приближенность» языка программирования к естественному человеческому языку и образу мысли,\n«удалённость» семантики языка программирования от машинного кода целевой архитектуры процессора — то есть наименьший масштаб преобразований, которые должен претерпеть код программы перед тем, как он сможет исполняться.>>>",
            "Примеры математически обоснованных языков и воплощаемых ими математических моделей:\n<<<Agda, Epigram[англ.], Idris — интуиционистская теория типов Мартин-Лёфа.\nAPL и его потомки (J, K) — оригинальная семантика, не имеющая названия, воплощающая нотацию Айверсона для исчисления массивов (часто встречается термин «array languages»).\nCoq — исчисление индуктивных конструкций.\nErlang — исчисление процессов (первоначально в форме модели акторов, позже также построено обоснование на \n\n\n\nπ\n\n\n{\\displaystyle \\pi }\n\n-исчислении[57]).\nForth — стековая машина[англ.] и конкатенативный язык программирования.\nHaskell — теория категорий (включая «декартово замкнутую категорию», воплощающую лямбда-исчисление; категорию монад для моделирования побочных эффектов; расширение системы типов Хиндли — Милнера; систему родо́в; и др.).\nJoy — композиция функций и гомоморфизм (иначе говоря, чистый конкатенативный язык программирования и, как следствие, чистый функциональный).\nLisp — лямбда-исчисление Чёрча (в том числе язык S-выражений, воплощающий нотацию пар Чёрча).\nScheme — «облагороженный» диалект Лиспа (сильнее типизированный, в большей степени гомоиконичный, ограничивающийся гигиеническими макроопределениями[англ.] и соблюдающий числовую башню[англ.]), дополненный нотацией продолжений.\nML — типизированное лямбда-исчисление, то есть лямбда-исчисление, дополненное системой типов Хиндли — Милнера.\nProlog — исчисление предикатов.\nMercury — исчисление предикатов, дополненное системой типов Хиндли — Милнера.\nSmalltalk — теория множеств[58] (с соблюдением числовой башни[англ.]).\nSQL — исчисление кортежей (вариант реляционного исчисления, в свою очередь основанного на исчислении предикатов первого порядка).\nSGML и его потомки (HTML, XML) — нотация деревьев (важный случай графов).\nUnlambda — комбинаторная логика.\nРегулярные выражения.\nРефал — оригинальная семантика Турчина, носящая название «Рефал-машины» или «Рефал-автомата», созданная на основе нормального алгоритма Маркова, воплощающая композицию теории автоматов, сопоставления с образцом и переписывания термов.>>>",
            "Наличие математического обоснования для языка может гарантировать (или, как минимум, обещать с очень высокой вероятностью) некоторые или все из следующих положительных свойств:\n<<<Существенное повышение стабильности программ. В одних случаях — за счёт построения доказательства надёжности для самого языка (см. типобезопасность), существенного упрощения формальной верификации программ и даже получения языка, который сам является системой автоматического доказательства (Coq, Agda). В других случаях — за счёт раннего обнаружения ошибок на первых же пробных запусках программ (Forth и регулярные выражения).\nОбеспечение потенциально более высокой эффективности программ. Даже если семантика языка далека от архитектуры целевой платформы компиляции, к нему могут быть применимы формальные методики глобального анализа программ (хотя трудоёмкость написания даже тривиального транслятора может оказаться выше). Например, для языков Scheme и Standard ML существуют развитые полнопрограммно-оптимизирующие компиляторы и суперкомпиляторы, результат работы которых может уверенно конкурировать по скорости с языком низкого уровня Си и даже опережать последний (хотя ресурсоёмкость работы самих компиляторов оказывается значительно выше). Одна из самых быстрых СУБД — KDB[59] — написана на языке K. Язык Scala (унаследовавший математику от ML) обеспечивает на платформе JVM более высокую скорость, чем «родной» для неё язык Java[источник не указан 2662 дня]. С другой стороны, Forth имеет репутацию одного из самых нетребовательных к ресурсам языков (менее требователен, чем Си) и используется для разработки приложений реального времени под самые маломощные ЭВМ; кроме того, транслятор Форта является одним из наименее трудоёмких в реализации на ассемблере.\nЗаранее известный (неограниченный или, наоборот, чётко очерченный) предел роста сложности программных компонентов, систем и комплексов, которые можно выразить средствами этого языка с сохранением показателей качества[28][60]. Языки, не имеющие математического обоснования (а именно такие наиболее часто применяются в мейнстриме: C++, Java, C#, Delphi и др.), на практике ограничивают реализуемую функциональность и/или снижают качество по мере усложнения системы[61], так как им присущи экспоненциальные кривые роста сложности как относительно работы одного отдельно взятого человека, так и относительно сложности управления проектом в целом[51][62]. Прогнозируемая сложность системы приводит либо к поэтапной декомпозиции проекта на множество более мелких задач, каждая из которых решается соответствующим языком, либо к языково-ориентированному программированию для случая, когда адресуемой языком задачей является как раз описание семантик и/или символьные вычисления (Lisp, ML, Haskell, Рефал, Регулярные выражения). Языки с неограниченным пределом роста сложности программ нередко относят к метаязыкам (что в непосредственном толковании термина не верно, но практике сводимо, так как всякий мини-язык, выбранный для решения некоторой подзадачи в составе общей задачи, может быть представлен в виде синтаксического и семантического подмножества данного языка, не требуя трансляции[63]).>>>",
            "Существенное повышение стабильности программ. В одних случаях — за счёт построения доказательства надёжности для самого языка (см. типобезопасность), существенного упрощения формальной верификации программ и даже получения языка, который сам является системой автоматического доказательства (Coq, Agda). В других случаях — за счёт раннего обнаружения ошибок на первых же пробных запусках программ (Forth и регулярные выражения).\nОбеспечение потенциально более высокой эффективности программ. Даже если семантика языка далека от архитектуры целевой платформы компиляции, к нему могут быть применимы формальные методики глобального анализа программ (хотя трудоёмкость написания даже тривиального транслятора может оказаться выше). Например, для языков Scheme и Standard ML существуют развитые полнопрограммно-оптимизирующие компиляторы и суперкомпиляторы, результат работы которых может уверенно конкурировать по скорости с языком низкого уровня Си и даже опережать последний (хотя ресурсоёмкость работы самих компиляторов оказывается значительно выше). Одна из самых быстрых СУБД — KDB[59] — написана на языке K. Язык Scala (унаследовавший математику от ML) обеспечивает на платформе JVM более высокую скорость, чем «родной» для неё язык Java[источник не указан 2662 дня]. С другой стороны, Forth имеет репутацию одного из самых нетребовательных к ресурсам языков (менее требователен, чем Си) и используется для разработки приложений реального времени под самые маломощные ЭВМ; кроме того, транслятор Форта является одним из наименее трудоёмких в реализации на ассемблере.\nЗаранее известный (неограниченный или, наоборот, чётко очерченный) предел роста сложности программных компонентов, систем и комплексов, которые можно выразить средствами этого языка с сохранением показателей качества[28][60]. Языки, не имеющие математического обоснования (а именно такие наиболее часто применяются в мейнстриме: C++, Java, C#, Delphi и др.), на практике ограничивают реализуемую функциональность и/или снижают качество по мере усложнения системы[61], так как им присущи экспоненциальные кривые роста сложности как относительно работы одного отдельно взятого человека, так и относительно сложности управления проектом в целом[51][62]. Прогнозируемая сложность системы приводит либо к поэтапной декомпозиции проекта на множество более мелких задач, каждая из которых решается соответствующим языком, либо к языково-ориентированному программированию для случая, когда адресуемой языком задачей является как раз описание семантик и/или символьные вычисления (Lisp, ML, Haskell, Рефал, Регулярные выражения). Языки с неограниченным пределом роста сложности программ нередко относят к метаязыкам (что в непосредственном толковании термина не верно, но практике сводимо, так как всякий мини-язык, выбранный для решения некоторой подзадачи в составе общей задачи, может быть представлен в виде синтаксического и семантического подмножества данного языка, не требуя трансляции[63]).<<<Удобство для человека при решении задач, на которые этот язык ориентирован по своей природе (см. проблемно-ориентированный язык), что в некоторой степени также способно (косвенно) повлиять на повышение стабильности результирующих программ за счёт повышения вероятности обнаружения ошибок в исходном коде и снижения дублирования кода.>>>",
            "Особые категории языков[править | править код]<<<Учебные\nПредметно-специфичные\nЭзотерические\nВизуальные>>>",
            "Существуют различные метрики для измерения популярности языков, каждая из которых разработана с пристрастием к определённому смыслу понятия популярности:\n<<<подсчёт числа вакансий, упоминающих язык;\nколичество проданных книг (учебников или справочников);\nоценка количества строк кода, написанных на языке (что не принимает в расчёт редко публикуемые случаи использования языков);\nподсчёт упоминаний языка в запросах поисковиков.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Язык_программирования"
    },
    {
        "task": [
            "Ключевые понятия:\n<<<квантификация переменных типа (универсальная, экзистенциальная, ограниченная[англ.]);\nподтипизация[англ.] (англ. subtyping — отношения «супертип-подтип»);\nвключение (англ. subsumption — см. принцип подстановки Барбары Лисков) — частный случай подтипизации — см. подтипизация на записях;\nобъект;\nобъектный тип (фактически, специальная форма «записи», в число полей которой входят функции первого класса);\nкласс.>>>",
            "Наиболее заметные отличия в проявлении показателей качества между языками разных видов:\n<<<В мейнстримных языках декларируемые принципы нацелены на повышение изначально низкого для императивного программирования коэффициента повторного использования кода. В полиморфно типизированных применение концепций ООП, напротив, означает очевидное его снижение из-за перехода от параметрического полиморфизма к ad-hoc-полиморфизму[10]. В динамически типизированных языках (Smalltalk, Python, Ruby) эти принципы используются для логической организации программы, и их влияние на коэффициент повторного использования трудно спрогнозировать — он сильно зависит от дисциплины программиста. Например, в CLOS мультиметоды одновременно являются функциями первого класса, что позволяет рассматривать их одновременно и как связанно квантифицированные[англ.], и как обобщённые (истинно полиморфные).\nТрадиционные ОО-языки используют номинативную типизацию[англ.], то есть допустимость соиспользования объектов разных классов только при условии явного указания родственных отношений между классами. Для полиморфно типизированных языков характерна структурная типизация[англ.], то есть согласование классов между собой тем же механизмом, что и согласование числа 5 с типом int. Динамически типизированные языки также занимают здесь промежуточную позицию.>>>",
            "Объектно ориентированное проектирование ориентируется на описание структуры проектируемой системы (приоритетно по отношению к описанию её поведения, в отличие от функционального программирования), то есть, фактически, в ответе на два основных вопроса:\n<<<Из каких частей состоит система;\nВ чём состоит ответственность каждой из её частей.>>>",
            "Прототипное программирование, сохранив часть черт ООП, отказалось от базовых понятий — класса и наследования.\n<<<Прототип — это объект-образец, по образу и подобию которого создаются другие объекты. Объекты-копии могут сохранять связь с родительским объектом, автоматически наследуя изменения в прототипе; эта особенность определяется в рамках конкретного языка.\nВместо механизма описания классов и порождения экземпляров, язык предоставляет механизм создания объекта (путём задания набора полей и методов, которые объект должен иметь) и механизм клонирования объектов.\nКаждый вновь созданный объект является «экземпляром без класса». Каждый объект может стать прототипом — быть использован для создания нового объекта с помощью операции клонирования. После клонирования новый объект может быть изменён, в частности, дополнен новыми полями и методами.\nКлонированный объект либо становится полной копией прототипа, хранящей все значения его полей и дублирующей его методы, либо сохраняет ссылку на прототип, не включая в себя клонированных полей и методов до тех пор, пока они не будут изменены. В последнем случае среда исполнения обеспечивает механизм делегирования — если при обращении к объекту он сам не содержит нужного метода или поля данных, вызов передаётся прототипу, от него, при необходимости — дальше по цепочке.>>>",
            "Критические высказывания в адрес ООП:\n<<<Было показано отсутствие значимой разницы в продуктивности разработки программного обеспечения между ООП и процедурным подходом[19].\nКристофер Дэйт указывает на невозможность сравнения ООП и других технологий во многом из-за отсутствия строгого и общепризнанного определения ООП[20].\nАлександр Степанов в одном из своих интервью указывал, что ООП «методологически неправильно» и что «…ООП практически такая же мистификация, как и искусственный интеллект…»[21].\nФредерик Брукс указывает, что наиболее сложной частью создания программного обеспечения является «…спецификация, дизайн и тестирование концептуальных конструкций, а отнюдь не работа по выражению этих концептуальных конструкций…». ООП (наряду с такими технологиями как искусственный интеллект, верификация программ, автоматическое программирование, графическое программирование, экспертные системы и др.), по его мнению, не является «серебряной пулей», которая могла бы на порядок величины снизить сложность разработки программных систем. Согласно Бруксу, «…ООП позволяет сократить только привнесённую сложность в выражение дизайна. Дизайн остаётся сложным по своей природе…»[22].\nЭдсгер Дейкстра указывал: «…то, о чём общество в большинстве случаев просит — это эликсир от всех болезней. Естественно, „эликсир“ имеет очень впечатляющие названия, иначе будет очень трудно что-то продать: „Структурный анализ и Дизайн“, „Программная инженерия“, „Модели зрелости“, „Управляющие информационные системы“ (Management Information Systems), „Интегрированные среды поддержки проектов“, „Объектная ориентированность“, „Реинжиниринг бизнес-процессов“…»[23].\nНиклаус Вирт считает, что ООП — не более чем тривиальная надстройка над структурным программированием[источник не указан 2021 день], и преувеличение её значимости, выражающееся, в том числе, во включении в языки программирования всё новых модных «объектно ориентированных» средств, вредит качеству разрабатываемого программного обеспечения.\nПатрик Киллелиа в своей книге «Тюнинг веб-сервера» писал: «…ООП предоставляет вам множество способов замедлить работу ваших программ…».\nИзвестная обзорная статья проблем современного ООП-программирования перечисляет некоторые типичные проблемы ООП[24][неавторитетный источник].\nВ программистском фольклоре получила широкое распространение критика объектно ориентированного подхода в сравнении с функциональным подходом с использованием метафоры «Действие в Королевстве существительных» из эссе Стива Йегги[25].>>>",
            "Как правило, объектно ориентированный язык (ООЯ) содержит следующий набор элементов:\n<<<Объявление классов с полями (данными — членами класса) и методами (функциями — членами класса).\nМеханизм расширения класса (наследования) — порождение нового класса от существующего с автоматическим включением всех особенностей реализации класса-предка в состав класса-потомка. Большинство ООЯ поддерживают только единичное наследование.\nПолиморфные переменные и параметры функций (методов), позволяющие присваивать одной и той же переменной экземпляры различных классов.\nПолиморфное поведение экземпляров классов за счёт использования виртуальных методов. В некоторых ООЯ все методы классов являются виртуальными.>>>",
            "Некоторые языки добавляют к указанному минимальному набору те или иные дополнительные средства. В их числе:\n<<<Конструкторы, деструкторы, финализаторы;\nСвойства (аксессоры);\nИндексаторы;\nСредства управления видимостью компонентов классов (модификаторы доступа или интерфейсы, такие как public, private, protected, feature и др.).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Объектно-ориентированное_программирование"
    },
    {
        "task": [
            "Этот раздел не завершён. Вы поможете проекту, исправив и дополнив его.<<<Первые гражданские электромеханические вычислительные машины Z1 и Z2 были созданы в конце 1930-х годов в Германии.\n1941 год — Конрад Цузе создал вычислительную машину Z3, которая имела все свойства современного компьютера.\n1942 год — в университете штата Айова Джон Атанасов и его аспирант Клиффорд Берри создали (а точнее — разработали и начали монтировать) первую в США электронную цифровую вычислительную машину. Хотя эта машина так и не была завершена в связи с уходом Атанасова на войну, она, как пишут историки, оказала большое влияние на Джона Мокли, который, спустя четыре года создал первую в мире ЭВМ ЭНИАК.\nВ начале 1943 года успешные испытания прошла первая американская вычислительная машина Марк I, предназначенная для выполнения сложных баллистических расчётов для ВМС США.\nВ конце 1943 года заработала английская вычислительная машина специального назначения «Колосс». Машина работала над расшифровкой секретных кодов нацистской Германии.\nВ 1944 году Конрад Цузе разработал ещё более быструю вычислительную машину — Z4.\n1946 год стал годом создания первой американской гражданской универсальной электронной цифровой вычислительной машины ЭНИАК.\nВ 1950 году в Киеве под руководством академика С. А. Лебедева был создан первый советский сверхвычислитель МЭСМ, на следующий год в Москве под руководством И. С. Брука была создана ЭВМ М-1.\nВ 1959 году в Париже состоялся Всемирный компьютерный конгресс и была создана международная федерация по обработке информации[3]\nС 1962 года ЭВМ применяются на космических кораблях Союз и Л-1 (облёт Луны).\n1967 стал годом, посвящённым формальным методам проектирования электронных вычислительных машин под руководством Глушкова.\n30 октября 1967 года в СССР произведена первая в мире полностью автоматическая стыковка двух космических аппаратов (беспилотных кораблей «Союз» под названиями «Космос-186» и «Космос-188»[4].\nВ 1969 году ЭВМ ракеты Н-1 обрабатывал данные с более чем 13 тысячи датчиков ракеты.\nК 1984 году в СССР было 10 тыс. компьютеров в школах.>>>",
            "По размеру аппаратной части могут быть выделены различные классы ЭВМ[5].\n<<<Супер ЭВМ (Суперкомпьютеры).\nБольшие ЭВМ (Мэйнфреймы).\nМини-ЭВМ — малая ЭВМ, имеет небольшие размеры и стоимость. Появившись в конце 1960-х годов, мини-ЭВМ имели широкие возможности в решении задач различных классов.\nМикроЭВМ — ЭВМ малых размеров, созданная на базе микропроцессора. Ранее различали микроЭВМ следующих видов: встроенные и персональные, настольные и портативные, профессиональные и бытовые. Термин ПЭВМ (персональная ЭВМ)[6][7] вытеснен синонимом «персональный компьютер» (сокращённо: ПК). В настоящее время персональные компьютеры не относятся к микрокомпьютерам[источник не указан 282 дня].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Электронная_вычислительная_машина"
    },
    {
        "task": [
            "Драйвер состоит из нескольких функций, которые обрабатывают определенные события операционной системы. Обычно основные события следующие:\n<<<Загрузка драйвера: драйвер регистрируется в системе, производит первичную инициализацию и т. п.\nВыгрузка: драйвер освобождает захваченные ресурсы — память, файлы, устройства и т. п.\nОткрытие драйвера: обычно драйвер открывается программой как файл, функциями fopen() в UNIX-подобных системах или CreateFile() в Win32. С этого события начинается основная работа драйвера.\nЧтение/Запись: программа осуществляет обмен данными с устройством, обслуживаемым драйвером.\nЗакрытие: операция, обратная открытию, освобождает занятые при открытии ресурсы и уничтожает дескриптор файла.\nУправление вводом-выводом (англ. IO Control, IOCTL). Зачастую драйвер поддерживает интерфейс ввода-вывода, специфичный для данного устройства. С помощью этого интерфейса программа может послать специальную команду, которую поддерживает данное устройство. Например, для SCSI-устройств можно послать команду GET_INQUIRY, чтобы получить описание устройства. В Win32-системах управление осуществляется через API-функцию DeviceIoControl(), в UNIX-подобных — с помощью ioctl().>>>",
            "Драйверы видеокарты представляют собой программное обеспечение, которое позволяет операционной системе, программам и играм использовать графическое оборудования вашего компьютера. Если вы играете в игры, то желательно обновлять эти драйверы — это может в значительной мере сказаться на FPS и общей производительности системы в играх.\n<<<Драйверы видеокарт с открытым исходным кодом>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Драйвер"
    },
    {
        "task": [
            "В зависимости от назначения различают:\n<<<Библиотеки, используемые одной программой и содержащие критические для работы программы функции. Недостаток: при отсутствии библиотеки программа не сможет работать;\nБиблиотеки, используемые одной программой и содержащие дополнительные функции. Например, библиотеки плагинов используются для расширения функционала программы;\nБиблиотеки общего пользования (англ. shared library). Содержат функции, используемые несколькими программами. Могут загружаться в адресное пространство ОС (англ. system library) для экономии памяти: одна копия библиотеки будет использоваться несколькими процессами. В силу последнего обстоятельства такие библиотеки нередко называют разделяемыми.>>>",
            "Достоинства:\n<<<экономия памяти за счёт использования одной библиотеки несколькими процессами;\nвозможность исправления ошибок (достаточно заменить файл библиотеки и перезапустить работающие программы) без изменения кода основной программы.>>>",
            "Недостатки:\n<<<возможность нарушения API , — при внесении изменений в библиотеку существующие программы могут перестать работать (утратят совместимость по интерфейсу[5]);\nконфликт версий динамических библиотек, — разные программы могут нуждаться в разных версиях библиотеки;\nдоступность одинаковых функций по одинаковым адресам в разных процессах, — упрощает эксплуатацию уязвимостей (для решения проблемы изобретён pic (англ.)).>>>",
            "Например, в исходных текстах распространяются:\n<<<библиотеки для языка Fortran;\nбиблиотека Boost для языка C++.>>>",
            "Достоинства:\n<<<все необходимые функции включаются в один исполняемый файл.>>>",
            "Недостатки:\n<<<исполняемый файл занимает больше места на диске и в памяти, (если присоединяет код из объектных библиотечных файлов целиком, а не выборочно);\nпри обнаружении ошибок в библиотеке требуется пересборка всех программ.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Библиотека_(программирование)"
    },
    {
        "task": [
            "Модель OSI, которая была определена в серии стандартов ISO/IEC 7498, состоит из следующих частей:\n<<<ISO/IEC 7498-1 — базовая модель;\nISO/IEC 7498-2 — архитектура безопасности;\nISO/IEC 7498-3 — наименования и адресация;\nISO/IEC 7498-4 — система менеджмента.>>>",
            "Обработка данных двумя взаимодействующими OSI-совместимыми устройствами происходит следующим образом:\n<<<Передаваемые данные составляются на самом верхнем уровне передающего устройства (уровень N) в протокольный блок данных (PDU).\nPDU передается на уровень N-1, где он становится сервисным блоком данных (SDU).\nНа уровне N-1 SDU объединяется с верхним, нижним или обоими уровнями, создавая слой N-1 PDU. Затем он передается в слой N-2.\nПроцесс продолжается до достижения самого нижнего уровня, с которого данные передаются на принимающее устройство.\nНа приемном устройстве данные передаются от самого низкого уровня к самому высокому в виде серии SDU, последовательно удаляясь из верхнего или нижнего колонтитула каждого слоя до достижения самого верхнего уровня, где принимаются последние данные.>>>",
            "В литературе наиболее часто принято начинать описание уровней модели OSI с седьмого уровня, называемого прикладным, на котором пользовательские приложения обращаются к сети. Модель OSI заканчивается 1-м уровнем — физическим, на котором определены стандарты, предъявляемые независимыми производителями к средам передачи данных:\n<<<тип передающей среды (медный кабель, оптоволокно, радиоэфир и др.),\nтип модуляции сигнала,\nсигнальные уровни логических дискретных состояний (нули и единицы).>>>",
            "Прикладной уровень (уровень приложений; англ. application layer) — верхний уровень модели, обеспечивающий взаимодействие пользовательских приложений с сетью:\n<<<позволяет приложениям использовать сетевые службы:\nудалённый доступ к файлам и базам данных,\nпересылка электронной почты;\nотвечает за передачу служебной информации;\nпредоставляет приложениям информацию об ошибках;\nформирует запросы к уровню представления.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Сетевая_модель_OSI"
    },
    {
        "task": [
            "По зависимости от операционной системы можно различать[2]:\n<<<Независимые утилиты, не требующие для своей работы операционной системы;\nСистемные утилиты, входящие в поставку ОС и требующие её наличия;\nОптимизатор диска для восстановления целостности файловой системы и дефрагментации.>>>",
            "Примеры утилит по функциям<<<Файловый менеджер\nАрхиваторы (с возможным сжатием данных);\nПросмотрщики;\nУтилиты для диагностики аппаратного или программного обеспечения;\nУтилиты восстановления после сбоев;\nОптимизатор диска — вид утилиты для оптимизации размещения файлов на дисковом накопителе, например, путём дефрагментации диска;\nШредеры файлов;\nДеинсталлятор — программа для удаления программного обеспечения[3];\nУтилиты управления процессами.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Утилита"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Хотлинк"
    },
    {
        "task": [
            "Виды IP-телефонии<<<Связь осуществляется между компьютерами с соответствующим программным обеспечением (например софтфонами), которые посредством сети Интернет или другой компьютерной сети соединяются с сервером, осуществляющим коммутацию вызовов. Возможны звонки и в телефонную сеть общего пользования (ТСОП), в этом случае сервер находит прокси-сервер (с интегрированными шлюзами) телефонной сети, где находится искомый абонент (например Skype-пользователь).\nАбонент, имеющий телефонный аппарат, подключённый к ТСОП, звонит на телефонный номер провайдера IP-телефонии, проходит аутентификацию по ПИН-коду и набирает нужный ему номер. Прокси-сервер (с интегрированным шлюзом) провайдера находит в сети Интернет прокси-сервер, через шлюз подключённый к телефонной сети, где находится искомый абонент, и соединяется с ним. Благодаря тому, что междугородный разговор проходит не по телефонным каналам, а посредством передачи Интернет-трафика, стоимость такого вызова значительно ниже.\nАбонент, имеющий IP-телефон (не путать с одноименным наименованием компании) с интегрированным VoIP-шлюзом, через Интернет подключён непосредственно к прокси-серверу своего провайдера IP-телефонии, который по набранному телефонному номеру ищет в Интернете соответствующий ему прокси-сервер и соединяется с ним. Тот, в свою очередь, через шлюз подключён к ТСОП, где находится искомый абонент. При обратном звонке Автоматическая телефонная станция определяет, что номер принадлежит IP-телефону и отправляет его на прокси-сервер ТСОП, который соединяется с соответствующим прокси-сервером провайдера IP-телефонии и тот посылает вызов своему абоненту. По такой схеме проходят, например, вызовы на номера с DEF-кодом 800, подключённые посредством IP-телефонии. Номера абонентов IP-телефонии похожи на обычные. Вместо IP-телефона можно использовать VoIP-шлюз с подключённым к нему обычным телефонным аппаратом.\nТелефонная сеть предприятия или телекоммуникационной компании (оператора связи) построена на основе компьютерной IP-сети с применением софтсвитча, IP-АТС или виртуальной АТС. Внутри данной телефонной сети пользователи осуществляют связь посредством технологии IP-телефонии, управление осуществляется VoIP-сервером. Подключение к ТСОП подразумевает взаимодействие через VoIP-шлюз или непосредственно с другим софтсвичом или IP-АТС по сети передачи данных (в том числе, например, через Интернет).>>>",
            "Примеры:\n<<<Возможность передавать более одного телефонного звонка в рамках высокоскоростного телефонного подключения. В рамках технологии передачи данных по IP-сети применяются методики сжатия оцифрованного звука и снижения нагрузки, что в совокупности позволяет экономить до 90 % пропускной способности. Поэтому IP-телефония используется в качестве простого способа для добавления дополнительной телефонной линии дома или в офисе.\nДополнительные функции телефонной связи, такие как:\nопределение номера звонящего\nконференция,\nпереадресация звонка,\nавтоматический набор номера,\nзапись разговора,\nмногоканальный номер>>>",
            "предоставляются значительно проще (порой непосредственно на терминале пользователя) и потому нередко бесплатно, тогда как в традиционных телекоммуникационных компаниях эти возможности требуют применения дополнительного оборудования и технологий и обычно выставляются в счёт, как доп. услуга.\n<<<Безопасные звонки, со стандартизованным протоколом (такие как SRTP). Большинство трудностей для включения безопасных телефонных соединений по традиционным телефонным линиям, такие как оцифровка сигнала, передача цифрового сигнала, уже решено в рамках IP-телефонии. Необходимо лишь произвести шифрование сигнала и его идентификацию для существующего потока данных.\nНезависимость от месторасположения. Нужно только интернет-соединение для подключения к провайдеру IP-телефонии. Например, операторы центра звонков с помощью IP-телефонов могут работать из любого офиса, где есть в наличии эффективное, быстрое и стабильное интернет-подключение.\nДоступна интеграция с другими сервисами через Интернет, включая видеозвонок, обмен сообщениями и данными во время разговора, аудиоконференции, управление адресной книгой и получение информации о том, доступны ли для звонка другие абоненты.\nДополнительные телефонные свойства — такие как маршрутизация звонка, всплывающие окна с информацией о звонящем, альтернативный GSM-роуминг и внедрение IVR — легче и дешевле внедрить и интегрировать. Тот факт, что телефонный звонок находится в той же самой сети передачи данных, что и персональный компьютер пользователя, открывает путь ко многим новым возможностям.>>>",
            "Клиентское оборудование[править | править код]<<<\n\n\nIP-телефон Avaya 1140E\n\n\n\nIP-телефон Cisco 7960 IP Phone\n\n\n\nВидеотелефон AddPac VP-500\n\n\n\nCPE - домашний роутер и ADSL-модем с функцией шлюза IP-телефонии\n\n\n\nIP-телефоны Grandstream, D-Link, Cisco\n\n\n\nVoIP-шлюз Cisco SPA112.jpg\n\n>>>",
            "\n\n\nIP-телефон Avaya 1140E\n\n\n\nIP-телефон Cisco 7960 IP Phone\n\n\n\nВидеотелефон AddPac VP-500\n\n\n\nCPE - домашний роутер и ADSL-модем с функцией шлюза IP-телефонии\n\n\n\nIP-телефоны Grandstream, D-Link, Cisco\n\n\n\nVoIP-шлюз Cisco SPA112.jpg\n\n<<<VoIP-шлюз — устройство, позволяющее подключить аналоговый телефонный аппарат к VoIP-серверу или непосредственно к другому клиентскому устройству IP-телефонии. Каждый аналоговый порт шлюза (FXS) представляется в компьютерной сети как VoIP-терминал. Различают VoIP-шлюзы на 1-2 порта (иногда называемые также «VoIP-адаптерами») и многопортовые устройства, которые называют шлюзами «средней» или «высокой плотности».\nIP-телефон — устройство, которое внешне выглядит как обычный современный телефонный аппарат. В действительности является сетевым устройством, похожим на мини-ПК с собственной сетевой операционной системой. Некоторые модели IP-телефонов комплектуются монохромным или цветным дисплеем для отображения номера звонящего, параметров работы и настройки.\nВидеотелефон — вариант настольного VoIP-телефона с цветным ЖК-дисплеем и встроенной видеокамерой для просмотра и передачи видеоизображения во время разговора\nSIP-DECT-телефон — цифровой беспроводной радиотелефон, работающий по стандарту DECT, базовая радиостанция которого подключается к серверу IP-телефонии посредством компьютерной сети\nПрограммный телефон (софтфон) — программа на настольном ПК или мобильном устройстве, выполняющая роль пользовательского терминала. Звуковая система устройства — звуковая карта и встроенные или внешние динамики или наушники и микрофон или гарнитура - служат в качестве инструмента обеспечения звука. Программный телефон лишь использует драйвер звуковой карты в используемой операционной системе. Функции сетевой связи реализуются также в операционной системе. Нередко программные телефоны по своему дизайну — внешнему виду напоминают телефонный аппарат или мобильный телефон, имеют номеронабиратель, дисплей для отображения номера звонящего или вызываемого пользователя, историю вызовов, а также встроенную адресную книгу для совершения вызова посредством щелчка на контакте, без необходимости набора номера. Нередко программный телефон выполняет роль пользовательского инструмента для унифицированных коммуникаций — обладает функциями не только голосовой связи, но и конференц-связи, видео-связи, обмена текстовыми сообщениями, передачи файлов.>>>",
            "USB-телефон<<<USB-телефон — пользовательское устройство, по внешнему виду, как правило, имитирующее трубку телефонного аппарата или телефонный аппарат. USB-телефон подключается к USB-порту компьютера (отсюда и название). Такое устройство, как правило, требует установки дополнительного ПО в операционную систему (или устанавливает его самостоятельно при первом подключении). В этом случае по сути является вариантом софтфона с внешней гарнитурой или акустической системой для компьютера, с дополнительным управлением из программы. Некоторые USB-телефоны являются просто USB-гарнитурой — динамиком с микрофоном. Распространены также USB-телефоны с встроенной поддержкой протоколов управления вызовами H.323, SIP и Skype и способов передачи медиаданных.>>>",
            "Для работы в сложной сети с большим числом пользователей необходим централизованный коммутатор — устройство или программа, реализующие функционал автоматической телефонной станции в IP-сети, VoIP-сервер. К серверам IP-телефонии относят:\n<<<Сервер многоточечной конференции (англ. Multipoint Control Unit, MCU) — аппаратно-программное устройство, предназначенное для объединения аудио- и видеоконференции в многоточечный режим. Применяется, как правило в корпоративной среде для организации внутренней связи.\nАппаратный VoIP-шлюз с возможностью подключения нескольких аналоговых телефонных аппаратов. Нередко обладает встроенными функциями мини-АТС и в этом случае может выполнять функции VoIP-сервера. VoIP-шлюз может быть подключён к другой аналоговой или цифровой телефонной станции на FXS-порт посредством стандартного телефонного FXO-интерфейса.\nVoIP-GSM-шлюз — разновидность VoIP-шлюза. Устройство, предназначенное для прямой трансляции телефонного сигнала из IP-сетей в сотовую телефонную сеть и обратно.>>>",
            "Также существуют потоковые шлюзы — устройства, позволяющие подсоединить аналоговую или цифровую телефонную станцию к другой IP-АТС посредством компьютерной сети и реализующие функцию преобразования.<<<Цифровая АТС с возможностью подключения VoIP-терминалов пользователей посредством компьютерной сети, благодаря наличию специальной сетевой карты или дополнительной платы расширения с поддержкой подключения к компьютерной сети и реализующей функции VoIP.\nПрограммный коммутатор (софтсвитч) — программа, работающая на любом аппаратном сервере или виртуальной машине под управлением сетевой операционной системы. Благодаря тому, что программное обеспечение легко может быть доработано, в софтсвичах реализуется самая различная логика работы и инструменты интеграции с другими системами. Некоторые софтсвичи интегрированы в специальное отдельное аппаратное устройство и не могут быть установлены в никакое другое устройство.\nВиртуальная АТС — разновидность софтсвича, предлагаемая как услуга какой-либо телекоммуникационной компанией>>>",
            "Протоколы обеспечивают регистрацию клиентского устройства (шлюз, терминал или IP-телефон) на сервере или так называемом привратнике провайдера, вызов и/или переадресацию вызова, установление голосового или видеосоединения, передачу имени и/или номера абонента. В настоящее время широкое распространение получили следующие протоколы:\n<<<RTP/RTCP - парные транспортные протоколы, обеспечивающие пакетную передачу оцифрованных медиаданных в IP-сети. Для управления сеансом связи и его параметрами используются сигнальные протоколы, которые, в частности, определяют параметры передачи медиа-трафика. Для обеспечения безопасности могут применяться SRTP/SRTCP или DTLS\nSIP — протокол сеансового установления связи, обеспечивающий управление взаимодействием и согласование параметров передачи голоса, видео, сообщений систем мгновенного обмена сообщений и произвольной нагрузки, для сигнализации обычно использует порт 5060 UDP. Поддерживает контроль присутствия.\nH.323 — рекомендация ITU-T, стек протоколов, более привязанный к системам традиционной телефонии, чем SIP, сигнализация по порту 1720 TCP, и 1719 TCP для регистрации терминалов на гейткипере.\nMGCP — протокол управления медиашлюзами (заменил SGCP).\nMegaco/H.248 — протокол управления медиашлюзами, развитие MGCP.\nSIGTRAN — набор протоколов туннелирования PSTN-сигнализации ОКС-7 через IP на программный коммутатор (Softswitch).\nSCTP — протокол для организации гарантированной доставки пакетов в IP-сетях.\nSCCP (Skinny) — ранее закрытый протокол управления терминалами (IP-телефонами и медиашлюзами) в продуктах компании Cisco, ныне открытый.\nJingle (дополнение к XMPP / Jabber).\nIAX2 — протокол для обмена данными между IP-PBX Asterisk. Через 4569 UDP-порт передается и сигнализация, и медиатрафик.\nUNIStim — ранее закрытый протокол передачи сигнального трафика в продуктах компании Nortel, ныне открытый.\nWebRTC — веб-технология установления VoIP-соединения внутри протокола HTTP илли HTTPS, медиатрафик передается посредством DTLS. Применяется в современных веб-браузерах.>>>",
            "Кодирование вносит дополнительную задержку порядка 15—45 мс, возникающую по следующим причинам:\n<<<использование буфера для накопления сигнала и учёта статистики последующих отсчётов (алгоритмическая задержка);\nматематические преобразования, выполняемые над речевым сигналом, требуют процессорного времени (вычислительная задержка).>>>",
            "Проведённый в различных исследовательских группах анализ качества передачи речевых данных через Интернет показывает, что основным источником возникновения искажений, снижения качества и разборчивости синтезированной речи является прерывание потока речевых данных, вызванное:\n<<<потерями пакетов при передаче по сети связи;\nпревышением допустимого времени доставки пакета с речевыми данными.>>>",
            "Основными преимуществами IP-телефонии является снижение требований к полосе пропускания, что обеспечивается учётом статистических характеристик речевого трафика:\n<<<блокировкой передачи пауз (диалоговых, слоговых, смысловых и др.), которые могут составлять до 40-50 % времени занятия канала передачи (VAD);\nвысокой избыточностью речевого сигнала и его сжатием (без потери качества при восстановлении) до уровня 20-40 % исходного сигнала (см.: аудиокодек).>>>",
            "При передаче телефонного трафика по технологии IP должны учитываться жёсткие требования стандарта TL9000 к качеству услуг, характеризующие:\n<<<качество установления соединения, определяемое в основном быстротой установления соединения,\nкачество соединения, показателем которого являются сквозные (воспринимаемые пользователем) задержки и качество воспринимаемой речи.>>>",
            "Для решения подобных проблем предлагается комплекс мер[2]:\n<<<использование алгоритмического восстановления потерянных частей голоса (усреднение по соседним данным)\nприоритезация трафика во время транспорта в одной сети при помощи пометки IP-пакетов в поле Type of Service\nиспользование изменяемого джиттер-буфера необходимой длины, который позволяет накапливать пакеты и выдавать их снова с нормальной периодичностью\nотключение проксирования медиаданных на узком месте сети, то есть достижение прямого обмена речью между узлом звонящего и вызываемого абонента при посредничестве промежуточных серверов только на этапе установления и завершения вызова\nприменение кодеков с меньшей алгоритмической задержкой (для уменьшения нагрузки на процессор, осуществляющий АЦП и ЦАП)>>>",
            "Любое VoIP-соединение имеет целый ряд параметров, общепринятых как точные показатели оценки качества соединения. Кроме того, большинство существующих операторов IP-телефонии при оказании услуг позволяет даже выбирать узел, через который пройдет звонок, не только руководствуясь ценой, но и дополнительными статистическими параметрами, характеризующими качество связи:\n<<<ASR/ABR — отношение количества обслуженных звонков к числу попыток позвонить в процентах. Характеризует наилучший дозвон.\nACD — средняя продолжительность звонков через узел на данное направление; процент состоявшихся звонков с длительностью меньше 30 секунд. Характеризует наиболее устойчивую связь во время разговора.\nALOC (англ. Average Length Of Conversation — средняя продолжительность разговора). Усреднённый показатель длительности состоявшихся вызовов на каком-либо направлении. См. документ Международного союза электросвязи (ITU) рекомендации: E.434: «Quality of service, network management and traffic engineering — Network management — Checking the quality of the international telephone service».>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/IP-телефония"
    },
    {
        "task": [
            "По типу применяемого процессора[править | править код]<<<CISC (англ. complex instruction set computing) — архитектура с полным набором команд. Такие процессоры выполняют все команды, простые и сложные, за большое количество тактов. Команд в таких процессорах много, и компиляторы верхнего уровня редко используют все команды\nRISC (англ. reduced instruction set computing) — архитектура с сокращённым набором команд. Такие процессоры, в целом, работают быстрее, чем с CISC-архитектурой, за счёт упрощения архитектуры и сокращения количества команд, но для выполнения сложной команды она составляется из набора простых, что увеличивает время выполнения команды (за большее количество тактов). Современные процессоры RISC по внутренней сложности приближаются, а то и превосходят классические CISC аналоги\nMISC (англ. minimal instruction set computing) — архитектура с минимальным набором команд. Такие процессоры имеют минимальное количество команд, все команды простые и требуют небольшого количества тактов на выполнение, но если выполняются сложные вычисления, например, с числами с плавающей запятой, то такие команды выполняются за существенно большее количество тактов, превышающее CISC- и RISC-архитектуры\nVLIW (англ. very long instruction word — «очень длинная машинная команда») — архитектура с длинной машинной командой, в которой указывается параллельность выполнения вычислений. Такие процессоры получили широкое применение в цифровой обработке сигналов>>>",
            "По принципу разделения памяти[править | править код]<<<Гарвардская архитектура — характерной чертой является разделение памяти программ и памяти данных\nФон Неймановская архитектура — характерной чертой является совместное хранение программ и данных>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Архитектура_компьютера"
    },
    {
        "task": [
            "Отличительными особенностями по сравнению с ЦП являются:\n<<<архитектура, максимально нацеленная на увеличение скорости расчёта текстур и сложных графических объектов;\nограниченный набор команд.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Графический_процессор"
    },
    {
        "task": [
            "Преимущества ноутбуков перед настольными ПК:\n<<<Малый вес и габариты. Даже ноутбуки категории замена настольного ПК можно легко переместить в другое место. Ноутбук можно взять в командировку, на дачу, в отпуск. Перемещение настольного компьютера в другую комнату/кабинет зачастую представляет собой проблему, не говоря уже о перемещении в другой город.\nДля работы не обязательно подключать внешние устройства. Ноутбук включает в себя встроенные дисплей, клавиатуру и устройство указания (обычно тачпад), а к настольному компьютеру все эти устройства необходимо подключать отдельно.\nВозможность автономной работы. Наличие аккумулятора позволяет ноутбуку работать в условиях, когда электрическая сеть недоступна (в поезде, самолёте, автомобиле, кафе и просто на улице). Настольный компьютер может работать автономно очень недолгое время и только при наличии источника бесперебойного питания.\nВозможность подключения к беспроводным сетям. Практически все современные ноутбуки (за исключением некоторых сверхбюджетных моделей) оснащены встроенным Wi-Fi-адаптером, что позволяет подключиться к интернету без проводов. Точки доступа Wi-Fi есть во многих кафе, развлекательных центрах, аэропортах, гостиницах. Существуют также городские Wi-Fi сети, позволяющие подключиться к беспроводной сети во многих районах города. Настольные компьютеры обычно не содержат встроенного Wi-Fi-адаптера (за исключением некоторых дорогих моделей и большинства неттопов), впрочем, для стационарных компьютеров данный недостаток несущественен.>>>",
            "Недостатки[править | править код]<<<Низкая максимальная производительность. Компактные размеры ноутбуков предъявляют особые требования к охлаждению, поэтому компоненты, используемые в ноутбуках, имеют жёсткие ограничения по тепловыделению, а, следовательно, и мощности. Даже мощные игровые ноутбуки и мобильные рабочие станции не могут сравниться с производительными настольными ПК, предназначенными для таких требовательных задач, как компьютерные игры, трёхмерное моделирование и проектирование, рендеринг, инженерные расчёты. Немногочисленные дескноуты исправить положение не могут, поскольку для них существуют те же ограничения по габаритам и тепловыделению, что и для других ноутбуков. Поэтому в дескноутах устанавливаются не самые производительные настольные процессоры и используются мобильные версии видеокарт.\nОграниченность модернизации. В отличие от настольных компьютеров, возможность модернизации ноутбуков сильно ограничена. В портативных компьютерах, как правило, предусмотрена возможность самостоятельной замены ОЗУ и жёсткого диска. Модернизация видеокарты в большинстве ноутбуков не предусмотрена, хотя встречаются модели, позволяющие осуществить и замену графического адаптера. В случае необходимости замены других компонентов, в том числе процессора и дисковода оптических дисков, рекомендуется обращаться к квалифицированным специалистам. В розничной продаже мобильные версии процессоров и видеокарт практически не встречаются.\nПроблемы совместимости с различными операционными системами. Производители ноутбуков редко осуществляют поддержку семейства операционных систем, отличных от предустановленной на данную модель ноутбука. Кроме того, в ноутбуках часто используются специфические компоненты, поэтому проблемы совместимости с другими ОС возникают значительно чаще, чем для настольных компьютеров.>>>",
            "Недостатки ноутбуков, являющиеся следствием мобильности портативных компьютеров:\n<<<Качество встроенных компонентов. В отличие от настольных компьютеров, в ноутбук встроены дисплей, клавиатура и тачпад (иногда — трекбол или тензометрический джойстик), качество и удобство использования которых зачастую невысоки. Клавиатура обычно имеет меньше клавиш, чем настольная (за счёт совмещённого цифрового блока клавиш), а размеры клавиш, особенно у субноутбуков и нетбуков, могут быть очень маленькими и неудобными для некоторых пользователей. Тачпад менее удобен, чем компьютерная мышь. Монитор ноутбука не может быть очень большим (как правило, диагональ не превышает 17.3 дюйма). Перечисленные недостатки встроенных элементов вполне закономерны для мобильных устройств, и их можно компенсировать подключением внешних компонентов (монитора, клавиатуры, компьютерной мыши), однако это увеличивает конечную стоимость ноутбука и несколько снижает мобильность портативного компьютера.\nСистема охлаждения электронных компонентов ноутбука часто работает на пределе из-за небольших габаритов. Микросхемы ноутбуков чаще перегреваются до температур деградации и выходят из строя — в особенности если пользователи, пренебрегая этим фактором, располагают включённый ноутбук так, что вентиляционные отверстия оказываются перекрыты. В настольных компьютерах организация адекватного охлаждения обычно не представляет труда, особенно в случае современных корпусов с расположением блока питания снизу.\nПовышенная вероятность поломки. Мобильность ноутбуков порождает ещё одну проблему, которую тоже иногда заносят в недостатки портативных компьютеров — большая вероятность поломки по сравнению с настольным ПК. Ноутбуки чаще роняют. Существует вероятность сломать дисплей ноутбука при закрытии крышки (если между клавиатурой и дисплеем попадёт посторонний предмет). Если залить клавиатуру ноутбука какой-либо жидкостью, то велика вероятность выхода портативного компьютера из строя (в то время, как в настольном компьютере из строя выйдет только клавиатура).\nВысокая вероятность потери или кражи. Компактные и мобильные портативные ПК очень часто крадут, и столь же часто их теряют, забывая в транспорте, отелях, конференц-залах и так далее. Защитить ноутбук от потери или кражи можно путём соблюдения элементарных правил безопасности (не оставлять устройство где попало, не привлекать к нему внимание и прочее). Дополнительно можно оснастить портативное устройство кодовым замком со стальным кабелем (например, замком Kensington Security Lock), который прикрепляется к большому и тяжёлому неподвижному объекту или замком со звуковой сигнализацией, подключаемым через USB-разъём (при отключении такого замка или повреждении троса срабатывает сирена). В случае кражи или потери ноутбука до его информации добраться проще простого, причём можно даже без снятия пароля: с гаджета просто снимается жёсткий диск, подключается к специальному переходнику для HDD, который (то есть переходник) подключается через USB-порт — к ПК в качестве съёмного диска.>>>",
            "В первом приближении клавиатура является обычной резино-мембранной. Чтобы уменьшить её толщину до нескольких миллиметров, применяются несколько технических решений:\n<<<Основа клавиатуры — металлическая пластина с выштампованными рёбрами жёсткости.\nРезинки уменьшены до предела, что, впрочем, снижает жёсткость клавиш.\nЧтобы защитить клавиши от перекоса, используют так называемый ножничный механизм, сборку из двух пластмассовых деталей. Это усложняет разборку клавиатуры (часто, чтобы ничего не сломать, её продувают сжатым газом без разборки), но тонкую клавиатуру проще чистить снаружи, а узкие щели медленнее загрязняются. В длинных клавишах (пробел, ввод) используется такой же проволочный стабилизатор, как и в полноразмерных клавиатурах.\nМембраны делают из тонкого прочного лавсана или полиимида, с прорезями для частей механизма.>>>",
            "В качестве изготовителей ноутбуков часто выступают следующие компании (Таблица соответствия брендов и OEM-производителей ноутбуков):\n<<<Quanta Computer — крупный тайваньский производитель (для Sony, Lenovo, HP, Apple).\nFalcon Northwest[англ.] — выпускает High-End-ноутбуки.\nCompal — производит некоторые модели Acer, Dell, Toshiba, HP и т. д., специализируется на бюджетных ноутбуках.\nPegatron — широкий список моделей (Lenovo, Asus, Alienware, HP, Apple), бывшее подразделение Asus.\nClevo — выпускает популярные игровые ноутбуки.\nSager — мощные ноутбуки.\nUniwill — ноутбуки ECS[англ.].\nWistron — бизнес-модели (Apple, HP, Dell, Lenovo), бывшее подразделение Acer.\nInventec — бизнес-модели HP.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Ноутбук"
    },
    {
        "task": [
            "Обычно выделяют дополнительные сущности, связанные с работой с файлом:\n<<<Дескриптор файла. При открытии файла (в случае, если это возможно), операционная система возвращает число (или указатель на структуру), с помощью которого выполняются все остальные файловые операции. По их завершении файл закрывается, а дескриптор теряет смысл.\nФайловый указатель. Число, являющееся смещением относительно нулевого байта в файле. Обычно по этому адресу осуществляется чтение и запись, в случае, если вызов операции чтения или записи не предусматривает указание адреса. При выполнении операций чтения или записи файловый указатель увеличивается на число прочитанных или записанных байт. Последовательный вызов операций чтения таким образом позволяет прочитать весь файл последовательно, не заботясь о позиционировании.\nФайловый буфер. Операционная система или библиотека языка программирования осуществляет кэширование файловых операций в специальном буфере (участке памяти). При закрытии файла буфер сбрасывается.\nРежим доступа. В зависимости от потребностей программы, файл может быть открыт на чтение или запись. Кроме того, некоторые операционные системы и библиотеки предусматривают режим работы с текстовыми файлами. Режим обычно указывается при открытии файла.\nРежим общего доступа. В случае многозадачной операционной системы возможна ситуация, когда несколько программ одновременно хотят открыть файл на чтение или запись. Для регулирования этого существуют режимы общего доступа, указывающие на возможность осуществления совместного доступа к файлу (например, файл, в который производится запись, может быть открыт для чтения другими программами — это стандартный режим работы с файлами регистрации).>>>",
            "Операции<<<Открытие файла (обычно в качестве параметров передается имя файла, режим доступа и режим совместного доступа, а в качестве результата выступает файловый дескриптор), кроме того обычно имеется возможность в случае открытия на запись указать на то, должен ли размер файла изменяться на нулевой.\nЗакрытие файла. В качестве аргумента выступает значение, полученное при открытии файла. При закрытии все файловые буферы сбрасываются.\nЗапись — в файл помещаются данные.\nЧтение — данные из файла помещаются в область памяти.\nПеремещение указателя — указатель перемещается на указанное число байт вперёд или назад или перемещается по указанному смещению относительно начала или конца. Не все файлы позволяют выполнение этой операции (например, файл на ленточном накопителе может не «уметь» перематываться назад).\nСброс буферов — содержимое файловых буферов с не записанной в файл информацией записывается. Используется обычно для указания на завершение записи логического блока (для сохранения данных в файле на случай сбоя).\nПолучение текущего значения файлового указателя.>>>",
            "В различных операционных и файловых системах могут быть реализованы различные типы файлов, кроме того, реализация различных типов может различаться.\n<<<«Обыкновенный файл» — файл, позволяющий операции чтения, записи, позиционирования внутри файла, изменения размера, иногда работу с атрибутами.\nВременный файл — усиленное кэширование с запоздалой записью на диск; иногда — удаление сразу после того, как файл закроется.\nКаталог (англ. directory — алфавитный справочник) или директория (также «папка») — файл, содержащий записи о входящих в него файлах. Каталоги могут содержать записи о других каталогах, образуя древовидную структуру, а при наличии ссылок — сетевую структуру.\nЖёсткая ссылка (англ. hardlink) — в общем случае, одна и та же область информации может иметь несколько имён. Такие имена называют жёсткими ссылками (хардлинками). После создания жёсткой ссылки сказать, где «настоящий» файл, а где жёсткая ссылка, невозможно, так как имена равноправны. Сама область данных существует до тех пор, пока существует хотя бы одно из имён. Жёсткие ссылки возможны только в пределах одного экземпляра файловой системы.\nСимвольная ссылка (символическая ссылка) — файл, содержащий в себе ссылку на имя нужного файла любого типа. Может ссылаться на любой элемент файловой системы, в том числе, и расположенный на другом физическом носителе. В некоторых ФС может ссылаться на несуществующий файл, образовывать циклы, ссылаться на себя.\nПриравниваемые к файлам объекты — например, устройства.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Файл"
    },
    {
        "task": [
            "Физический (аппаратный интерфейс) — способ взаимодействия физических устройств. Чаще всего речь идёт о компьютерных портах (разъёмах).\n<<<Сетевой интерфейс\nСетевой шлюз — устройство, соединяющее локальную сеть с более крупной, например, Интернетом\nШина (компьютер)>>>",
            "Основная статья: Программный интерфейс<<<Прикладной программный интерфейс (API) — набор стандартных библиотечных методов, которые программист может использовать для доступа к функциональности другой программы.\nУдалённый вызов процедур\nCOM-интерфейс\nИнтерфейс объектно-ориентированного программирования — описание методов взаимодействия объектов приложения на уровне исходного кода\nЗапись голосовой команды в мобильном приложении или веб-браузере информационных систем; дополнение аудиозаписи идентификатором и прочими метаданными; передача в Интеграционную шину Ассистента речевого управления произвольным интерфейсом; получение от Интеграционной шины идентификатора распознанной команды и её параметра; отправка и исполнение распознанной голосовой команды управления веб-интерфейсом на стороне информационной системы.[6]\nЧерез графический Web-интерфейс, имеющий картографическую основу и позволяющий визуализировать прием, обработку, регистрацию и передачу данных, обеспечивая предоставление цифровых сервисов. Область применения: информационное обеспечение и взаимодействие судов и береговых систем мониторинга и управления. Функциональные возможности: сопряжение с сервисами e-Навигации; обеспечение интерактивной работы с сервисами e-Навигации; отображение данных на электронной навигационной карте; предоставление пользователю необходимых инструментов для работы с сервисами е-Навигации.[7]>>>",
            "Интерфейс пользователя: совокупность средств, при помощи которых пользователь взаимодействует с различными программами и устройствами:\n<<<Интерфейс командной строки: инструкции компьютеру даются путём ввода с клавиатуры текстовых строк (команд).\nГрафический интерфейс пользователя: программные функции представляются графическими элементами экрана, WIMP\nSILK-интерфейс (от speech — речь, image — образ, language — язык, knowledge — знание): взаимодействие с компьютером посредством речи.\nЖестовый интерфейс: сенсорный экран, руль, джойстик и т. д.\nНейрокомпьютерный интерфейс: отвечает за обмен между нейронами и электронным устройством при помощи специальных имплантированных электродов.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Интерфейс"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Потоковое_мультимедиа"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Вычислительная_техника"
    },
    {
        "task": [
            "В локальных сетях, основанных на протоколе IPv4, могут использоваться специальные адреса, назначенные IANA (стандарты RFC 1918 и RFC 1597):\n<<<10.0.0.0—10.255.255.255;\n172.16.0.0—172.31.255.255;\n192.168.0.0—192.168.255.255.>>>",
            "Особенно популярен следующий способ организации удалённого доступа к локальной сети:\n<<<Обеспечивается подключение снаружи к маршрутизатору, например по протоколу PPPoE, PPTP или L2TP (PPTP+IPSec).\nТак как в этих протоколах используется PPP, то существует возможность назначить абоненту IP-адрес. Назначается свободный (не занятый) IP-адрес из локальной сети.\nМаршрутизатор (VPN, Dial-in сервер) добавляет Proxy ARP — запись на локальной сетевой карте для IP-адреса, который он выдал VPN-клиенту. После этого, если локальные компьютеры попытаются обратиться напрямую к выданному адресу, то они после ARP-запроса получат MAC-адрес локальной сетевой карты сервера, и трафик пойдёт на сервер, а потом и в VPN-туннель.>>>",
            "Исторически телекоммуникационные технологии, и локальные сети развивались своими независимыми путями. Поэтому одна и та же проблема создания виртуальных соединений (виртуальных сетей) была фактически решена принципиально разными способами. Поэтому (с некоторой долей условности), можно выделить два пути:\n<<<Локальный. Строится на базе коммутируемого Ethernet с использованием виртуальных сетей. Разделение происходит на уровне коммутатора, который имеет возможность выделять на канальном уровне одного или нескольких пользователей в группу по некоторым признакам (порту или МАС-адресу). То есть если есть несколько свитчей в локальной сети с поддержкой стандарта 802.1q можно построить между ними VLAN. Применяется только в LAN.\nТелекоммуникационный. Предполагает создание виртуальных каналов (туннелей) «поверх» транспортного протокола (обычно IP или Ethernet). Узел-клиент, используя свои учётные данные, устанавливает соединение «точка-точка» с сервером доступа, и уже через этот вновь образованный канал осуществляет передачу/прием данных. При этом как процедура авторизации, так и информационный обмен может быть зашифрован вся, либо частично (только заголовка и пароля авторизации). Применяется в WAN для связи между публичными IP, можно применять в LAN.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Локальная_вычислительная_сеть"
    },
    {
        "task": [
            "Классификация документов<<<По назначению:\nорганизационные документы (устав, должностная инструкция, положение, штатное расписание, структура и штатная численность);\nраспорядительные документы (приказ, выписка из приказа, распоряжение, указание, постановление, решение);\nинформационно-справочные документы (акт, протокол, докладная записка, объяснительная записка, служебная записка, письмо, справка);\nучётно-расчетные (бухгалтерские) документы (платёжное поручение, счёт-фактура, накладная, акт и т. п.). Учетный первичный документ необходимо оформлять на каждую совершенную организацией деловую операцию (п. 1 ст. 9 Федерального закона от 06.12.2011 № 402-ФЗ «О бухгалтерском учете»[3];\nнормативные документы с позиции правовых норм регламентируют общие принципы, правила или характеристики. Охватывают такие понятия, как стандарты, нормы, правила, своды правил, регламенты и другие подобные документы;\nиные.>>>",
            "По назначению:\nорганизационные документы (устав, должностная инструкция, положение, штатное расписание, структура и штатная численность);\nраспорядительные документы (приказ, выписка из приказа, распоряжение, указание, постановление, решение);\nинформационно-справочные документы (акт, протокол, докладная записка, объяснительная записка, служебная записка, письмо, справка);\nучётно-расчетные (бухгалтерские) документы (платёжное поручение, счёт-фактура, накладная, акт и т. п.). Учетный первичный документ необходимо оформлять на каждую совершенную организацией деловую операцию (п. 1 ст. 9 Федерального закона от 06.12.2011 № 402-ФЗ «О бухгалтерском учете»[3];\nнормативные документы с позиции правовых норм регламентируют общие принципы, правила или характеристики. Охватывают такие понятия, как стандарты, нормы, правила, своды правил, регламенты и другие подобные документы;\nиные.<<<По времени создания — первичные и вторичные (реферат, аннотация, обзор и т. д.);\nПо способу изготовления — черновой, беловой, электронный, изобразительный, рукописный документ, машинописный, печатный (брошюра, книга, журнал);\nПо типу содержания — текстовые, иконические (графические), идеографические (схемы, карты, ноты), аудиальные, мультимедийные;\nПо способу представления — электронный, на бумажных носителях;\nПо месту издания — внутренние, внешние;\nПо направлению отправки — входящие, исходящие;\nПо распространению — опубликованные, неопубликованные, непубликуемые, промежуточные;\nПо необходимости технических средств — человекочитаемые, машиночитаемые;\nПо уровню секретности — несекретные, секретные, с разным уровнем секретности, конфиденциальные и т. д.>>>",
            "Документы могут выполнять следующие функции:\n<<<Информационная — определяется потребностью документирования, хранения и предоставления информации;\nКоммуникативная — документы являются средством обмена информацией во времени и пространстве;\nориентация документов в одном направлении (сверху вниз, снизу вверх);\nдвусторонние документы;\nСоциальная — состоит в фиксации, сохранении и передаче непосредственно социальной информации; каждый документ социально значим, так как создан ввиду какой-либо социальной потребности.\nКультурная — способность документа сохранять и передавать культурные традиции, эстетические нормы, ритуалы, принятые в обществе;\nУправленческая — документ как способ управления деятельностью;\nПравовая — документ выступает в качестве способа закрепления и (или) изменения правовых норм и правоотношений;\nИсторическая — документ является историческим источником с момента создания[4].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Документ"
    },
    {
        "task": [
            "Наиболее известные протоколы, используемые в сети Интернет:\n<<<HTTP (Hyper Text Transfer Protocol) — это протокол передачи гипертекста. Протокол HTTP используется при пересылке Web-страниц между компьютерами, подключенными к одной сети.\nFTP (File Transfer Protocol) — это протокол передачи файлов со специального файлового сервера на компьютер пользователя. FTP дает возможность абоненту обмениваться двоичными и текстовыми файлами с любым компьютером сети. Установив связь с удаленным компьютером, пользователь может скопировать файл с удаленного компьютера на свой или скопировать файл со своего компьютера на удаленный.\nPOP3 (Post Office Protocol) — это стандартный протокол почтового соединения. Серверы POP обрабатывают входящую почту, а протокол POP предназначен для обработки запросов на получение почты от клиентских почтовых программ.\nSMTP (Simple Mail Transfer Protocol) — протокол, который задает набор правил для передачи почты. Сервер SMTP возвращает либо подтверждение о приеме, либо сообщение об ошибке, либо запрашивает дополнительную информацию.\nTELNET — это протокол удаленного доступа. TELNET дает возможность абоненту работать на любой ЭВМ находящейся с ним в одной сети, как на своей собственной, то есть запускать программы, менять режим работы и так далее. На практике возможности ограничиваются тем уровнем доступа, который задан администратором удаленной машины.>>>",
            "Другие протоколы:\n<<<DTN — протокол, предназначенный для сетей дальней космической связи IPN, которые используются NASA.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Протокол_передачи_данных"
    },
    {
        "task": [
            "Форматы записи на пятидюймовые дискеты позволяет хранить на ней 110, 360, 720 или 1200 килобайт данных.\n<<<\nУстройство дискеты 5¼″\n\n\nДискета 5,25 дюйма в разобранном виде (с раскрытым футляром): 1 — футляр; 2 — антифрикционные прокладки; 3 — окно для шпинделя привода; 4 — окно индексного отверстия; 5 — окно для магнитных головок; 6 — полимерный диск с магнитным покрытием; 7 — отверстие для шпинделя привода; 8 — индексное отверстие; 9 — выемка защиты от записи\n\n\n\nФутляр в развёрнутом виде\n\n\n\nМагнитный диск\n\n\n\nВарианты закрепления клапанов футляра: термосвариванием (вверху) и склеиванием (внизу)\n\n>>>",
            "Классический вид дискеты. Принципиальное отличие дискеты 3½ дюйма — жёсткий пластмассовый корпус. Вместо индексного отверстия в дискетах диаметром 3½ дюйма используется металлическая втулка с установочным отверстием, которая находится в центре дискеты. Механизм дисковода захватывает металлическую втулку, а отверстие в ней позволяет правильно позиционировать дискету, поэтому отпала необходимость делать для этого отверстие непосредственно в магнитном диске. В отличие от 8- и 5-дюймовых дискет, окно для головок дискеты 3½ дюйма закрыто шторкой из металла или пластмассы, которая сдвигается в сторону специальным рычагом во время установки дискеты в дисковод. Защита от записи производится небольшой сдвигающейся пластиковой шторкой в нижнем левом углу дискеты — открытое окошко соответствует активированной защите. В правом нижнем углу находятся окошки, позволяющие схеме дисковода определить плотность записи на дискету:\n<<<нет окошка — 720 КБ,\nокошко расположено на одном уровне с окошком защиты от записи — 1,44 МБ,\nокошко расположено выше уровня окошка защиты от записи — 2,88 МБ.>>>",
            "«Стандартные» форматы дискет IBM PC различались размером диска, количеством секторов на дорожке, количеством используемых сторон (SS обозначает одностороннюю дискету, DS — двухстороннюю), а также типом (плотностью записи) дисковода — тип дисковода маркировался:\n<<<SD (англ. Single Density, одинарная плотность, впервые появился в IBM System 3740),\nDD (англ. Double Density, двойная плотность, впервые появился в IBM System 34),\nQD (англ. Quadruple Density, четверная плотность, использовался в отечественных клонах Robotron-1910 — 5¼″ дискета 720 К, Amstrad PC, Нейрон И9.66 — 5¼″ дискета 640 К),\nHD (англ. High Density, высокая плотность, отличался от QD повышенным количеством секторов),\nED (англ. Extra High Density, сверхвысокая плотность).>>>",
            "Кроме вышеперечисленных вариаций форматов, существовал целый ряд усовершенствований и отклонений от стандартного формата дискет:\n<<<например, для RT-11 и её адаптированных в СССР версий количество находящихся в обороте несовместимых форматов дискеты превышало десяток. Наиболее известные — применяемые в ДВК MX, MY;\nтакже известны 320/360-килобайтные дискеты Искра-1030/Искра-1031 — фактически они представляли собой SS/QD-дискеты, но их загрузочный сектор был отмаркирован как DS/DD. В результате стандартный дисковод IBM PC не мог прочесть их без использования специальных драйверов (типа 800.com), а дисковод Искра-1030/Искра-1031, соответственно, не мог читать стандартные дискеты DS/DD от IBM PC;\nв компьютерах платформы ZX-Spectrum применялись дискеты 5,25 и 3,5 дюйма, но применялся свой собственный уникальный формат TR-DOS — 16 секторов на дорожке, каждый сектор по 256 байт (вместо 512 байт, стандартных для IBM PC). Поддерживались как двухсторонние, так и односторонние дискеты и дисководы. В результате объём данных составлял 640 и 320 Кбайт соответственно. Формат поддерживает только корневой каталог, который занимает только первые 8 секторов 0-й дорожки, в 9-м секторе располагается системная информация о дискете — тип (TR-DOS или нет), одно- или двухсторонний диск, общее количество файлов и количество свободных секторов (не байт, а именно секторов). Сектора с 10 по 16 на нулевой дорожке не используются. Все файлы располагаются только последовательно — формат TR-DOS понятия не имеет о фрагментации, а максимальный размер файла — 64 Кбайт. После удаления файла внутри занятого пространства появляются свободные сектора, которые занять уже нельзя до тех пор, пока не будет выполнена команда уплотнения диска «Move». На IBM PC-совместимых компьютерах такие дискеты можно прочитать и записать только с помощью специальных программ, например ZX Spectrum Navigator v.1.14 или ZXDStudio.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Дискета"
    },
    {
        "task": [
            "По типу исполнения ПЗУ выделяют:\n<<<ПЗУ, в которых массив данных (в обиходе называемый «прошивкой») совмещён с устройством выборки (считывающим устройством):\nмикросхема ПЗУ;\nодин из внутренних ресурсов однокристального компьютера (микроконтроллера), как правило, FlashROM;\nмоноскоп;\nПЗУ, в которых массив данных существует самостоятельно:\nкомпакт-диск;\nгибкая грампластинка с цифровой записью (с 1975 года);\nперфокарта;\nперфолента;\nштрих-коды;\nмонтажные «1» и монтажные «0»;\nмагнитная полоска на пластиковой карте: при нормальном использовании записанные данные являются неизменяемыми (при этом, в списке отсутствует магнитная лента, так как данные на ней нередко перезаписываются).>>>",
            "По разновидностям микросхем выделяют ПЗУ:\n<<<по технологии изготовления кристалла:\nROM — (англ. read-only memory, постоянное запоминающее устройство) — масочное ПЗУ, изготовляемое фабричным методом;\nPROM — (англ. programmable read-only memory, программируемое ПЗУ (ППЗУ)) — ПЗУ, однократно «прошиваемое» пользователем;\nEPROM (англ. erasable programmable read-only memory) — перепрограммируемое ПЗУ, например, содержимое микросхемы К573РФ1 стиралось при помощи ультрафиолетовой лампы. Для прохождения ультрафиолетовых лучей к кристаллу в корпусе микросхемы было предусмотрено окошко с кварцевым стеклом;\nEEPROM (англ. electrically erasable programmable read-only memory) — электрически стираемое перепрограммируемое ПЗУ, память которого может стираться и заполняться данными несколько десятков тысяч раз, используется в твердотельных накопителях, одной из разновидностей EEPROM является флеш-память;\nПЗУ на магнитных доменах, например, К1602РЦ5, которое имело сложное устройство выборки и хранило довольно большой объём данных в виде намагниченных областей кристалла, при этом не имея движущихся частей, обеспечивает неограниченное количество циклов перезаписи;\nNVRAM (англ. non-volatile memory, «неразрушающаяся» память) — ПЗУ, выполняющее роль ОЗУ небольшого объёма, конструктивно совмещённое с батарейкой; в СССР такие устройства часто назывались «Dallas» по имени фирмы Dallas Semiconductor, выпустившей их на рынок; в NVRAM современных ЭВМ батарейка уже конструктивно не связана с ОЗУ и может быть заменена;\nпо виду доступа:\nПЗУ с параллельным доступом — ПЗУ, которое в системе может быть доступно в адресном пространстве ОЗУ, например, К573РФ5;\nПЗУ с последовательным доступом — ПЗУ, часто используемые для однократной загрузки констант или «прошивки» в процессор или ПЛИС, используемые для хранения, например, настроек каналов телевизора и других данных, например, 93С46, AT17LV512A;\nпо способу программирования микросхем (то есть, по способу записи «прошивки» в микросхему):\nнепрограммируемые ПЗУ;\nПЗУ, программируемые только с помощью специального устройства — программатора ПЗУ (как однократно, так и многократно прошиваемые), использование программатора необходимо, в частности, для подачи нестандартных и относительно высоких напряжений (до ±27 В) на специальные выводы;\nвнутрисхемно перепрограммируемые ПЗУ (англ. in-system programming, ISP) — микросхемы, имеющие внутри генератор всех необходимых высоких напряжений, могут быть перепрошиты программным способом, то есть, без программатора и без выпайки из печатной платы.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Постоянное_запоминающее_устройство"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Открытое_программное_обеспечение"
    },
    {
        "task": [
            "Блок цифровой обработки сигнала осуществляет очистку считанного аналогового сигнала и его декодирование (извлечение цифровой информации). Для цифровой обработки применяются различные методы, например метод PRML (Partial Response Maximum Likelihood — максимальное правдоподобие при неполном отклике). Осуществляется сравнение принятого сигнала с образцами. При этом выбирается образец, наиболее похожий по форме и временным характеристикам с декодируемым сигналом.\n<<<\n\n\nМакрофото магнитной головки, снизу — зеркальное отражение от поверхности магнитного диска\n\n\n\nМикрофото магнитной головки\n\n\n\nЗапаркованная магнитная головка\n\n\n\nПлата контроллера на 3,5\" 73-гигабайтном SAS-диске Fujitsu\n\n\n\nМеханическая и электрическая составляющие привода магнитных головок\n\n\n\nДля подключения к материнской плате диска MFM требуется контроллер (плата расширения)\n\n\n\nПлата контроллера на старом IDE-диске\n\n>>>",
            "Существует два основных способа адресации секторов на диске:[источник не указан 500 дней]\n<<<цилиндр-головка-сектор (англ. cylinder-head-sector, CHS);\nлинейная адресация блоков (англ. linear block addressing, LBA).>>>",
            "Блок магнитных дисков и магнитных головок жёсткого диска ёмкостью 350 Мб с 8 физическими дисками<<<Интерфейс (англ. interface) — техническое средство взаимодействия двух разнородных устройств, что в случае с жёсткими дисками является совокупностью линий связи, сигналов, посылаемых по этим линиям, технических средств, поддерживающих эти линии (контроллеры интерфейсов), и правил (протокола) обмена. Современные серийно выпускаемые внутренние жёсткие диски в разное время использовали интерфейсы ATA (он же IDE и PATA), SATA, SCSI, SAS. В ряде устройств на базе жёстких дисков могли также применяться интерфейсы eSATA, FireWire, SDIO, Fibre Channel, USB 2, USB 3, Thunderbolt.[источник не указан 500 дней]\nЁмкость (англ. capacity) — количество данных, которые могут храниться накопителем. С момента создания первых жёстких дисков в результате непрерывного совершенствования технологии записи данных их максимально возможная ёмкость непрерывно увеличивается. Плотность записи на жёстких дисках за 50 лет (с 1961 по 2011 год) увеличилась в 60 млн раз[45]. Для дисков с форм-фактором дисководов 3,5 дюйма на 2016 год она достигала 6, 8 или 10 ТиБ[46], а к 2020 году — 20 ТиБ[47]. В отличие от общепринятой в информатике системы двоичных приставок, обозначающих кратную 1024 величину, производителями при обозначении ёмкости жёстких дисков используются величины, кратные 1000. Так, ёмкость жёсткого диска, маркированного как «200 ГБ», составляет 186,2 ГиБ[48][49][50].\nФизический размер (форм-фактор; англ. dimension) — почти все накопители 2001—2008 годов для персональных компьютеров и серверов имеют ширину либо 3,5, либо 2,5 дюйма — под размер стандартных креплений для них соответственно в настольных компьютерах и ноутбуках. Также получили распространение форматы 1,8, 1,3, 1 и 0,85 дюйма. Прекращено производство накопителей в форм-факторах 8 и 5,25 дюйма. Во времена создания первых жёстких дисков у IBM существовало правило: все модели должны были проходить через стандартный дверной проём в 75 см[51].\nВремя произвольного доступа (англ. random access time) — среднее время, за которое винчестер выполняет операцию позиционирования головки чтения/записи на произвольный участок магнитного диска, зависит от скорости вращения. Диапазон этого параметра — от 2,5 до 16 мс, часто в спецификациях указывают среднее время доступа порядка 8—10 мс[52]. Как правило, минимальным временем обладают диски для серверов, самым большим — диски для портативных устройств. Для сравнения, у SSD-накопителей этот параметр меньше 1 мс, кроме того, SSD способны обрабатывать несколько случайных запросов одновременно.\nСкорость вращения шпинделя (англ. spindle speed) — количество оборотов шпинделя в минуту. От этого параметра в значительной степени зависят время доступа и средняя скорость передачи данных. В настоящее время выпускаются винчестеры со следующими стандартными скоростями вращения: 4200, 5400 и 7200 (ноутбуки); 5400, 5700, 5900, 7200 и 10 000 (персональные компьютеры); 10 000 и 15 000 об./мин. (серверы и высокопроизводительные рабочие станции). Увеличению скорости вращения шпинделя в винчестерах для ноутбуков препятствует гироскопический эффект, влияние которого пренебрежимо мало в неподвижных компьютерах.\nНадёжность (англ. reliability) — определяется как среднее время наработки на отказ (MTBF). Также подавляющее большинство современных дисков поддерживает технологию S.M.A.R.T.[источник не указан 500 дней]\nКоличество операций ввода-вывода в секунду (англ. IOPS) — зависит от скорости вращения, размера запросов и локализации запросов. У современных дисков на 7200 об/с этот параметр оценивается как около 75—100 оп./с при произвольном доступе к накопителю, и определяется в большей степенью временем произвольного доступа[53][54]. При линейных (последовательных) операциях показатели «iops» определяются общим временем передачи данных и вычисляются через линейную скорость чтения и размер операций[55][56].\nПотребление энергии — важный фактор для мобильных устройств.[источник не указан 500 дней]\nСопротивляемость ударам (англ. G-shock rating) — сопротивляемость накопителя резким скачкам давления или ударам, измеряется в единицах допустимой перегрузки во включённом и выключенном состоянии.[источник не указан 500 дней]\nСкорость передачи данных (англ. Transfer Rate) при последовательном доступе различается для областей диска (зон, ZBR[57])[58]:\nвнешняя зона диска: порядка 150—200 МБ/с;\nвнутренняя зона диска: порядка 70—100 МБ/с\nОбъём буфера — буфером называется промежуточная память, предназначенная для сглаживания различий скорости чтения/записи и передачи по интерфейсу. В современных дисках он обычно варьируется от 8 до 128 МБ.[источник не указан 500 дней]>>>",
            "Для снижения шума жёстких дисков применяют следующие методы:[источник не указан 500 дней]\n<<<средства встроенной системы AAM. Переключение жёсткого диска в малошумный режим приводит к снижению производительности в среднем на 5—25 %, но делает шум при работе практически неслышным;\nконструкторско-технологические способы:>>>",
            "Типичные неисправности HDD[60][неавторитетный источник]:\n<<<электрическое повреждение контроллера жёсткого диска из-за неисправности блока питания, перенапряжения в электрической сети и неверного подключения кабеля питания к диску;\nзаклинивание подшипника двигателя, вращающего пластины диска, как правило, из-за механического воздействия на жёсткий диск (удары, падения);\nнеисправность микросхемы коммутатора блока магнитных головок, установленной внутри герметичного блока жёсткого диска, обычно он выходит из строя из-за электрического пробоя на плате контроллера диска;\nповреждение магнитных головок жёсткого диска из-за механического воздействия на работающий диск, производственного брака и других причин;\nпоявление на магнитных пластинах диска нечитаемых секторов (англ. bad block) из-за перегрева диска, механического повреждения поверхности магнитной пластины или заводского брака;\nискажение или повреждение служебной микропрограммы управления диском (англ. firmware) в результате сбоя при обновлении микропрограммы, ошибки в её коде или некорректного отключения диска от компьютера.>>>",
            "Процесс производства жёстких дисков состоит из нескольких этапов:\n<<<Алюминиевый сплав поступает в зону механической обработки в виде длинных цилиндрических болванок.\nОт болванок отрезаются заготовки. Далее заготовке резцом придают нужные точные размеры и обрабатывают фаски.\nДалее на плоскополировальном станке рабочие поверхности заготовок полируют до нужной чистоты.\nЗаготовки очищают, кладут в кассеты и перемещают в зону проверки и транспортировки (эта зона имеет класс чистоты 100), где происходит контроль заготовок.>>>",
            "Для нанесения магнитного покрытия заготовки перемещают в зону нанесения магнитных покрытий (расположена внутри зоны проверки, имеет класс 10).\n<<<Там установлена автоматическая гальваническая линия по нанесению многослойных покрытий. Работу выполняют роботы под контролем оператора.>>>",
            "После завершения процесса нанесения магнитных покрытий диски укладывают в кассеты и вновь перемещают в зону проверки.\n<<<По конвейеру кассеты с дисками едут к сертификатору, который представляет собой достаточно большой (самый крупный в цехе) агрегат, который имеет несколько шпинделей и систему автоматической установки дисков из кассет. Также сертификатор имеет головки для записи и чтения установленных на шпиндели дисков. Диски форматируются одним длинным сектором на весь трек. При считывании выявляются дефекты, которые заносятся в базу данных.\nПроверенные блины укладываются в кассеты и отправляются на склад.>>>",
            "Некоторые из устройств, в которых применяются жёсткие диски:[источник не указан 500 дней]\n<<<\n\n\nВ картах расширения (Hardcard[англ.])\n\n\n\nВ системных блоках настольных компьютеров\n\n\n\nВ ноутбуках\n\n\n\nВ цифровых видеорекордерах\n\n\n\nВ RAID-массивах\n\n\n\nПоскольку в настоящее время DVD-приводы в ноутбуках и моноблоках неактуальны, очень часто туда вставляют дополнительный HDD в специальном адаптере (салазках)\n\n\n\nВ цифровых портативных мультимедийных проигрывателях\n\n>>>",
            "Производители пластин\n<<<Крупнейший в мире независимый производитель алюминиевых пластин для жёстких дисков — японская компания Showa Denko[англ.] (SDK), основное производство размещено в Малайзии[75].\nЕдинственная компания, которая производит стеклянные пластины для жёстких дисков — японская компания Hoya Corporation (выручка от производства стеклянных пластин для HDD принесла ей 35 % от совокупного дохода, а остальные 65 % — это доход от продаж контактных линз и очков)[76][77].>>>",
            "Шесть типоразмеров жёстких дисков. Рядом лежит дюймовая линейка<<<1956 год — первый жёсткий диск IBM 350[англ.] в составе первого серийного компьютера IBM 305 RAMAC[англ.][89]. Накопитель занимал ящик размером с большой холодильник и имел вес 971 кг, а общий объём памяти 50 вращавшихся в нём покрытых чистым железом тонких дисков диаметром 610 мм составлял около 5 млн 6-битных слов (3,5 МБ в пересчёте на 8-битные слова — байты).\n1961 год — в жёстком диске IBM 1301[англ.] головки чтения/записи впервые были установлены для каждого диска; 28 МБ[90].\n1973 год — в жёстком диске IBM 3340[англ.], названном Winchester, впервые были применены лёгкие головки чтения/записи, парящие над вращающимся диском под действием аэродинамических сил, что позволило значительно уменьшить воздушный зазор между диском и головкой. Также впервые пластины и головки были упакованы в гермокамеры, что исключило внешние воздействия на механизм; 30 МБ[91].\n1979 год — в жёстком диске IBM 3370[англ.] впервые магнитные головки были изготовлены по тонкоплёночной технологии, разрабатываемой с конца 1960-х годов. Благодаря этому плотность записи увеличилась до 7,53 Мбит на дюйм. Тонкоплёночные головки чтения/записи производились до 1991 года, после чего их заменили магниторезистивные головки[92].\n1980 год — первый 5,25-дюймовый Winchester, Shugart ST-506; 5 МБ (промышленные накопители IBM достигали ёмкости в 1 ГБ[92]). Жёсткие диски типоразмера 5,25\" производились до 1998 года[45].\n1981 год — 5,25-дюймовый Shugart ST-412; 10 МБ[92].\n1983 год — первый 3,5-дюймовый жёсткий диск, выпущенный небольшой шотландской компанией Rodime[англ.]; 10 МБ. Данный форм-фактор был запатентован Rodime как собственное изобретение[45].\n1985 год — стандарт ESDI, доработанный стандарт ST-412.\n1986 год — стандарты SCSI, ATA (IDE).\n1990 год — максимальная ёмкость 320 МБ.\n1991 год — IBM выпускает первый 2,5-дюймовый жёсткий диск Tamba-1 ёмкостью 63 МБ и весом чуть более 200 грамм[45].\n1992 год — первый жёсткий диск со скоростью вращения шпинделя 7200 об./мин.; 2,1 ГБ[45].\n1995 год — максимальная ёмкость 2 ГБ.\n1996 год — первый жёсткий диск со скоростью вращения шпинделя 10 000 об./мин., Seagate Cheetah[93].\n1997 год — максимальная ёмкость 10 ГБ.\n1998 год — стандарты UDMA/33[англ.] и ATAPI.\n1999 год — IBM выпускает Microdrive ёмкостью 170 и 340 МБ.\n2000 год — IBM выпускает Microdrive ёмкостью 500 МБ и 1 ГБ. В этом же году появились первые жёсткие диски со скоростью вращения шпинделя 15 000 оборотов в минуту, выпущенные Seagate и IBM. На этом гонка скоростей вращения прекратилась[94].\n2001 год — Компанией Maxtor выпущен «DiamondMax D536X» — первый стандартный 3,5-дюймовый жёсткий диск с ёмкостью 100 ГБ[95].\n2002 год — стандарт ATA/ATAPI-6 и накопители ёмкостью 137 ГБ.\n2003 год — стандарт SATA.\n2003 год — Hitachi выпускает Microdrive ёмкостью 2 ГБ.\n2004 год — Seagate выпускает ST1 — аналог Microdrive ёмкостью 2,5 и 5 ГБ.\n2005 год — Компанией Hitachi (HGST) выпущен «Hitachi Deskstar 7K500» — первый 3,5-дюймовый стандартный жёсткий диск с ёмкостью 500 ГБ.\n2005 год — стандарты SATA II (Serial ATA 3G) и SAS (Serial Attached SCSI).\n2005 год — Seagate выпускает ST1[англ.] — аналог Microdrive ёмкостью 8 ГБ.\n2006 год — применение перпендикулярного метода записи в коммерческих накопителях.\n2006 год — появление первых «гибридных» жёстких дисков, содержащих блок флеш-памяти.\n2006 год — Seagate выпускает ST1 — аналог Microdrive ёмкостью 12 ГБ.\n2007 год — Hitachi представляет первый коммерческий 3,5-дюймовый накопитель «Hitachi Deskstar 7K1000» ёмкостью 1 ТБ.\n2009 год — на основе 500-гигабайтных пластин Western Digital, затем Seagate выпустили модели ёмкостью 2 ТБ[96].\n2009 год — Samsung выпустила первые жёсткие диски с интерфейсом USB 2.0[97].\n2009 год — Western Digital объявила о создании 2,5-дюймовых HDD объёмом 1 ТБ (плотность записи — 333 ГБ на одной пластине)[98].\n2009 год — появление стандарта SATA III (SATA 6G).\n2010 год — Seagate выпускает жёсткий диск объёмом 3 ТБ.\n2010 год — Samsung выпускает жёсткий диск с пластинами, у которых плотность записи — 667 ГБ на одной пластине[99].\n2011 год — Western Digital выпустила первый диск на 750-гигабайтных пластинах[100].\n2011 год — Hitachi и Seagate выпустили диски на 1-терабайтных пластинах[101][102].\n2011 год — Seagate представила первый в мире 3,5-дюймовый диск объёмом 4 ТБ[103][104].\n2013 год — Western Digital выпускает диск на 6 ТБ с 7 пластинами вместо 5[105].\n2014 год — в конце 2014 г. Seagate выпускает первый в мире жёсткий диск емкостью 8 ТБ[106]; Western Digital выпускает модель «Ultrastar He10» — первый в мире диск ёмкостью 10 ТБ с гелием вместо воздуха внутри корпуса, он имеет 7 пластин[107].\n2017 год — Toshiba выпустила диск MG07ACA, ёмкость которого составляет 14 ТБ[108].\n2018 год — используя технологию HAMR, Seagate выпустила первый в мире жёсткий диск объёмом 16 ТБ[109][23].\n2020 год — WDC и Seagate выпускают жёсткие диски объёмом 20 Тбайт[9].\n2022 год — Western Digital выпускают жёсткие диски объёмом 22 Тбайт[110].\n2023 год — Western Digital представила самый быстрый HDD в мире со скоростью чтения/записи 582 Мбайт/с. Используется два независимых блока головок[111][112].\n2023 год — Seagate начала поставки жёстких дисков ёмкостью более 30 Тбайт с термомагнитной записью[24][25]>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Жёсткий_диск"
    },
    {
        "task": [
            "Типы связи<<<Кабельные линии — для передачи используются электрические сигналы;\nРадиосвязь — для передачи используются радиоволны:\nДВ-, СВ-, КВ- и УКВ-связь без применения ретрансляторов,\nСпутниковая связь — связь с применением космического ретранслятора(ов),\nРадиорелейная связь — связь с применением наземного ретранслятора(ов),\nСотовая связь — радиорелейная связь с использованием сети наземных базовых станций;\nВолоконно-оптическая связь — для передачи используются световые волны;\nНейтринная связь — для передачи используются нейтрино.>>>",
            "Кабельные линии — для передачи используются электрические сигналы;\nРадиосвязь — для передачи используются радиоволны:\nДВ-, СВ-, КВ- и УКВ-связь без применения ретрансляторов,\nСпутниковая связь — связь с применением космического ретранслятора(ов),\nРадиорелейная связь — связь с применением наземного ретранслятора(ов),\nСотовая связь — радиорелейная связь с использованием сети наземных базовых станций;\nВолоконно-оптическая связь — для передачи используются световые волны;\nНейтринная связь — для передачи используются нейтрино.<<<Интернет>>>",
            "В зависимости от инженерного способа организации линии связи разделяются на:\n<<<спутниковые;\nвоздушные;\nназемные;\nподводные;\nподземные.>>>",
            "В зависимости от типа передаваемого сигнала различают аналоговую и цифровую связь.\n<<<Аналоговая связь — это передача непрерывного сигнала.\nЦифровая связь — это передача информации в дискретной форме (цифровом виде). Цифровой сигнал по своей физической природе является аналоговым, однако передаваемая с его помощью информация определяется конечным набором уровней сигнала. Для обработки цифрового сигнала применяются численные методы.>>>",
            "Аналоговый сигнал — физическая величина, изменение (модуляция) которой в пространстве и во времени отображает передаваемое сообщение. Например, изменения напряжения (или тока, частоты, фазы и т. п.) отражают процесс речи. Аналоговый сигнал имеет следующие характеристики:\n<<<высота H — динамический диапазон,\nширина F — ширина спектра,\nдлина T — длительность сигнала во времени.>>>",
            "Объёмом сигнала является произведение V = FHT. В процессе передачи сигнала могут происходить изменения измерений как с сохранением объёма, так и без. Это происходит вследствие следующих преобразований сигнала:\n<<<Ограничение — изъятие из передачи одной или нескольких частей сигнала без сохранения информации, которая содержалась в изъятых частях. Например, ограничение речевого канала диапазоном 300—3400 Гц (канал тональной частоты).\nТрансформация — изменения одного или нескольких измерений за счёт изменения другого или других измерений с сохранением неизменного объёма (как у кубика пластилина). Например, уменьшить время передачи можно, увеличив ширину спектра сигнала или динамический диапазон, либо и то, и другое.\nКомпандирование — включает два процесса, от которых пошло название: компрессия (сжатие) и экспандирование (расширение). На передающей стороне происходит сжатие сигнала в одном или нескольких измерениях, на приёмной — восстановление. Например, «выкусывание» пауз в речи на передающей стороне и восстановление на приёмной.>>>",
            "Линия связи (ЛС) в узком смысле — физическая среда, по которой передаются информационные сигналы аппаратуры передачи данных и промежуточной аппаратуры. В широком смысле — совокупность физических цепей и (или) линейных трактов систем передачи, имеющих общие линейные сооружения, устройства их обслуживания и одну и ту же среду распространения[10]. Линия содержит одну и более цепей связи (стволов). Сигнал, действующий в линии, называется линейным. Различают два основных типа ЛС:\n<<<линии в атмосфере (радиолинии, РЛ);\nнаправляющие линии передачи (линии связи).>>>",
            "Каналы связи по направлению передачи подразделяются на:\n<<<симплексные — то есть допускающие передачу данных только в одном направлении, пример — радиотрансляция, телевидение;\nполудуплексные — то есть допускающие передачу данных в обоих направлениях поочерёдно, пример — рации;\nдуплексные — то есть допускающие передачу данных в обоих направлениях одновременно, пример — телефон.>>>",
            "Создание нескольких каналов на одной линии связи обеспечивается с помощью разнесения их по частоте, времени, кодам, адресу, длине волны:\n<<<частотное разделение каналов (ЧРК, FDM) — каждому каналу выделяется определённый диапазон частот.\nвременное разделение каналов (ВРК, TDM) — каждому каналу выделяется квант времени (таймслот).\nкодовое разделение каналов (КРК, CDMA) — разделение каналов по форме сигнала, каждому каналу присвоен сигнал определённой формы; для выделения нужного сигнала в каждом приёмнике используется коррелятор, который вычисляет скалярное произведение группового сигнала и опорного сигнала, присвоенного данному приёмнику,\nспектральное разделение каналов (СРК, WDM) — разделение каналов по длине волны.>>>",
            "Телекоммуникационное оборудование:\n<<<Телекоммуникационная стойка\nТелекоммуникационный шкаф>>>",
            "В общем виде в систему связи входят:\n<<<терминальное оборудование: оконечное оборудование, терминальное устройство (терминал), оконечное устройство, источник и получатель сообщения;\nустройства преобразования сигнала (УПС) с обоих концов линии.>>>",
            "Стандарты в мире связи исключительно важны, так как оборудование связи должно уметь взаимодействовать друг с другом. Существует несколько международных организаций, публикующих стандарты связи. Среди них:\n<<<Международный союз электросвязи (англ. International Telecommunication Union, ITU) — одно из агентств ООН.\nИнститут инженеров электротехники и электроники (англ. Institute of Electrical and Electronics Engineers, IEEE).\nСпециальная комиссия интернет-разработок (англ. Internet Engineering Task Force, IETF).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Электросвязь"
    },
    {
        "task": [
            "Начальная стадия разработки — период времени со старта разработки до выхода стадии альфа. Также так называются программы, не вышедшие ещё в стадию альфа или бета, но прошедшие стадию разработки, для первичной оценки функциональных возможностей в действии. В отличие от альфа- и бета-версий, начальный этап может включать в себя не весь спектр функциональных возможностей программы. В этом случае подразумеваются все действия, выполняемые во время проектирования и разработки программы вплоть до тестирования. К таким действиям относятся:\n<<<разработка дизайна,\nанализ требований,\nсобственно разработка приложения,\nотладка отдельных модулей.>>>",
            "Тим О’Райли, поборник открытого ПО, выводит особый вид программ — «вечная бета», когда программа находится в бета-стадии неопределённый период времени. Такой механизм уместен в интернете, где ПО обладает такими свойствами:\n<<<Вместо инсталляторов программ — интернет-службы с дешёвой масштабируемостью.\nНеобычные и уникальные подборки данных, которые становятся богаче, когда расширяется пользовательская публика.\nКонечные пользователи привлекаются в разработку. Их коллективный разум используется для техподдержки «длинного хвоста» с необычными запросами.\nПрограмма выходит за рамки одного устройства.\nУпрощённые пользовательские интерфейсы, принципы разработки и бизнес-модели.\nНа производителе лежит особая ответственность за пользовательские данные, и многие уходят от неё, предоставляя пользователям вечную бету.>>>",
            "Изначально эти 7 этапов использовались на сайте SourceForge. Впоследствии эту нумерацию подхватил PyPI, хостинг пакетов для языка Python.\n<<<Планирование (planning). Автор зарезервировал название за проектом и начал очерчивание функциональности. Версии, как правило, не имеет.\nПреальфа (pre-alpha). Уже есть какая-то программа, дающая представление о том, что она будет делать. Идёт разработка, добавление новой функциональности, рефакторинг. Архитектура программы в любой момент может полностью измениться. В этот момент программа уже может получить версию, обычно 0.x.y.\nАльфа (alpha). Архитектура программы очевидна. Близкие к разработчику люди уже могут пользоваться программой. Идёт тестирование и доведение до продукта.\nБета (beta). Программа полнофункциональна. Идёт тестирование, исправление ошибок и проблем с производительностью, совершенствование эргономики.\nГотовая/стабильная (production/stable). Нет критичных ошибок, оттестированы все основные сценарии использования. Идёт исправление ошибок, добавление новой функциональности. В этот момент программе можно дать версию 1.0.\nЗрелая (mature). Больше года в состоянии «готовая/стабильная», не просят крупной функциональности, нет крупных и критичных ошибок. Идёт исправление мелких ошибок.\nБрошенная (inactive). Разработка давно не ведётся. Найденные проблемы, скорее всего, не будут исправлены. Разумеется, проект могут снова взять в разработку и вернуться к одному из предыдущих этапов.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Стадии_разработки_программного_обеспечения"
    },
    {
        "task": [
            "Существует четыре типа поисковых систем: с поисковыми роботами, управляемые человеком, гибридные и мета-системы[17].\n<<<системы, использующие поисковые роботы. Состоят из трёх частей: краулер («бот», «робот» или «паук»), индекс и программное обеспечение поисковой системы. Краулер нужен для обхода сети и создания списков веб-страниц. Индекс — большой архив копий веб-страниц. Цель программного обеспечения — оценивать результаты поиска. Благодаря тому, что поисковый робот в этом механизме постоянно исследует сеть, информация в большей степени актуальна. Большинство современных поисковых систем являются системами данного типа.\nсистемы, управляемые человеком (каталоги ресурсов). Эти поисковые системы получают списки веб-страниц. Каталог содержит адрес, заголовок и краткое описание сайта. Каталог ресурсов ищет результаты только из описаний страницы, представленных ему веб-мастерами. Достоинство каталогов в том, что все ресурсы проверяются вручную, следовательно, и качество контента будет лучше по сравнению с результатами, полученными системой первого типа автоматически. Но есть и недостаток — обновление данных каталогов выполняется вручную и может существенно отставать от реального положения дел. Ранжирование страниц не может мгновенно меняться. В качестве примеров таких систем можно привести каталог Yahoo, dmoz и Galaxy.\nгибридные системы. Такие поисковые системы, как Yahoo, Google, MSN, сочетают в себе функции систем, использующие поисковых роботов, и систем, управляемых человеком.\nмета-системы. Метапоисковые системы объединяют и ранжируют результаты сразу нескольких поисковиков. Эти поисковые системы были полезны, когда у каждой поисковой системы был уникальный индекс, и поисковые системы были менее «умными». Поскольку сейчас поиск намного улучшился, потребность в них уменьшилась. Примеры: MetaCrawler[англ.] и MSN Search.>>>",
            "Согласно данным LiveInternet в декабре 2017 года об охвате русскоязычных поисковых запросов[25]:\n<<<Всеязычные:\nGoogle (42,9 %)\nBing (0,3 %)\nYahoo! (0,0 %) и принадлежащие этой компании поисковые машины: Inktomi[англ.], AltaVista, Alltheweb[англ.]\nАнглоязычные и международные:\nAskJeeves[англ.] (механизм Teoma)\nРусскоязычные — большинство «русскоязычных» поисковых систем индексируют и ищут тексты на многих языках — украинском, белорусском, английском, татарском и других. Отличаются же они от «всеязычных» систем, индексирующих все документы подряд, тем, что, в основном, индексируют ресурсы, расположенные в доменных зонах, где доминирует русский язык, или другими способами ограничивают своих роботов русскоязычными сайтами.\nЯндекс (60,4 %)\nMail.ru (3,5 %)\nРамблер (0,2 %)>>>",
            "О работе дата-центров поисковой системе Google известно следующее[27]:\n<<<Суммарная мощность всех дата-центров Google, по состоянию на 2011 год, оценивалась в 220 МВт.\nКогда в 2008 году Google планировала открыть в Орегоне новый комплекс, состоящий из трёх зданий общей площадью 6,5 млн м², в журнале Harper’s Magazine подсчитали, что такой большой комплекс потребляет свыше 100 МВт электроэнергии, что сравнимо с потреблением энергии города с населением 300 000 человек.\nОриентировочное число серверов Google в 2012 году — 1 млн.\nРасходы Google на дата-центры составили в 2006 году — $1,9 млрд, а в 2007 году — $2,4 млрд.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Поисковая_система"
    },
    {
        "task": [
            "Процедурная анимация полностью или частично рассчитывается компьютером. Сюда можно включить следующие её виды:\n<<<Симуляция физического взаимодействия твёрдых тел.\nИмитация движения систем частиц, жидкостей и газов.\nИмитация взаимодействия мягких тел (ткани, волос).\nРасчёт движения иерархической структуры связей (скелета персонажа) под внешним воздействием (Ragdoll).\nИмитация автономного (самостоятельного) движения персонажа. Примером такой системы является программа Euphoria.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Компьютерная_анимация"
    },
    {
        "task": [
            "Подходы к классификации ПО достаточно подробно формализованы в международном стандарте ISO/IEC 12182[37]. В частности, первая версия стандарта предусматривала 16 критериев классификации программных средств:\n<<<по режиму эксплуатации;\nпо масштабу;\nпо стабильности;\nпо функции;\nпо требованию защиты;\nпо требованию надёжности;\nпо требуемым рабочим характеристикам;\nпо исходному языку;\nпо прикладной области;\nпо вычислительной системе и среде;\nпо классу пользователя;\nпо требованию к вычислительным ресурсам;\nпо критичности;\nпо готовности;\nпо представлению данных;\nпо использованию программных данных.>>>",
            "Примерами классов функции ПС являются:\n<<<обработка деловых сообщений;\nкомпиляция;\nнаучные вычисления;\nобработка текстов;\nмедицинские системы;\nсистемы управления.>>>",
            "Примерами классов прикладной области являются:\n<<<наука;\nбытовые устройства;\nоборудование;\nаппаратура управления процессом;\nпредпринимательство;\nсистема организации сети.>>>",
            "Примерами классов масштаба ПС являются:\n<<<малый;\nсредний;\nбольшой.>>>",
            "Примерами классов критичности являются:\n<<<национальная безопасность;\nчеловеческая жизнь;\nсоциальный хаос или паника;\nорганизационная безопасность;\nчастная собственность;\nсекретность.>>>",
            "Примерами классов пользователя являются:\n<<<начинающий;\nсредний;\nспециалист (эксперт);\nобычный;\nслучайный;\nдругая система программного обеспечения;\nтехнические средства.>>>",
            "Примерами классов стабильности являются:\n<<<постоянное внесение изменений;\nдискретное внесение изменений;\nмаловероятное внесение изменений.>>>",
            "По степени переносимости программы делят на\n<<<платформозависимые;\nкроссплатформенные.>>>",
            "По способу распространения и использования программы делят на\n<<<проприетарные;\nоткрытые;\nсвободные.>>>",
            "По назначению программы делят на:\n<<<системные;\nприкладные.>>>",
            "По видам программы делят[38] на:\n<<<компонент — программа, рассматриваемая как единое целое, выполняющая законченную функцию и применяемая самостоятельно или в составе комплекса;\nкомплекс — программа, состоящая из двух или более компонентов и (или) комплексов, выполняющих взаимосвязанные функции, и применяемая самостоятельно или в составе другого комплекса.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Программное_обеспечение"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Браузер"
    },
    {
        "task": [
            "Даются следующие определения искусственного интеллекта:\n<<<Научное направление, в рамках которого ставятся и решаются задачи аппаратного или программного моделирования тех видов человеческой деятельности, которые традиционно считаются интеллектуальными[1].\nСвойство интеллектуальных систем выполнять функции (творческие), которые традиционно считаются прерогативой человека. При этом интеллектуальная система — это техническая или программная система, способная решать задачи, традиционно считающиеся творческими, принадлежащие конкретной предметной области, знания о которой хранятся в памяти такой системы. Структура интеллектуальной системы включает три основных блока — базу знаний, решатель и интеллектуальный интерфейс, позволяющий вести общение с ЭВМ без специальных программ для ввода данных[1].\nНаправление в информатике и информационных технологиях, задачей которого является воссоздание с помощью вычислительных систем и иных искусственных устройств разумных рассуждений и действий[6].\nСпособность системы правильно интерпретировать внешние данные, извлекать уроки из таких данных и использовать полученные знания для достижения конкретных целей и задач при помощи гибкой адаптации[7].>>>",
            "В философии не решён вопрос о природе и статусе человеческого интеллекта. Нет и точного критерия достижения компьютерами «разумности», хотя на заре искусственного интеллекта был предложен ряд гипотез, например, тест Тьюринга или гипотеза Ньюэлла — Саймона. Поэтому, несмотря на наличие множества подходов как к пониманию задач искусственного интеллекта, так и созданию интеллектуальных информационных систем, можно выделить два основных подхода к разработке искусственного интеллекта[27]:\n<<<нисходящий (англ. Top-Down AI), семиотический — создание экспертных систем, баз знаний и систем логического вывода, имитирующих высокоуровневые психические процессы: мышление, рассуждение, речь, эмоции, творчество и тому подобные;\nвосходящий (англ. Bottom-Up AI), биологический — изучение нейронных сетей и эволюционных вычислений, моделирующих интеллектуальное поведение на основе биологических элементов, а также создание соответствующих вычислительных систем, таких как нейрокомпьютер или биокомпьютер.>>>",
            "Можно выделить два направления развития искусственного интеллекта:\n<<<решение проблем, связанных с приближением специализированных систем искусственного интеллекта к возможностям человека, и их интеграции, которая реализована природой человека (см. Усиление интеллекта);\nсоздание искусственного разума, представляющего интеграцию уже созданных систем искусственного интеллекта в единую систему, способную решать проблемы человечества.>>>",
            "Некоторые из самых известных систем:\n<<<ChatGPT — чат-бот с искусственным интеллектом от компании OpenAI, основанный на большой языковой модели GPT-3.5; способен работать в диалоговом режиме на естественных языках[43];\nDeep Blue — шахматная программа разработки IBM, победила чемпиона мира по шахматам[44];\nAlphaGo — программа игры в го разработки Google DeepMind, выиграла матч в го у корейского профессионала 9 дана Ли Седоля;\nWatson — перспективная разработка IBM, способная воспринимать человеческую речь и производить вероятностный поиск, с применением большого количества алгоритмов; для демонстрации работы приняла участие в американской игре «Jeopardy!», где системе удалось выиграть в обеих играх[45];\nMYCIN — одна из ранних экспертных систем, которая могла диагностировать небольшой набор заболеваний, причём часто так же точно, как и доктора;\n20Q — проект по мотивам классической игры «20 вопросов», основанный на идеях искусственного интеллекта; стал очень популярен после появления в Интернете на сайте 20q.net[46];\nViaVoice — система распознавания речи, способная обслуживать потребителей.\nMidjourney — сервис, генерирующий изображения на основе текстовых запросов.>>>",
            "Наиболее крупные научные и исследовательские центры в области искусственного интеллекта:\n<<<Соединённые Штаты Америки\nМассачусетский технологический институт\nИсследовательский институт машинного интеллекта\nГермания\nНемецкий исследовательский центр по искусственному интеллекту\nЯпония\nНациональный институт современной промышленной науки и технологии (AIST)\nРоссия\nНаучный совет по методологии искусственного интеллекта Российской академии наук\nИндия\nИндийский технологический институт в Мадрасе>>>",
            "Другие задачи в медицине, которые потенциально могут выполняться искусственным интеллектом и начинают разрабатываться, включают:\n<<<Компьютерная интерпретация медицинских изображений. Такие системы помогают сканировать цифровые изображения, например от компьютерной томографии, для типичных проявлений и для выделения заметных отклонений, таких как возможные заболевания. Типичным применением является обнаружение опухоли.\nАнализ сердечного ритма[66]\nПроект Watson — программа вопросов и ответов, которая создана для помощи врачам-онкологам\nРоботы-помощники для ухода за престарелыми[67]\nОбработка медицинских записей для предоставления более полезной информации\nСоздание планов лечения\nВыявление повышенного риска заболеваний\nПомощь в повторяющихся заданиях, включая управление приёмом медикаментов\nПредоставление консультаций\nСоздание лекарств[68]\nИспользование человекоподобных манекенов вместо пациентов для клинического обучения[69]>>>",
            "В исправительной колонии № 6 (ИК-6) в Астраханской области до 2025 года планируется запустить пилотный проект по внедрению системы, которая смогла бы отслеживать\n<<<факты покидания заключёнными территории,\nкурение в неположенном месте,\nнарушение распорядка дня,\nнарушение формы одежды,\nотказ от посещения массовых мероприятий,\nневыполнение требований администрации и др.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Искусственный_интеллект"
    },
    {
        "task": [
            "Основные функции СУБД<<<управление данными во внешней памяти (на дисках);\nуправление данными в оперативной памяти с использованием дискового кэша;\nжурнализация изменений, резервное копирование и восстановление базы данных после сбоев;\nподдержка языков БД (язык определения данных, язык манипулирования данными).>>>",
            "Обычно современная СУБД содержит следующие компоненты:\n<<<ядро, которое отвечает за управление данными во внешней и оперативной памяти и журнализацию;\nпроцессор языка базы данных, обеспечивающий оптимизацию запросов на извлечение и изменение данных и создание, как правило, машинно-независимого исполняемого внутреннего кода;\nподсистему поддержки времени исполнения, которая интерпретирует программы манипуляции данными, создающие пользовательский интерфейс с СУБД;\nсервисные программы (внешние утилиты), обеспечивающие ряд дополнительных возможностей по обслуживанию информационной системы.>>>",
            "Примеры:\n<<<Иерархические\nСетевые\nРеляционные\nОбъектно-ориентированные\nОбъектно-реляционные>>>",
            "По степени распределённости<<<Локальные СУБД (все части локальной СУБД размещаются на одном компьютере)\nРаспределённые СУБД (части СУБД могут размещаться не только на одном, но на двух и более компьютерах).>>>",
            "По способу доступа к БД<<<Файл-серверные>>>",
            "Примеры: Microsoft Access, Paradox, dBase, FoxPro, Visual FoxPro.<<<Клиент-серверные>>>",
            "Примеры: Oracle Database, Firebird, Interbase, IBM DB2, Informix, MS SQL Server, Sybase Adaptive Server Enterprise, PostgreSQL, MySQL, Caché, ЛИНТЕР.<<<Встраиваемые>>>",
            "В таких СУБД изменения аккумулируются в буферах внешней памяти до наступления любого из следующих событий:\n<<<Контрольная точка.\nНехватка пространства во внешней памяти, отведенного под журнал. СУБД создаёт контрольную точку и начинает писать журнал сначала, затирая предыдущую информацию.\nОстанов. СУБД ждёт, когда всё содержимое всех буферов внешней памяти будет перенесено во внешнюю память, после чего делает отметки, что останов базы данных выполнен корректно.\nНехватка оперативной памяти для буферов внешней памяти.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Система_управления_базами_данных"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Лицензия_на_программное_обеспечение"
    },
    {
        "task": [
            "Основные функции и подклассы<<<Офисные приложения (например, рабочая станция);\nМультимедиа;\nВыход в Интернет.>>>",
            "Раздельная схема — в противоположность моноблочной — предполагает, что ПК состоит из системного блока и разнообразных внешних, то есть конструктивно самостоятельных, устройств, подключаемых к системному блоку извне через стандартные интерфейсы (например: USB, D-Sub, DVI, FireWire, HDMI, Thunderbolt, Bluetooth). Это могут быть: \n<<<мониторы, проектор,\nклавиатура, трекбол, манипулятор «мышь»,\nмикрофоны, акустические системы, веб-камеры,\nпринтеры, документ-камера, сканеры изображений, сканеры штрих-кодов, МФУ,\nразличные внешние модемы,\nигровые устройства (геймпады, джойстики, компьютерные рули, устройства, имитирующие бортовое оборудование самолётов (для авиасимуляторов), и даже пульты для симулаторов железнодорожного тяговового подвижного состава).>>>",
            "Наиболее распространены два вида конструктивной компоновки системного блока:\n<<<desktop — горизонтальная конструктивная компоновка системного блока, с возможностью размещения монитора на таком системном блоке;\ntower — «башенный» системный блок в вертикальной конструктивной компоновке.>>>",
            "«Башенный» системный блок — системный блок типа Tower («башня») — высокий, но вместе с тем занимает на столе мало места и стоит слева или справа от монитора. Кроме того, установленный на стол монитор, находится ниже и не заставляет пользователя задирать голову. Разумеется, если стул допускает регулировку по высоте, проблемы нет. Однако так бывает не всегда. (Ныне окончательно проблему удобной регулировки по высоте (вкупе с регулировкой по высоте стула) решают ЖК-мониторы, с регулируемым по высоте креплением на штативе. Причём штатив может быть и встроенным в стол.) Из-за уменьшения размеров и массы комплектующих также стало возможно уменьшение и размеров самих «башенных» системных блоков. В результате сначала появились системные блоки mini-tower. Появившись, mini-tower («минибашня») стали самыми распространёнными настольными системными блоками, так как:\n<<<занимали мало место на столе, — могли устанавливаться сбоку от монитора;\nсравнительно дёшевы в производстве, — «минибашням» (да и «башням» вообще) не требуется усиленная конструкция, способная выдерживать вес монитора (особенно ЭЛТ-монитора).>>>",
            "Компактные компьютеры, содержащие все необходимые компоненты (в том числе монитор) в одном небольшом корпусе, как правило, складывающемся в виде книжки (отсюда и самое распространённое название данного класса ПК). Приспособлены для работы в дороге, на небольшом свободном пространстве. Для достижения малых размеров в них применяются специальные технологии:\n<<<специально разработанные специализированные микросхемы (ASIC), ОЗУ и жёсткие диски уменьшенных габаритов,\nкомпактная клавиатура, часто не содержащая цифрового поля,\nвнешние блоки питания, минимум интерфейсных гнёзд для подключения внешних устройств.>>>",
            "Для использования в жилых комнатах используются конструкции ПК, производящие минимум шума или работающие совершенно бесшумно. Такие модели можно оставлять включёнными постоянно, что даёт ряд преимуществ: отсутствует период загрузки, компьютер всегда готов к работе и может постоянно отслеживать новую почту или мгновенные сообщения для пользователя. В целом, постоянно включённый ПК может выполнять ряд особенных задач:\n<<<быть мультимедийной станцией (воспроизводить видео-, аудиозаписи, интернет-радио);\nработать как видеомагнитофон: записывать передачи телевидения или радио для последующего просмотра или прослушивания в удобное время;\nслужить P2P-клиентом (обмениваться файлами в автоматическом режиме с другими компьютерами);\nслужить домашним или даже интернет-сервером;\nследить за температурой или присутствием с помощью соответствующих датчиков или фото-, видеокамеры (веб-камеры).>>>",
            "Чтобы сделать ПК тихим, используется несколько технологий:\n<<<безвентиляторные системы охлаждения:\nжидкостное (с передачей жидкости на большой пассивно-охлаждаемый радиатор)\nприменение термотруб (передача всей энергии путём термотруб на поверхность корпуса, также состоящего из меди или алюминия)\nприменение очень крупных радиаторов (часто с термотрубами)\nпогружение всей электроники в резервуар с жидкостью-диэлектриком\nфреоновое (применяется микрохолодильник с соответствующей электроникой и изоляцией. Не всегда «тихий». К примеру Vapo-chill)\nжидкий азот (только кратковременное, не предназначено для сколь-либо долгой эксплуатации, как правило для «разгона» — хотя бесшумно)\nмалошумные вентиляторы с лопастями специальной формы;\nпроцессоры, не требующие активного охлаждения (ввиду их маломощности, и это не всегда приемлемое решение);\nмалошумные жёсткие диски, а также установка их на шумопоглощающие крепления;\nзамена жёстких дисков на SSD-накопители или удалённые дисковые массивы;\nустановка бесшумного (noiseless) блока питания.>>>",
            "Существует несколько конкурирующих между собой проектов компактных и дешёвых в производстве персональных компьютеров, некоторые из которых предназначены для развивающихся стран: OLPC, VIA pc-1 Initiative, Classmate PC, Asus Eee PC и др. Однако удешевление и миниатюризация достигнуты ценой заметного отставания по вычислительной мощности от полноразмерных ПК.\n<<<\n\n\nMacintosh 128k (первая модель 1984 года)\n\n\n\niMac Intel Core 2 Duo\n\n\n\nMac mini\n\n\n\nOLPC\n\n>>>",
            "Технологии, уменьшающие габариты ПК:\n<<<материнская плата уменьшенного формата (mini-ITX и др.);\nмалогабаритный корпус;\nвстроенные CD/DVD-дисководы со щелевой загрузкой или отсутствие таких дисководов;\nменьшее количество отсеков для жёстких дисков и DVD/CD-дисководов, зачастую всего один;\nменьше гнёзд USB, аудио и т. д.;\nвнешние блоки питания и устройства (например, CD/DVD-дисководы) вместо встроенных.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Персональный_компьютер"
    },
    {
        "task": [
            "Ряд учёных (специалистов в области информатики) утверждали, что в информатике существуют три отдельные парадигмы. Например, Питер Вегнер[англ.] выделял науку, технологию и математику[14]. Рабочая группа Питера Деннинга[англ.] утверждала, что это теория, абстракция (моделирование) и дизайн[15]. Амнон Х. Эден описывал эти парадигмы, как[16]:\n<<<рационалистическую парадигму, где информатика — это раздел математики, математика доминирует в теоретической информатике и в основном использует логический вывод,\nтехнократическую парадигму, используемую в инженерных подходах, наиболее важных в программной инженерии,\nи научную парадигму, где информатика — это ветвь естественных (эмпирических) наук, но информатика отличается тем, что в ней эксперименты проводятся над искусственными объектами (программами и компьютерами).>>>",
            "В разные периоды развития информатики в СССР и России в понятие «информатика» вкладывался различный смысл. Информатика — это[17]:\n<<<Теория научно-информационной деятельности. В рамках библиотечного дела под термином «научно-информационная деятельность» понимается «практическая работа по сбору, аналитико-синтетической переработке, хранению, поиску и предоставлению учёным и специалистам закрепленной в документах научной информации»[18]. В 1952 г. в Москве был создан Институт научной информации Академии наук (переименованный позднее в ВИНИТИ). Цели его создания были более широкими, чем выполнение «научно-информационной деятельности» и А. А. Харкевич (директор Института проблем передачи информации АН СССР) предложил в письме А. И. Михайлову (директору ВИНИТИ) новое название: «„информология“ или „информатика“ („информация“ плюс „автоматика“)» [19]. Третье издание «Большой советской энциклопедии» (1970-е гг.) фиксирует значение информатики как дисциплины, изучающей «структуру и общие свойства научной информации, а также закономерности её создания, преобразования, передачи и использования в различных сферах человеческой деятельности»[19].\nНаука о вычислительных машинах и их применении (вычислительная техника и программирование). В 1976 г. профессора́ Мюнхенского технического университета Ф. Л. Бауэр и Г. Гооз написали книгу «Информатика. Вводный курс», переведённую в том же году В. К. Сабельфельдом, учеником известного советского учёного Андрея Петровича Ершова, на русский язык. Они перевели «Informatik» словом «информатика» и определили как «науку, занимающуюся разработкой теории программирования и применения ЭВМ»[19]. Термин «Informatik» Ф. Л. Бауэр и Г. Гооз объясняют как «немецкое название для computer science — области знания, которая сложилась в самостоятельную научную дисциплину в шестидесятые годы, прежде всего в США, а также в Великобритании. … В английском языке, по-видимому, останется „computer science“ (вычислительная наука), причем этот термин имеет уклон в область теории»[20].\nФундаментальная наука об информационных процессах в природе, обществе и технических системах. В начале 1990-х гг. К. К. Колин (заместитель директора Института проблем информатики АН СССР) синтезировал толкования информатики, данные академиками А. П. Ершовым и Б. Н. Наумовым, а также проф. Ю. И. Шемакиным следующим образом: информатика — это наука «о свойствах, законах, методах и средствах формирования, преобразования и распространения информации в природе и обществе, в том числе при помощи технических систем». Предметная область информатики, по Колину, включает такие разделы: (1) теоретическая информатика; (2) техническая информатика; (3) социальная информатика, (4) биологическая информатика и (5) физическая информатика[21].>>>",
            "Основные термины<<<Информационный ресурс — концентрация имеющихся фактов, документов, данных и знаний, отражающих реальное изменяющееся во времени состояние общества, и используемых при подготовке кадров, в научных исследованиях и материальном производстве[57].\nИнформационная среда — хранящаяся в компьютере, но не оформленная в виде информационной системы совокупность знаний, фактов и сведений, относящаяся к некоторой предметной области и используемая одним или несколькими пользователями[58].\nИнформационная технология — совокупность методов, устройств и производственных процессов, используемых людьми для сбора, хранения, обработки и распространения информации[58].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Информатика"
    },
    {
        "task": [
            "Основными функциями файловой системы являются:\n<<<размещение и упорядочивание на носителе данных в виде файлов;\nопределение максимально поддерживаемого объёма данных на носителе информации;\nсоздание, чтение и удаление файлов;\nназначение и изменение атрибутов файлов (размер, время создания и изменения, владелец и создатель файла, доступен только для чтения, скрытый файл, временный файл, архивный, исполняемый, максимальная длина имени файла и т. п.);\nопределение>>>",
            "По предназначению файловые системы можно классифицировать на нижеследующие категории.\n<<<Для носителей с произвольным доступом (например, жёсткий диск): FAT32, HPFS, ext2/ext3/ext4 и др. Поскольку доступ к дискам в несколько раз медленнее, чем доступ к оперативной памяти, для прироста производительности во многих файловых системах применяется асинхронная запись изменений на диск. Для этого применяется либо журналирование, например, в ext3, ReiserFS, JFS, NTFS, XFS, либо механизм soft updates и др. Журналирование широко распространено в Linux, применяется в NTFS. Soft updates — в BSD системах.\nДля носителей с последовательным доступом (например, магнитные ленты): QIC и др.\nДля оптических носителей — CD и DVD: ISO9660, HFS, UDF и др.\nВиртуальные файловые системы: AEFS и др.\nСетевые файловые системы: NFS, CIFS, SSHFS, GmailFS и др.\nДля флэш-памяти: YAFFS, ExtremeFFS, exFAT, F2FS.\nНемного выпадают из общей классификации специализированные файловые системы: ZFS (собственно файловой системой является только часть ZFS), VMware VMFS[англ.] (т. н. кластерная файловая система, которая предназначена для хранения других файловых систем) и др.>>>",
            "Основные функции любой файловой системы нацелены на решение следующих задач:\n<<<именование файлов;\nпрограммный интерфейс работы с файлами для приложений;\nотображения логической модели файловой системы на физическую организацию хранилища данных;\nорганизация устойчивости файловой системы к сбоям питания, ошибкам аппаратных и программных средств;\nсодержание параметров файла, необходимых для правильного его взаимодействия с другими объектами системы (ядро, приложения и пр.).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Файловая_система"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Условно-бесплатное_программное_обеспечение"
    },
    {
        "task": [
            "Существует несколько моделей процесса разработки ПО:\n<<<каскадная модель (англ. waterfall model), другие названия: водопадная, последовательная;\nмодель итеративной и инкрементальной разработки (англ. iterative and incremental development, IID), другие названия: эволюционная модель, итерационная модель, инкрементальная модель;\nспиральная модель (англ. spiral model).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Разработка_программного_обеспечения"
    },
    {
        "task": [
            "По применению языки можно грубо разделить на три типа[9]:\n<<<командно-сценарные;\nприкладные сценарные;\nуниверсальные сценарные.>>>",
            "Появились ещё в 1960-х годах для управления заданиями в операционных системах. Из языков того времени наиболее известен JCL для OS/360. В этот класс входят языки пакетной обработки (англ. batch language) и языки командных оболочек, например sh, csh для Unix. Эти языки чаще всего используются в пакетном режиме обработки[9].\n<<<AutoHotkey\nJCL\nsh\nbash\ncsh\nksh\nPilot[9]\nREXX\nAppleScript\nCOMMAND.COM и cmd.exe\nVBScript\nPowerShell\nAutoIt>>>",
            "Сценарные языки этого типа начали появляться в 1980-е годы, когда на промышленных персональных компьютерах стало возможным интерактивное общение с ОС. В клиент-серверной архитектуре такие языки работали в клиентской части программного обеспечения[9].\n<<<AutoLISP\nECMAScript и его диалекты (JScript, JavaScript, ActionScript)[9]\nEmacs Lisp\nERM\nGame Maker Language\nLotusScript[9]\nLua\nMQL4 script\nUnrealScript\nVBA\nВстроенный язык программирования 1С:Предприятие>>>",
            "Этот тип сценарных языков наиболее известен (особенно в применении к веб-программированию). Языки этого типа стали возникать с 1990-х годов[9].\n<<<Tcl (Tool command language)\nLua\nPerl\nPHP\nPython\nREBOL\nRuby\nJavaScript>>>",
            "Скриптовый язык удобен в следующих случаях:\n<<<Если нужно обеспечить программируемость без риска дестабилизировать систему. Так как, в отличие от плагинов, скрипты интерпретируются, а не компилируются, неправильно написанный скрипт выведет диагностическое сообщение, а не приведёт к системному краху. Контрпримером могут служить, например, JVM и CLR, причём если первая была разработана из соображений переносимости кода (безопасность — побочный эффект), то вторая — именно из соображений безопасности.\nЕсли важен выразительный код.\nВо-первых, чем сложнее система, тем больше кода приходится писать «потому, что это нужно». Скрипт может перенести часть подобного шаблонного кода (инициализация, уничтожение, межпоточная синхронизация и т. д.) в среду исполнения скриптов.\nВо-вторых, в скриптовом языке может быть совсем другая концепция программирования, чем в основной программе — например, игра может быть монолитным однопоточным приложением, в то время как управляющие персонажами скрипты выполняются параллельно или как сопрограммы. Такой подход хорош с точки зрения масштабируемости системы (сценарии не зависят от реализации процедур, пишутся гораздо быстрее и легче отлаживаются), но не очень хорош с точки зрения качества кода, поскольку неизбежно приводит к его дублированию.\nГораздо более рациональным подходом является создание файлов ресурсов (как вариант, xml-файлов, структур, баз данных), описывающих поведение «по существу» (в декларативном стиле), как это делается с другими свойствами внутриигровых объектов (текстуры, модели, эффекты, звуки).\nВ-третьих, скриптовый язык имеет собственный проблемно-ориентированный набор команд, и одна строка скрипта может делать то же, что несколько десятков строк на традиционном языке. Однако стоит заметить, что бо́льшая выразительность кода на сценарных языках является следствием их ограниченности и/или новизны и сравнивать C (1970-е) и PHP (1990-е) и/или Fortran (1950-е) и Python (1990-е) неуместно.\nСкрипты известны низким порогом вхождения, на скриптовом языке может писать даже низкоквалифицированный программист. Это одновременно и плюс, и минус. С одной стороны, это позволяет нанимать дешёвую рабочую силу (освобождать специалистов от рутинной работы и повышать скорость разработки экстенсивно), а с другой критически снижает производительность и надёжность (из-за ориентированности обучения таким языкам на решение конкретных задач, а не на понимание сущности производимых действий).\nПроблема высокого порога вхождения возникает, в основном, в языках с избыточным синтаксисом (C++, C#) и может быть полностью решена лишь отказом от них в пользу более удачных (что, разумеется, далеко не всегда возможно). В этом случае скрипты выполняют роль паллиатива. Собственно, они и возникли когда масштабируемость Си-подобных языков стала недостаточной для повседневной работы и порог вхождения новичков в отрасль резко возрос.\nПроблема большого количества рутины, вообще говоря, неразрешима, но в большинстве случаев может быть сглажена более надёжными дополнительными средствами, например, автоматической кодогенерацией.\nЕсли требуется кроссплатформенность. Например, JavaScript — его исполняют браузеры под самыми разными ОС.\nПроблема с кроссплатформенностью напрямую вытекает из стандарта языка: стандарт Си, например, указывает «sizeOf (short) <= sizeOf (int) <= sizeOf (long)», но не указывает какую именно разрядность они должны иметь (эту проблему решают прикладные библиотеки, например, Glib). Современные не-сценарные языки (Java, C#, Haskell) этой проблемы полностью лишены именно по причине хорошей стандартизации.\nСкриптовые языки применяются для написания программ, не требующих оптимальности и быстроты исполнения. Из-за простоты на них часто пишутся небольшие одноразовые («проблемные») программы.\nМногие скриптовые языки общего назначения работают достаточно медленно, поэтому их часто используют только в сочетании со сторонними библиотеками (например, NumPy в сочетании с Python).\nНапример, NumPy основывается на фортрановской библиотеке LAPACK и GSL, код которой, проверен временем и регулярно дополняется современными функциями, а множество специальных версий Лапака (AOML, MKL, ATLAS, cuBLAS) очень хорошо оптимизированных под современные архитектуры позволяют гарантировать практически пиковую производительность работы функций этой библиотеки.\nБолее правильный пример: язык Lua является классическим встраиваемым языком сценариев общего назначения, для его работы достаточно минимальной реализации Си (везде, где есть Си, может работать и Lua).\nТакже скриптовые языки хороши для визуализации данных: создания сложных графиков и презентаций, а также простых программ (например, Python используется в графических оболочках Gnome и Cinnamon для создания апплетов и небольших настроечных утилит).>>>",
            "У плагинов также есть важные преимущества.\n<<<Готовые программы, оттранслированные в машинный код, выполняются значительно быстрее скриптов, которые интерпретируются из исходного кода динамически при каждом исполнении. Большинство программ переносимы на уровне исходного кода и могут быть выполнены интерпретатором соответствующего языка подобно скриптам. Использование же байт-кода (Java, C#, LLVM) позволяет хранить, переносить и исполнять программы более эффективным образом, нежели скрипты.\nJIT-компиляция также позволяет оптимизировать общий код под конкретную платформу (в перспективе, под конкретное семейство процессоров и имеющееся оборудование).\nПолный доступ к любому аппаратному обеспечению или ресурсу ОС (в скриптовом языке для этого должен существовать специальный API, написанный на компилируемом языке). Плагины, работающие с аппаратным обеспечением, традиционно называют драйверами.\nЕсли предполагается интенсивный обмен данными между основной программой и пользовательским расширением, для плагина его обеспечить проще.\nДля компилируемых языков программирования характерно использование сильной статической системы типов, которая позволяет эффективно отлавливать ошибки и лучше оптимизировать код. Использование же в современных скриптах динамической типизации обусловлено скорее техническими особенностями реализации и историческими причинами. Также у статически типизированных языков есть потенциал для роста, а именно, переход с традиционной мономорфной типизации на полиморфную. Расширения мономорфизма в современных Си-подобных языках (перегрузка, ad-hoc-полиморфизм) и полиморфизм подтипов, а также параметрический полиморфизм и классы типов в экспериментальных языках (например, Haskell) сценарным языкам недоступен (статическая типизация во время исполнения скрипта приведёт к существенной потере производительности).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Сценарный_язык"
    },
    {
        "task": [
            "Эксперты отмечают, что хуже всего защищены от кибератак госорганы[24]. Органы государственной власти, вооружённые силы, корпорации, финансовые институты, медицинские учреждения и частные предприниматели постоянно накапливают значительные объёмы конфиденциальной информации о своих сотрудниках, клиентах, продуктах, научных исследованиях и финансовых результатах. Попадание такой информации в руки конкурентов или киберпреступников может повлечь для организации и её клиентов далеко идущие юридические последствия, невосполнимые финансовые и репутационные потери. С точки зрения бизнеса информационная безопасность должна быть сбалансирована относительно затрат; экономическая модель Гордона-Лоба[англ.] описывает математический аппарат для решения этой задачи[25]. Основными способами противодействия угрозам информационной безопасности или информационным рискам являются:\n<<<снижение — внедрение мер безопасности и противодействия для устранения уязвимостей и предотвращения угроз;\nпередача — перенос затрат, связанных с реализацией угроз на третьих лиц: страховые или аутсорсинговые компании;\nпринятие — формирование финансовых резервов в случае, если стоимость реализации мер безопасности превышает потенциальный ущерб от реализации угрозы;\nотказ — отказ от чрезмерно рисковой деятельности[26].>>>",
            "Ниже приведены определения термина «информационная безопасность» из различных источников:\n<<<Сохранение конфиденциальности, целостности и доступности информации. Примечание: также сюда могут быть включены другие свойства, такие как подлинность, подотчетность, неотказуемость (англ. non-repudiation) и достоверность[46].\nЗащита информации и информационных систем от неавторизованного доступа, использования, раскрытия, искажения, изменения или уничтожения в целях обеспечения конфиденциальности, целостности и доступности[1].\nОбеспечение защиты информации на предприятии от раскрытия неавторизованным пользователям (конфиденциальность), противоправного изменения (целостность) и недоступности, когда она необходима (доступность)[47].\nПроцесс защиты интеллектуальной собственности организации[48].\nОдна из дисциплин управления рисками, чьей задачей является управление стоимостью информационных рисков для бизнеса[49].\nОбоснованная уверенность в том, что информационные риски уравновешены соответствующими мерами контроля и управления[50].\nЗащита информации, минимизирующая риск разглашения информации неавторизованным лицам[51].\nМультидисциплинарная область исследований и профессиональной деятельности, которая сосредоточена на развитии и внедрении всевозможных механизмов безопасности (технических, организационных, человекоориентированных, юридических) с целью предохранения информации от угроз повсюду, где бы она ни находилась (как внутри периметра организации, так и за его пределами) и, соответственно, информационных систем, в которых информация создаётся, обрабатывается, хранится, передаётся и уничтожается. Перечень целей безопасности может включать конфиденциальность, целостность, доступность, неприкосновенность частной жизни, подлинность и достоверность, неотказуемость, подотчетность и проверяемость[52].\nПроцесс баланса между возникающими, воздействующими угрозами и успешностью противодействия этим угрозам со стороны органов государственной власти, отвечающих за безопасность государства[53][неавторитетный источник].>>>",
            "Между тем, в профессиональном сообществе не прекращаются дебаты о соответствии триады CIA стремительно развивающимся технологиям и требованиям бизнеса. В результате этих дискуссий появляются рекомендации о необходимости установки взаимосвязи между безопасностью и неприкосновенностью частной жизни, а также утверждения дополнительных принципов[5]. Некоторые из них уже включены в стандарты Международной организации по стандартизации (ISO):\n<<<подлинность (англ. authenticity) — свойство, гарантирующее, что субъект или ресурс идентичны заявленному;\nподотчётность[англ.] (англ. accountability) — ответственность субъекта за его действия и решения;\nневозможность отказа[англ.] (англ. non-repudiation[К 5]) — способность удостоверять имевшее место событие или действие и их субъекты так, чтобы это событие или действие и субъекты, имеющие к нему отношение, не могли быть поставлены под сомнение;\nдостоверность (англ. reliability) — свойство соответствия предусмотренному поведению и результатам[46].>>>",
            "Системный подход к описанию информационной безопасности предлагает выделить следующие составляющие информационной безопасности[75]:\n<<<Законодательная, нормативно-правовая и научная база.\nСтруктура и задачи органов (подразделений), обеспечивающих безопасность ИТ.\nОрганизационно-технические и режимные меры и методы (Политика информационной безопасности).\nПрограммно-технические способы и средства обеспечения информационной безопасности.>>>",
            "Целью реализации информационной безопасности какого-либо объекта является построение системы обеспечения информационной безопасности данного объекта (СОИБ). Для построения и эффективной эксплуатации СОИБ необходимо::\n<<<выявить требования защиты информации, специфические для данного объекта защиты;\nучесть требования национального и международного Законодательства;\nиспользовать наработанные практики (стандарты, методологии) построения подобных СОИБ;\nопределить подразделения, ответственные за реализацию и поддержку СОИБ;\nраспределить между подразделениями области ответственности в осуществлении требований СОИБ;\nна базе управления рисками информационной безопасности определить общие положения, технические и организационные требования, составляющие Политику информационной безопасности объекта защиты;\nреализовать требования Политики информационной безопасности, внедрив соответствующие программно-аппаратные, инженерно-технические и другие способы и средства защиты информации;\nреализовать Систему менеджмента (управления) информационной безопасности (СМИБ);\nиспользуя СМИБ, организовать регулярный контроль эффективности СОИБ и при необходимости пересмотр и корректировку СОИБ и СМИБ.>>>",
            "Акты федерального законодательства:\n<<<Международные договоры РФ;\nКонституция РФ;\nЗаконы федерального уровня (включая федеральные конституционные законы, кодексы);\nУказы Президента РФ;\nПостановления Правительства РФ;\nНормативные правовые акты федеральных министерств и ведомств;\nНормативные правовые акты субъектов РФ, органов местного самоуправления и т. д.>>>",
            "К нормативно-методическим документам можно отнести\n<<<Методические документы государственных органов России:\nДоктрина информационной безопасности РФ;\nРуководящие документы ФСТЭК (Гостехкомиссии России);\nПриказы ФСБ;\nСтандарты информационной безопасности, из которых выделяют:\nМеждународные стандарты;\nГосударственные (национальные) стандарты РФ;\nРекомендации по стандартизации;\nМетодические указания.>>>",
            "Государственные органы РФ, контролирующие деятельность в области защиты информации:\n<<<Комитет Государственной думы по безопасности;\nСовет безопасности России;\nФедеральная служба по техническому и экспортному контролю (ФСТЭК России);\nФедеральная служба безопасности Российской Федерации (ФСБ России);\nФедеральная служба охраны Российской Федерации (ФСО России);\nСлужба внешней разведки Российской Федерации (СВР России);\nМинистерство обороны Российской Федерации (Минобороны России);\nМинистерство внутренних дел Российской Федерации (МВД России);\nФедеральная служба по надзору в сфере связи, информационных технологий и массовых коммуникаций (Роскомнадзор);\nЦентральный банк Российской Федерации (Банк России).>>>",
            "Службы, организующие защиту информации на уровне предприятия\n<<<Служба экономической безопасности;\nСлужба безопасности персонала (Режимный отдел);\nКадровая служба;\nСлужба информационной безопасности.>>>",
            "Для построения Политики информационной безопасности рекомендуется отдельно рассматривать следующие направления защиты информационной системы[75]:\n<<<Защита объектов информационной системы;\nЗащита процессов, процедур и программ обработки информации;\nЗащита каналов связи (акустические, инфракрасные, проводные, радиоканалы и др.), включая защиту информации в локальных сетях;\nПодавление побочных электромагнитных излучений;\nУправление системой защиты.>>>",
            "При этом по каждому из перечисленных выше направлений Политика информационной безопасности должна описывать следующие этапы создания средств защиты информации:\n<<<Определение информационных и технических ресурсов, подлежащих защите;\nВыявление полного множества потенциально возможных угроз и каналов утечки информации;\nПроведение оценки уязвимости и рисков информации при имеющемся множестве угроз и каналов утечки;\nОпределение требований к системе защиты;\nОсуществление выбора средств защиты информации и их характеристик;\nВнедрение и организация использования выбранных мер, способов и средств защиты;\nОсуществление контроля целостности и управление системой защиты.>>>",
            "В литературе предлагается следующая классификация средств защиты информации[75].\n<<<Средства защиты от несанкционированного доступа:\nСредства авторизации;\nМандатное управление доступом[77];\nИзбирательное управление доступом;\nУправление доступом на основе ролей;\nЖурналирование (также называется Аудит).\nСистемы анализа и моделирования информационных потоков (CASE-системы).\nСистемы мониторинга сетей:\nСистемы обнаружения и предотвращения вторжений (IDS/IPS).\nСистемы предотвращения утечек конфиденциальной информации (DLP-системы[78][79]).\nАнализаторы протоколов.\nАнтивирусные средства.\nМежсетевые экраны.\nКриптографические средства:\nШифрование;\nЦифровая подпись.\nСистемы резервного копирования.\nСистемы бесперебойного питания:\nИсточники бесперебойного питания;\nРезервирование нагрузки;\nГенераторы напряжения.\nСистемы аутентификации:\nПароль;\nКлюч доступа (физический или электронный);\nСертификат;\nБиометрия.\nСредства предотвращения взлома корпусов и краж оборудования.\nСредства контроля доступа в помещения.\nИнструментальные средства анализа систем защиты:\nАнтивирус.>>>",
            "Организационная защита — это регламентация производственной деятельности и взаимоотношений исполнителей на нормативно-правовой основе, исключающей или существенно затрудняющей неправомерное овладение конфиденциальной информацией и проявление внутренних и внешних угроз.\nОрганизационная защита обеспечивает:\n<<<организацию охраны, режима, работу с кадрами, с документами;\nиспользование технических средств безопасности и информационно-аналитическую деятельность по выявлению внутренних и внешних угроз предпринимательской деятельности[80].>>>",
            "К основным организационным мероприятиям можно отнести:\n<<<организацию режима и охраны. Их цель — исключение возможности тайного проникновения на территорию и в помещения посторонних лиц;\nорганизацию работы с сотрудниками, которая предусматривает подбор и расстановку персонала, включая ознакомление с сотрудниками, их изучение, обучение правилам работы с конфиденциальной информацией, ознакомление с мерами ответственности за нарушение правил защиты информации и др.;\nорганизацию работы с документами и документированной информацией, включая организацию разработки и использования документов и носителей конфиденциальной информации, их учёт, исполнение, возврат, хранение и уничтожение;\nорганизацию использования технических средств сбора, обработки, накопления и хранения конфиденциальной информации;\nорганизацию работы по анализу внутренних и внешних угроз конфиденциальной информации и выработке мер по обеспечению её защиты;\nорганизацию работы по проведению систематического контроля за работой персонала с конфиденциальной информацией, порядком учёта, хранения и уничтожения документов и технических носителей.>>>",
            "Задачи систем информационной безопасности предприятия различны:\n<<<обеспечение защищённого хранения информации на носителях;\nзащита данных, передаваемых по каналам связи;\nсоздание резервных копий, послеаварийное восстановление и т. д.>>>",
            "Обеспечение информационной безопасности — это непрерывный процесс, включающий в себя, пять ключевых этапов:\n<<<оценка стоимости;\nразработка политики безопасности;\nреализация политики;\nквалифицированная подготовка специалистов;\nаудит.>>>",
            "Цели оценки информационной безопасности:\n<<<определить ценность информационных активов;\nопределить угрозы для конфиденциальности, целостности, доступности и/или идентифицируемости этих активов;\nопределить существующие уязвимые места в практической деятельности организации;\nустановить риски организации в отношении информационных активов;\nпредложить изменения в существующей практике работы, которые позволят сократить величину рисков до допустимого уровня;\nобеспечить базу для создания проекта обеспечения безопасности.>>>",
            "Пять основных видов оценки:\n<<<Оценка уязвимых мест на системном уровне. Компьютерные системы исследованы на известные уязвимости и простейшие политики соответствия техническим требованиям.\nОценка на сетевом уровне. Произведена оценка существующей компьютерной сети и информационной инфраструктуры, выявлены зоны риска.\nОбщая оценка риска в рамках организации. Произведен анализ всей организации с целью выявления угроз для её информационных активов.\nАудит. Исследована существующая политика и соответствие организации этой политике.\nИспытание на возможность проникновения. Исследована способность организации реагировать на смоделированное проникновение.>>>",
            "При проведении оценки должны быть исследованы такие документы, как:\n<<<политика безопасности;\nинформационная политика;\nполитика и процедуры резервного копирования;\nсправочное руководство работника или инструкции;\nпроцедуры найма-увольнения работников;\nметодология разработки программного обеспечения;\nметодология смены программного обеспечения;\nтелекоммуникационные политики;\nдиаграммы сети.>>>",
            "Необходимо разработать следующие политики и процедуры:\n<<<Информационная политика. Выявляет секретную информацию и способы её обработки, хранения, передачи и уничтожения.\nПолитика безопасности. Определяет технические средства управления для различных компьютерных систем.\nПолитика использования. Обеспечивает политику компании по использованию компьютерных систем.\nПолитика резервного копирования. Определяет требования к резервным копиям компьютерных систем.\nПроцедуры управления учётными записями. Определяют действия, выполняемые при добавлении или удалении пользователей.\nПлан на случай чрезвычайных обстоятельств. Обеспечивает действия по восстановлению оборудования компании после стихийных бедствий или инцидентов, произошедших по вине человека.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Информационная_безопасность"
    },
    {
        "task": [
            "Этапы цикла выполнения:\n<<<Процессор выставляет число, хранящееся в регистре счётчика команд, на шину адреса и отдаёт памяти команду чтения.\nВыставленное число является для памяти адресом; память, получив адрес и команду чтения, выставляет содержимое, хранящееся по этому адресу, на шину данных и сообщает о готовности.\nПроцессор получает число с шины данных, интерпретирует его как команду (машинную инструкцию) из своей системы команд и исполняет её.\nЕсли последняя команда не является командой перехода, процессор увеличивает на единицу (в предположении, что длина каждой команды равна единице) число, хранящееся в счётчике команд; в результате там образуется адрес следующей команды.>>>",
            "Конвейерная архитектура (англ. pipelining) была введена в центральный процессор с целью повышения быстродействия. Обычно для выполнения каждой команды требуется осуществить некоторое количество однотипных операций, например: выборка команды из ОЗУ, дешифровка команды, адресация операнда в ОЗУ, выборка операнда из ОЗУ, выполнение команды, запись результата в ОЗУ. Каждую из этих операций сопоставляют одной ступени конвейера. Например, конвейер микропроцессора с архитектурой MIPS-I содержит четыре стадии:\n<<<получение и декодирование инструкции,\nадресация и выборка операнда из ОЗУ,\nвыполнение арифметических операций,\nсохранение результата операции.>>>",
            "Факторы, снижающие эффективность конвейера:\n<<<Простой конвейера, когда некоторые ступени не используются (например, адресация и выборка операнда из ОЗУ не нужны, если команда работает с регистрами).\nОжидание: если следующая команда использует результат предыдущей, то последняя не может начать выполняться до выполнения первой (это преодолевается при использовании внеочередного выполнения команд — out-of-order execution).\nОчистка конвейера при попадании в него команды перехода (эту проблему удаётся сгладить, используя предсказание переходов).>>>",
            "Возможными вариантами параллельной архитектуры могут служить (по классификации Флинна):\n<<<SISD — один поток команд, один поток данных;\nSIMD — один поток команд, много потоков данных;\nMISD — много потоков команд, один поток данных;\nMIMD — много потоков команд, много потоков данных.>>>",
            "Первые процессоры архитектуры x86 потребляли очень малое (по современным меркам) количество энергии, составляющее доли ватта. Увеличение количества транзисторов и повышение тактовой частоты процессоров привело к существенному росту данного параметра. Наиболее производительные модели потребляют 130 и более ватт. Фактор энергопотребления, несущественный на первых порах, сейчас оказывает серьёзное влияние на эволюцию процессоров:\n<<<совершенствование технологии производства для уменьшения потребления, поиск новых материалов для снижения токов утечки, понижение напряжения питания ядра процессора;\nпоявление сокетов (разъемов для процессоров) с большим числом контактов (более 1000), большинство которых предназначено для питания процессора. Так, у процессоров для популярного сокета LGA775 число контактов основного питания составляет 464 штуки (около 60 % от общего количества);\nизменение компоновки процессоров. Кристалл процессора переместился с внутренней на внешнюю сторону для лучшего отвода тепла к радиатору системы охлаждения;\nустановка в кристалл температурных датчиков и системы защиты от перегрева, снижающей частоту процессора или вообще останавливающей его при недопустимом увеличении температуры;\nпоявление в новейших процессорах интеллектуальных систем, динамически меняющих напряжение питания, частоту отдельных блоков и ядер процессора, и отключающих неиспользуемые блоки и ядра;\nпоявление энергосберегающих режимов для «засыпания» процессора при низкой нагрузке.>>>",
            "Для теплоотвода от микропроцессоров применяются пассивные радиаторы и активные кулеры. Для лучшего контакта с радиатором на поверхность процессора наносится термопаста.\n<<<\n\n\nРадиатор неттопа Gigabyte BRIX\n\n\n\nРадиаторы на чипах Raspberry Pi\n\n\n\nКулер ЦП, включающий в себя радиатор и вентилятор. Последний имеет декоративную подсветку\n\n>>>",
            "Наиболее популярные процессоры сегодня производят:\n<<<для персональных компьютеров, ноутбуков и серверов — Intel и AMD;\nдля суперкомпьютеров — Intel и IBM;\nдля ускорителей компьютерной графики и высокопроизводительных вычислений — NVIDIA, AMD и Intel\nдля мобильных телефонов и планшетов[11] — Apple, Samsung, HiSilicon и Qualcomm.>>>",
            "Китай[править | править код]<<<Семейство Loongson (Godson)\nСемейство ShenWei (SW)\nСемейство YinHeFeiTeng (FeiTeng)>>>",
            "Япония[править | править код]<<<NEC VR (MIPS, 64 bit)\nHitachi SH (RISC)[16][17]>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Центральный_процессор"
    },
    {
        "task": [
            "Иногда встречается запись IP-адресов вида «192.168.5.0/24». Данный вид записи заменяет собой указание диапазона IP-адресов. Число после косой черты означает количество единичных разрядов в маске подсети. Для приведённого примера маска подсети будет иметь двоичный вид 11111111 11111111 11111111 00000000 или то же самое в маршрутизаторе в десятичном виде: «255.255.255.0». 24 разряда IP-адреса отводятся под номер сети, а остальные 8 разрядов полного адреса — под адреса хостов этой сети, адрес этой сети и широковещательный адрес этой сети. Итого, 192.168.5.0/24 означает диапазон адресов хостов от 192.168.5.1 до 192.168.5.254, а также 192.168.5.0 — адрес сети и 192.168.5.255 — широковещательный адрес сети. Для вычисления адреса сети и широковещательного адреса сети используются формулы:\n<<<адрес сети = IP.любого_компьютера_этой_сети AND MASK (адрес сети позволяет определить, что компьютеры в одной сети)\nшироковещательный адрес сети = IP.любого_компьютера_этой_сети OR NOT(MASK) (широковещательный адрес сети воспринимается всеми компьютерами сети как дополнительный свой адрес, то есть пакет на этот адрес получат все хосты сети как адресованные лично им. Если на сетевой интерфейс хоста, который не является маршрутизатором пакетов, попадёт пакет, адресованный не ему, то он будет отброшен).>>>",
            "Запись адресов IP с указанием маски подсети переменной длины (записывается после адрес через косую дробную черту — «слэш») также называют бесклассовой адресацией (CIDR), в противоположность записи без указания маски, именуемой классовой адресацией:\n<<<192.0.2.2 и 100.64.2.2 —— классовая запись адреса;\n192.0.2.2/24 и 100.64.2.2/16 —— бесклассовая запись CIDR тех же адресов и подсетей;>>>",
            "Для получения IP-адреса клиент может использовать один из следующих протоколов:\n<<<BOOTP (RFC 951) — простой протокол настройки сетевого адреса, ранее использовался для бездисковых станций, ныне вытеснен DHCP.\nDHCP (RFC 2131) — наиболее распространённый протокол настройки сетевых параметров.\nIPCP (RFC 1332) в рамках протокола PPP (RFC 1661).\nZeroconf (RFC 3927) — протокол настройки сетевого адреса, определения имени, поиск служб.\nRARP (RFC 903) Устаревший протокол, использующий обратную логику (из аппаратного адреса — в логический) популярного и поныне в широковещательных сетях протокола ARP. Не поддерживает распространения информации о длине маски (не поддерживает VLSM).>>>",
            "Адреса IP, используемые в локальных сетях, относят к частным.\nАдреса Intranet:\n<<<10.0.0.0/8\n172.16.0.0/12\n192.168.0.0/16>>>",
            "Адреса для внутреннего использования:\n<<<127.0.0.0/8 — используется для коммуникаций внутри хоста (см. localhost).\nблок с 169.254.1.0 по 169.254.254.255 (подсеть 169.254.0.0/16 за исключением подсетей 169.254.0.0/24 и 169.254.255.0/24) — используется для автоматической настройки сетевого интерфейса в случае отсутствия DHCP (см. link-local).>>>",
            "Инструменты<<<В ОС Windows свой IP-адрес можно узнать, набрав ipconfig в командной строке.\nВ ОС Unix свой IP-адрес можно узнать, набрав ifconfig или ip addr в командной строке.\nIP-адрес, соответствующий доменному имени, можно узнать с помощью команды: nslookup example.net или ping example.net>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/IP-адрес"
    },
    {
        "task": [
            "Номер версии ядра Linux до 30 мая 2011 содержал четыре числа, согласно недавнему изменению в политике именования версий, схема которой долгое время была основана на трёх числах. Для иллюстрации допустим, что номер версии составлен таким образом: A.B.C[.D] (например, 2.2.1, 2.4.13 или 2.6.12.3).\n<<<Число A обозначает версию ядра. Изначально задумывалось, что оно будет изменяться редко и только тогда, когда вносятся значительные изменения в код и концепцию ядра, первые такие изменения произошли в 1994 году (версия 1.0) и в 1996 году (версия 2.0).\nЧисло B обозначает старшую версию ревизии ядра. В ядрах до версии 3.0 чётные числа обозначали стабильные ревизии, то есть те, которые предназначены для продуктивного использования, такие, как 1.2, 2.4 или 2.6, а нечётные — ревизии для разработчиков, предназначенные для того, чтобы тестировать новые улучшения и драйверы до тех пор, пока они не станут достаточно стабильными для того, чтобы включить их в стабильный выпуск.\nЧисло C обозначает младшую версию ревизии ядра. В старой трёхчисловой схеме нумерации оно изменялось тогда, когда в ядро включались заплатки, связанные с безопасностью, исправления ошибок, новые улучшения или драйверы. С новой политикой нумерации, однако, оно изменяется только тогда, когда вносятся новые драйверы или улучшения; небольшие исправления поддерживаются числом D.\nЧисло D впервые появилось после случая, когда в коде ядра версии 2.6.8 была обнаружена грубая, требующая незамедлительного исправления ошибка, связанная с NFS. Однако других изменений было недостаточно для того, чтобы это послужило причиной для выпуска новой младшей ревизии (которой должна была стать 2.6.9). Поэтому была выпущена версия 2.6.8.1 с единственным изменением в виде исправления этой ошибки. С ядра 2.6.11 эта нумерация была адаптирована в качестве новой официальной политики версий. Исправления ошибок и заплатки безопасности теперь обозначаются с помощью четвёртого числа, тогда как большие изменения отражаются в увеличении младшей версии ревизии ядра (число C).>>>",
            "Задуманное изначально не как многоплатформенное, ядро Linux на данное время перенесено на очень широкий круг архитектур, запускается на широком спектре оборудования от iPAQ (карманный компьютер) до IBM S/390 (высокопроизводительный мейнфрейм). Системы на основе Linux используются в качестве основных почти на всех суперкомпьютерах (более 99 % списка TOP500), в том числе и на самом мощном — Summit[18].\nИзначально Linux разрабатывался для 32-битных x86-совместимых ПК; на сегодняшний день различные версии ядра Linux запускаются на следующих процессорных архитектурах:\n<<<ARM:\nAcorn: Archimedes, A5000, RiscPC;\nStrongARM, Intel XScale и тому подобных;\nAxis Communications CRIS;\nDEC Alpha;\nHP PA-RISC;\nHitachi: SuperH (SEGA Dreamcast), H8/300;\nIBM System/390;\nIBM zSeries-мэйнфреймы;\nIntel 80386 и выше: IBM PC и совместимые с процессорами:\n80386, 80486, а также AMD, Cyrix, TI и IBM-варианты;\nсерия Pentium;\nCore, Core2 Duo в 32- и 64-битных версиях;\nAMD Am5x86, K5, K6, Athlon (все 32-битные версии), Duron;\nAMD64: 64-битная технология AMD (также известная как x86-64);\nCyrix 5x86, 6x86 (M1), 6x86MX и MediaGX (National/AMD Geode) серия;\nVIA C3 и последующие процессоры;\nподдержка Intel 8086, 8088, 80186, 80188 и 80286 процессоров находится в разработке (проект ELKS);\nMicrosoft Xbox (Pentium III);\nIntel IA-64 (Itanium);\nMIPS;\nSilicon Graphics, Inc.;\nCobalt Qube, Cobalt RaQ;\nSony/Toshiba/IBM — Emotion Engine и Cell, используемые в PlayStation 2 и PlayStation 3 соответственно;\nDECstation\nи некоторые другие;\nMotorola 68020 и выше:\nболее новые Amiga: A1200, A2500, A3000, A4000;\nApple Macintosh II, LC, Quadra, Centris и ранняя серия Performa;\nрабочие станции Sun Microsystems серии 3 (экспериментальная, с использованием Sun-3 MMU);\nNEC v850e;\nRenesas M32R;\nPowerPC и IBM POWER:\nвсе новые компьютеры Apple (все оснащённые PCI Power Macintoshes, ограниченная поддержка NuBus Power Macs),\nклоны PCI Power Mac, разработанные Power Computing, UMAX и Motorola;\nIBM RS/6000, iSeries- и pSeries-системы;\nPegasos I и II системы;\nнекоторые встроенные системы PowerPC;\nQualcomm Hexagon[19]\nSPARC и UltraSPARC: Sun 4-series, SPARCstation/SPARCserver, Ultra-, Blade- и Fire-серии рабочих станций и серверов.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Ядро_Linux"
    },
    {
        "task": [
            "Этот раздел слишком короткий. Пожалуйста, улучшите и дополните его.<<<Behringer,\nCreative Labs,\nASUS,\nC-Media[англ.],\nDiamond Multimedia[англ.],\nESI Audiotechnik GmbH,\nESS Technology (сейчас только микросхемы ЦАП/АЦП),\nKYE Systems (Genius),\nM-Audio,\nRealtek,\nTurtle Beach Systems,\nYamaha Media Technology,\nVIA Technologies,\nFocusrite,\nSteinberg.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Звуковая_карта"
    },
    {
        "task": [
            "В настоящее время [когда?] наметились два направления в развитии Всемирной паутины: семантическая паутина и социальная паутина.\n<<<Семантическая паутина предполагает улучшение связности и релевантности информации во Всемирной паутине через введение новых форматов метаданных.\nСоциальная паутина полагается на пользователей, выполняющих упорядочивание имеющейся в сети информации.>>>",
            "Представленная в сети информация может быть доступна:\n<<<только для чтения («пассивно»);\nдля чтения и добавления/изменения («активно»).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Всемирная_паутина"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Коммерческое_программное_обеспечение"
    },
    {
        "task": [
            "В разных языках программирования для записи шестнадцатеричных чисел используют различный синтаксис:\n<<<В Ада и VHDL такие числа указывают так: «16#5A3#».\nВ Си и языках схожего синтаксиса, например, в Java, используют префикс «0x». Например, «0x5A3».\nВ некоторых языках ассемблера используют букву «h», которую ставят после числа. Например, «5A3h». При этом, если число начинается не с десятичной цифры, то для отличия от имён идентификаторов (например, констант) впереди ставится «0» (ноль)[1]: «0FFh» (25510)\nДругие ассемблеры (AT&T, Motorola), а также Паскаль и некоторые версии Бейсика используют префикс «$». Например, «$5A3».\nДругие версии Бейсика, например Turbo Basic, используют для указания шестнадцатеричных цифр сочетание «&h» или «&H» перед числом. Например, «&h5A3».\nВ ассемблерах для IBM mainframe (Assembler F, Assembler 2, Assembler H) используется запись X’xx..xx'. Например X’05A3'.\nНекоторые иные платформы, например ZX Spectrum в своих ассемблерах (MASM, TASM, ALASM, GENS и т. д.) использовали запись #5A3, обычно выровненную до одного или двух байт: #05A3.\nВ Unix-подобных операционных системах (и многих языках программирования, имеющих корни в Unix/linux) непечатные символы при выводе/вводе кодируются как 0xCC, где CC — шестнадцатеричный код символа.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Шестнадцатеричная_система_счисления"
    },
    {
        "task": [
            "\nApple\nAcer\nASUS\nBlackBerry\nBQ[англ.] (Испания)\nDELL\nFly\nFujitsu-Siemens\nGarmin\nGoogle\nHandera[англ.]\nHonor\nHTC\nHuawei\ni-mate[англ.]\nLG\nLenovo\nLUXian[источник не указан 127 дней]\nMeizu\nMicrosoft\nMitac\nMotorola\nNokia\nOnePlus\nOPPO\nOukitel[англ.][источник не указан 127 дней]\nPalm\nPanasonic\nPhilips\nRoverComputers\nRealme\nRedmi (линейка Xiaomi)\nSamsung\nSharp\nSony\nSymbol\nT-Mobile[источник не указан 127 дней]\nThl[англ.][источник не указан 127 дней]\nToshiba\nTreo[англ.][источник не указан 127 дней]\nTyphoon[источник не указан 127 дней]\nUmidigi[англ.] (КНР, с 2012)\nVivo\nXiaomi\nYota Devices\nZTE\n<<<Прочные смартфоны (см. Rugged smartphone[англ.]): Evolveo[англ.], TUFF Phones[англ.], Ulefone, Doogee и др.>>>",
            "Наиболее распространённые операционные системы и платформы для смартфонов[20]:\n<<<Android — платформа для смартфонов с открытым исходным кодом на основе Linux, разрабатываемая OHA (группа компаний во главе с Google).\nBada — собственная платформа компании Samsung. На ней базируются смартфоны линейки Samsung Wave. О закрытии проекта было объявлено в начале 2013 года[21].\nBlackBerry OS — устройства на этой системе широко используются в основном в США, так как спецслужбы некоторых стран не заинтересованы в использовании этих смартфонов в своей стране из-за того, что все входящие/исходящие данные шифруются с помощью AES[22].\nEMUI — операционная система и графическая оболочка от Huawei, которая основана на Android. Использует файловую систему EROFS[англ.] с выхода версии 9.0.1. Широкие возможности по изменению темы.\nEUI — операционная система от LeEco, основанная на Android.\nFirefox OS — (кодовое имя Boot to Gecko, B2G) — свободная операционная система, предназначенная для смартфонов и планшетных компьютеров. Разработку ведёт Mozilla Foundation на базе свободного веб-движка Gecko.\nHarmony OS — операционная система, разрабатываемая компанией Huawei в качестве возможной альтернативы Android. Вопреки ожиданиям, компания не представила смартфоны под управлением новой ОС на конференции в августе 2019 года и заявила, что не планирует выпускать смартфоны на Harmony OS в 2019 году[23].\niOS — операционная система компании Apple, используемая в смартфонах iPhone.\nLinux — например, Android и Firefox OS (см. выше). Дистрибутивы GNU/Linux на мобильных платформах широкого распространения не получили, однако традиционно считаются перспективным направлением. Смартфоны на базе GNU/Linux распространены в основном в Азии. Платформы: Maemo (используется в интернет-планшетах Nokia 770/N810 и смартфоне Nokia N900), Openmoko (Neo 1973, Neo FreeRunner), MeeGo (Nokia N9); Ubuntu MID, Ubuntu touch, UbportsOS («переработанная Ubuntu touch», была куплена у компании Canonical, когда было объявлено о завершении поддержки Ubuntu touch, и впоследствии переименована).\nMIUI — операционная система и графическая оболочка от Xiaomi, которая основана на Android.\nOpen webOS — 8 января 2009 года был анонсирован смартфон Palm Pre под управлением новой ОС Palm webOS, ядром которой является Linux[24]. С 2010 по 2011 год поддерживалась и разрабатывалась компанией Hewlett-Packard (в результате поглощения Palm). В сентябре 2012 года HP должна окончательно опубликовать в свободном доступе исходные коды webOS (Open webOS 1.0), таким образом ОС будет относиться к разряду открытого программного обеспечения (как и Android).\nPalm OS — некогда популярная платформа, в настоящее время аппараты на базе Palm OS малораспространены. Последний смартфон под управлением данной операционной системы был представлен в конце 2007 года (Palm Centro).\nSymbian OS — используется преимущественно в устройствах Nokia, а также некоторых моделях Samsung, Sony Ericsson и Siemens.\nWindows Mobile и Windows CE — компактная ОС компании Microsoft, выпускается с 1996 года и занимает крупный сегмент рынка ОС для смартфонов.\nWindows Phone — новая разработка компании Microsoft, кардинально отличающаяся от Windows Mobile.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Смартфон"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Лицензия_MIT"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Учётная_запись"
    },
    {
        "task": [
            "\n\n\n\n\nN\n\np\n\n\n=\n\n\n\nA\n¯\n\n\n\n(\nn\n,\nk\n)\n=\n\n\n\n\nA\n¯\n\n\n\n\nn\n\n\nk\n\n\n=\n\nn\n\nk\n\n\n=\n\n2\n\n8\n\n\n=\n256\n\n\n{\\displaystyle N_{p}={\\bar {A}}(n,k)={\\bar {A}}_{n}^{k}=n^{k}=2^{8}=256}\n\n возможных состояний (кодов, значений), где<<<\n\n\n\n\nN\n\np\n\n\n\n\n{\\displaystyle N_{p}}\n\n — количество состояний (кодов, значений) в одном байте;\n\n\n\n\n\n\n\nA\n¯\n\n\n\n(\nn\n,\nk\n)\n=\n\n\n\n\nA\n¯\n\n\n\n\nn\n\n\nk\n\n\n\n\n{\\displaystyle {\\bar {A}}(n,k)={\\bar {A}}_{n}^{k}}\n\n — количество размещений с повторениями;\n\n\n\n\nn\n\n\n{\\displaystyle n}\n\n — количество состояний (кодов, значений) в одном бите; в бите 2 состояния (n = 2);\n\n\n\n\nk\n\n\n{\\displaystyle k}\n\n — количество битов в байте; в 8-битном байте k = 8.>>>",
            "В международном стандарте МЭК IEC 60027-2 от 2005 года[7] для применения в электротехнической и электронной областях рекомендуются обозначения:\n<<<bit — для бита;\no, B — для октета, байта. Причём о — единственное указанное обозначение во французском языке.[источник не указан 1457 дней]>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Байт"
    },
    {
        "task": [
            "Робототехнический педипулятор, оснащённый воздушными мышцами.<<<Приводы: это «мышцы» роботов. В настоящее время самыми популярными двигателями в приводах являются электрические, но применяются и другие, использующие химические вещества, жидкости или сжатый воздух.\nДвигатели постоянного тока: В настоящий момент большинство роботов используют электродвигатели, которые могут быть нескольких видов.\nШаговые электродвигатели: Как можно предположить из названия, шаговые электродвигатели не вращаются свободно, подобно двигателям постоянного тока. Они поворачиваются пошагово на определённый угол под управлением контроллера. Это позволяет обойтись без датчика положения, так как угол, на который был сделан поворот, заведомо известен контроллеру; поэтому такие двигатели часто используются в приводах многих роботов и станках с ЧПУ.\nПьезодвигатели: Современной альтернативой двигателям постоянного тока являются пьезодвигатели, также известные как ультразвуковые двигатели. Принцип их работы весьма оригинален: крошечные пьезоэлектрические ножки, вибрирующие с частотой более 1000 раз в секунду, заставляют мотор двигаться по окружности или прямой. Преимуществами подобных двигателей являются высокое нанометрическое разрешение, скорость и мощность, несоизмеримая с их размерами. Пьезодвигатели уже доступны на коммерческой основе и также применяются на некоторых роботах.\nВоздушные мышцы: Воздушные мышцы — простое, но мощное устройство для обеспечения силы тяги. При накачивании сжатым воздухом мышцы способны сокращаться до 40 % от своей длины. Причиной такого поведения является плетение, видимое с внешней стороны, которое заставляет мышцы быть или длинными и тонкими, или короткими и толстыми[источник не указан 4473 дня]. Так как способ их работы схож с биологическими мышцами, их можно использовать для производства роботов с мышцами и скелетом, аналогичными мышцам и скелету животных[13][14].\nЭлектроактивные полимеры: Электроактивные полимеры — это вид пластмасс, который изменяет форму в ответ на электрическую стимуляцию. Они могут быть сконструированы таким образом, что могут гнуться, растягиваться или сокращаться. Впрочем, в настоящее время нет ЭАП, пригодных для производства коммерческих роботов, так как все ныне существующие их образцы неэффективны или непрочны.\nЭластичные нанотрубки: Это — многообещающая экспериментальная технология, находящаяся на ранней стадии разработки. Отсутствие дефектов в нанотрубках позволяет волокну эластично деформироваться на несколько процентов. Человеческий бицепс может быть заменён проводом из такого материала диаметром 8 мм. Подобные компактные «мышцы» могут помочь роботам в будущем обгонять и перепрыгивать человека.>>>",
            "Датчики[править | править код]<<< Датчики касания.\nДатчики освещённости.\nДатчик-гироскоп.\nДатчик расстояния.\nЭхолот и другие датчики, зависящие от предназначения робота.>>>",
            "Роботы, использующие две ноги, как правило, хорошо перемещаются по полу, а некоторые конструкции могут перемещаться по лестнице. Перемещение по пересечённой местности является сложной задачей для роботов такого типа. Существует ряд технологий, позволяющих перемещаться шагающим роботам:\n<<<Сервопривод + гидромеханический привод — ранняя технология конструирования шагающих роботов, реализованная в ряде моделей экспериментальных роботов изготовленных компанией General Electric в 1960-е гг. Первым воплощённым в металле по указанной технологии проектом GE и, по всей вероятности, первым в мире шагающим роботом военного назначения стал «четвероногий транспортёр» Walking Truck (машина имеет роботизированные конечности, управление осуществляется человеком, находящимся непосредственно в кабине).\nZMP-технология: ZMP[англ.] (англ. zero moment point, «точка нулевого момента») — алгоритм, использующийся в роботах, подобных ASIMO компании Хонда. Бортовой компьютер управляет роботом таким образом, чтобы сумма всех внешних сил, действующих на робота, была направлена в сторону поверхности, по которой перемещается робот. Благодаря этому не создаётся крутящего момента, который мог бы стать причиной падения робота[37]. Подобный способ движения не характерен для человека, в чём можно убедиться сравнив манеру перемещения робота ASIMO и человека[38][39][40].\nПрыгающие роботы: в 1980-х годах профессором Марком Рейбертом (англ. Marc Raibert) из Leg Laboratory Массачусетского технологического института был разработан робот, способный сохранять равновесие посредством прыжков, используя только одну ногу. Движения робота напоминают движения человека на тренажёре пого-стик[41]. Впоследствии алгоритм был расширен на механизмы, использующие две и четыре ноги. Подобные роботы продемонстрировали способности к бегу и способность выполнять сальто[42]. Роботы, перемещающиеся на четырёх конечностях, продемонстрировали бег, перемещение рысью, аллюром, скачками[43].\nАдаптивные алгоритмы поддержания равновесия. В основном базируются на расчёте отклонений мгновенного положения центра масс робота от статически устойчивого положения или некоей наперед заданной траектории его движения. В частности, подобную технологию использует шагающий робот-носильщик Big Dog. При движении этот робот поддерживает постоянным отклонение текущего положения центра масс от точки статической устойчивости, что влечёт необходимость своеобразной постановки ног («коленки внутрь» или «тяни-толкай»), а также создаёт проблемы с остановкой машины на одном месте и отработкой переходных режимов ходьбы. Адаптивный алгоритм поддержания устойчивости также может базироваться на сохранении постоянного направления вектора скорости центра масс системы, однако подобные методики оказываются эффективными только на достаточно высоких скоростях. Наибольший интерес для современной робототехники представляет разработка комбинированных методик поддержания устойчивости, сочетающих расчёт кинематических характеристик системы с высокоэффективными методами вероятностного и эвристического анализа.>>>",
            "Другие методы перемещения[править | править код]<<<Летающие роботы. Большинство современных самолётов являются летающими роботами, управляемыми пилотами. Автопилот способен контролировать полёт на всех стадиях — включая взлёт и посадку[44]. К летающим роботам относятся также беспилотные летательные аппараты (БПЛА; важный их подкласс составляют крылатые ракеты). Подобные аппараты имеют, как правило, небольшой вес (за счёт отсутствия пилота) и могут выполнять опасные миссии; некоторые БПЛА способны вести огонь по команде оператора. Разрабатываются также БПЛА, способные вести огонь автоматически. Кроме метода движения, используемого самолётами, летающими роботами используются и другие методы движения. Например, подобные тем, что используют пингвины, скаты, медузы (такой способ перемещения используют роботы Air Penguin[45][46], Air Ray[47] и Air Jelly[48] компании Festo), или используют методы полёта, присущие насекомым, как например, RoboBee[49].>>>",
            "Два змееподобных ползающих робота. Левый оснащён 64 приводами, правый — десятью<<<Ползающие роботы. Существует ряд разработок роботов, перемещающихся подобно змеям, червям, слизням[50]; при этом для реализации движения робот может использовать силы трения (при движении по шероховатой опорной поверхности)[51][52] или изменение кривизны поверхности (в случае гладкой поверхности переменной кривизны)[53]. Предполагается, что подобный способ перемещения может придать им возможность перемещаться в узких пространствах; в частности, предполагается использовать подобных роботов для поиска людей под обломками рухнувших зданий[54]. Разработаны также змееподобные роботы, способные перемещаться в воде; примером подобной конструкции может служить японский робот ACM-R5[55][56].\nРоботы, перемещающиеся по вертикальным поверхностям. При их проектировании используют различные подходы. Первый подход — проектирование роботов, которые перемещаются подобно человеку, взбирающемуся на стену, покрытую выступами. Примером подобной конструкции может служить разработанный в Стэнфордском университете робот Capuchin[57]. Другой подход — проектирование роботов, перемещающихся подобно гекконам и снабжённых вакуумными присосками[58]. Примерами подобных роботов являются Wallbot[59] и Stickybot[60].\nПлавающие роботы. Существует много разработок роботов, которые перемещаются в воде, подражая движениям рыб. По некоторым подсчётам, эффективность подобного движения может на 80 % превосходить эффективность движения с использованием гребного винта[61]. Кроме того, подобные конструкции производят меньше шума, а также отличаются повышенной манёвренностью. Это является причиной высокого интереса исследователей к роботам, движущимся подобно рыбам[62]. Примерами подобных роботов являются разработанный в Эссекском университете робот Robotic Fish[63] и робот Tuna, разработанный Institute of Field Robotics (англ.) для исследования и моделирования способа движения, характерного для тунца. Существуют также разработки плавающих роботов других конструкций[64]. Примерами являются роботы компании Festo: Aqua Ray, имитирующий движения ската, и Aqua Jelly, имитирующий движение медузы.>>>",
            "По типу управления робототехнические системы подразделяются на:\n<<<Биотехнические:\nкомандные (кнопочное и рычажное управление отдельными звеньями робота);\nкопирующие (повтор движения человека, возможна реализация обратной связи, передающей прилагаемое усилие, экзоскелеты);\nполуавтоматические (управление одним командным органом, например, рукояткой всей кинематической схемой робота);\nАвтоматические:\nпрограммные (функционируют по заранее заданной программе, в основном предназначены для решения однообразных задач в неизменных условиях окружения);\nадаптивные (решают типовые задачи, но адаптируются под условия функционирования);\nинтеллектуальные (наиболее развитые автоматические системы);\nИнтерактивные:\nавтоматизированные (возможно чередование автоматических и биотехнических режимов);\nсупервизорные (автоматические системы, в которых человек выполняет только целеуказательные функции);\nдиалоговые (робот участвует в диалоге с человеком по выбору стратегии поведения, при этом как правило робот оснащается экспертной системой, способной прогнозировать результаты манипуляций и дающей советы по выбору цели).>>>",
            "Среди основных задач управления роботами выделяют такие[66]:\n<<<планирование положений;\nпланирование движений;\nпланирование сил и моментов;\nанализ динамической точности;\nидентификация кинематических и динамических характеристик робота.>>>",
            "Популярные робототехнические комплексы для учебных лабораторий:\n<<<Mechatronics Control Kit\nFesto Didactic\nLEGO Mindstorms\nfischertechnik.\nобразовательные наборы на основе Arduino>>>",
            "Эксперты считают, что системы на основе ИИ позволяют:\n<<<Сократить сроки уборочных работ в среднем до 25%\nСократить прямые потери урожая до 13%\nСнизить расхода топлива во время уборки до 5%\nПовысить дневную выработку механизатора до 25%>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Робототехника"
    },
    {
        "task": [
            "Все методы сжатия данных делятся на два основных класса:\n<<<Сжатие без потерь\nСжатие с потерями>>>",
            "Коэффициент сжатия — основная характеристика алгоритма сжатия. Она определяется как отношение объёма исходных несжатых данных к объёму сжатых данных, то есть:\n\n\n\n\nk\n=\n\n\n\nS\n\no\n\n\n\nS\n\nc\n\n\n\n\n\n\n{\\displaystyle k={\\frac {S_{o}}{S_{c}}}}\n\n,\nгде k — коэффициент сжатия, So — объём исходных данных, а Sc — объём сжатых.\nТаким образом, чем выше коэффициент сжатия, тем алгоритм эффективнее. Следует отметить:\n<<<если k = 1, то алгоритм не производит сжатия, то есть выходное сообщение оказывается по объёму равным входному;\nесли k < 1, то алгоритм порождает сообщение большего размера, нежели несжатое, то есть, совершает «вредную» работу.>>>",
            "Коэффициент сжатия может быть как постоянным (некоторые алгоритмы сжатия звука, изображения и т. п., например А-закон, μ-закон, ADPCM, усечённое блочное кодирование), так и переменным. Во втором случае он может быть определён либо для каждого конкретного сообщения, либо оценён по некоторым критериям:\n<<<средний (обычно по некоторому тестовому набору данных);\nмаксимальный (случай наилучшего сжатия);\nминимальный (случай наихудшего сжатия);>>>",
            "Основным критерием различия между алгоритмами сжатия является описанное выше наличие или отсутствие потерь. В общем случае алгоритмы сжатия без потерь универсальны в том смысле, что их применение безусловно возможно для данных любого типа, в то время как возможность применения сжатия с потерями должна быть обоснована. Для некоторых типов данных искажения не допустимы в принципе. В их числе\n<<<символические данные, изменение которых неминуемо приводит к изменению их семантики: программы и их исходные тексты, двоичные массивы и т. п.;\nжизненно важные данные, изменения в которых могут привести к критическим ошибкам: например, получаемые с медицинской измерительной аппаратуры или контрольных приборов летательных, космических аппаратов и т. п.;\nмногократно подвергаемые сжатию и восстановлению промежуточные данные при многоэтапной обработке графических, звуковых и видеоданных.>>>",
            "Различные алгоритмы могут требовать различного количества ресурсов вычислительной системы, на которых они реализованы:\n<<<оперативной памяти (под промежуточные данные);\nпостоянной памяти (под код программы и константы);\nпроцессорного времени.>>>",
            "Имеется два основных подхода к сжатию данных неизвестного формата:\n<<<На каждом шаге алгоритма сжатия очередной сжимаемый символ либо помещается в выходной буфер сжимающего кодера как есть (со специальным флагом, помечающим, что он не был сжат), либо группа из нескольких сжимаемых символов заменяется ссылкой на совпадающую с ней группу из уже закодированных символов. Поскольку восстановление сжатых таким образом данных выполняется очень быстро, такой подход часто используется для создания самораспаковывающихся программ.\nДля каждой сжимаемой последовательности символов однократно либо в каждый момент времени собирается статистика её встречаемости в кодируемых данных. На основе этой статистики вычисляется вероятность значения очередного кодируемого символа (либо последовательности символов). После этого применяется та или иная разновидность энтропийного кодирования, например, арифметическое кодирование или кодирование Хаффмана, для представления часто встречающихся последовательностей короткими кодовыми словами, а редко встречающихся — более длинными.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Сжатие_данных"
    },
    {
        "task": [
            "Преимущества<<<Веб-службы обеспечивают взаимодействие программных систем независимо от платформы. Например, Windows-C#-клиент может обмениваться данными с Java-сервером, работающим под Linux.\nВеб-службы основаны на базе открытых стандартов и протоколов. Благодаря использованию XML достигается простота разработки и отладки веб-служб.\nИспользование интернет-протокола обеспечивает HTTP-взаимодействие программных систем через межсетевой экран. Это значительное преимущество, по сравнению с такими технологиями, как CORBA, DCOM или Java RMI. С другой стороны, веб-службы не привязаны намертво к HTTP — могут использоваться и другие протоколы.>>>",
            "Недостатки<<<Меньшая производительность и больший размер сетевого трафика по сравнению с технологиями RMI, CORBA, DCOM за счёт использования текстовых XML-сообщений. Однако на некоторых веб-серверах возможна настройка сжатия сетевого трафика.\nАспекты безопасности. Ответственные веб-службы должны использовать кодирование, возможно — требовать аутентификации пользователя. Достаточно ли здесь применения HTTPS, или предпочтительны такие решения, как XML Signature, XML Encryption или SAML — должно быть решено разработчиком.>>>",
            "Магазин приложений — интернет-магазин, позволяющий сторонним компаниям-разработчикам ПО предлагать владельцам мобильных (обычно) устройств устанавливать и приобретать различные приложения и игры, а производителям прочего контента — также книги, музыку и фильмы.[источник не указан 1074 дня]\n<<<Магазин приложений Windows (Microsoft Store)\nМагазин приложений Windows Phone (ранее Windows Phone Marketplace)\nМагазин приложений «Google Play»\nМагазин приложений Chrome\nМагазин приложений Apple (App Store)\nMac App Store\nOpera Mobile Store\nSamsung Galaxy Store\nМагазин приложений NashStore\nМагазин приложений «Huawei AppGallery»\nМагазин приложений Яндекс (Яндекс.Store)>>>",
            "Предоставляют услуги по стримингу (выдаче потокового мультимедиа).[источник не указан 1074 дня]\n<<<стриминг аудио (Spotify, Tidal, Roon, Qobuz , Muzlab и пр.);\nстриминг видео (Netflix, Megogo, Disney+ и пр.).>>>",
            "Как показано на рисунке, можно выделить три инстанции, взаимодействующие в рамках веб-службы. Переведём их названия как[источник не указан 1074 дня]\n<<<заказчик (service requester);\nисполнитель (service provider);\nкаталог (service broker).>>>",
            "Когда служба разработана, исполнитель регистрирует её в каталоге, где её могут найти потенциальные заказчики. Заказчик, найдя в каталоге подходящую службу, импортирует оттуда её WSDL-спецификацию и разрабатывает в соответствии с ней своё программное обеспечение. WSDL описывает формат запросов и ответов, которыми обмениваются заказчик и исполнитель в процессе работы. Для обеспечения взаимодействия используются следующие стандарты:[источник не указан 1074 дня]\n<<<XML: Расширяемый язык разметки, предназначенный для хранения и передачи структурированных данных;\nSOAP: Протокол обмена сообщениями на базе XML;\nWSDL: Язык определения внешних интерфейсов, который определяет взаимодействие (контракт) между потребителем и веб-службами SOAP. Написан на базе XML;\nUDDI: Универсальный интерфейс распознавания, описания и интеграции (Universal Discovery, Description and Integration). Каталог веб-служб и сведений о компаниях, предоставляющих веб-службы во всеобщее пользование или конкретным компаниям. Пока UDDI существуют, однако, только в небольших фирменных сетях и ещё не нашли широкого распространения в открытом интернете;\nJSON: Более эффективный язык разметки, ставший массовым в 2010х годах.>>>",
            "Веб-службы разворачиваются на серверах приложений. Некоторые серверы приложений:[источник не указан 1074 дня]\n<<<ColdFusion от Adobe\nDotGNU от GNU Project (разработка остановлена)\nGlassFish — от компании Oracle\nGoogle App Engine — платформа для масштабируемых приложений, использующих инфраструктуру компании Google\nIBM Lotus Notes линейка ПО для организации совместной работы от IBM\nJBoss — компании Red Hat\nMono — платформа разработки от Xamarin (ранее Novell)\n.NET Framework серверы от Microsoft\nWeb Application Server от SAP (является ключевой частью стека SAP NetWeaver)\nWebLogic от компании Oracle (продукт BEA Systems поглощённой Oracle)\nwebMethods Integration Platform от Software AG\nWebSphere Application Server от IBM (основан на Apache и платформе J2EE)\nZend Framework — от Zend Technologies\nZope является объектно-ориентированным сервером приложений написанным на Python[источник не указан 1074 дня]>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Веб-служба"
    },
    {
        "task": [
            "Хотя формула, задающая преобразование Фурье, имеет ясный смысл только для функций класса \n\n\n\n\nL\n\n1\n\n\n(\n\nR\n\n)\n\n\n{\\displaystyle L_{1}(\\mathbb {R} )}\n\n, преобразование Фурье может быть определено и для более широкого класса функций и даже обобщённых функций. Это возможно благодаря ряду свойств преобразования Фурье:\n<<<Преобразование Фурье является линейным оператором:>>>",
            "\n\n\n\n\n\n\n\n(\nα\nf\n+\nβ\ng\n)\n\n^\n\n\n\n=\nα\n\n\n\nf\n^\n\n\n\n+\nβ\n\n\n\ng\n^\n\n\n\n.\n\n\n{\\displaystyle {\\widehat {(\\alpha f+\\beta g)}}=\\alpha {\\hat {f}}+\\beta {\\hat {g}}.}\n\n<<<Справедливо равенство Парсеваля: если \n\n\n\nf\n∈\n\nL\n\n1\n\n\n(\n\nR\n\n)\n∩\n\nL\n\n2\n\n\n(\n\nR\n\n)\n\n\n{\\displaystyle f\\in L_{1}(\\mathbb {R} )\\cap L_{2}(\\mathbb {R} )}\n\n, то преобразование Фурье сохраняет \n\n\n\n\nL\n\n2\n\n\n\n\n{\\displaystyle L_{2}}\n\n-норму:>>>",
            "Это свойство позволяет по непрерывности распространить определение преобразования Фурье на всё пространство \n\n\n\n\nL\n\n2\n\n\n(\n\nR\n\n)\n\n\n{\\displaystyle L_{2}(\\mathbb {R} )}\n\n. Равенство Парсеваля будет при этом справедливо для всех \n\n\n\nf\n∈\n\nL\n\n2\n\n\n(\n\nR\n\n)\n\n\n{\\displaystyle f\\in L_{2}(\\mathbb {R} )}\n\n.\n<<<Формула обращения:>>>",
            "Эта формула объясняет физический смысл преобразования Фурье: правая часть — (бесконечная) сумма гармонических колебаний \n\n\n\n\ne\n\ni\nω\nx\n\n\n\n\n{\\displaystyle e^{i\\omega x}}\n\n с частотами \n\n\n\nω\n\n\n{\\displaystyle \\omega }\n\n, амплитудами \n\n\n\n\n\n1\n\n2\nπ\n\n\n\n\n|\n\n\n\n\nf\n^\n\n\n\n(\nω\n)\n\n|\n\n\n\n{\\displaystyle {\\frac {1}{\\sqrt {2\\pi }}}|{\\hat {f}}(\\omega )|}\n\n и фазовыми сдвигами \n\n\n\narg\n⁡\n\n\n\nf\n^\n\n\n\n(\nω\n)\n\n\n{\\displaystyle \\arg {\\hat {f}}(\\omega )}\n\n соответственно.\n\n<<<Теорема о свёртке: если \n\n\n\nf\n,\n\ng\n∈\n\nL\n\n1\n\n\n(\n\nR\n\n)\n\n\n{\\displaystyle f,\\;g\\in L_{1}(\\mathbb {R} )}\n\n, тогда>>>",
            "Эта формула может быть распространена и на случай обобщённых функций.\n<<<Преобразование Фурье и дифференцирование. Если \n\n\n\nf\n,\n\n\nf\n′\n\n∈\n\nL\n\n1\n\n\n(\n\nR\n\n)\n\n\n{\\displaystyle f,\\;f'\\in L_{1}(\\mathbb {R} )}\n\n, то>>>",
            "Формулы верны и в случае обобщённых функций.\n<<<Преобразование Фурье и сдвиг.>>>",
            "Эта и предыдущая формула являются частными случаями теоремы о свёртке, так как сдвиг по аргументу — это свёртка со сдвинутой дельта-функцией \n\n\n\nδ\n(\nx\n−\n\nx\n\n0\n\n\n)\n\n\n{\\displaystyle \\delta (x-x_{0})}\n\n, а дифференцирование — свёртка с производной дельта-функции.\n<<<Преобразование Фурье и растяжение.>>>",
            "\n\n\n\n\n\n\n\nf\n(\na\nx\n)\n\n^\n\n\n\n=\n\n|\n\na\n\n\n|\n\n\n−\n1\n\n\n\n\n\nf\n^\n\n\n\n(\nω\n\n/\n\na\n)\n.\n\n\n{\\displaystyle {\\widehat {f(ax)}}=|a|^{-1}{\\hat {f}}(\\omega /a).}\n\n<<<Формула суммирования Пуассона для принятого в данной статье определения:>>>",
            "\n\n\n\n\n∑\n\nk\n=\n−\n∞\n\n\n+\n∞\n\n\nf\n(\nk\n)\n=\n\n\n2\nπ\n\n\n\n∑\n\nn\n=\n−\n∞\n\n\n+\n∞\n\n\n\n\n\nf\n^\n\n\n\n(\n2\nπ\nn\n)\n\n\n{\\displaystyle \\sum _{k=-\\infty }^{+\\infty }f(k)={\\sqrt {2\\pi }}\\sum _{n=-\\infty }^{+\\infty }{\\hat {f}}(2\\pi n)}\n\n\n\n\n\n\n\n∑\n\nk\n=\n−\n∞\n\n\n+\n∞\n\n\n\n\n\nf\n^\n\n\n\n\n(\nk\n)\n\n=\n\n\n2\nπ\n\n\n\n∑\n\nn\n=\n−\n∞\n\n\n+\n∞\n\n\nf\n\n(\n\n2\nπ\nn\n\n)\n\n\n\n{\\displaystyle \\sum _{k=-\\infty }^{+\\infty }{\\hat {f}}\\left(k\\right)={\\sqrt {2\\pi }}\\sum _{n=-\\infty }^{+\\infty }f\\left(2\\pi n\\right)}\n\n\nДанные формулы могут быть получены из классической формулы суммирования Пуассона, которая задана для другой формы определения преобразования Фурье.<<<Преобразование Фурье обобщённых функций. Преобразование Фурье можно определить для широкого класса обобщённых функций. Определим вначале пространство гладких быстро убывающих функций (пространство Шварца):>>>",
            "Преобразование Фурье используется во многих областях науки — в физике, теории чисел, комбинаторике, обработке сигналов, теории вероятностей, статистике, криптографии, акустике, океанологии, оптике, геометрии и многих других. В обработке сигналов и связанных областях преобразование Фурье обычно рассматривается как декомпозиция сигнала на частоты и амплитуды, то есть обратимый переход от временно́го пространства в частотное пространство. Богатые возможности применения основываются на нескольких полезных свойствах преобразования:\n<<<Преобразования являются линейными операторами и, с соответствующей нормализацией, унитарными (свойство, известное как теорема Парсеваля, или, в более общем случае, как теорема Планшереля, или, в наиболее общем, как дуализм Понтрягина).\nПреобразования обратимы, причём обратное преобразование имеет практически такую же форму, как и прямое преобразование.\nСинусоидальные базисные функции (вернее, комплексные экспоненты) являются собственными функциями дифференцирования, что означает, что данное представление превращает линейные дифференциальные уравнения с постоянными коэффициентами в обычные алгебраические. (Например, в линейной стационарной системе частота — консервативная величина, поэтому поведение на каждой частоте может решаться независимо).\nПо теореме о свёртке, преобразование Фурье превращает сложную операцию свёртки в простое умножение, что означает, что они обеспечивают эффективный способ вычисления основанных на свёртке операций, таких как умножение многочленов и умножение больших чисел.\nДискретная версия преобразования Фурье может быть быстро рассчитана на компьютерах с использованием алгоритма быстрого преобразования Фурье (БПФ).>>>",
            "Замечание относительно области задания преобразования Фурье и его основные свойства остаются справедливыми и в многомерном случае, со следующими уточнениями:\n<<<Взятие частных производных под действием преобразования Фурье превращается в умножение на одноимённую координату:>>>",
            "\n\n\n\n\n\n\n\n\n∂\nf\n\n\n∂\n\nx\n\nk\n\n\n\n\n^\n\n\n\n=\ni\n\nω\n\nk\n\n\n\n\n\nf\n^\n\n\n\n(\nω\n)\n.\n\n\n{\\displaystyle {\\widehat {\\frac {\\partial f}{\\partial x_{k}}}}=i\\omega _{k}{\\hat {f}}(\\omega ).}\n\n<<<Изменяется константа в теореме о свёртке:>>>",
            "\n\n\n\n\n\n\n\n(\nf\n∗\ng\n)\n\n^\n\n\n\n=\n(\n2\nπ\n\n)\n\nn\n\n/\n\n2\n\n\n\n\n\nf\n^\n\n\n\n\n\n\ng\n^\n\n\n\n.\n\n\n{\\displaystyle {\\widehat {(f\\ast g)}}=(2\\pi )^{n/2}{\\hat {f}}{\\hat {g}}.}\n\n<<<Преобразование Фурье и сжатие координат:>>>",
            "\n\n\n\n\n\n\n\n(\n\nf\n\n(\n\n\nx\n\n\n|\n\na\n\n|\n\n\n\n\n)\n\n\n)\n\n^\n\n\n\n=\n\n|\n\na\n\n\n|\n\n\nn\n\n\n\n\n\nf\n^\n\n\n\n(\nω\n\n|\n\na\n\n|\n\n)\n.\n\n\n{\\displaystyle {\\widehat {\\left(f\\left({\\frac {x}{|a|}}\\right)\\right)}}=|a|^{n}{\\hat {f}}(\\omega |a|).}\n\n<<<Более общо, если \n\n\n\nA\n:\n\n\nR\n\n\nn\n\n\n→\n\n\nR\n\n\nn\n\n\n\n\n{\\displaystyle A\\colon \\mathbb {R} ^{n}\\to \\mathbb {R} ^{n}}\n\n — обратимое линейное отображение, то>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Преобразование_Фурье"
    },
    {
        "task": [
            "Другие способы указания формата<<<В некоторых операционных системах и файловых системах (например, HFS) информация о формате файла хранится в самой файловой системе.\nМагические числа — последовательности байтов внутри самих файлов.\nShebang — в Unix‐подобных ОС ставится в начале исходного файла для указания интерпретатора, который должен вызываться при запуске этого файла. Состоит из символа комментария (#) и восклицательного знака (!), после которого указывается команда, которую требуется выполнить с данным файлом в качестве аргумента.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Расширение_имени_файла"
    },
    {
        "task": [
            "Памятники<<<Памятник клавиатуре установлен в 2005 году в Екатеринбурге[5].\nПамятник «Компьютерной клавиатуре» установлен в 2011 году в городе Костанай (Казахстан)[6].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Клавиатура"
    },
    {
        "task": [
            "При распространении программного обеспечения необходимо поместить следующие файлы в корневой каталог:\n<<<LICENSE — файл, содержащий копию текста лицензии Apache;\nNOTICE — текстовый файл, перечисляющий все библиотеки, лицензированные под лицензией Apache вместе с именами их создателей.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Лицензия_Apache"
    },
    {
        "task": [
            "Универсальные серверы — особый вид серверной программы, не предоставляющий никаких услуг самостоятельно. Вместо этого универсальные серверы предоставляют серверам услуг упрощённый интерфейс к ресурсам межпроцессного взаимодействия и/или унифицированный доступ клиентов к различным услугам. Существуют несколько видов таких серверов:\n<<<inetd (от англ. internet super-server daemon — демон сервисов IP) — стандартное средство UNIX-систем — программа, позволяющая писать серверы TCP/IP (и сетевых протоколов других семейств), работающие с клиентом через перенаправленные inetd потоки стандартного ввода и вывода (stdin и stdout).\nRPC (от англ. Remote Procedure Call — удалённый вызов процедур) — система интеграции серверов в виде процедур, доступных для вызова удалённым пользователем через унифицированный интерфейс. Интерфейс, изобретённый Sun Microsystems для своей операционной системы (SunOS, Solaris; Unix-система), в настоящее время используется как в большинстве Unix-систем, так и в Windows.\nПрикладные клиент-серверные технологии Windows:\n(D-)COM (англ. (Distributed) Component Object Model — модель составных объектов) и др. — Позволяет одним программам выполнять операции над объектами данных, используя процедуры других программ. Изначально данная технология предназначена для их «внедрения и связывания объектов» (OLE англ. Object Linking and Embedding), но в общем позволяет писать широкий спектр различных прикладных серверов. COM работает только в пределах одного компьютера, DCOM доступна удалённо через RPC.\nActive-X — Расширение COM и DCOM для создания мультимедийных приложений.>>>",
            "Для TCP/IP маршрутизация является базовой функцией стека IP (кода поддержки TCP/IP). Маршрутизацию своих пакетов к месту назначения выполняет любая система в сети, маршрутизацию же чужих пакетов (форвардинг) выполняют только маршрутизаторы (также известные как роутеры или шлюзы). Задачи маршрутизатора при форвардинге пакета:\n<<<принять пакет\nнайти машину, на которую следует этот пакет, или следующий маршрутизатор по маршруту к ней (в таблице маршрутов)\nпередать пакет или вернуть ICMP-сообщение о невозможности его доставки по причинам:\nназначение недостижимо (англ. Destination unreachable) — у пакета кончилось «время жизни» прежде чем он достиг места назначения\nхост недостижим (Host unreachable) — компьютер или следующий маршрутизатор выключен или не существует\nсеть недостижима (Network unreachable) — маршрутизатор не имеет маршрута в сеть назначения\nесли пакет не может быть доставлен по причине перегрузки маршрутизатора (или сети) — отбросить пакет без уведомлений>>>",
            "Недостатки файл-серверной системы:\n<<<Очень большая нагрузка на сеть, повышенные требования к пропускной способности. На практике это делает практически невозможной одновременную работу большого числа пользователей с большими объёмами данных.\nОбработка данных осуществляется на компьютере пользователя. Это влечёт повышенные требования к аппаратному обеспечению каждого пользователя. Чем больше пользователей, тем больше денег придётся потратить на оснащение их компьютеров.\nБлокировка данных при редактировании одним пользователем делает невозможной работу с этими данными других пользователей.\nБезопасность. Для обеспечения возможности работы с такой системой Вам будет необходимо дать каждому пользователю полный доступ к целому файлу, в котором его может интересовать только одно поле.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Сервер_(программное_обеспечение)"
    },
    {
        "task": [
            "Символ в Лиспе — это объект в машинной памяти, представляющий собой совокупность «слотов» — ячеек, хранящих ссылки. Часть слотов имеет изначально определённое языком назначение:\n<<<Имя — строка знаков, по которой программа может ссылаться на данный символ (основополагающее аристотелево А=А, из которого вырастает лямбда-исчисление).\nФункциональный слот — лямбда-выражение, связанное с символом. Когда обращение к символу в программе синтаксически соответствует вызову функции, в результате вычисляется лямбда-выражение, связанное с символом.\nЗначение — объект в машинной памяти, который можно трактовать как данные. Когда программа обращается к символу как переменной, она получает значение данного слота.\nПрочие системные слоты, определяемые реализацией.>>>",
            "Характерная особенность программы на Лиспе состоит в том, что абсолютно всё: и данные, и код любой сложности — описывается в этом примитивном синтаксисе. Результатов такого подхода два:\n<<<Внешне программа на Лиспе выглядит как гигантское нагромождение скобок. Имеющиеся в любой современной системе средства форматированного вывода, позволяющие отобразить список так, чтобы была видна его структура, несколько исправляют ситуацию, но в целом для восприятия программ на лиспе «на глаз» требуется определённый навык. Впрочем, редактирование программ значительно упрощается использованием текстового редактора, поддерживающего автоматическое выравнивание кода, подсветку соответствующих пар скобок и такие специальные команды, как «закрыть все открытые скобки», «перейти через список вправо» и так далее[4].\nПервичный синтаксический разбор программы и обрабатываемых ею данных может выполняться одним и тем же простейшим кодом, данные могут без каких-либо трудностей обрабатываться в качестве программы, а программа — в качестве данных. Вследствие этого Лисп позволяет легко создавать мощные программы, динамически порождающие код. Лисп-машина способна воспринимать каждый поступающий на неё список на самом абстрактном уровне, например как мета-лисп-машину, модифицирующую воспринимающую машину. В такой динамичной, высокоабстрактной среде можно реализовать как строго научные системы, так и неисчислимое множество программистских трюков и генераторов всевозможных машин.>>>",
            "Исходно в синтаксис Лиспа заложена возможность описания алгоритмов путём перечисления последовательности требуемых действий. Она заключается в так называемом «неявном PROGN», поддерживаемом в структуре лямбда-вызовов Лиспа: в том месте, где должна размещаться команда, составляющая основу лямбда-выражения, может быть записано не одна, а несколько команд, и результатом лямбда-вызова станет результат последней из них. Таким образом, Лисп поддерживает неявное последовательное исполнение операций. Помимо неявного PROGN, поддерживаются явные императивные механизмы императивного программирования:\n<<<Конструкции PROG1 и PROGN — обеспечивают выполнение команд последовательно.\nLET — позволяет задать локальные переменные блока и выполнить с ними последовательные операции.\nВсе виды циклов.\nКонструкции присваивания SET, SETF, SETQ, выполняющие присваивания.\nРяд системных структуроразрушающих функций (выполняющих операции с данными «на том же месте»).>>>",
            "Серьёзный пересмотр вышедшего в 1984 году стандарта, состоялся в 1990 году:\n<<<Объектная система CLOS, исходно не входившая в спецификацию Common Lisp, а считавшаяся неким «дополнением» к ней, стала частью официального стандарта\nБыл стандартизован макрос loop, реализующий встроенный императивный язык с инфиксным синтаксисом.\nВнесены изменения в типы данных.\nСтандартизован механизм pretty-print — форматированного вывода кода и данных.\nВведены макросы компиляции.\nДобавлены новые операторы и внесены изменения в существующие.\nОбновлена система поддержки пакетов.\nСделан ряд более мелких изменений.>>>",
            "Одно из направлений применения Лиспа — его использование в качестве скриптового языка, автоматизирующего работу в ряде прикладных программ, в том числе:\n<<<AutoLISP — скриптовый язык САПР AutoCAD;\nEmacs Lisp — встроенный язык текстового редактора Emacs, использованный как в реализации самого редактора, так и в разработке дополнений к нему, что даёт неограниченные возможности расширения функциональности;\nInterleaf Lisp — скриптовый язык в издательском программном обеспечении Interleaf/Quicksilver;\nNyquist — скриптовый язык в аудиоредакторе Audacity.\nRep (близок к Emacs Lisp) — язык настроек и расширений в оконном менеджере Sawfish;\nSKILL — скриптовый язык САПР Virtuoso Platform компании Cadence Design Systems;\nTinyScheme — один из скриптовых языков в свободном графическом процессоре Gimp версии 2.4 или более. В предыдущих версиях использовался ещё один диалект Лиспа — SIOD.\nICAD — система «знаний на основе знаний» которая позволяет пользователям кодировать знания дизайна и опыт инженерного проектирования.>>>",
            "В случае Лиспа сложно провести чёткую грань между диалектом и языком-потомком, так как различные диалекты Лиспа, созданные за более чем полвека его существования, могут существенно различаться и быть несовместимыми. С другой стороны, Лисп просто в силу возраста оказал то или иное влияние на огромное число языков, причём не только функциональных. Если считать прямыми потомками Лиспа только языки, сохранившие общую структуру программы, но синтаксически несовместимые с Лиспом, то можно выделить:\n<<<Scheme — разработанный в 1976 вариант Лиспа, по сей день используемый в обучении программированию и в исследовательских целях, а также применяемый в качестве встраиваемого языка.\nRacket — потомок Scheme, разрабатываемый с 1994 года и находящийся в использовании по сей день. Мощная расширяемая лисп-система, включающая в себя все современные средства поддержки программирования и большой массив библиотек.\nClojure — созданный в 2007 году на основе Лиспа язык функционального программирования, интегрированный с платформой Java (программы транслируются в байт-код и работают под управлением JVM). Унаследовав основные черты Лиспа, язык имеет целый ряд синтаксических отличий и нововведений. Интеграция с Java-платформой даёт возможность непосредственно применять весь массив накопленных библиотек для данной платформы. Также Clojure имеет встроенную поддержку параллельного программирования, причём является одним из немногих языков, поддерживающих механизм транзакционной памяти.\nЛого — язык и интерактивная среда, разработанные в 1967 году Сеймуром Пейпертом и Идит Харель для обучения детей дошкольного и младшего школьного возраста основным концепциям программирования. Язык имеет лисп-подобный списочный синтаксис, в котором устранена необходимость использования большинства скобок. Поддерживается также и императивная форма программы, напоминающая Бейсик. Повторение, кроме рекурсии, может быть реализовано с помощью конструкции цикла с фиксированным числом итераций. Характерная особенность среды интерпретатора Лого — поддержка визуального агента («черепашки»), изображаемой в виде пиктограммы на графическом поле (в окне). Черепашка может двигаться и поворачиваться, она имеет «перо», которое может быть поднято или опущено. При движении с опущенным пером черепашка оставляет след (линию на экране). Управляя черепашкой сначала с помощью отдельных команд («вперёд», «повернуть», «поднять перо», «опустить перо», «выбрать цвет» и т. д.), а затем — наборов команд и целых программ, содержащих сложные конструкции, обучаемый получает возможность осваивать программирование в игровой форме, непосредственно наблюдая результаты своих усилий в виде изображений на экране. Существуют реализации с поддержкой ООП и параллельного исполнения.>>>",
            "Лисп в фольклоре программистов<<<Существует альтернативная расшифровка названия LISP: Lots of Irritating Superfluous Parentheses[13] («Много раздражающих лишних скобок») — намёк на особенности синтаксиса языка.\nШутливое «Десятое правило Гринспена» гласит: «Любая достаточно сложная программа на Си или Фортране содержит заново написанную, неспецифицированную, глючную и медленную реализацию половины языка Common Lisp». Правило, несмотря на свою юмористичность, фиксирует достаточно широко распространённое среди сторонников функциональных языков программирования мнение о том, что при программировании на традиционных императивных языках разработчики тратят очень много времени на реализацию, причём в неполном объёме и с худшим качеством, тех возможностей, которые функциональным языкам, в частности, Лиспу, присущи изначально.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Лисп"
    },
    {
        "task": [
            "Типичная SoC содержит:\n<<<один или несколько микроконтроллеров, микропроцессоров или ядер цифровой обработки сигналов (DSP). SoC, содержащую несколько процессоров, называют многопроцессорной системой на кристалле (MPSoC);\nбанк памяти, состоящий из модулей ПЗУ, ОЗУ, ППЗУ или флеш;\nисточники опорной частоты, например, кварцевые резонаторы и схемы ФАПЧ (фазовой автоподстройки частоты);\nтаймеры, счётчики, цепи задержки после включения;\nблоки, реализующие стандартные интерфейсы для подключения внешних устройств: USB, FireWire, Ethernet, USART, SPI;\nблоки цифро-аналоговых и аналого-цифровых преобразователей;\nрегуляторы напряжения и стабилизаторы питания.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Система_на_кристалле"
    },
    {
        "task": [
            "Основные сферы применения<<<Инженерная деятельность:\nСистемы автоматизированного проектирования (САПР);\nМашиностроительные САПР механических устройств;\nАвтоматизация проектирования электроники — САПР электроники, печатных плат и микросхем;\nАвтоматизированное архитектурное проектирование[англ.] для архитектуры и строительства;\nИздательские системы[2];\nРабота с графикой: рендеринг, 3D-моделирование, мультипликация;\nПрофессиональная обработка видеоматериалов;\nОбеспечение работы звукозаписывающих студий;\nНаучно-техническая деятельность[3];\nМашинное обучение сложных моделей искусственного интеллекта[4].>>>",
            "Существуют достаточно устойчивые признаки конфигураций рабочих станций, предназначенных для решения определённого круга задач, что позволяет подразделить их на отдельные профессиональные подклассы:\n<<<Мультимедиа и, в частности, компьютерная графика и обработка изображений, видео, звука, разработка компьютерных игр.\nРазличные инженерные, архитектурные (в том числе градостроительные) и иные САПР, ГИС, полевая работа и геодезия и так далее.\nНаучные и инженерно-технические вычисления.\nПрофессиональный биржевой интернет-трейдинг.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Рабочая_станция"
    },
    {
        "task": [
            "Одним из первых коммерческих фреймворков приложения был MacApp[англ.], написанный Apple для «Macintosh». Первоначально созданный с помощью расширенной (объектно-ориентированной) версии языка «Object Pascal», впоследствии он был переписан на «C++». Другие популярные каркасы для «Macintosh» включали:\n<<<Metrowerks PowerPlant[англ.] и MacZoop[англ.] (все основаны на Carbon);\nWebObjects[англ.] от NeXT.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Фреймворк"
    },
    {
        "task": [
            "Примеры некоторых отечественных авиационных автопилотов<<<АП-5 — стоял на Ил-28, ранних Ту-16 и Ту-104\nАП-6Е — наиболее массовая версия автопилота АП-6, применялась и применяется на Ту-16, Ту-104, Ту-124, Ил-18, Ил-38, Бе-12 и др.\nАП-6ЕМ-3П — автопилот в составе бортовой системы управления БСУ-3П самолёта Ту-134 (не оборудованных системой АБСУ-134). С базовым АП-6 имеет мало общего.\nАП-7 — Ту-22, Ту-128\nАП-15 — Ту-95, Ту-114, Ту-142. В отличие от многих систем САУ, работает на переменном токе, на амплитуде и сдвиге фаз.\nАП-28 — автопилот изготавливался в нескольких модификациях, а также в варианте с электрическими или гидравлическими рулевыми машинами. Применяется на ряде типов самолётов: Як-28, Ан-10, Ан-12, Ан-24, Ан-26, Ан-30 и др.\nАП-34 — вертолётный автопилот, стоит на Ми-6, Ми-8, Ми-10, Ми-14\nАП-45 — модификация пневматического автопилота АП-42. Устанавливался на самолёте Ли-2.\nВУАП-1 — вертолётный автопилот, работает в составе САУ или пилотажного комплекса. Установлен на Ми-24, Ми-26, Ка-27, Ка-29, Ка-32.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Автопилот"
    },
    {
        "task": [
            "На стороне клиента используется:\n<<<Для реализации GUI\nHTML, XHTML\nCSS\nДля формирования запросов, создания интерактивного и независимого от браузера интерфейса:\nActiveX\nAdobe Flash, Adobe Flex\nJava\nJavaScript\nSilverlight>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Веб-приложение"
    },
    {
        "task": [
            "Доступные операции с данными[править | править код]<<<Память только для чтения (read-only memory, ROM)\nПамять для чтения/записи.>>>",
            "Метод доступа[править | править код]<<<Последовательный доступ (англ. sequential access memory, SAM) — ячейки памяти выбираются (считываются) последовательно, одна за другой, в очерёдности их расположения. Вариант такой памяти — стековая память.\nПроизвольный доступ (англ. random access memory, RAM) — вычислительное устройство может обратиться к произвольной ячейке памяти по любому адресу.>>>",
            "Повторяет классификацию структур данных:\n<<<Адресуемая память — адресация осуществляется по местоположению данных.\nАссоциативная память (англ. associative memory, content-addressable memory, CAM) — адресация осуществляется по содержанию данных, а не по их местоположению (память проверяет наличие ячейки с заданным содержимым, и если таковая(ые) присутствует(ют) возвращает её(их) адрес(а) или другие данные с ней(ними) ассоциированные).\nМагазинная (стековая) память (англ. pushdown storage) — реализация стека.\nМатричная память (англ. matrix storage) — ячейки памяти расположены так, что доступ к ним осуществляется по двум или более координатам.\nОбъектная память (англ. object storage) — память, система управления которой ориентирована на хранение объектов. При этом каждый объект характеризуется типом и размером записи.\nСемантическая память (англ. semantic storage) — данные размещаются и списываются в соответствии с некоторой структурой понятийных признаков.>>>",
            "Назначение[править | править код]<<<Буферная память (англ. buffer storage) — память, предназначенная для временного хранения данных при обмене ими между различными устройствами или программами.\nВременная (промежуточная) память (англ. temporary (intermediate) storage) — память для хранения промежуточных результатов обработки.\nКеш-память (англ. cache memory) — часть архитектуры устройства или программного обеспечения, осуществляющая хранение часто используемых данных для предоставления их в более быстрый доступ, нежели кэшируемая память.\nКорректирующая память (англ. patch memory) — часть памяти ЭВМ, предназначенная для хранения адресов неисправных ячеек основной памяти. Также используются термины relocation table и remap table.\nУправляющая память (англ. control storage) — память, содержащая управляющие программы или микропрограммы. Обычно реализуется в виде ПЗУ.\nРазделяемая память или память коллективного доступа (англ. shared memory, shared access memory) — память, доступная одновременно нескольким пользователям, процессам или процессорам.>>>",
            "Организация адресного пространства[править | править код]<<<Реальная или физическая память (англ. real (physical) memory) — память, способ адресации которой соответствует физическому расположению её данных;\nВиртуальная память (англ. virtual memory) — память, способ адресации которой не отражает физического расположения её данных;\nОверлейная память (англ. overlayable storage) — память, в которой присутствует несколько областей с одинаковыми адресами, из которых в каждый момент доступна только одна.>>>",
            "Удалённость и доступность для процессора[править | править код]<<<Первичная память (сверхоперативная, СОЗУ) — доступна процессору без какого-либо обращения к внешним устройствам.\nрегистры процессора (процессорная или регистровая память) — регистры, расположенные непосредственно в АЛУ;\nкэш процессора — кэш, используемый процессором для уменьшения среднего времени доступа к компьютерной памяти. Разделяется на несколько уровней, различающихся скоростью и объёмом (например, L1, L2, L3).\nВторичная память — доступна процессору путём прямой адресации через шину адреса (адресуемая память). Таким образом доступна оперативная память (память, предназначенная для хранения текущих данных и выполняемых программ) и порты ввода-вывода (специальные адреса, через обращение к которым реализовано взаимодействие с прочей аппаратурой).\nТретичная память — доступна только путём нетривиальной последовательности действий. Сюда входят все виды внешней памяти — доступной через устройства ввода-вывода. Взаимодействие с третичной памятью ведётся по определённым правилам (протоколам) и требует присутствия в памяти соответствующих программ. Программы, обеспечивающие минимально необходимое взаимодействие, помещаются в ПЗУ, входящее во вторичную память (у PC-совместимых ПК — это ПЗУ BIOS).>>>",
            "Доступность техническими средствами[править | править код]<<<Автономная память, Архив (англ. off-line storage) — память, доступ к которой требует внешних действий — например, вставку оператором архивного носителя с указанным программой идентифиткатором\nПолуавтономная память англ. nearline storage — то же, что автономная, но физическое перемещение носителей осуществляется роботом по команде системы, то есть не требует присутствия оператора>>>",
            "Прочие термины<<<Многоблочная память (англ. multibank memory) — вид оперативной памяти, организованной из нескольких независимых блоков, допускающих одновременное обращение к ним, что повышает её пропускную способность. Часто употребляется термин «интерлив» (транскрипция англ. interleave — перемежать) и может встречаться в документации некоторых фирм «многоканальная память» (англ. multichanel).\nПамять со встроенной логикой (англ. logic-in-memory) — вид памяти, содержащий встроенные средства логической обработки (преобразования) данных, например их масштабирования, преобразования кодов, наложения полей и др.\nМноговходовая память (англ. multiport storage memory) — устройство памяти, допускающее независимое обращение с нескольких направлений (входов), причём обслуживание запросов производится в порядке их приоритета.\nМногоуровневая память (англ. multilevel memory) — организация памяти, состоящая из нескольких уровней запоминающих устройств с различными характеристиками и рассматриваемая со стороны пользователей как единое целое. Для многоуровневой памяти характерна страничная организация, обеспечивающая «прозрачность» обмена данными между ЗУ разных уровней.\nПамять параллельного действия (англ. parallel storage) — вид памяти, в которой все области поиска могут быть доступны одновременно.\nСтраничная память (англ. page memory) — память, разбитая на одинаковые области — страницы. Операции записи-чтения на них осуществляются путём переключения страниц контроллером памяти.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Компьютерная_память"
    },
    {
        "task": [
            "Неполный список периферийных устройств, которые могут использоваться в микроконтроллерах, включает в себя:\n<<<универсальные цифровые порты, которые можно настраивать как на ввод, так и на вывод;\nразличные интерфейсы ввода-вывода, такие, как UART, I²C, SPI, CAN, USB, IEEE 1394, Ethernet;\nаналого-цифровые и цифро-аналоговые преобразователи;\nкомпараторы;\nширотно-импульсные модуляторы (ШИМ-контроллер);\nтаймеры;\nконтроллеры бесколлекторных двигателей, в том числе шаговых;\nконтроллеры дисплеев и клавиатур;\nрадиочастотные приемники и передатчики;\nмассивы встроенной флеш-памяти;\nвстроенные тактовый генератор и сторожевой таймер;>>>",
            "Известные семейства[править | править код]<<<MCS 51 (Intel)>>>",
            "MCS 51 (Intel)<<<ESP8266 и ESP32 (Espressif)>>>",
            "ESP8266 и ESP32 (Espressif)<<<MSP430 (TI)>>>",
            "MSP430 (TI)<<<ARM (ARM Limited)\nST Microelectronics STM32 ARM-based MCUs\nARM Cortex, ARM7 и ARM9-based MCUs\nTexas Instruments Stellaris MCUs\nNXP ARM-based LPC MCUs\nToshiba ARM-based MCUs\nAnalog Devices ARM7-based MCUs\nCirrus Logic ARM7-based MCUs\nFreescale Semiconductor ARM9-based MCUs\nSilicon Labs EFM32 ARM-based MCUs\nAVR (Atmel)\nATmega\nATtiny\nXMega\nPIC (Microchip)\nSTM8 (STMicroelectronics)\nС8051F34x\nRL78 (Renesas Electronics)>>>",
            "Используются в управлении различными устройствами и их отдельными блоками:\n<<<в вычислительной технике: материнские платы, контроллеры дисководов жестких и гибких дисков, CD и DVD, калькуляторах;\nэлектронике и разнообразных устройствах бытовой техники, в которой используется электронные системы управления — стиральных машинах, микроволновых печах, посудомоечных машинах, телефонах и современных приборах, различных роботах, системах «умный дом», и др..>>>",
            "В промышленности:\n<<<устройства промышленной автоматики — от программируемого реле и встраиваемых систем до ПЛК,\nсистем управления станками>>>",
            "Известные компиляторы Си для МК:\n<<<GNU Compiler Collection — поддерживает ARM, AVR, MSP430 и многие другие архитектуры\nSmall Device C Compiler — поддерживает множество архитектур\nCodeVisionAVR (для AVR)\nIAR [1] (для любых МК)\nWinAVR (для AVR и AVR32)\nKeil (для архитектуры 8051 и ARM)\nHiTECH (для архитектуры 8051 и PIC от Microchip)>>>",
            "Известные компиляторы бейсика для МК:\n<<<MikroBasic (архитектуры PIC, AVR, 8051 и ARM)\nBascom (архитектуры AVR и 8051)\nFastAVR (для архитектуры AVR)\nPICBasic (для архитектуры PIC)\nSwordfish (для архитектуры PIC)>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Микроконтроллер"
    },
    {
        "task": [
            "Важными характеристиками изображения являются:\n<<<Размер изображения в пикселях — может выражаться в виде количества пикселей по ширине и по высоте (800 × 600, 1024 × 768, 1600 × 1200 пикселей и т. д.) или же в виде общего количества пикселей. Так, изображение размером 1600 × 1200 пикселей состоит из 1 920 000 точек, а это примерно 2 мегапикселя.\nКоличество используемых цветов или глубина цвета (эти характеристики имеют следующую зависимость: \n\n\n\nN\n=\n\n2\n\nk\n\n\n\n\n{\\displaystyle N=2^{k}}\n\n, где \n\n\n\nN\n\n\n{\\displaystyle N}\n\n — количество цветов, \n\n\n\nk\n\n\n{\\displaystyle k}\n\n — глубина цвета);\nЦветовое пространство (цветовая модель) — RGB, CMYK, XYZ, YCbCr и др.;\nРазрешение изображения — величина, определяющая количество точек (элементов растрового изображения) на единицу площади (или единицу длины). Не следует путать с размером сетки изображения.>>>",
            "Преимущества<<<Растровая графика позволяет создать практически любой рисунок, вне зависимости от сложности, в отличие от векторной графики.\nРаспространённость — растровая графика используется сейчас практически везде: от маленьких значков до плакатов.\nВысокая скорость обработки сложных изображений, если не запрашивается масштабирование.\nРастровое представление изображения естественно для большинства устройств ввода-вывода графической информации, таких как мониторы (за исключением векторных устройств вывода), матричные и струйные принтеры, цифровые фотоаппараты, сканеры, а также сотовые телефоны.>>>",
            "Недостатки<<<Большой размер данных у простых изображений из большого количества точек.\nНевозможность масштабирования с сохранением оригинального уровня деталей.\nНевозможность вывода на печать на векторный графопостроитель без дополнительных манипуляций изображения.>>>",
            "Использует алгоритмы сжатия, основанные на уменьшении избыточности информации.\n<<<BMP или Windows Bitmap — обычно используется без сжатия, хотя возможно использование алгоритма RLE.\nGIF (Graphics Interchange Format) — устаревающий формат, поддерживающий не более 256 цветов одновременно. Всё ещё популярен из-за поддержки анимации, которая отсутствует в чистом PNG, хотя ПО начинает поддерживать APNG.\nPCX — устаревший формат.\nPNG (Portable Network Graphics) — растровый формат, в основе которого алгоритм сжатия Deflate.\nJPEG-LS в режиме сжатия без потерь — алгоритм использует адаптивное предсказание значения текущего пиксела по окружению, включающему уже закодированные пикселы.\nLossless JPEG — быстрый, но малоэффективный алгоритм сжатия, использующий (при обходе изображения попиксельно слева направо, сверху вниз) простое неадаптивное предсказание значения текущего пиксела по значениям верхнего, левого и верхнего левого пикселов.>>>",
            "Основано на отбрасывании части информации, как правило, наименее воспринимаемой глазом.\n<<<JPEG — очень широко используемый формат изображений. Сжатие использует разбиение изображения на блоки, квантование пространственных спектральных компонент в каждом блоке изображения с последующим их кодированием с помощью энтропии. При детальном рассмотрении сильно сжатого изображения заметно размытие резких границ и характерный муар вблизи них. При невысоких степенях сжатия восстановленное изображение визуально неотличимо от исходного.>>>",
            "Разное[править | править код]<<<TIFF поддерживает большой диапазон изменения глубины цвета, разные цветовые пространства, разные настройки сжатия (как с потерями, так и без) и др.\nВ формате Raw хранится информация, непосредственно полученная с матрицы цифрового фотоаппарата или аналогичного устройства, без применения к ней каких-либо преобразований, а также настройки фотокамеры. Позволяет избежать потери информации при применении к изображению различных преобразований (потеря информации происходит в результате округления и выхода цвета пиксела за пределы допустимых значений). Используется при съёмке в сложных условиях (недостаточная освещённость, невозможность выставить баланс белого и т. п.) для последующей обработки на компьютере (обычно в ручном режиме). Практически все полупрофессиональные и профессиональные цифровые фотоаппараты позволяют сохранять Raw изображения. Формат файла варьируется от модели до производителя, единого стандарта для всех Raw изображений не существует.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Растровая_графика"
    },
    {
        "task": [
            "К достоинствам многопоточной реализации той или иной системы перед многозадачной можно отнести следующее:\n<<<Упрощение программы в некоторых случаях за счёт использования общего адресного пространства.\nМеньшие относительно процесса временны́е затраты на создание потока.>>>",
            "К достоинствам многопоточной реализации той или иной системы перед однопоточной можно отнести следующее:\n<<<Упрощение программы в некоторых случаях, за счёт вынесения механизмов чередования выполнения различных слабо взаимосвязанных подзадач, требующих одновременного выполнения, в отдельную подсистему многопоточности.\nПовышение производительности процесса за счёт распараллеливания процессорных вычислений и операций ввода-вывода.>>>",
            "Различают две формы многопоточности, которые могут быть реализованы в процессорах аппаратно:\n<<<Временная многопоточность (англ. Temporal multithreading)\nОдновременная многопоточность (англ. Simultaneous multithreading)>>>",
            "Основная статья: Поток выполнения<<<Поток в пространстве пользователя. Каждый процесс имеет таблицу потоков, аналогичную таблице процессов ядра. К недостаткам можно отнести:>>>",
            "Поток в пространстве пользователя. Каждый процесс имеет таблицу потоков, аналогичную таблице процессов ядра. К недостаткам можно отнести:<<<Отсутствие прерывания по таймеру внутри одного процесса\nПри использовании блокирующего системного запроса для процесса все его потоки блокируются.\nСложность реализации>>>",
            "Отсутствие прерывания по таймеру внутри одного процесса\nПри использовании блокирующего системного запроса для процесса все его потоки блокируются.\nСложность реализации<<<Поток в пространстве ядра. Наряду с таблицей процессов в пространстве ядра имеется таблица потоков.\n«Волокна» (англ. fibers). Несколько потоков режима пользователя, исполняющихся в одном потоке режима ядра. Поток пространства ядра потребляет заметные ресурсы, в первую очередь физическую память и диапазон адресов режима ядра для стека режима ядра. Поэтому было введено понятие «волокна» — облегчённого потока, выполняемого исключительно в режиме пользователя. У каждого потока может быть несколько «волокон».>>>",
            "В многопоточной среде часто возникают задачи, требующие приостановки и возобновления работы одних потоков в зависимости от работы других. В частности это задачи, связанные с предотвращенем конфликтов доступа при использовании одних и тех же данных или устройств из параллельно исполняемых потоков. Для решения таких задач используются специальные объекты для взаимодействия потоков, такие как взаимоисключения (мьютексы), семафоры, критические секции, события и т.п. Многие из этих объектов являются объектами ядра и могут применяться не только между потоками одного процесса, но и для взаимодействия между потоками разных процессов.\n<<<Взаимоисключения (mutex, мьютекс) — это объект синхронизации, который устанавливается в особое сигнальное состояние, когда не занят каким-либо потоком. Только один поток владеет этим объектом в любой момент времени, отсюда и название таких объектов (от английского mutually exclusive access — взаимно исключающий доступ) — одновременный доступ к общему ресурсу исключается. После всех необходимых действий мьютекс освобождается, предоставляя другим потокам доступ к общему ресурсу. Объект может поддерживать рекурсивный захват второй раз тем же потоком, увеличивая счётчик, не блокируя поток, и требуя потом многократного освобождения. Такова, например, критическая секция в Win32. Тем не менее, есть и такие реализации, которые не поддерживают такое и приводят к взаимной блокировке потока при попытке рекурсивного захвата. Например, это FAST_MUTEX в ядре Windows.\nКритические секции обеспечивают синхронизацию подобно мьютексам, за исключением того, что объекты, представляющие критические секции, доступны лишь в пределах одного процесса. События, мьютексы и семафоры также можно использовать в потоках однопроцессного приложения, однако реализации критических секций в некоторых ОС (например, Windows NT) обеспечивают более быстрый и более эффективный[1][2] механизм взаимно-исключающей синхронизации — операции «получить» и «освободить» на критической секции оптимизированы для случая единственного потока (отсутствия конкуренции) с целью избежать любых ведущих в ядро ОС системных вызовов.\nСемафоры представляют собой доступные ресурсы, которые могут быть приобретены несколькими потоками в одно и то же время, пока пул ресурсов не опустеет. Тогда дополнительные потоки должны ждать, пока требуемое количество ресурсов не будет снова доступно.\nСобытия. Объект, хранящий в себе 1 бит информации «просигнализирован или нет», над которым определены операции «просигнализировать», «сбросить в непросигнализированное состояние» и «ожидать». Ожидание на просигнализированном событии есть отсутствие операции с немедленным продолжением исполнения потока. Ожидание на непросигнализированном событии приводит к приостановке исполнения потока до тех пор, пока другой поток (или же вторая фаза обработчика прерывания в ядре ОС) не просигнализирует событие. Возможно ожидание нескольких событий в режимах «любого» или «всех». Возможно также создание события, автоматически сбрасываемого в непросигнализированное состояние после пробуждения первого же — и единственного — ожидающего потока (такой объект используется как основа для реализации объекта «критическая секция»). Активно используются в MS Windows, как в режиме пользователя, так и в режиме ядра.\nУсловные переменные (condvars). Сходны с событиями, но не являются объектами, занимающими память — используется только адрес переменной, понятие «содержимое переменной» не существует, в качестве условной переменной может использоваться адрес произвольного объекта. В отличие от событий, установка условной переменной в просигнализированное состояние не влечёт за собой никаких последствий в случае, если на данный момент нет потоков, ожидающих на переменной. Установка события в аналогичном случае влечёт за собой запоминание состояния «просигнализировано» внутри самого события, после чего следующие потоки, желающие ожидать события, продолжают исполнение немедленно без остановки. Для полноценного использования такого объекта необходима также операция «освободить mutex и ожидать условную переменную атомарно». Активно используются в UNIX-подобных ОС. Дискуссии о преимуществах и недостатках событий и условных переменных являются заметной частью дискуссий о преимуществах и недостатках Windows и UNIX.\nПорт завершения ввода-вывода (IO completion port, IOCP). Реализованный в ядре ОС и доступный через системные вызовы объект «очередь» с операциями «поместить структуру в хвост очереди» и «взять следующую структуру из головы очереди» — последний вызов приостанавливает исполнение потока в случае, если очередь пуста, и до тех пор, пока другой поток не осуществит вызов «поместить». Самой важной особенностью IOCP является то, что структуры в него могут помещаться не только явным системным вызовом из режима пользователя, но и неявно внутри ядра ОС как результат завершения асинхронной операции ввода-вывода на одном из дескрипторов файлов. Для достижения такого эффекта необходимо использовать системный вызов «связать дескриптор файла с IOCP». В этом случае помещенная в очередь структура содержит в себе код ошибки операции ввода-вывода, а также, для случая успеха этой операции — число реально введённых или выведенных байт. Реализация порта завершения также ограничивает число потоков, исполняющихся на одном процессоре/ядре после получения структуры из очереди. Объект специфичен для MS Windows и позволяет обрабатывать входящие запросы соединения и порций данных в серверном программном обеспечении в архитектуре, где число потоков может быть меньше числа клиентов (нет требования создавать отдельный поток с расходами ресурсов на него для каждого нового клиента).\nERESOURCE. Мьютекс, поддерживающий рекурсивный захват, с семантикой разделяемого или эксклюзивного захвата. Семантика: объект может быть либо свободен, либо захвачен произвольным числом потоков разделяемым образом, либо захвачен всего одним потоком эксклюзивным образом. Любые попытки осуществить захваты, нарушающее это правило, приводят к блокировке потока до тех пор, пока объект не освободится так, чтобы сделать захват разрешённым. Также есть операции вида TryToAcquire — никогда не блокирует поток, либо захватывает, либо (если нужна блокировка) возвращает FALSE, ничего не делая. Используется в ядре Windows, особенно в файловых системах — так, например, любому кем-то открытому дисковому файлу соответствует структура FCB, в которой есть 2 таких объекта для синхронизации доступа к размеру файла. Один из них — paging IO resource — захватывается эксклюзивно только в пути обрезания файла, и гарантирует, что в момент обрезания на файле нет активного ввода-вывода от кэша и от отображения в память.\nRundown protection. Полудокументированный (вызовы присутствуют в файлах-заголовках, но отсутствуют в документации) объект в ядре Windows. Счётчик с операциями «увеличить», «уменьшить» и «ждать». Ожидание блокирует поток до тех пор, пока операции уменьшения не уменьшат счётчик до нуля. Кроме того, операция увеличения может отказать, и наличие активного в данный момент времени ожидания заставляет отказывать все операции увеличения.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Многопоточность"
    },
    {
        "task": [
            "По виду выводимой информации[править | править код]<<<алфавитно-цифровые:\nдисплеи, отображающие только алфавитно-цифровую информацию;\nдисплеи, отображающие псевдографические символы;\nинтеллектуальные дисплеи, обладающие редакторскими возможностями и осуществляющие предварительную обработку данных;\nграфические, для вывода текстовой и графической (в том числе видео-) информации:[2]\nвекторные (vector-scan display);\nрастровые (raster-scan display) — используются практически в каждой графической подсистеме PC; IBM назвала этот тип отображения информации (начиная с CGA) отображением с адресацией всех точек (All-Points-Addressable, APA), — в настоящее время[когда?] дисплеи такого типа обычно называют растровыми (графическими)[2], поскольку каждому элементу изображения на экране соответствует один или несколько бит в видеопамяти.>>>",
            "По способу вывода информации[править | править код]<<<Растровый (алфавитно-цифровая и графическая информация)\nВекторный (вырисовывание лучом каждого символа)\nЗнакопечатающая ЭЛТ (формирование проходом луча через трафарет с символами)>>>",
            "По типу экрана[править | править код]<<<ЭЛТ — на основе электронно-лучевой трубки (англ. cathode ray tube, CRT).\nЖК — жидкокристаллические мониторы (англ. liquid crystal display, LCD).\nПлазменный — на основе плазменной панели (англ. plasma display panel, PDP, gas-plazma display panel).\nLED-монитор — на технологии LED (англ. light-emitting diode — светоизлучающий диод). Не путать с LED-подсветкой ЖК-мониторов.\nOLED-монитор — на технологии OLED (англ. organic light-emitting diode — органический светоизлучающий диод).\nQLED-мониторы (QD-LED) — на основе квантовых точек и ЖК-кристаллов.\nПластиковые (англ. Light Emitting Polymer, LEP) — на основе светоизлучающего пластика.\nВиртуальный ретинальный дисплей (анг. Virtual Retinal Display, VRD) — технология устройств вывода, формирующая изображение непосредственно на сетчатке глаза, например электронные очки Google Glass. Не путать с экраном Retina в устройствах Apple.\nПроекционные (лазерные (LPD)) — на основе лазерной панели (пока только внедряется в производство).\nПроецируемые — видеопроектор и экран, размещённые отдельно или объединённые в одном корпусе (как вариант — через зеркало или систему зеркал); и проекционный телевизор.>>>",
            "По размерности отображения[править | править код]<<<двумерный (2D) — одно изображение для обоих глаз;\nтрёхмерный (3D) — для каждого глаза формируется отдельное изображение для получения эффекта объёма.>>>",
            "По типу видеоадаптера[править | править код]<<<MDA\nHGC\nCGA\nEGA\nVGA/SVGA>>>",
            "По типу интерфейсного кабеля[править | править код]<<<композитный\nкомпонентный\nVGA (D-Sub)\nDVI\nUSB\nHDMI\nDisplayPort\nS-Video\nThunderbolt>>>",
            "По количеству отображаемых цветов[править | править код]<<<черно-белые (монохромные)\nцветные с фиксированным набором цветов (CGA, EGA)\nцветные с неограниченным количеством цветов (аналоговые VGA)>>>",
            "По виду управляющего видеосигнала[править | править код]<<<аналоговые\nцифровые>>>",
            "Основные параметры<<<Максимальная яркость — измеряется в канделах на квадратный метр (также называемые нит)\nМаксимальный контраст — соотношение яркости самого светлого оттенка (белый) и самого тёмного (чёрный), которые монитор отображает одновременно. Например, соотношение 20000:1 означает, что яркость белого в 20000 раз выше, чем яркость чёрного.\nСоотношение сторон экрана — стандартный (4:3), широкоформатный (16:9, 16:10) или другое соотношение (например, 5:4).\nРазмер экрана — определяется длиной диагонали, чаще всего в дюймах.>>>",
            "\nПараметры видимой области дисплея\n\n\nДиагональ, \"\nРазрешение\nОбозначение\nФормат\nПикселей на дюйм, (PPI)\nРазмер пикселя, мм\n\n\n15,0\n1024×768\nXGA\n4:3\n85,5\n0,297\n\n\n17,0\n1280×1024\nSXGA\n5:4\n96,2\n0,264\n\n\n17,0\n1440x900\nWXGA+\n16:10\n99,6\n0,255\n\n\n19,0\n1280×1024\nSXGA\n5:4\n86,3\n0,294\n\n\n19,0\n1440×900\nWXGA+\n16:10\n89,4\n0,284\n\n\n20,1\n1400×1050\nSXGA+\n4:3\n87,1\n0,291\n\n\n20,1\n1600×1050\nWSXGA+\n32:21\n98,4\n0,258\n\n\n20,1\n1600×1200\nUXGA\n4:3\n99,6\n0,255\n\n\n20,8\n2048×1536\nQXGA\n4:3\n122,7\n0,207\n\n\n21,0\n1600×1050\nWSXGA+\n32:21\n94,3\n0,270\n\n\n21,3\n1600×1200\nUXGA\n4:3\n94,0\n0,270\n\n\n22,0\n1600×1050\nWSXGA+\n32:21\n90,1\n0,282\n\n\n22,2\n3840×2400\nWQUXGA\n16:10\n204,0\n0,1245\n\n\n23,0\n1920×1200\nWUXGA\n16:10\n98,4\n0,258\n\n\n24,0\n1920×1200\nWUXGA\n16:10\n94,3\n0,269\n\n\n25,5\n1920×1200\nWUXGA\n16:10\n87,1\n0,2865\n\n\n27,0\n1920×1200\nWUXGA\n16:10\n83,9\n0,303\n\n\n30,0\n2560×1600\nWQXGA\n16:10\n101,0\n0,251\n<<<Разрешение — число пикселей по горизонтали и вертикали.\nГлубина цвета — количество бит на кодирование одного пикселя (от монохромного до 32-битного). Мониторы с 10 битами на канал показывают больше оттенков цвета (40 бит на все три канала, около миллиарда оттенков цвета), чем те, что показывают лишь 8 бит на канал (32 бит на все три канала, около 16,8 млн оттенков цвета).\nРазмер зерна или пикселя.\nЦветовое пространство — измеряется в координатах цветового пространства CIE 1931. Наиболее широко известны два стандарта: sRGB и Adobe RGB.\nЧастота обновления экрана (Гц), тесно связано с временем отклика пикселей. Теоретическая пиковая частота ЭЛТ мониторов достигает свыше 1кГц.\nВремя отклика пикселей (не для всех типов мониторов).\nУгол обзора.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Монитор_(устройство)"
    },
    {
        "task": [
            "Широко применяемая в настоящее время технология электронной подписи основана на асимметричном шифровании с открытым ключом и опирается на следующие принципы:\n<<<Можно сгенерировать пару очень больших чисел (открытый ключ и закрытый ключ) так, чтобы, зная открытый ключ, нельзя было вычислить закрытый ключ за разумный срок. Механизм генерации ключей строго определён и является общеизвестным. При этом каждому открытому ключу соответствует определённый закрытый ключ. Если, например, Иван Иванов публикует свой открытый ключ, то можно быть уверенным, что соответствующий закрытый ключ есть только у него.\nИмеются надёжные методы шифрования, позволяющие зашифровать сообщение открытым ключом так, чтобы расшифровать его можно было только закрытым ключом[Прим. 1]. Механизм шифрования является общеизвестным.\nЕсли электронный документ поддается расшифровке с помощью открытого ключа[Прим. 2], то можно быть уверенным, что он был зашифрован с помощью уникального закрытого ключа. Если документ расшифрован с помощью открытого ключа Ивана Иванова, то это подтверждает его авторство: зашифровать данный документ мог только Иванов, т.к. он является единственным обладателем закрытого ключа.>>>",
            "Существует несколько схем построения цифровой подписи:\n<<<На основе алгоритмов симметричного шифрования. Данная схема предусматривает наличие в системе третьего лица — арбитра, пользующегося доверием обеих сторон. Авторизацией документа является сам факт зашифрования его секретным ключом и передача его арбитру.[4]\nНа основе алгоритмов асимметричного шифрования. На данный момент такие схемы ЭП наиболее распространены и находят широкое применение.>>>",
            "Использование хеш-функций даёт следующие преимущества:\n<<<Вычислительная сложность. Обычно хеш цифрового документа делается во много раз меньшего объёма, чем объём исходного документа, и алгоритмы вычисления хеша являются более быстрыми, чем алгоритмы ЭП. Поэтому формировать хеш документа и подписывать его получается намного быстрее, чем подписывать сам документ.\nСовместимость. Большинство алгоритмов оперирует со строками бит данных, но некоторые используют другие представления. Хеш-функцию можно использовать для преобразования произвольного входного текста в подходящий формат.\nЦелостность. Без использования хеш-функции большой электронный документ в некоторых схемах нужно разделять на достаточно малые блоки для применения ЭП. При верификации невозможно определить, все ли блоки получены и в правильном ли они порядке.>>>",
            "В связи с этим симметричные схемы имеют следующие преимущества:\n<<<Стойкость симметричных схем ЭП вытекает из стойкости используемых блочных шифров, надежность которых также хорошо изучена.\nЕсли стойкость шифра окажется недостаточной, его легко можно будет заменить на более стойкий с минимальными изменениями в реализации.>>>",
            "Однако у симметричных ЭП есть и ряд недостатков:\n<<<Нужно подписывать отдельно каждый бит передаваемой информации, что приводит к значительному увеличению подписи. Подпись может превосходить сообщение по размеру на два порядка.\nСгенерированные для подписи ключи могут быть использованы только один раз, так как после подписывания раскрывается половина секретного ключа.>>>",
            "Общепризнанная схема цифровой подписи охватывает три процесса[источник не указан 2767 дней]:\n<<<Генерация ключевой пары. При помощи алгоритма генерации ключа равновероятным образом из набора возможных закрытых ключей выбирается закрытый ключ, вычисляется соответствующий ему открытый ключ.\nФормирование подписи. Для заданного электронного документа с помощью закрытого ключа вычисляется подпись.\nПроверка (верификация) подписи. Для данных документа и подписи с помощью открытого ключа определяется действительность подписи.>>>",
            "Для того, чтобы использование цифровой подписи имело смысл, необходимо выполнение двух условий:\n<<<Верификация подписи должна производиться открытым ключом, соответствующим именно тому закрытому ключу, который использовался при подписании.\nБез обладания закрытым ключом должно быть вычислительно сложно создать легитимную цифровую подпись.>>>",
            "Обеспечение этого во всех асимметричных алгоритмах цифровой подписи опирается на следующие вычислительные задачи:\n<<<Задачу дискретного логарифмирования (EGSA)\nЗадачу факторизации, то есть разложения числа на простые множители (RSA)>>>",
            "Асимметричные схемы:\n<<<FDH (Full Domain Hash), вероятностная схема RSA-PSS (Probabilistic Signature Scheme), схемы стандарта PKCS#1 и другие схемы, основанные на алгоритме RSA\nСхема Эль-Гамаля\nАмериканские стандарты электронной цифровой подписи: DSA, ECDSA (DSA на основе аппарата эллиптических кривых)\nРоссийские стандарты электронной цифровой подписи: ГОСТ Р 34.10-94 (в настоящее время не действует), ГОСТ Р 34.10-2001 (не рекомендован к использованию после 31 декабря 2017 года), ГОСТ Р 34.10-2012 (основан на сложности вычисления дискретного логарифма в группе точек эллиптической кривой)\nЕвразийский союз: ГОСТ 34.310-2004[8] полностью идентичен российскому стандарту ГОСТ Р 34.10-2001\nУкраинский стандарт электронной цифровой подписи ДСТУ 4145-2002\nБелорусский стандарт электронной цифровой подписи СТБ 1176.2-99 (в настоящее время не действует), СТБ 34.101.45-2013\nСхема Шнорра\nPointcheval-Stern signature algorithm\nВероятностная схема подписи Рабина\nСхема BLS (Boneh-Lynn-Shacham)\nСхема DLR (Donna-Lynn-Rivest)\nСхема GMR (Goldwasser-Micali-Rivest)>>>",
            "На основе асимметричных схем созданы модификации цифровой подписи, отвечающие различным требованиям:\n<<<Групповая цифровая подпись\nНеоспоримая цифровая подпись\n«Слепая» цифровая подпись и справедливая «слепая» подпись\nКонфиденциальная цифровая подпись.\nЦифровая подпись с доказуемостью подделки\nДоверенная цифровая подпись\nРазовая цифровая подпись.>>>",
            "В своей работе Гольдвассер, Микали и Ривест описывают следующие модели атак, которые актуальны и в настоящее время[3]:\n<<<Атака с использованием открытого ключа. Криптоаналитик обладает только открытым ключом.\nАтака на основе известных сообщений. Противник обладает допустимыми подписями набора электронных документов, известных ему, но не выбираемых им.\nАдаптивная атака на основе выбранных сообщений. Криптоаналитик может получить подписи электронных документов, которые он выбирает сам.>>>",
            "Также в работе описана классификация возможных результатов атак:\n<<<Полный взлом цифровой подписи. Получение закрытого ключа, что означает полный взлом алгоритма.\nУниверсальная подделка цифровой подписи. Нахождение алгоритма, аналогичного алгоритму подписи, что позволяет подделывать подписи для любого электронного документа.\nВыборочная подделка цифровой подписи. Возможность подделывать подписи для документов, выбранных криптоаналитиком.\nЭкзистенциальная подделка цифровой подписи. Возможность получения допустимой подписи для какого-то документа, не выбираемого криптоаналитиком.>>>",
            "Злоумышленник может попытаться подобрать документ к данной подписи, чтобы подпись к нему подходила. Однако в подавляющем большинстве случаев такой документ может быть только один. Причина в следующем:\n<<<документ представляет собой осмысленный текст;\nтекст документа оформлен по установленной форме;\nдокументы редко оформляют в виде txt-файла, чаще всего в формате DOC или HTML.>>>",
            "Если у фальшивого набора байт и произойдет коллизия с хешем исходного документа, то должны выполниться три следующих условия:\n<<<случайный набор байт должен подойти под сложно структурированный формат файла;\nто, что текстовый редактор прочитает в случайном наборе байт, должно образовывать текст, оформленный по установленной форме;\nтекст должен быть осмысленным, грамотным и соответствующим теме документа.>>>",
            "Социальные атаки направлены не на взлом алгоритмов цифровой подписи, а на манипуляции с открытым и закрытым ключами[11].\n<<<Злоумышленник, укравший закрытый ключ, может подписать любой документ от имени владельца ключа.\nЗлоумышленник может обманом заставить владельца подписать какой-либо документ, например, используя протокол слепой подписи.\nЗлоумышленник может подменить открытый ключ владельца на свой собственный, выдавая себя за него. Использование протоколов обмена ключами и защита закрытого ключа от несанкционированного доступа позволяет снизить опасность социальных атак[12].>>>",
            "В настоящее время существуют следующие устройства хранения закрытого ключа:\n<<<смарт-карты,\nUSB-брелоки,\n«таблетки» Touch-Memory,\nреестр (в защищённой памяти компьютера).>>>",
            "Использование ЭП предполагается для осуществления следующих важных направлений в электронной экономике:\n<<<Полный контроль целостности передаваемого электронного платежного документа: в случае любого случайного или преднамеренного изменения документа цифровая подпись станет недействительной, потому как вычисляется она по специальному алгоритму на основании исходного состояния документа и соответствует лишь ему.\nЭффективная защита от изменений (подделки) документа. ЭП даёт гарантию, что при осуществлении контроля целостности будут выявлены всякого рода подделки. Как следствие, подделывание документов становится нецелесообразным в большинстве случаев.\nФиксирование невозможности отказа от авторства данного документа. Этот аспект вытекает из того, что вновь создать правильную электронную подпись можно лишь в случае обладания так называемым закрытым ключом, который, в свою очередь, должен быть известен только владельцу этого самого ключа (автору документа). В этом случае владелец не сможет сформировать отказ от своей подписи, а значит — от документа.\nФормирование доказательств подтверждения авторства документа: исходя из того, что создать корректную электронную подпись можно, как указывалось выше, лишь зная закрытый ключ, а он по определению должен быть известен только владельцу-автору документа, то владелец ключей может однозначно доказать своё авторство подписи под документом. Более того, в документе могут быть подписаны только отдельные поля документа, такие как «автор», «внесённые изменения», «метка времени» и т. д. То есть, может быть доказательно подтверждено авторство не на весь документ.>>>",
            "Перечисленные выше свойства электронной цифровой подписи позволяют использовать её в следующих основных целях электронной экономики и электронного документального и денежного обращения:\n<<<Использование в банковских платежных системах;\nЭлектронная коммерция (торговля);\nЭлектронная регистрация сделок по объектам недвижимости;\nТаможенное декларирование товаров и услуг (таможенные декларации). Контролирующие функции исполнения государственного бюджета (если речь идет о стране) и исполнения сметных назначений и лимитов бюджетных обязательств (в данном случае если разговор идет об отрасли или о конкретном бюджетном учреждении). Управление государственными заказами;\nВ электронных системах обращения граждан к органам власти, в том числе и по экономическим вопросам (в рамках таких проектов как «электронное правительство» и «электронный гражданин»);\nФормирование обязательной налоговой (фискальной), бюджетной, статистической и прочей отчетности перед государственными учреждениями и внебюджетными фондами;\nОрганизация юридически легитимного внутрикорпоративного, внутриотраслевого или национального электронного документооборота;\nПрименение ЭЦП в различных расчетных и трейдинговых системах, а также Forex;\nУправление акционерным капиталом и долевым участием;\nЭП является одним из ключевых компонентов сделок в криптовалютах.>>>",
            "Согласно Федеральному закону №63-ФЗ, квалифицированной цифровой подписью можно подписывать любые документы, для которых существует электронная форма, то есть почти все. На практике бизнес использует ее для нескольких сфер:\n<<<Отчетность в ФНС, ПФР, Росстат, ФСС и другие контролирующие органы.\nЭлектронный документооборот между бизнесами в b2b-области — счета-фактуры, акты, договоры.\nЭлектронная коммерция — например, участие в государственных закупках сейчас проходит только в цифровом виде; b2b-закупки тоже быстрее и удобнее совершать в таком формате.\nВнутрикорпоративный документооборот — кадровые документы, приказы, распоряжения.>>>",
            "С 1 июля 2013 года Федеральный закон от 10 января 2002 года № 1-ФЗ утратил силу, на смену ему пришёл Федеральный закон от 6 апреля 2011 года № 63-ФЗ «Об электронной подписи». В результате было введено определение трех видов электронных подписей:\n<<<Простой электронной подписью является электронная подпись, которая посредством использования кодов, паролей или иных средств подтверждает факт формирования электронной подписи определённым лицом.\nУсиленной неквалифицированной электронной подписью является электронная подпись, которая:>>>",
            "Простой электронной подписью является электронная подпись, которая посредством использования кодов, паролей или иных средств подтверждает факт формирования электронной подписи определённым лицом.\nУсиленной неквалифицированной электронной подписью является электронная подпись, которая:<<<получена в результате криптографического преобразования информации с использованием ключа электронной подписи;\nпозволяет определить лицо, подписавшее электронный документ;\nпозволяет обнаружить факт внесения изменений в электронный документ после момента его подписания;\nсоздается с использованием средств электронной подписи.>>>",
            "получена в результате криптографического преобразования информации с использованием ключа электронной подписи;\nпозволяет определить лицо, подписавшее электронный документ;\nпозволяет обнаружить факт внесения изменений в электронный документ после момента его подписания;\nсоздается с использованием средств электронной подписи.<<<Усиленной квалифицированной электронной подписью является электронная подпись, которая соответствует всем признакам неквалифицированной электронной подписи и следующим дополнительным признакам:>>>",
            "Усиленной квалифицированной электронной подписью является электронная подпись, которая соответствует всем признакам неквалифицированной электронной подписи и следующим дополнительным признакам:<<<ключ проверки электронной подписи указан в квалифицированном сертификате;\nдля создания и проверки электронной подписи используются средства электронной подписи, получившие подтверждение соответствия требованиям, установленным в соответствии с 63-ФЗ>>>",
            "Манипуляции с электронными подписями в России[править | править код]<<<Известны незаконные действия с электронными подписями через центры сертификации РФ[20]. Коллегия Счетной палаты под председательством Татьяны Голиковой выявила участие некоторых УЦ в неправомерном применении электронной подписи застрахованного лица в интересах негосударственных пенсионных фондов, а также оформления документов без участия гражданина[21]. «Проверка Счетной палаты в очередной раз выявила массовые нарушения даже при наличии усиленных мер защиты электронной подписи», — прокомментировал ситуацию президент НАПФ Сергей Беляков[22], его советник утверждает, что массовая фальсификация электронных подписей в повторных заявлениях производилась путём повторного использования удостоверяющим центром электронной подписи клиента[23]. Похожий способ использовался при мошенничестве с недвижимостью[24], однако, в 2019 году Государственная Дума приняла закон о защите граждан от хищений квартир по электронной подписи, который фактически исключил использование электронной подписи при сделках с недвижимостью[25].\nДругой способ манипуляции с электронными подписями заключается в том, что клиенту предлагают дистанционный выпуск квалифицированного сертификата без личного контакта заявителя и сотрудника регистрационного отдела удостоверяющего центра, в этом случае оформление электронной подписи производится удаленно, на основании документов заявителя, представленных через интернет центру сертификации[26]. В результате подобных действий, вызванных, по мнению специалистов правовой системы «Гарант», тем что «IT-функции в деятельности УЦ преобладают над его юридической сущностью», электронная подпись может быть использована недобросовестными третьими лицами[27]. Однако, в 2017 году предложение Минкомсвязи передать функции выдачи усиленной квалифицированной электронной подписи (УКЭП) от частных компаний государству не нашло понимания других министерств и ведомств[28].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Электронная_подпись"
    },
    {
        "task": [
            "Синонимы<<<badware (bad — плохое и (soft)ware — программное обеспечение) — плохое программное обеспечение.\ncomputer contaminant (computer — компьютер и contaminant — загрязнитель) — термин для обозначения вредоносного программного обеспечения, который используется в законодательстве некоторых штатов США, например Калифорнии и Западной Виргинии.\ncrimeware (crime — преступность и software — программное обеспечение) — класс вредоносных программ, специально созданный для киберпреступлений. Это не синоним термина malware (значение термина malware шире). Не все программы, относящиеся к crimeware, являются вредоносными, поскольку понятие преступления субъективно и зависит от законодательства конкретной страны, а вред, наносимый владельцу и/или пользователю компьютера — объективен.>>>",
            "По основному определению, вредоносные программы предназначены для получения несанкционированного доступа к информации, в обход существующих правил разграничения доступа. Федеральная Служба по Техническому и Экспортному Контролю (ФСТЭК России) определяет данные понятия следующим образом:\n<<<Санкционированный доступ к информации (англ. authorized access to information) — доступ к информации, не нарушающий правила разграничения доступа.\nНесанкционированный доступ к информации (англ. unauthorized access to information) — доступ к информации, нарушающий правила разграничения доступа с использованием штатных средств, предоставляемых средствами вычислительной техники или автоматизированными системами. Под штатными средствами понимается совокупность программного, микропрограммного и технического обеспечения средств вычислительной техники или автоматизированных систем.\nПравила разграничения доступа (англ. access mediation rules) — совокупность правил, регламентирующих права доступа субъектов доступа к объектам доступа>>>",
            "В разделе не хватает ссылок на источники (см. рекомендации по поиску). Информация должна быть проверяема, иначе она может быть удалена. Вы можете отредактировать статью, добавив ссылки на авторитетные источники в виде сносок. (13 декабря 2011)<<<Помехи в работе заражённого компьютера: начиная от постоянно повторяющегося открытия-закрытия лотка CD/DVD/Blu-Ray-дисковода, и заканчивая уничтожением данных и поломкой аппаратного обеспечения. Поломками известен, в частности, Win32.CIH, нарушавший работу BIOS.\nБлокировка антивирусных сайтов, антивирусного ПО и административных функций ОС с целью усложнить лечение.\nСаботирование промышленных процессов, управляемых компьютером (этим известен червь Stuxnet).\nИнсталляция другого вредоносного ПО.\nЗагрузка из сети (downloader).\nРаспаковка другой вредоносной программы, уже содержащейся внутри файла (dropper).\nКража, мошенничество, вымогательство (ransomware) и шпионаж за пользователем (spyware). Для кражи может применяться сканирование жёсткого диска, регистрация нажатий клавиш (Keylogger) и перенаправление пользователя на поддельные сайты, в точности повторяющие исходные ресурсы, а также прямая запись голоса и видео с использованием микрофона и веб-камеры.\nПохищение данных, представляющих ценность или тайну. Вредоносное ПО, построенное под конкретное секретное место, может даже протаскивать данные[англ.] сквозь «воздушный зазор» через накопители, микрофоны, динамики, кулеры и т.д.\nКража аккаунтов различных служб (электронной почты, мессенджеров, игровых серверов…). Аккаунты применяются для рассылки спама. Также через электронную почту зачастую можно заполучить пароли от других аккаунтов, а виртуальное имущество в MMOG — продать.\nКража аккаунтов платёжных систем.\nБлокировка компьютера, шифрование файлов пользователя с целью шантажа и вымогательства денежных средств (см. Ransomware). В большинстве случаев после оплаты компьютер или не разблокируется, или вскоре блокируется второй раз.\nИспользование телефонного модема для совершения дорогостоящих звонков, что влечёт за собой значительные суммы в телефонных счетах.\nПлатное ПО, имитирующее, например, антивирус, но ничего полезного не делающее (fraudware или scareware[англ.]; см. тж лжеантивирус).\nПрочая незаконная деятельность:\nПолучение несанкционированного (и/или дарового) доступа к ресурсам самого компьютера или третьим ресурсам, доступным через него, в том числе прямое управление компьютером (так называемый backdoor).\nОрганизация на компьютере открытых релеев и общедоступных прокси-серверов.\nЗаражённый компьютер (в составе ботнета) может быть использован для проведения DDoS-атак.\nСбор адресов электронной почты и распространение спама, в том числе в составе ботнета.\nНакрутка электронных голосований, щелчков по рекламным баннерам.\nСкрытый майнинг.\nМенее опасные в зависимости от конкретной ситуации ПО или данные:\nШуточное ПО, делающее какие-либо беспокоящие пользователя вещи.\nAdware — программное обеспечение, показывающее рекламу.\nSpyware, если оно занимается сбором малоценной информации — например, конфигурации компьютера, некоторой активности пользователя…\n«Отравленные» документы, дестабилизирующие ПО, открывающее их (например, архив размером меньше мегабайта может содержать гигабайты данных и надолго «завесить» архиватор или компьютер, и даже временно вывести из строя файловую систему или накопитель).\nРуткит нужен, чтобы скрывать другое вредоносное ПО от посторонних глаз.\nПрограммы, не являющиеся зловредными, но обычно детектируемые антивирусами:\nПрограммы, считающиеся сомнительными или запрещёнными в той или иной юрисдикции: например, Защитник Windows детектирует множество торрент-клиентов и взломщиков ПО.\nИногда вредоносное ПО для собственного распространения или вредоносной деятельности устанавливает дополнительные утилиты: IRC-клиенты[12], программные маршрутизаторы[13], открытые библиотеки перехвата клавиатуры, программы удалённого администрирования…[14] Такое ПО вредоносным не является, но из-за того, что за его наличием часто стоит вредоносная программа, о нём могут предупреждать антивирусы. Бывает даже, что вредоносным является только скрипт из одной строчки, а остальные программы вполне легитимны.[15]>>>",
            "По методу размножения[править | править код]<<<Эксплойт — теоретически безобидный набор данных (например, графический файл или сетевой пакет), некорректно воспринимаемый программой, работающей с такими данными. Здесь вред наносит не сам файл, а неадекватное поведение ПО с ошибкой, приводящее к уязвимости. Также эксплойтом называют программу для генерации подобных «отравленных» данных.\nЛогическая бомба — вредоносная часть компьютерной программы (полезной или нет), срабатывающая при определённом условии.\nТроянская программа не имеет собственного механизма размножения и устанавливается «в придачу» к полезной или под видом полезной. Часто «в придачу» ставят ПО, которое не является истинно вредоносным, но нежелательное — например, adware.\nКомпьютерный вирус размножается в пределах компьютера и через сменные диски. Размножение через сеть возможно, если пользователь сам выложит заражённый файл в сеть. Вирусы, в свою очередь, делятся по типу заражаемых файлов (файловые, загрузочные, макро-, автозапускающиеся); по способу прикрепления к файлам (паразитирующие, «спутники» и перезаписывающие) и т. д.\nСетевой червь способен самостоятельно размножаться по сети. Делятся на IRC-, почтовые, размножающиеся с помощью эксплойтов и т. д.>>>",
            "В разделе не хватает ссылок на источники (см. рекомендации по поиску). Информация должна быть проверяема, иначе она может быть удалена. Вы можете отредактировать статью, добавив ссылки на авторитетные источники в виде сносок. (10 февраля 2019)<<<автоматическое открытие окон с незнакомым содержимым при запуске компьютера;\nблокировка доступа к официальным сайтам антивирусных компаний, или же к сайтам, оказывающим услуги по «лечению» компьютеров от вредоносных программ;\nпоявление новых неизвестных процессов в выводе диспетчера задач (например, окне «Процессы» диспетчера задач Windows);\nпоявление в ветках реестра, отвечающих за автозапуск, новых записей;\nзапрет на изменение настроек компьютера в учётной записи администратора;\nневозможность запустить исполняемый файл (выдаётся сообщение об ошибке);\nпоявление всплывающих окон или системных сообщений с непривычным текстом, в том числе содержащих неизвестные веб-адреса и названия;\nперезапуск компьютера во время старта какой-либо программы;\nслучайное и/или беспорядочное отключение компьютера;\nслучайное аварийное завершение программ;\nснижение производительности при достаточном объёме памяти, вплоть до «зависаний» вкупе с аномальным перегреванием системного блока;\nслучайное появление синего экрана смерти при запуске компьютера;\nпоявление неизвестных файлов и каталогов в файловой системе ОС, которые обычно выдают ошибку удаления;\nшифрование или повреждение пользовательских файлов;\nнеизвестные изменения в содержимом системных файлов при открытии их в текстовом редакторе;\nбыстрая утечка памяти на жёстком диске.>>>",
            "За создание, использование и распространение вредоносных программ предусмотрена различная ответственность, в том числе и уголовная, в законодательстве многих стран мира. В частности, уголовная ответственность за создание, использование и распространение вредоносных программ для ЭВМ предусмотрена в Статье 273 УК РФ[7]. Для того, чтобы программа считалась вредоносной, нужны три критерия:\n<<<Уничтожение информации или нарушение работы. Таким образом, взломщик защиты от копирования — не вредоносная программа. Однако иногда во взломщики добавляют «троянских коней».\nНесанкционированная работа. Определяется обычно от противного: для санкционированной работы программа должна предупредить пользователя о своей опасности и не исполнять опасные функции в неожиданные моменты. Программа форматирования диска, входящая в комплект любой ОС, уничтожает данные, но не является вредоносной, так как её запуск санкционируется пользователем.\nЗаведомость — явная цель несанкционированно уничтожить информацию. Программы с ошибкой могут пройти как нарушение прав потребителей или как преступная халатность — но не как вредоносные.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Вредоносная_программа"
    },
    {
        "task": [
            "В зависимости от этапа разработки ПО, на котором выявляется ошибка, выделяют:\n<<<синтаксические ошибки (распознаваемые в качестве таковых транслятором и делающие компиляцию невозможной) — например отсутствие или несоответствие открывающей и закрывающей скобок;\nпредупреждения (warnings) компилятора — например, использование неинициализированной переменной. В этом случае компилятор может заметить, что программист делает что-то необычное (вероятно неверное), и сообщает об этом, однако программист сам принимает решение, игнорировать сообщение или нет;\nошибки времени исполнения, смысловые ошибки (семантические) — например вычитание переменных вместо сложения или ошибка сегментации.>>>",
            "По важности:\n<<<Блокирующие (blockers) — делающие выполнение программы невозможным;\nКритические (иногда showstoppers) — лишающие программу всей полезности;\nСерьёзные;\nНезначительные;\nКосметические.>>>",
            "По времени появления:\n<<<Постоянно, при каждом запуске;\nИногда («плавающий» тип);\nТолько на машине у клиента (зависит от локальных настроек у клиента).>>>",
            "По месту и направлению:\n<<<Ошибки пользовательского интерфейса;\nСистемы обработки ошибок;\nОшибки, связанные с граничными условиями (например, некорректная обработка пустой строки или максимального числового значения);\nОшибки вычислений;\nОшибки управления потоками;\nОшибки обработки или интерпретации данных;\nПри состоянии гонки;\nПовышение нагрузки;\nОшибки контроля версии и идентификаторов;\nОшибки тестирования.>>>",
            "Последствия<<<Авария ракеты-носителя «Ариан-5» (4 июня 1996) — пример одной из самых дорогостоящих компьютерных ошибок в истории.\nОшибки в программном обеспечении медицинского ускорителя Therac-25 привели к превышению доз облучения нескольких людей.\nФинансовая организация Knight Capital Group[англ.] потеряла 440 миллионов долларов за 45 минут из-за ошибки в программе высокочастотного трейдинга[15].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Программная_ошибка"
    },
    {
        "task": [
            "В основу протокола рабочая группа MMUSIC заложила следующие принципы:\n<<<Простота: включает в себя только шесть методов (функций)\nНезависимость от транспортного уровня, может использовать UDP, TCP, ATM и т. д.\nПерсональная мобильность пользователей. Пользователи могут перемещаться в пределах сети без ограничений. Это достигается путём присвоения пользователю уникального идентификатора. При этом набор предоставляемых услуг остается неизменным. О своих перемещениях пользователь сообщает с помощью сообщения REGISTER своему серверу.\nМасштабируемость сети. Структура сети на базе протокола SIP позволяет легко её расширять и увеличивать число элементов.\nРасширяемость протокола. Протокол характеризуется возможностью дополнять его новыми функциями при появлении новых услуг.\nИнтеграция в стек существующих протоколов Интернет. Протокол SIP является частью глобальной архитектуры мультимедиа, разработанной комитетом IETF. Кроме SIP, эта архитектура включает в себя протоколы RSVP, RTP, RTSP, SDP.\nВзаимодействие с другими протоколами сигнализации. Протокол SIP может быть использован совместно с другими протоколами IP-телефонии, протоколами ТфОП, и для связи с интеллектуальными сетями.>>>",
            "Для организации взаимодействия с существующими приложениями сетей IP и для обеспечения мобильности пользователей, SIP использует адрес, подобный адресу электронной почты. В качестве вызываемых и вызывающих адресов используются универсальные указатели ресурсов URI, так называемые SIP URI, обычно имеющие формат sip:идентификатор@домен, где «идентификатор» представляет собой имя или номер телефона абонента, а «домен» определяет сервер или IP-АТС, которые могут быть заданы доменным именем или адресом IP.\n\nПримеры:\n<<<логин_абонента@Доменное.имя\nдоменное.имя.устройства@IP-адрес\n№ телефона@адрес. VoIP.шлюза.>>>",
            "Предусмотрено два типа прокси-серверов\n<<<с сохранением состояний (stateful). Такой сервер хранит в своей памяти все полученные запросы и связанные с ним новые сформированные запросы до окончания транзакции.\nбез сохранения состояний (stateless). Такой сервер просто обрабатывает получаемые запросы. Но на его базе нельзя реализовать сложные, интеллектуальные услуги.>>>",
            "Сервер B2BUA может предоставлять следующие функции:\n<<<Управление звонками (биллинг, перевод звонка, автоматическое разъединение и т. д.)\nСопряжение разных сетей (в частности, для адаптации разных диалектов протокола, зависимых от производителей)\nСокрытие структуры сети (частные адреса, сетевая топология и т. п.)>>>",
            "\n\nСтруктура сообщений протокола SIP\n\n\nСтартовая строка\n\n\nЗаголовки\n\n\nПустая строка\n\n\nТело сообщения\n<<<Стартовая строка начинает любое SIP-сообщение. Если сообщение является запросом, в ней указывается тип запроса, адресат и номер версии протокола. Если сообщение является ответом на запрос, в ней указывается номер версии протокола, тип ответа и его короткая расшифровка.\nЗаголовки сообщений содержат информацию, необходимую для обработки сообщения (информация об отправителе, адресате, пути следования и пр.)\nПустая строка (CL-RF) отделяет заголовок SIP сообщения от содержания, которое включает информацию по описанию будущей сессии при помощи протоколов SDP (RFC2327)\nТело сообщения содержит описание сеансов связи. Не все запросы содержат тело сообщения (например, запрос BYE). Все ответы могут содержать тело сообщения, но содержимое тела в них бывает разным.>>>",
            "В первоначальной версии протокола SIP (в RFC 3261) было определено шесть типов запросов. С помощью запросов клиент сообщает о текущем местоположении, приглашает пользователей принять участие в сеансах связи, модифицирует уже установленные сеансы, завершает их и т. д. Тип запроса указывается в стартовой строке.\n<<<INVITE — приглашает пользователя к сеансу связи. Обычно содержит SDP-описание сеанса.\nACK — подтверждает приём ответа на запрос INVITE.\nBYE — завершает сеанс связи. Может быть передан любой из сторон, участвующих в сеансе.\nCANCEL — отменяет обработку ранее переданных запросов, но не влияет на запросы, которые уже закончили обрабатываться.\nREGISTER — переносит адресную информацию для регистрации пользователя на сервере определения местоположения.\nOPTIONS — запрашивает информацию о функциональных возможностях сервера.>>>",
            "В дальнейшем протокол был расширен, в него добавили ещё несколько типов запросов:\n<<<PRACK — временное подтверждение (RFC 3262).\nSUBSCRIBE — подписка на получение уведомлений о событии (RFC 3265).\nNOTIFY — уведомление подписчика о событии (RFC 3265).\nPUBLISH — публикация события на сервере (RFC 3903).\nINFO — передача информации, которая не изменяет состояние сессии (RFC 2976).\nREFER — запрос получателя о передаче запроса SIP (RFC 3515).\nMESSAGE — передача мгновенных сообщений средствами SIP (RFC 3428).\nUPDATE — модификация состояния сессии без изменения состояния диалога (RFC 3311).>>>",
            "Ответы на запросы сообщают о результате обработки запроса либо передают запрошенную информацию. Структуру ответов и их виды протокол SIP унаследовал от протокола HTTP. Определено шесть типов ответов, несущих разную функциональную нагрузку. Тип ответа кодируется трёхзначным числом, самой важной является первая цифра, которая определяет класс ответа:\n<<<1ХХ — информационные ответы; показывают, что запрос находится в стадии обработки. Наиболее распространённые ответы данного типа — 100 Trying, 180 Ringing, 183 Session Progress.\n2ХХ — финальные ответы, означающие, что запрос был успешно обработан. В настоящее время в данном типе определены только два ответа — 200 OK и 202 Accepted(прим. 202 кода нет в RFC 3261).\n3ХХ — финальные ответы, информирующие оборудование вызывающего пользователя о новом местоположении вызываемого пользователя, например, ответ 302 Moved Temporary.\n4ХХ — финальные ответы, информирующие об отклонении или ошибке при обработке или выполнении запроса, например, 403 Forbidden или классический для протокола HTTP ответ 404 Not Found. Другие примеры: 406 Not Acceptable — неприемлемый (по содержанию) запрос, 486 Busy Here — абонент занят или 487 Request Terminated — вызывающий пользователь разорвал соединение не дожидаясь ответа (отмена запроса).\n5ХХ — финальные ответы, информирующие о том, что запрос не может быть обработан из-за отказа сервера, 500 Server Internal Error.\n6ХХ — финальные ответы, информирующие о том, что соединение с вызываемым пользователем установить невозможно, например, ответ 603 Decline означает, что вызываемый пользователь отклонил входящий вызов.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Протокол_установления_сеанса"
    },
    {
        "task": [
            "В качестве основных (несъёмных) частей материнская плата имеет:\n<<<разъём процессора (ЦПУ),\nразъёмы оперативной памяти (ОЗУ),\nмикросхемы чипсета (подробнее см. северный мост, южный мост),\nЗагрузочное ПЗУ (в современных компьютерах это фактически флеш-память, ранее были технологии EEPROM, EPROM (с удалением данных ультрафиолетовым излучением) и PROM (однократно программируемое ПЗУ)), содержащее BIOS или UEFI, также память CMOS и её разъём под \"таблеточный\" литиевый элемент питания, часы реального времени,\nконтроллеры шин (в настоящее время — практически всегда в составе чипсета или даже непосредственно процессора) и их слоты расширения,\nконтроллеры и интерфейсы периферийных устройств. Так, часто отдельными устройствами, не входящими в чипсет, являются звуковые и сетевые контроллеры, некоторые платы и вовсе имеют встроенный Bluetooth-модуль\nв некоторых случаях (но далеко не всегда), как например в ноутбуках - твердотельный накопитель, который распаивается непосредственно на материнской плате, и представляет собой комплект микросхем, а не съемное устройство.\n>>>",
            "Форм-фактор (как и любые другие стандарты) носит рекомендательный характер. Спецификация форм-фактора определяет обязательные и опциональные компоненты. Однако подавляющее большинство производителей предпочитают соблюдать спецификацию, поскольку ценой соответствия существующим стандартам является совместимость материнской платы и стандартизированного оборудования (периферии, карт расширения) других производителей (что имеет ключевое значение для снижения стоимости владения, англ. TCO).\n<<<Устаревшими являются форматы: Baby-AT; полноразмерная плата AT; LPX; BTX, MicroBTX и PicoBTX.\nСовременные и массово применяемые форматы: ATX; microATX; Mini-ITX.\nВнедряемые форматы: Nano-ITX; Pico-ITX; FlexATX; NLX; WTX, CEB.>>>",
            "Предназначение компьютера (бизнес, персональный, игровой) в значительной степени влияют на выбор поставщика материнской платы.\n<<<Для нужд SOHO или предприятия выгоднее приобретение готового компьютера (или решения, например, «клиент-сервер» или блейд-сервер с закупкой или лизингом готового решения).\nДля персонального пользования в качестве основного устройства позиционируется портативный компьютер[почему?][источник не указан 3206 дней]. Материнские платы ноутбуков существенно отличаются от материнских плат настольных компьютеров: для сокращения габаритов компьютера в плату оригинальной схемотехники встраивается (интегрируется) множество отдельных периферийных плат (например, встраивается видеокарта) — это обеспечивает компактные габариты и низкое энергопотребление ноутбука, но приводит к меньшей надёжности, проблемам с теплоотводом, значительному увеличению стоимости материнских плат, а также отсутствию взаимозаменяемости.>>>",
            "Определить модель установленной материнской платы можно\n<<<визуально, с помощью заводских этикеток и надписей на плате\nс помощью программного инструментария типа DMI\nпрограммно, с помощью утилиты типа CPU-Z. В Linux можно использовать утилиту dmidecode, в Windows — SIW или AIDA64>>>",
            "Спецификации ErP/EuP 2.0 намного строже первой версии. Для соответствия ErP/EuP 2.0 (вступила в действие в 2013 году) полное энергопотребление компьютера в выключенном состоянии не должно превышать 0,5 Вт. \n<<<EPU Engine\nUltra Durable (версии 1, 2 и 3) — технология от Gigabyte, призванная улучшить температурный режим и надежность работы материнской платы, которая подразумевает:\nУвеличенная (удвоенная) толщина медных слоев толщиной 70 мкм (2 унции/фут²) как для слоя питания, так и для слоя заземления системной платы снижает полное сопротивление платы на 50 %, что обеспечивает снижение рабочей температуры компьютера, повышение энергоэффективности и улучшение стабильности работы системы в условиях разгона.\nИспользование полевых транзисторов, обладающих пониженным сопротивлением в открытом состоянии (RDS(on)). Транзисторы преобразователей питания +12 вольт выделяют относительно много тепла и, когда говорят об охлаждении подсистемы питания процессора, то подразумевают именно их.\nИспользование дросселей с ферритовым сердечником — эти дроссели обеспечивают меньшие потери энергии и меньший уровень электромагнитного излучения.\nИспользование бессвинцового припоя.\nПовторное использование и картона и пластика упаковки.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Материнская_плата"
    },
    {
        "task": [
            "В связи с тем, что система управления будет размещаться внутри более сложного устройства, при её разработке ключевую роль играют следующие факторы:\n<<<минимальное собственное энергопотребление (возможно, автономное питание);\nминимальные собственные габариты и вес;\nсобственная защита (корпус) минимальна и обеспечивается прочностью и жёсткостью конструкции и применёнными элементами;\nфункции отвода тепла (охлаждения) обеспечивают минимум требований тепловых режимов. Если плотность теплового потока (тепловой поток, проходящий через единицу поверхности) не превышает 0,5 мВт/см², перегрев поверхности устройства относительно окружающей среды не превысит 0,5 °C, такая аппаратура считается нетеплонагруженной и не требует специальных схем охлаждения.\nмикропроцессор и системная логика, а также ключевые микросхемы по возможности совмещены на одном кристалле;\nспециальные военно-космические требования по радиационной и электромагнитной стойкости, работоспособность в вакууме, гарантированное время наработки, срок доступности решения на рынке и т. д.>>>",
            "Областью применения встроенных систем являются:\n<<<средства автоматического регулирования и управления технологическими процессами, например авионика, контроль доступа;\nстанки с ЧПУ;\nбанкоматы, платёжные терминалы;\nтелекоммуникационное оборудование.>>>",
            "Список ведущих фирм — производителей микроконтроллеров:\n<<<Atmel Corporation\nFujitsu\nInfineon Technologies\nMicrochip Technology\nNXP Semiconductors\nRenesas Electronics\nFreescale Semiconductor\nSTMicroelectronics\nTexas Instruments\nTransmeta\nVIA Technologies>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Встраиваемая_система"
    },
    {
        "task": [
            "где:\n<<<t ∈ N число базовых операций «перемещения», осуществлённых машиной\nPM ∈ N номер позиции на ленте машины в момент времени t\nSM0 начальное состояние машины\nCM(t, c) содержимое ячейки c в момент времени t>>>",
            "В настоящее время не существует единой системы классификации и именования вирусов (хотя попытка создать стандарт была предпринята на встрече CARO в 1991 году). Принято разделять вирусы:[источник не указан 359 дней]\n<<<по поражаемым объектам (файловые вирусы, загрузочные вирусы, сценарные вирусы, макровирусы, вирусы, поражающие исходный код);\nфайловые вирусы делят по механизму заражения: паразитирующие добавляют себя в исполняемый файл, перезаписывающие невосстановимо портят заражённый файл, «спутники» идут отдельным файлом.\nпо поражаемым операционным системам и платформам (DOS, Windows, Unix, Linux, Android);\nпо используемым технологиям (полиморфные вирусы, стелс-вирусы, руткиты);\nпо языку, на котором написан вирус (ассемблер, высокоуровневый язык программирования, сценарный язык и др.);\nпо дополнительной вредоносной функциональности (бэкдоры, кейлоггеры, шпионы, ботнеты и др.).>>>",
            "В разделе не хватает ссылок на источники (см. рекомендации по поиску). Информация должна быть проверяема, иначе она может быть удалена. Вы можете отредактировать статью, добавив ссылки на авторитетные источники в виде сносок. (14 мая 2023)<<<Дискеты. Самый распространённый канал заражения в 1980—1990-е годы. Сейчас[когда?] практически отсутствует из-за появления более распространённых и эффективных каналов и отсутствия флоппи-дисководов на многих современных компьютерах.\nФлеш-накопители («флешки»). В настоящее время[когда?] USB-накопители заменяют дискеты и повторяют их судьбу — большое количество вирусов распространяется через съёмные накопители, включая цифровые фотоаппараты, цифровые видеокамеры, портативные цифровые плееры, а с 2000-х годов всё большую роль играют мобильные телефоны, особенно смартфоны (появились мобильные вирусы). Использование этого канала ранее было преимущественно обусловлено возможностью создания на накопителе специального файла autorun.inf, в котором можно указать программу, запускаемую Проводником Windows при открытии такого накопителя. В Windows 7 возможность автозапуска файлов с переносных носителей была отключена.\nЭлектронная почта. Обычно вирусы в письмах электронной почты маскируются под безобидные вложения: картинки, документы, музыку, ссылки на сайты. В некоторых письмах могут содержаться действительно только ссылки, то есть в самих письмах может и не быть вредоносного кода, но если открыть такую ссылку, то можно попасть на специально созданный веб-сайт, содержащий вирусный код. Многие почтовые вирусы, попав на компьютер пользователя, затем используют адресную книгу из установленных почтовых клиентов типа Outlook для рассылки самого себя дальше.\nСистемы обмена мгновенными сообщениями. Здесь также распространена рассылка ссылок на якобы фото, музыку либо программы, в действительности являющиеся вирусами, по ICQ и через другие программы мгновенного обмена сообщениями.\nВеб-страницы. Возможно также заражение через страницы Интернета ввиду наличия на страницах всемирной паутины различного «активного» содержимого: скриптов, ActiveX-компонент. В этом случае используются уязвимости программного обеспечения, установленного на компьютере пользователя, либо уязвимости в ПО владельца сайта (что опаснее, так как заражению подвергаются добропорядочные сайты с большим потоком посетителей), а ничего не подозревающие пользователи, зайдя на такой сайт, рискуют заразить свой компьютер.\nИнтернет и локальные сети (черви). Черви — вид вирусов, которые проникают на компьютер-жертву без участия пользователя. Черви используют так называемые «дыры» (уязвимости) в программном обеспечении операционных систем, чтобы проникнуть на компьютер. Уязвимости — это ошибки и недоработки в программном обеспечении, которые позволяют удалённо загрузить и выполнить машинный код, в результате чего вирус-червь попадает в операционную систему и, как правило, начинает действия по заражению других компьютеров через локальную сеть или Интернет. Злоумышленники используют заражённые компьютеры пользователей для рассылки спама или для DDoS-атак.>>>",
            "В настоящий момент существует множество антивирусных программ, используемых для предотвращения попадания вирусов в ПК. Однако нет гарантии, что они смогут справиться с новейшими разработками. Поэтому следует придерживаться некоторых мер предосторожности, в частности:[источник не указан 359 дней]\n<<<Не работать под привилегированными учётными записями без крайней необходимости (учётная запись администратора в Windows).\nНе запускать незнакомые программы из сомнительных источников.\nСтараться блокировать возможность несанкционированного изменения системных файлов.\nОтключать потенциально опасную функциональность системы (например, autorun-носителей в MS Windows, сокрытие файлов, их расширений и пр.).\nНе заходить на подозрительные сайты, обращать внимание на адрес в адресной строке обозревателя.\nПользоваться только доверенными дистрибутивами.\nПостоянно делать резервные копии важных данных, желательно на носители, которые не стираются (например, BD-R) и иметь образ системы со всеми настройками для быстрого развёртывания.\nВыполнять регулярные обновления часто используемых программ, особенно тех, которые обеспечивают безопасность системы.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Компьютерный_вирус"
    },
    {
        "task": [
            "Учебные симуляторы:\n<<<Авиационный тренажёр[источник не указан 1351 день]\nГорнолыжный тренажёр\nЛогический симулятор цифровой логики и цифровых схем\nСимулятор электронных схем\nБизнес-симулятор\nТренажёр пехоты[источник не указан 1351 день]>>>",
            "Отслеживание тела: метод захвата движения часто используется для записи движений пользователя и преобразования захваченных данных во входные данные для виртуального моделирования. Например, если пользователь физически поворачивает голову, то это движение будет каким-то образом зафиксировано аппаратным обеспечением и переведено в соответствующее смещение в поле зрения внутри виртуальной среды.\n<<<Захватные костюмы[англ.] и/или перчатки могут использоваться для захвата движений частей тела пользователей. Эти системы могут иметь встроенные в них датчики для восприятия движений различных частей тела (например, пальцев). К тому же, эти системы могут иметь внешние отслеживающие устройства или метки, которые могут быть обнаружены внешним ультразвуком, оптическими приемниками или электромагнитными датчиками. Внутренние инерциальные датчики также доступны в некоторых системах. Устройства могут передавать данные либо по беспроводной сети, либо по кабелям.\nГлазные трекеры также могут быть использованы для обнаружения движений глаз так, что система может точно определить, куда пользователь смотрит в данный момент времени.>>>",
            "Физические контроллеры: физические контроллеры обеспечивают ввод в симуляцию только посредством прямого манипулирования пользователем. В виртуальном моделировании тактильная обратная связь от физических контроллеров весьма желательна в ряде сред моделирования.\n<<<Всенаправленные беговые[англ.] дорожки можно использовать для захвата движения пользователей во время ходьбы или бега.\nВысокоточные приборы, такие как приборные панели в виртуальных кабинах самолетов, предоставляют пользователям реальные средства управления для повышения уровня погружения. Например, пилоты могут использовать фактические элементы управления глобальной системой позиционирования с реального устройства в имитируемой кабине, чтобы помочь им практиковать процедуры с фактическим устройством в контексте интегрированной системы кабины.>>>",
            "Визуальные дисплеи обеспечивают визуальный стимул для пользователя.\n<<<Стационарные дисплеи могут варьироваться от обычного настольного дисплея до обернутых на 360 градусов экранов и стереодисплеев. Обычные настольные дисплеи могут варьироваться по размеру от 15 до 60 дюймов (от 380 до 1520 мм). Обертывание вокруг экранов обычно используется в так называемой пещерной автоматической виртуальной среде (CAVE). Стереоскопические трехмерные экраны производят трехмерное изображение либо с помощью специальных очков, либо без них — в зависимости от конструкции.\nНаголовные дисплеи монтируются на головных уборах пользователя. Эти системы подключаются непосредственно к виртуальному моделированию, чтобы обеспечить пользователю более захватывающий опыт. Вес, частота обновления и поле зрения — некоторые из ключевых переменных, определяющих их. Естественно, тяжелые дисплеи нежелательны, так как они вызывают усталость с течением времени. Если скорость обновления слишком низкая, система не может обновить изображение достаточно быстро, чтобы соответствовать быстрому повороту головы пользователя. Поэтому медленные темпы обновления нарушают чувство погружения. Поле зрения или угловая протяженность мира, который виден в данный момент, может варьироваться от системы к системе и, как было обнаружено, влияет на чувство погружения пользователя.>>>",
            "Звуковой дисплей: существует несколько различных типов аудиосистем, которые помогают пользователю слышать и локализовать звуки в пространстве. Специальное программное обеспечение может быть использовано для создания 3D-аудиоэффектов, чтобы создать иллюзию того, что источники звука размещены в трехмерном пространстве вокруг пользователя.\n<<<Стационарные акустические системы могут использоваться для обеспечения двойного или многоканального объемного звучания. Однако внешние динамики не так эффективны в создании 3D-аудиоэффектов, как наушники.\nНаушники предлагают портативную альтернативу стационарным динамикам. Они также имеют дополнительные преимущества маскировки реального шума и поддерживают множество звуковых эффектов[16].>>>",
            "Тактильный дисплей: эти дисплеи обеспечивают ощущение прикосновения к пользователю (тактильная технология). Этот тип вывода иногда называют силовой обратной связью.\n<<<Тактильные плиточные дисплеи используют различные типы приводов, такие как надувные пузыри, вибраторы, низкочастотные сабвуферы, штыревые приводы и/или термоприводы для создания дополнительных ощущений[16].\nДисплеи конечных эффекторов могут реагировать на входы пользователей с сопротивлением и силой. Эти системы часто используются в медицинских приложениях для удаленных операций, в которых используются роботизированные инструменты[18].>>>",
            "Общие показатели эффективности системы[англ.] включают следующее[50]:\n<<<Пропускная способность при средних и пиковых нагрузках>>>",
            "Пропускная способность при средних и пиковых нагрузках<<<Длительность одного цикла (сколько времени требуется для изготовления одной детали)>>>",
            "Длительность одного цикла (сколько времени требуется для изготовления одной детали)<<<Использование ресурсов, рабочей силы и машин>>>",
            "Использование ресурсов, рабочей силы и машин<<<Очереди на рабочих местах>>>",
            "Очереди на рабочих местах<<<Очереди и задержки, вызванные погрузочно-разгрузочными устройствами и системами>>>",
            "Очереди и задержки, вызванные погрузочно-разгрузочными устройствами и системами<<<Потребности в хранении в процессе работы>>>",
            "Потребности в хранении в процессе работы<<<Потребности в персонале>>>",
            "Потребности в персонале<<<Эффективность систем планирования\nЭффективность систем управления>>>",
            "Основные цели моделирования запуска шаттла заключаются в следующем:\n<<<демонстрация операций обратного отсчета в комнате запуска[англ.]\nобеспечение подготовки инженеров по распознаванию и оценке системных проблем в критической по времени среде\nиспользование способности стартовой группы оценивать, расставлять приоритеты и реагировать на проблемы комплексным образом в критической по времени среде\nобеспечение процедур, которые будут использоваться при выполнении операций восстановления в случае отказов системы, выполняемых на заключительном этапе обратного отсчета[57]>>>",
            "Игровые симуляторы<<<Компьютерные игры: симуляторы автомобилей и мотоциклов, самолётов, космических кораблей, танков, поездов, подлодок, различных видов спорта и т. п. Основным принципом симулятора является точное воспроизведение особенностей какой-то тематической области (например: автосимулятор должен максимально точно воспроизводить физические особенности машин).[источник не указан 1351 день]\nСпортивный симулятор\nАвиасимулятор: симулятор летательного аппарата.[источник не указан 1351 день]>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Симулятор"
    },
    {
        "task": [
            "Мобильные приложения можно разделить на три подвида[источник не указан 502 дня]:\n<<<Нативные приложения, предустановленные либо скачиваемые, но изначально задуманные под определённую операционную систему или устройство. Приложение, написанное для устройства c прошивкой Apple не пойдёт на устройстве с прошивкой Android. Поэтому большинство разработчиков готовят программные изделия в виде набора под несколько операционных систем.\nВеб-приложения, являющиеся частными случаями мобильного браузера для просмотра специально созданных мобильных сайтов. Работают на языках программирования Сети: разметочного HTML, формального CSS и встраиваемого JavaScript. Преимущество — приложения независимы от операционной системы устройства, так как информация в основном хранится «в облаке» и обрабатывается за счёт ресурсов Всемирной Сети. Недостаток — работают медленнее соответствующих нативных приложений.\nГибридные приложения, представляющие собой смешение двух вышеописанных подходов. Гибридные приложения создают с помощью компонента WebView[англ.][5]. Webview-приложения представляют собой мобильные версии сайтов, отображаемые в интерфейсе мобильного приложения. Webview приложения доступны на платформах Android (Android WebView Media Integrity)[6] и iOS. Такое приложение может отображать сайт, созданный по технологии веб-приложения. Для пользователя такое приложение будет казаться нативным и иметь все необходимые функции. Для разработчика использование данной технологии снижает затраты на написание отдельного кода для мобильного приложения, так как сайт по технологии веб-приложения уже предоставляет все необходимые функции. Также webview-приложения могут использовать нативные функции систем iOS и Android, такие как push-уведомления, оплату через GooglePay или ApplePay, и многие другие[7]. Приложения этого подвида разрабатываются с использованием таких каркасов как Cordova, Flutter, React Native и ряда других.>>>",
            "Точками цифрового распространения приложений для мобильных устройств, нативных для основных мобильных операционных систем являются следующие сетевые торговые площадки:\n<<<App Store (для iOS/iPadOS)\nGoogle Play (для Android)\nSamsung Galaxy Store (для Android, Tizen)\nWindows Store (Универсальная платформа Windows)\nAmazon Appstore (для Android, Windows 11)\nBlackBerry World (Android)\nHuawei AppGallery (Android)>>>",
            "Существуют также крупные маркетплейсы, официально не завязанные на какую-либо операционную систему (сторонние платформы), учреждённые в отдельных странах:\n<<<Appland[англ.] (Android и iOS), Швеция\nAptoide[англ.] (Android), Португалия\nCafe Bazaar[англ.] (Android), Иран\nCydia (iOS, для взломанных айфонов, после легализации этой операции в 2010 году в США)\nF-Droid (Android, только свободное программное обеспечение), Великобритания\nGetJar[англ.] (Android), Литва\nMiKandi[англ.] (Android, для программных изделий, связанных с распространением порнографии на мобильных устройствах), США\nOpera Mobile Store (кроссплатформенная, для Android, Java, Symbian, Windows Mobile, iOS), Норвегия>>>",
            "В связи с ростом мировой нестабильности, введением санкций против России (отразившихся и на сетевой торговле[9]), появились и сугубо российские центры сетевого распространения программных изделий данного рода:\n<<<NashStore (Android)\nRuMarket\nRuStore (Android)\nи другие>>>",
            "Мобильные приложения пишутся на различных языках программирования (Java/Kotlin; PHP/JavaScript; ActionScript; Swift и Objective-C). Процесс создания и доводки приложения разбивается на несколько этапов[источник не указан 502 дня]:\n<<<Определение функционала (какие задачи оно будет выполнять).\nПроектирование и дизайн.\nПроцесс разработки.\nТестирование.\nМониторинг.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Мобильное_приложение"
    },
    {
        "task": [
            "Конструирование может осуществляться:\n<<<вручную при помощи чертёжных инструментов, например, кульмана (чертёжного стола);\nавтоматизированно — при помощи систем автоматизации проектных работ (САПР);\nавтоматически (без участия человека) при помощи Интеллектуальной информационной системы.>>>",
            "Можно привести следующие примеры видов проектирования по отраслям деятельности:\n<<<проектирование инженерных систем (вентиляции, газопроводов, электросетей и др. инфраструктуры);\nархитектурно-строительное проектирование;\nградостроительное проектирование;\nпроектирование интерьера;\nландшафтное проектирование;\nпроектирование программного обеспечения;\nи т. д.>>>",
            "Системное проектирование должно базироваться на системном подходе. На сегодняшний день нельзя утверждать, что известен его полный состав и содержание применительно к проектной деятельности, однако можно сформулировать наиболее важные из них:\n<<<Практическая полезность:\nдеятельность должна быть целенаправленной, устремлённой на удовлетворение действительных потребностей реального потребителя или определённой социальной, возрастной или иной групп людей;\nдеятельность должна быть целесообразной. Важно вскрыть причины, препятствующие использованию существующих объектов для удовлетворения новых потребностей, выявить вызывающие их ключевые противоречия и сконцентрировать усилия на решении главных задач;\nдеятельность должна быть обоснованной и эффективной. Разумным будет использование не любого решения задачи, а поиск оптимального варианта;\nЕдинство составных частей:\nцелесообразно любой объект, сложный ли он или простой, рассматривать как систему, внутри которой можно выделить логически связанные более простые части — подсистемы, единство частных свойств которых и образует качественно новые свойства объекта-системы;\nразрабатываемые объекты предназначены для людей, ими создаются и эксплуатируются. Поэтому человек также обязан рассматриваться в качестве одной из взаимодействующих систем. При этом должно приниматься во внимание не только физическое взаимодействие, но и духовно-эстетическое воздействие;\nвнешняя, или как её ещё называют —  жизненная среда, также должна рассматриваться в качестве системы, взаимосвязанной с проектируемым объектом;\nИзменяемость во времени:\nучёт этапов жизненного цикла объекта;\nучёт истории и перспектив развития и применения разрабатываемого объекта, а также областей науки и техники, на достижениях которых базируются соответствующие разработки.>>>",
            "Структура устанавливает стадии разработки конструкторской документации на изделия всех отраслей промышленности и этапы выполнения работ внутри каждой стадии, то есть состав документации и виды работ, что помогает ответить на вопрос «Что нужно делать?» в процессе проектирования. Основные стадии структуры включают:\n<<<Эскизное проектирование состоит в создании эскизного проекта, состоящего из совокупности документов, содержащих принципиальные решения и дающих общее представление об устройстве и принципе работы разрабатываемого объекта, а также данные, определяющие его назначение, основные параметры и габаритные размеры. В случае большой сложности объекта этому этапу может предшествовать аван-проект (предпроектное исследование), обычно содержащий теоретические исследования, предназначенные для обоснования принципиальной возможности и целесообразности создания данного объекта. При необходимости проводят изготовление и испытание макетов разрабатываемого объекта.\nТехническое проектирование состоит в создании технического проекта, образуемого совокупностью документов, которые должны содержать окончательные технические решения, дающие полное представление об устройстве проектируемого объекта, исходные данные для разработки рабочей документации.\nНа стадии рабочего проектирования (рабочего проекта) сначала разрабатывают подробную конструкторскую документацию для изготовления опытного образца и последующего его испытания. Испытания проводят в ряд этапов (от заводских до приёмо-сдаточных), по результатам которых корректируют проектные документы. Далее разрабатывают рабочую документацию для изготовления установочной серии, её испытания, оснащения производственного процесса основных составных частей изделия. По результатам этого этапа снова корректируют проектные документы и разрабатывают рабочую документацию для изготовления и испытания головной (контрольной) серии. На основе документов окончательно отработанных и проверенных в производстве изделий, изготовленных по зафиксированному и полностью оснащённому технологическому процессу, разрабатывают завершающую рабочую документацию установившегося производства.\nЗавершает цикл работ этап, подводящий итог проектной деятельности, сертификация. Её назначение — определение уровня качества созданного изделия и подтверждение его соответствия требованиям тех стран, где предполагается его последующая реализация. Необходимость выделения этого этапа в виде самостоятельного вызвана тем, что в настоящее время экспорт продукции или её реализация внутри страны во многих случаях недопустимы без наличия у неё сертификата качества. Сертификация может быть обязательной или добровольной. Обязательной сертификации подлежат товары, на которые законами или стандартами установлены требования, обеспечивающие безопасность жизни и здоровья потребителей, охрану окружающей среды, предотвращение причинения вреда имуществу потребителя. Добровольная сертификация проводится по инициативе предприятий. Обычно это делается с целью официального подтверждения характеристик продукции, изготавливаемой предприятием, и, как следствие, повышения доверия к ней у потребителей.>>>",
            "Следующие этапы образуют внутреннее проектирование. Они нацелены на поиск решения задачи и выполняются разработчиком. Сюда входят этапы синтеза принципа действия, структуры и параметров проектируемого объекта:\n<<<На этапе синтеза принципа действия отыскивают принципиальные положения, физические, социальные и т. п. эффекты, которые составят основу функционирования будущего изделия. Это могут быть основополагающие нормы, фундаментальные законы и правила, их частные случаи или следствия. Работа ведётся с принципиальными моделями и их графическим представлением — блок-схемами. Этому этапу соответствует заключительная стадия ТЗ и стадия технического предложения структуры проектирования по ГОСТ 2.103;\nНа этапе структурного синтеза на основе выбранного принципа действия создаются варианты начального графического представления объекта — структуры, схемы, алгоритмы, упрощённые эскизы. В соответствии с ГОСТ 2.103 этот этап включает стадию эскизного проектирования;\nНа этапе параметрического синтеза отыскиваются значения параметров объекта, находится численное, в том числе оптимальное, решение проектной задачи, создаётся подробная документация или описание объекта, чертежи изделия и его частей. Этот этап соответствует стадиям технического и рабочего проектирования.>>>",
            "На каждом этапе внутреннего проектирования выполняются следующие процедуры:\n<<<выбор модели (то есть основополагающего принципа, вида блок-схемы и расчётной схемы),\nвыбор метода решения, в том числе метода оптимизации,\nрешение,\nанализ полученных результатов и принятие решения.>>>",
            "Основная статья: Методы проектирования<<<Эвристические методы\nМетод итераций (последовательного приближения)\nМетод декомпозиции\nСтруктурно-функциональный подход, построение структуры системы на основе описания её функциональности, и представление её в структурном виде\nМетод контрольных вопросов\nМетод мозговой атаки (штурма)\nТеория решения изобретательских задач (ТРИЗ)\nМетод морфологического анализа\nФункционально-стоимостной анализ\nМетоды конструирования\nЭкспериментальные методы\nЦели и виды экспериментальных методов\nПланирование эксперимента\nМашинный эксперимент\nМысленный эксперимент\nФормализованные методы\nМетоды поиска вариантов решений\nМетоды автоматизации процедур проектирования\nМетоды оптимального проектирования>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Проектирование"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Математическая_статистика"
    },
    {
        "task": [
            "Интернет-провайдер — это оператор связи, имеющий лицензию на один из следующих видов услуг:\n<<<Услуги связи по предоставлению каналов связи.\nУслуги связи в сети передачи данных, за исключением передачи голосовой информации.\nУслуги связи по передаче голосовой информации в сети передачи данных.\nТелематические услуги связи.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Интернет-провайдер"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Формат_файла"
    },
    {
        "task": [
            "В разное время и в различных источниках тестированию давались различные определения, в том числе:\n<<<процесс выполнения программы с целью нахождения ошибок[2];\nинтеллектуальная дисциплина, имеющая целью получение надежного программного обеспечения без излишних усилий на его проверку[3];\nтехническое исследование программы для получения информации о её качестве с точки зрения определённого круга заинтересованных лиц (С. Канер[англ.] [уточнить]);\nпроверка соответствия между реальным поведением программы и её ожидаемым поведением на конечном наборе тестов, выполненных определённым образом[1];\nпроцесс наблюдения за выполнением программы в специальных условиях и вынесения на этой основе оценки каких-либо аспектов её работы[4];\nпроцесс, имеющий целью выявление ситуаций, в которых поведение программы является неправильным, нежелательным или не соответствующим спецификации[5];\nпроцесс, содержащий в себе все активности жизненного цикла, как динамические, так и статические, касающиеся планирования, подготовки и оценки программного продукта и связанных с этим результатов работ с целью определить, что они соответствуют описанным требованиям, показать, что они подходят для заявленных целей и для определения дефектов[6].>>>",
            "Стандарты, относящиеся к тестированию<<<IEEE 829—2008 IEEE Standard for Software and System Test Documentation\nANSI/IEEE Std 1008—1987 — IEEE Standard for Software Unit Testing\nISO/IEC/IEEE 29119-1:2013 Software and systems engineering — Software testing — Part 1: Concepts and definitions\nISO/IEC/IEEE 29119-2:2013 Software and systems engineering — Software testing — Part 2: Test processes\nISO/IEC/IEEE 29119-3:2013 Software and systems engineering — Software testing — Part 3: Test documentation>>>",
            "По объекту тестирования<<<Функциональное тестирование\nТестирование производительности\nНагрузочное тестирование\nСтресс-тестирование\nТестирование стабильности\nКонфигурационное тестирование\nЮзабилити-тестирование\nТестирование безопасности\nТестирование локализации\nТестирование совместимости>>>",
            "По знанию внутреннего строения системы<<<Тестирование чёрного ящика\nТестирование белого ящика\nТестирование серого ящика>>>",
            "По степени автоматизации<<<Ручное тестирование\nАвтоматизированное тестирование\nПолуавтоматизированное тестирование>>>",
            "По степени изолированности[7][8]<<<Тестирование компонентов\nИнтеграционное тестирование\nСистемное тестирование>>>",
            "По времени проведения тестирования[источник не указан 3445 дней]<<<Альфа-тестирование\nДымовое тестирование (англ. smoke testing)\nТестирование новой функции (new feature testing)\nПодтверждающее тестирование\nРегрессионное тестирование\nПриёмочное тестирование\nБета-тестирование>>>",
            "По признаку позитивности сценариев<<<Позитивное тестирование\nНегативное тестирование>>>",
            "По степени подготовленности к тестированию<<<Тестирование по документации (формальное тестирование)\nИнтуитивное тестирование (англ. ad hoc testing)>>>",
            "Уровни тестирования<<<Тестирование компонентов — тестируется минимально возможный для тестирования компонент, например, отдельный класс или функция. Часто тестирование компонентов осуществляется разработчиками программного обеспечения.\nИнтеграционное тестирование — тестируются интерфейсы между компонентами, подсистемами или системами. При наличии резерва времени на данной стадии тестирование ведётся итерационно, с постепенным подключением последующих подсистем.\nСистемное тестирование — тестируется интегрированная система на её соответствие требованиям.\nАльфа-тестирование — имитация реальной работы с системой штатными разработчиками, либо реальная работа с системой потенциальными пользователями/заказчиком. Чаще всего альфа-тестирование проводится на ранней стадии разработки продукта, но в некоторых случаях может применяться для законченного продукта в качестве внутреннего приёмочного тестирования. Иногда альфа-тестирование выполняется под отладчиком или с использованием окружения, которое помогает быстро выявлять найденные ошибки. Обнаруженные ошибки могут быть переданы тестировщикам для дополнительного исследования в окружении, подобном тому, в котором будет использоваться программа.\nБета-тестирование — в некоторых случаях выполняется распространение предварительной версии (в случае проприетарного программного обеспечения иногда с ограничениями по функциональности или времени работы) для некоторой большей группы лиц с тем, чтобы убедиться, что продукт содержит достаточно мало ошибок. Иногда бета-тестирование выполняется для того, чтобы получить обратную связь о продукте от его будущих пользователей.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Тестирование_программного_обеспечения"
    },
    {
        "task": [
            "Такая информация часто используется в базах данных:\n<<<Метаданные — это субканальная информация об используемых данных[2].\nСтруктурированные данные, представляющие собой характеристики описываемых сущностей для целей их идентификации, поиска, оценки, управления ими[3].\nНабор допустимых структурированных описаний, которые доступны в явном виде и предназначение которых может помочь найти объект[4]. Термин используется в контексте поиска объектов, сущностей, ресурсов.\nДанные из более общей формальной системы, заданную с описывающей свойства системы данных.\nИнформация о содержащейся на веб-странице свойств информации (создателе и т. п.). Пример: Имя автора правки в тексте. Этот термин в широком смысле слова используется для любой информации о данных: именах таблиц, колонок в таблице в реляционных базах данных, номер версии в файле программы (то есть как информативная часть в бинарном файле) и т. п.>>>",
            "Обычно невозможно провести однозначное разделение на данные и метаданные в документе, поскольку:\n<<<Что-то может являться как данными, так и метаданными. Так, заголовок статьи можно одновременно отнести как к метаданным (как элемент метаданных — заголовок), так и к собственно данным (поскольку заголовок является частью самого текста).\nДанные и метаданные могут меняться ролями. На стихотворение, рассматриваемое как данные, может быть написана музыка, в этом случае всё стихотворение может быть «прикреплено» к музыкальному файлу и в этом случае рассматриваться как метаданные. Таким образом, отнесение к одной или другой категории зависит от точки зрения (или пространства имён, системы отсчёта).\nВозможно создание мета-мета-…-метаданных (см. аксиома выбора). Поскольку, в соответствии с обычным определением, метаданные являются данными, то можно создать метаданные на метаданные, метаданные для вывода на специальные устройства, либо чтения их описания с использованием программного обеспечения, преобразующего текст в речь.>>>",
            "Метаданные можно классифицировать по\n<<<Содержанию. Метаданные могут либо описывать сам ресурс (например, название и размер файла), либо содержимое ресурса (например, «в этом видеофайле показано как парень играет в футбол»).\nПо отношению к ресурсу в целом. Метаданные могут относиться к ресурсу в целом или к его частям. Например, «Title» (название фильма) относится к фильму в целом, а «Scene description» (описание эпизода фильма) отдельное для каждого эпизода фильма.\nПо возможности логического вывода. Метаданные можно подразделить на три слоя: нижний слой — это «сырые» данные сами по себе; средний слой — метаданные, описывающие указанные «сырые» данные; и верхний слой — метаданные, которые позволяют делать логический вывод, используя второй слой.>>>",
            "Тремя наиболее используемыми классами метаданных являются[5]:\n<<<Внутренние метаданные, описывающие структуру или составные части вещи, то, чем вещь является. Например, формат и размер файла.\nАдминистративные метаданные, требующиеся для процессов обработки информации, назначение вещи. Например, информация об авторе, редакторе, дата публикации и т. п.\nОписательные метаданные, которые описывают природу вещи, её признаки. Например, набор связанных с информацией категорий, ссылки на другие вещи, связанные с данной.>>>",
            "Классификация форматов метаданных по описываемой предметной области:\n<<<DCMI является одним из наиболее распространённых в интернет форматов метаданных для описания ресурсов любого типа (как электронных документов, так и реальных физических объектов). Другие форматы метаданных, предназначенные для описания архивов и электронных ресурсов GILS, EAD.\nдля описания персон и организаций vCard и FOAF\nдля описания библиографических ресурсов предназначены форматы семейства MARC (MARC 21, используемый в США и Великобритании, и UNIMARC, используемый в Европе и Азии); UNIMARC в свою очередь подразделяется на национальные расширения этого формата (так, в России используется RUSMARC); в силу большой сложности форматов семейства MARC для решения задач интеграции данных был разработан формат MODS.\nдля описания музейных и исторических ценностей используется формат CDWA\nдля описания издательской продукции используются PRISM и ONIX\nдля кристаллографической информации CIF\nдля работы с изображениями со спутников VICAR\nдля описания новостей NewsXML>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Метаданные"
    },
    {
        "task": [
            "Алгоритм обработки ключа состоит из двух процедур:\n<<<Алгоритм генерации раундовых ключей (алгоритм расширения ключа)\nАлгоритм выбора раундового ключа (ключа итерации)>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/AES_(стандарт_шифрования)"
    },
    {
        "task": [
            "Классификация<<<По возможности печати графической информации принтеры делятся на:>>>",
            "алфавитно-цифровые, иначе символьные или знаковые (с возможностью печати ограниченного набора символов);\nграфические.<<<По конструктивному устройству и принципу формирования изображения принтеры делятся на:>>>",
            "принтеры ударного типа:\nлитерные (шрифтовые) принтеры;\nматричные (игольчатые) принтеры;\nпринтеры безударного типа:\nструйные принтеры;\nграфопостроители (фломастерные или каплеструйные);\nлазерные принтеры (разновидность светодиодные принтеры);\nтермопринтеры;\nтвёрдочернильные принтеры;\nсублимационные принтеры;\n3D-принтеры;\nфотонные принтеры;\nофсетные принтеры<<<По количеству выдаваемых цветов:>>>",
            "чёрно-белые (одноцветные, monochrome)\nцветные (многоцветные, color). Кроме базовых цветов CMYK, цветной принтер может быть снабжён лайтами (Light Cyan и Light Magenta), повышающими видимое разрешение при низкой заливке и цветовой охват изображения. Кроме этого, иногда используют оранжевый и зелёный цвета (Orange и Green), немного расширяющие цветовой охват печати. Принтеры, предназначенные для печати по цветным материалам, дополнительно снабжены белым цветом. Принтеры, имеющие расширенные возможности цветового охвата для высококачественной цветной печати фотографий и других изображений, также называют фотопринтерами.<<<По типу интерфейса подключения:>>>",
            "Сравнение с другими типами<<<Качество печати. Очень низкое, сравнимое с качеством пишущей машинки. Впрочем, возможна графика. 9-игольные принтеры маркируются NLQ (near letter quality, «почти как у машинки»), 24-игольные — LQ (letter quality, «как у машинки»).\nЦветопередача. Существовали цветные матричные принтеры с четырёхцветной лентой, они могли печатать семью фиксированными цветами. Жёлтая часть ленты очень быстро загрязнялась, и цветопередача дополнительно портилась. Тем не менее, в 1980-е годы это был единственный способ настольной печати в цвете.\nСкорость печати. Для обычных 9- и 24-игольных принтеров в текстовом режиме — десятки секунд на страницу, в графическом — несколько минут. Высокоскоростные принтеры в несколько раз быстрее. Возможна печать через копирку и на самокопирующихся бланках. Там, где нужно оперативно печатать один экземпляр (например, в кассах), у матричных принтеров всё ещё нет равных — пока лазерный нагреется, матричный выдаст распечатку.\nСтоимость отпечатка. Крайне низка (расходный материал — красящая лента). Отлично печатают на бумаге крайне плохого качества, что ещё снижает стоимость. Возможны нестандартные форматы бумаги, это важно для бланков строгой отчётности, которые делают из качественной бумаги (например, железнодорожный билет АСУ «Экспресс», 2011 год).\nПечать на нетрадиционных материалах. Некоторые модели принтеров (с прямым трактом) позволяют печатать, например, на паспортах.\nУстойчивость отпечатка к внешним воздействиям. Наивысшая среди всех технологий компьютерной печати; отпечатки стойки к воде и трению. Следы от иголок дополнительно усложняют подделку документов. Со временем отпечатки выцветают, но не критично, и даже спустя десятилетия остаются читаемыми.\nВозможная длина отпечатка. Не ограничена. Возможны ограничения спулера печати (как, например, в Windows — печать идёт только страницами). Подача бумаги бывает ручная (поштучная) и рулонная.\nШирокие форматы. Существуют принтеры под формат А3 (узкой стороной).\nЭкологичность. Низкое энергопотребление, небольшой объём и простота утилизации расходных материалов, невысокие требования к бумаге. Сильный шум.\nПростота обслуживания. Работает в самых спартанских условиях. Прежде, чем закончиться, картридж предупреждает об этом неконтрастными отпечатками. В самом крайнем случае можно печатать через копировальную бумагу вместо картриджа. При подаче с рулона — бумага практически не заминается.\nОсновное применение в настоящее время. Печать документов. Матричный принтер можно найти в банках, билетных кассах, различных бюро, лабораториях, медицинских учреждениях, в составе кассовых аппаратов.>>>",
            "Существуют два способа технической реализации способа распыления красителя:\n<<<Пьезоэлектрический (пьезокерамический; Piezoelectric Ink Jet) — над дюзой расположен пьезокристалл. Когда на пьезоэлемент подаётся электрический ток, он (в зависимости от типа печатающей головки) изгибается, удлиняется или тянет диафрагму, вследствие чего создаётся локальная область повышенного давления возле дюзы — формируется капля, которая впоследствии выталкивается на материал. В некоторых головках технология позволяет изменять размер капли.\nТермический (пьезопластический; Thermal Ink Jet; также называемый BubbleJet, разработчик — компания Canon, принцип был разработан в конце 1970-х годов) — в дюзе расположен микроскопический нагревательный элемент, который при прохождении электрического тока мгновенно нагревается до температуры в несколько сотен градусов(нагрев до 500 °C вызовет гидродинамический удар в 25 тонн), при нагревании в чернилах образуются газовые пузырьки (англ. bubbles — отсюда и название технологии), которые выталкивают капли жидкости из сопла на носитель (газовые пузырьки образуются в результате обратного пьезоэффекта с излучением ультразвука, при этом возможен нагрев до 40 °C и понижение давления, которое и выталкивает пузырьки наружу; размер пузырька равен размеру дюзы, а не как считает Epson — размеру молекулы[источник не указан 693 дня]).>>>",
            "Печатающие головки струйных принтеров создаются с использованием следующих типов подачи красителя:\n<<<Непрерывная подача (Continuous Ink Jet) — подача красителя во время печати происходит непрерывно, факт попадания красителя на запечатываемую поверхность определяется модулятором потока красителя (утверждается, что патент на данный способ печати выдан Вильяму Томпсону (William Thomson) в 1867 году[источник не указан 5092 дня]). В технической реализации такой печатающей головки в сопло под давлением подаётся краситель, который на выходе из сопла разбивается на последовательность микрокапель (объёмом нескольких десятков пиколитров), которым дополнительно сообщается электрический заряд. Разбиение потока красителя на капли происходит расположенным на сопле пьезокристаллом, на котором формируется акустическая волна (частотой в десятки килогерц). Отклонение потока капель производится электростатической отклоняющей системой (дефлектором). Те капли красителя, которые не должны попасть на запечатываемую поверхность, собираются в сборник красителя и, как правило, возвращаются обратно в основной резервуар с красителем. Первый струйный принтер, изготовленный с использованием данного способа подачи красителя, выпустила Siemens в 1951 году.[2]\nПодача по требованию[3] — подача красителя из сопла печатающей головки происходит только тогда, когда краситель действительно надо нанести на соответствующую соплу область запечатываемой поверхности. Именно этот способ подачи красителя и получил самое широкое распространение в современных струйных принтерах.>>>",
            "Сравнение с другими типами (для фотопринтеров)<<<Цветопередача. Возможна нестабильность цветов (разные партии красок, отстой краски при бездействии и размешивание — при работе). Но в целом, из-за того, что фотопринтеры могут иметь 8 и более цветов, при регулярной калибровке цветопередача очень хороша (вплотную приближается к лидеру отрасли — химической фотопечати). Растискивание положительное: печатаемая точка больше, чем точность позиционирования головки.\nКачество печати. Высокое качество достигается только на бумаге со специальным покрытием. На обычной офисной бумаге видны «лохматые» края. Также чёткость печати на обычной офисной бумаге повышается за счёт использования специальных пигментных чернил.\nСкорость печати. У простых персональных принтеров — сравнима со скоростью матричного принтера, около минуты на страницу A4. Печать чёрно-белых документов обычно быстрее. Существуют модели струйных принтеров со скоростью печати до 75 страниц в минуту.\nСтоимость отпечатка. При использовании оригинальных расходных материалов очень высока, более доллара на фотографическую страницу. Даже чёрно-белая текстовая страница в несколько раз дороже аналогичной лазерной. Однако использование чернил и бумаги сторонних производителей позволяет снизить стоимость в десятки раз.\nУстойчивость отпечатка к внешним воздействиям. Зависит от состава чернил и материала печати. При использовании водорастворимых чернил и простой офисной бумаги отпечатки боятся воды и могут выцветать. При использовании пигментных чернил (почти все офисные струйные принтеры) свето- и водостойкость повышается на порядок. Использование фотобумаги также делает отпечаток стойким к воде и выцветанию.\nПечать на нетрадиционных материалах. Струйные принтеры (при надлежащей конструкции тракта подачи) могут печатать даже на сувенирах с неровной поверхностью. Никакие другие принтеры не способны на такое. К тому же чернила могут обладать совсем разными физико-химическими свойствами, так что возможна печать, например, на плёнку термопереноса или на ногтях модниц.\nВозможная длина отпечатка. Теоретически не ограничена. Возможны ограничения спулера печати (как, например, в Windows — печать идёт только страницами). Дешёвые офисные принтеры могут не иметь механизма подачи рулонной бумаги.\nШирокие форматы. Из-за хорошего цвета и разнообразия материалов в таких принтерах уже есть надобность (например, рекламные растяжки). Встречаются принтеры шириной в метры.\nЭкологичность. Низкий шум. В зависимости от химического состава чернил возможно испарение растворителя.\nПростота обслуживания. Крайне капризны, долгий простой приводит к засорению головки — особенно с неоригинальными чернилами. Дороговизна картриджей и бесконтрольная заправка неоригинальными чернилами вынудила производителей выпускать принтеры с предустановленной СНПЧ оригинального производства с оригинальными чернилами, лишённые таких проблем.\nОсновное применение в настоящее время. Фотопечать, широкоформатная печать, специальные виды печати. В начале 2000-х годов широко продвигались как персональные.>>>",
            "По типу печатаемого материала:\n<<<Рулонный — оснащаются системами подмотки и смотки рулонного материала, предназначены для печати на самоклейке, бумаге, холсте, баннерной ткани\nПланшетный — для печати на ПВХ, полистироле, пенокартоне. Лист материала фиксируется на станине при помощи вакуумного прижима или струбцинами. Каретка (оборудованная приводом движения по оси Х) закреплена на портале, который вместе с кареткой движется над материалом (по оси Y).\nСувенирный — перемещение заготовки относительно головки, по оси Y, обеспечивается сервоприводом подвижного стола, кроме этого, стол оснащается механизмом регулировки расстояния между заготовкой и кареткой (для печати на заготовках разной высоты). Применяются для печати на дисках, телефонах, для маркировки деталей.\nГибридный (рулон+планшет) — для печати на бумаге и плёнке стандартных форматов (A3, A4 и т. п.). Оснащаются механизмом захвата и подмотки листового материала.>>>",
            "По типу используемых чернил:\n<<<Водные на основе водорастворимого красителя. Используются в абсолютном большинстве бытовых и офисных струйных принтеров и в некоторых интерьерных широкоформатных принтерах. Главный недостаток — слабая светостойкость, то есть быстрое выгорание на солнце.\nВодные текстильные — активные, сублимационные, кислотные применяются для прямой или термотрансферной печати на тканях, с последующей обработкой в каландрах.\nВодные УФ утверждаемые(отверждаемые) — применяются в основном японской компанией Komori в цифровых печатных машинах.\nСольвентные чернила. Сольвентные чернила применяются в широкоформатной и интерьерной печати. Характеризуются очень высокой стойкостью к воздействию воды и атмосферных осадков. Характеризуются вязкостью сольвента, зернистостью и используемой фракцией пигментного красителя.\nСольвентные УФ утверждаемые(отверждаемые) — выпускает компания FujiFilm по технологии Smart-UV.\nСпиртовые(на основе этилового спирта) — широкого применения не получили, так как головки, печатающие спиртовыми чернилами, очень быстро высыхают.\nМасляные — используются в системах промышленной маркировки и для тестирования печатающих головок.\nВодно-пигментные (или водно-масляные) — используются для получения изображений высокого качества, в интерьерной и в фотопечати.\nУФ-отверждаемые чернила — чернила отверждаются светом в УФ-диапазоне, применяются как экологичная замена сольвентным чернилам и для печати на жёстких материалах.\nЛатексные чернила — в которых происходит химическая кристаллизация воды за счёт нагрева материала, изобретатель компания HP.>>>",
            "По назначению:\n<<<Широкоформатные — основное назначение широкоформатной печати — наружная реклама. Широкоформатные принтеры характеризуются большой шириной печати (чаще всего 3200 мм), высокой скоростью печати (от 20 м² в час), не самым высоким оптическим разрешением.\nИнтерьерные — область применения интерьерной печати — печать элементов оформления интерьера, печать плакатов, информационных стендов, чертежей. Основной формат — 1600 мм. Основные производители интерьерных принтеров: Roland, Mimaki.\nФотопринтеры — предназначены для печати фотографий, печатают на материалах малых форматов(обычно на рулонах шириной до 1000 мм). Цветовая модель не хуже, чем CMYK+Lc+Lm (шестицветная печать), иногда цветовая модель дополняется оранжевым цветом, белой краской, серебрянкой (для получения эффектов металла) и т. п.\nСувенирные — применяются для печати на небольших деталях, для печати на дисках и заготовках сложной формы. Производятся множеством фирм: TechnoJet, Epson, Canon, HP и т. п.\nОфисные — отличаются от фотопринтеров более дешёвой конструкцией, в большинстве случаев отсутствием лайтов и листовой подачей материала. Основные производители офисных принтеров: Epson, HP, Canon, Lexmark.\nМаркировочные — включаются в состав поточных линий. Печатающая головка, неподвижно закреплённая над конвейерной лентой, наносит маркировку на движущиеся изделия.\nМаникюрные — используются для нанесения на ногти сложного рисунка в нейл-арт салонах.\nПромышленные — для печати книг и газет.>>>",
            "По системе подачи чернил:\n<<<Непрерывная, с расположением питающих ёмкостей и головок на одном уровне (давление на входе головок регулируется высотой питающих ёмкостей). Структура: канистры с чернилами → насос → фильтр → гибкий тракт → каретка → обратный клапан → питающая ёмкость, оснащённая датчиками уровня чернил → головка.\nНепрерывная, с питающими ёмкостями, расположенными выше головок. Давление высокого столба чернил на головки уравновешивается вакуумной системой, состоящей из вакуумного насоса и устройств регулировки вакуума. Структура: канистры с чернилами → насос → фильтр → гибкий тракт → каретка → обратный клапан → питающая ёмкость, оснащённая датчиками уровня чернил и подключённая к вакуумной системе → головка.\nСамотёком. Головки и канистры с чернилами соединяются трубками, проходящими через гибкий тракт. Единственный промежуточный элемент — демпфер, фильтрующий чернила и гасящий колебания давления, возникающие при движении гибкого тракта.\nПодача чернил из картриджей, движущихся вместе с кареткой. Основное достоинство этой системы — низкая стоимость. Недостатки: малый запас чернил в картриджах, утяжеление каретки картриджами, медленное падение давления на входе головок, вызываемое уменьшением уровня чернил в картриджах.>>>",
            "Сравнение с другими типами (для фотопечати)<<<Качество печати. Хорошая, без растра, картинка (чтобы вывести светлый цвет, принтер испаряет меньшее количество краски). По линиатуре близки к журнальной фотографии.\nЦветопередача. Очень хороша.\nСкорость печати. Около минуты на фотографию 10×15. Профессиональные принтеры 2—3 секунд.\nСтоимость отпечатка.\nПечать на нетрадиционных материалах. Не предусматривается.\nУстойчивость отпечатка к внешним воздействиям. Покрывается плёнкой после печати. Защита от воды и выцветания.\nВозможная длина отпечатка. Для домашних принтеров — только по формату фотографии, обычно 10×15. В профессиональных рулонных — не ограничена.\nШирокие форматы. В домашних — только по формату фотографии. Профессиональные устройства с подачей краски под давлением устроены принципиально иначе, чем домашние, могут быть довольно широки (более 3 м) и даже отнимают нишу у струйных.\nЭкологичность. Низкий шум.\nПростота обслуживания. Надёжнее струйных; простои сублимационным принтерам не страшны. Боятся пыли.\nОсновное применение в настоящее время. Фотопечать, широкоформатная и сувенирная печать, маркировка.>>>",
            "Яркими представителями фотонных принтеров прошлого являются фотолаборатории от Durst, FujiFilm, MCI, Ricoh и многие другие, осуществляет экспонирование изображения на фотобумаге. На сегодня этот способ печати считается самым качественным и профессиональным на уровне с офсетным. Позволяет печатать с качеством до 4000 dpi без полошения и растра. Печатает только на специально-подготовленных материалах и с маленькой скоростью от 20 до 60 см в минуту. При этом:\n<<<воспроизведение цветов 16,7 млн оттенков;\nглубина цвета 36 бит;\nпередача 256 оттенков на каждый цвет (RGB).>>>",
            "Сравнение с другими типами\n<<<Качество печати и цветопередача. Лидер отрасли: 1200 и более dpi без растра. Иногда бывает, что для бытовых фото 10×15 тайком делают дополнительную обработку фото, а для более крупных форматов — печатают так, как заказано.\nСкорость печати. От 20 до 60 см в минуту.\nСтоимость отпечатка. Сравнима со струйным при несравненно лучшем качестве.\nПечать на нетрадиционных материалах. Не предусмотрена, только определённый сорт фотобумаги.\nУстойчивость отпечатка к внешним воздействиям. Висящая на стене фотография слегка выцветает, но всё-таки держится годами.>>>",
            "Сравнение с другими типами<<<Качество печати — высокое, выпускаются модели с разрешением 2400 dpi.\nЦветопередача. Изготовляемый на основе парафинов тонер имеет стабильные характеристики. Поскольку печатающий узел для каждого из цветов имеет большие размеры и стоимость, то используется только четыре цвета в схеме CMYK, а фотоизображение получается с крупным растром (около 80 lpi), особенно в светлых тонах. Цветные лазерные принтеры позволяют печатать высококачественные цветные изображения, но моделей с фотографическим качеством на данный момент не выпускается. Растискивание обычно отрицательное: к краям заряженной области тонер притягивается плохо.\nСкорость печати. Современные персональные принтеры работают со скоростью 10—20 страниц в минуту. Офисные и промышленные принтеры могут иметь скорость до 400 страниц в минуту. До вывода первого листа проходит некоторое время, необходимое для прогрева узла термозакрепления (от нескольких секунд до десятков секунд). На большинстве персональных принтеров (Canon и HP) используются малоинерционные узлы термозакрепления с керамическими нагревателями, не требующие прогрева, в результате чего существенно сокращается время выхода первого листа.\nСтоимость отпечатка. Наименьшая среди всех типов принтеров (единицы центов США на страницу для чёрно-белой печати и десятки — для цветной). В персональных принтерах используются относительно дорогие картриджи (рассчитанные на объём от 1,5 до 3 тысяч страниц), серьёзно повышающие стоимость отпечатка. Перезаправка картриджей позволяет снизить стоимость отпечатка, но штатная возможность перезаправки не предусматривается производителями (и даже создаются искусственные препятствия, например, в картриджи устанавливаются чипы памяти). Качество печати на перезаправленных картриджах зачастую оказывается низким из-за кажущейся простоты процесса заправки, выполненной непрофессионально. Во многих офисных принтерах среднего и высокого класса предусмотрена штатная заправка тонером, находящимся в специальных контейнерах-(тубах), именно такие принтеры имеют наименьшую цену отпечатка.\nПечать на нетрадиционных материалах. Некоторые типы принтеров могут печатать на глянцевой бумаге, конвертах, наклейках, прозрачной плёнке. Все материалы должны обладать устойчивостью к высоким температурам, иметь определённую структуру, плотность, толщину, гибкость. Все принтеры предназначены для работы со стандартной офисной бумагой с плотностью около 80 г/м². Типы любых других материалов следует использовать только из списка, рекомендованного производителем.\nУстойчивость отпечатка к внешним воздействиям. Хорошо держат цвет, водостойки, но плохо переносят трение. Поэтому документы, выдаваемые надолго (например, паспорт), печатают либо на принтерах других типов, либо очень жирным и чётким шрифтом.\nВозможная длина отпечатка. Лазерная печать — непрерывный процесс, и растровое изображение для отдельного листа должно быть полностью подготовлено в памяти до начала печати. Поэтому размер области печати обычно ограничен, а механизм подачи бумаги рассчитан на работу с пачками определённого одинакового формата (обычно А4, или А3). Широкоформатные принтеры рассчитаны на подачу бумаги из рулонов (с форматом до А0), с автоматическим отрезанием.\nШирокие форматы. Печатающий узел делается на всю ширину бумаги. Встречаются принтеры шириной 36 дюймов = 91 см.\nЭкологичность. Загрязняет воздух озоном, диоксидом азота, углекислым газом и тонером. По современным данным, тонер опасен как инертная пыль и из-за пиррола (побочного продукта при производстве сажи) [источник не указан 3992 дня]. Умеренно излучает в УФ и ИК диапазонах\nПростота обслуживания. Надёжно работает в обычных домашних и офисных условиях. О скорой замене картриджа принтер обычно «предупреждает» полосами на отпечатке. Впрочем, тонер пачкается и трудно отстирывается, поэтому не стоит в домашних условиях заправлять пустой картридж. Регулярной замены также требуют печатающий барабан (ресурс составляет порядка 10 тыс. страниц, но может снижаться при использовании некачественной бумаги, не оригинального тонера, частой печати по одной странице на задание; в наиболее дешёвых принтерах встроен в картридж), ролики автоподатчика бумаги. Содержит мощный (до 1000 Вт) электронагревательный элемент и потому не может работать от ИБП.\nОсновное применение в настоящее время. Незаменимый помощник в любой конторе. В 2000-е годы подешевели настолько, что стали доступны и домашним пользователям. Из-за качественного одноцветного изображения лазерные принтеры применяют в полиграфии для фотонабора.>>>",
            "Сравнение с другими типами<<<Качество печати — разрешение достигает 300 dpi.\nЦветопередача. Чёрно-белый либо синий.\nСкорость печати. Очень быстры, быстрее матричных и струйных принтеров.\nСтоимость отпечатка. Крайне низка, 1 м² кассовой ленты стоит примерно вдвое больше 1 м² офисной бумаги. Это дешевле лазерных отпечатков.\nПечать на нетрадиционных материалах. Печатают только на термобумаге. Выпускают также плёнки и самоклеящиеся этикетки с термопокрытием.\nУстойчивость отпечатка к внешним воздействиям. Отпечатки чернеют от трения, давления, бытовых нагревательных приборов, некоторых бытовых чистящих средств. Выцветают за несколько лет.\nВозможная длина отпечатка. Ограничивается только программным обеспечением.\nШирокие форматы. Существовали телефаксы с нагревательной линейкой по ширине А4, пока их не заменили более удобные струйные и лазерные МФУ.\nЭкологичность. Термическая печатная головка не создаёт шума, шум работающего принтера ограничен лишь шумом устройства подачи материала. Практически нет загрязнения. В термобумагу входит вредное вещество бисфенол А, относящееся к веществам 3-го класса опасности (умеренно опасные вещества, ГОСТ 12.1.007).\nПростота обслуживания. Крайне надёжны; единственный расходный материал — термобумага. В современных термопринтерах используется стационарная печатная головка на всю ширину ленты. В ранних моделях часто реализовывалась построчная печать термоголовкой, расположенной на подвижной каретке аналогично матричным и струйным принтерам.\nОсновное применение в настоящее время. Массово применяются в малоформатных и малогабаритных печатающих и регистрирующих устройствах, в том числе встраиваемых и с батарейным питанием: факсах, кассовых аппаратах, банкоматах, терминалах обслуживания, медицинских и измерительных приборах.>>>",
            "Сравнение с другими типами<<<Качество печати — 300 и более точек на дюйм.\nЦветопередача. Аналогична лазерным принтерам; только из-за другого агрегатного состояния краски цвета выходят сочнее.\nСкорость печати. Xerox сумел добиться скорости в 30…85 страниц в минуту. Однако время до первого отпечатка велико, его пытались уменьшить исследованием привычек пользователя и разными уровнями нагрева (экономный/дежурный/рабочий): принтер прогревался в дежурное состояние, когда наиболее вероятно, что начнётся печать, и из этого состояния переходил в рабочее за несколько секунд.\nСтоимость отпечатка. Дешевле даже лазерных.\nПечать на нетрадиционных материалах. Работают даже на плохой бумаге.\nУстойчивость отпечатка к внешним воздействиям. Плохо держат сгибы, изломы, трение твёрдым предметом (теряется цветопередача, но не разборчивость). Нельзя ламинировать твердокрасочный лист, допечатывать его на лазерном принтере[5].\nВозможная длина отпечатка. Твердокрасочная печать — непрерывный процесс, и длина ограничивается прошивкой принтера.\nШирокие форматы. Печатающий узел — на всю ширину бумаги. Но в больших ярких изображениях есть нужда, и самый большой принтер Tektronix — 48 дюймов = 1,22 м.\nЭкологичность. Принтер тих, в последних моделях сумели решить вопрос испарений[5]. В середине 1990-х президент Tektronix съел брикет краски, демонстрируя, что она безвредная. Высокое потребление электричества (50 Вт постоянно). Завхозу на утилизацию остаётся только пластиковая упаковка брикетов.\nПростота обслуживания. Несмотря на струйный принцип, не засоряются (нечему высыхать). Парафин при охлаждении сжимается, так что при отключении электроэнергии печатающая головка заполняется воздухом. Потому при включении принтер проводит прокачку головок, а затвердевшая порция краски идёт в отработку — так что желательно принтер держать постоянно включённым. Принтер можно дозаправлять даже во время работы. Перемещать запрещено, не запустив цикл охлаждения.\nОсновное применение в настоящее время. Во второй половине 2010-х годов Xerox снял принтеры с производства, взамен предлагая лазерные. Применялись там, где большие объёмы цветной печати перемежаются с длинными простоями (например, при печати учебных или рекламных материалов).>>>",
            "Другие принтеры[править | править код]<<<Телетайпные принтеры состояли из электромеханической части, повторяющей электрическую печатную машинку, и модема. То есть в один блок были объединены электрическая клавиатура, электромеханический литерный принтер с рычажно-сегментным литероносителем и устройство приёма и передачи информации по каналу связи. Дополнительно подключалось устройство записи и считывания перфоленты, обычно 5-рядной (5-битной).\nЭкспериментальные разработки:\nЯпонская компания PrePeat в рамках программы защиты окружающей среды выпустила принтер, не требующий для работы ни чернил, ни тонера, ни бумаги. Для печати вместо бумаги используется тонкий белый пластик. Один и тот же лист можно использовать много раз: перед повторной печатью он автоматически очищается в принтере[7].>>>",
            "В последнее время на рынке офисной техники появились принтеры, программное обеспечение которых поддерживает непосредственное подключение к Интернету (обычно через роутер), что позволяет такому принтеру функционировать независимо от компьютера. Такое подключение обеспечивает ряд дополнительных возможностей:\n<<<печать документов или веб-страниц прямо с дисплея принтера;\nпечать документов или веб-страниц с любого веб-устройства (в том числе удалённого) без необходимости установки на нём драйвера принтера;\nпросмотр состояния принтера и управление заданиями печати с помощью любого браузера вне зависимости от местонахождения;\nоперативное автоматическое обновление программного обеспечения принтера.>>>",
            "Классификация:\n<<<Термические (пьезопластические) печатные головки. Используются преимущественно в офисных струйных принтерах, используются в китайских водно-пигментных интерьерных принтерах. Отличаются простотой, дешевизной, невысокой надёжностью.\nПьезоэлектрические (пьезокерамические) печатные головки. Используются в офисных струйных принтерах, в большинстве типов струйных принтеров производственного назначения.>>>",
            "Классификация пьезоэлектрических (пьезокерамических) печатных голов:\n<<<Головки для печати водными и водно-пигментными красками.\nГоловки для сольвентной печати. Используются для печати чернилами на основе сольвента и других агрессивных растворителей. Корпус и все детали головок, предназначенных для сольвентной печати, максимально устойчивы к воздействию химически агрессивных веществ.\nГоловки для УФ-печати. В отличие от головок, предназначенных только для сольвентной печати, в большинстве случаев имеют встроенный модуль предварительного нагрева чернил (УФ-чернила при нагреве легко разжижаются). УФ-головки оборудованы двумя входами для подачи чернил в чернильную камеру и сквозной промывки чернильной камеры в случае оседания твёрдого осадка чернил (в УФ-печати часто используется белая краска, содержащая цинковый (оксид цинка) или титановый пигмент (оксид титана(IV)) или соли свинца, отличительной особенностью которых является способность давать осадок, поэтому к белому каналу как правило пристраивают рециркуляцию.>>>",
            "Условия качественной работы печатающей головки:\n<<<При печати на внешней поверхности печатающей головки не должно быть загрязнений, так как грязь может закрывать часть дюз, и вместо впрыска на материал некоторые капли будет задерживаться о препятствие. Кроме этого, прилипший к головке ворс (волосок) может смазывать невысохшую краску, оставляя грязные полосы.\nВ чернильной камере печатающей головки не должно быть пузырьков воздуха. За дегазацию отвечает фильтр. Головка, подобно любому жидкостному насосу, не способна эффективно прокачивать воздух, и пузырьки воздуха, попадая в дюзы, застревают там и дальше не прокачиваются.\nДавление на входе в печатающую головку должно быть отрицательным, небольшим. При чрезмерном отрицательном давлении головка засасывает воздух (обратно через дюзы). При малейшем положительном давлении чернил на головке сразу образуются капли. Возможность регулировки и способ регулировки отрицательного давления зависят от конструкции системы подачи чернил. На дешёвых настольных принтерах с вставными картриджами во многих случаях регулировка давления не предусмотрена.\nПечатающая головка должна быть достаточно близко к печатаемому материалу, чтобы разлёт чернильных капель был незначителен.\nНапряжение на пьезоэлементах печатающей головки должно быть достаточным для того, чтобы угол разлёта капель был минимален. Всё зависит от производителя оборудования и качества содержания и обслуживания принтера.\nНапряжение на пьезоэлементах не должно быть выше величины, при которой от чрезмерно резкого срабатывания пьезоэлементов в чернильной камере краска буквально вскипает, «завоздушивая» головку. Подобный эффект наблюдается, когда головка начинает излучать ультразвук, что свидетельствует о перегреве пьезоэлемента. В то же время, термоструйные печатающие головки работают именно на этом эффекте.>>>",
            "Чернильные насосы характеризуются:\n<<<максимальным давлением,\nскоростью перекачки чернил,\nдиапазоном рабочих напряжений,\nпотребляемой мощностью,\nстойкостью конструкции насоса к химическому воздействию различных типов чернил.>>>",
            "Фильтры характеризуются:\n<<<ресурсом,\nтонкостью очистки,\nхимической стойкостью конструктивных материалов фильтра к компонентам различных типов чернил.>>>",
            "Привод каретки струйного принтера — совокупность механизмов, предназначенных для перемещения каретки струйного принтера. Привод каретки струйного принтера состоит из:\n<<<Механизмов крепления каретки к балке, обеспечивающих свободное перемещение каретки вдоль оси балки и жёсткость при нагрузках, приложенных в других направлениях. Типичная каретка струйного принтера крепится к балке с помощью линейной рельсы и линейного подшипника (подшипников), на некоторых принтерах (например, на старых Mimaki JV2) вместо одной рельсы используется две направляющие круглого сечения. На офисных струйных принтерах используется крепление каретки на роликах или две круглые направляющие или сочетание роликов и одной круглой направляющей. Рельсовые линейные направляющие на офисных принтерах не используются из-за высокой стоимости данного типа крепления (цена одного-лишь рельсового линейного подшипника может превышать среднюю стоимость настольного принтера в несколько раз). Кроме этого, возможно крепление каретки на линейном двигателе.\nРемня привода каретки. На некоторых принтерах вместо зубчатого ремня можно обнаружить гибкую стальную ленту. Лента не имеет зубьев, создающих вибрации при вхождении в ведущую шестерню, и обеспечивает более плавное движение каретки, но в сравнении с ремнём имеет меньший ресурс, отследить расход которого невозможно, так как лента, в отличие от ремня, не начинает крошиться перед разрывом, а рвётся сразу. На некоторых принтерах каретка приводится в движение стальным тросиком, намотанным на двухсекционную катушку.\nДвигателя привода каретки. Обычно используется серводвигатель с обратной связью, либо линейный двигатель (магнитная подушка) у более дорогих производителей. На офисных принтерах часто используются обычные шаговые двигатели или редукторные двигатели.\nОчередь печати>>>",
            "Этот раздел представляет собой неупорядоченный список разнообразных фактов о предмете статьи. Пожалуйста, приведите информацию в энциклопедический вид и разнесите по соответствующим разделам статьи. Списки предпочтительно основывать на вторичных обобщающих авторитетных источниках, содержащих критерий включения элементов в список. (14 января 2024)<<<Радиолюбители успешно применяют лазерные принтеры в «лазерно-утюжной» технологии изготовления печатных плат для создания маски для травления[12]. Аналогичным образом возможно нанесение надписей или изображений, в том числе цветных, на корпусы радиоприборов и иные объёмные предметы, которые штатным образом не помещаются в принтер. Для этого зеркально отражённый текст распечатывается на вощёной бумаге и в нагретом состоянии под давлением переносится на предмет.\nЛазерные принтеры можно использовать для создания надписей и изображений на металлических поверхностях. Для этого в картридж заправляется специальный тонер, и отпечатывается зеркальное изображение либо зеркальный текст. После отпечатанный лист помещается на металлическую пластину под термопресс. Тонер под давлением и при высокой температуре химически воздействует на металл, образуя устойчивые соединения.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Принтер"
    },
    {
        "task": [
            "В общем случае систему управления можно рассматривать в виде совокупности взаимосвязанных управленческих процессов и объектов.\nОбобщенной целью автоматизации управления является повышение эффективности использования потенциальных возможностей объекта управления.\nТаким образом, можно выделить ряд целей:\n<<<Предоставление лицу, принимающему решение (ЛПР), релевантных данных для принятия решений\nУскорение выполнения отдельных операций по сбору и обработке данных\nСнижение количества решений, которые должно принимать ЛПР\nПовышение уровня контроля и исполнительской дисциплины\nПовышение оперативности управления\nСнижение затрат ЛПР на выполнение вспомогательных процессов\nПовышение степени обоснованности принимаемых решений>>>",
            "Постановка задач автоматических систем управления<<<Управление стабилизацией или регулированием. Требуется задание требуемого значения регулируемой величины.\nПрограммное управление — управление по заданной программе.\nОптимальное управление — поддержание на нулевом уровне значения производной от регулируемой величины по дополнительной координате.[1]>>>",
            "Стандарт ГОСТ 34.601-90 предусматривает следующие стадии и этапы создания автоматизированной системы:\n<<<Формирование требований к АС\nОбследование объекта и обоснование необходимости создания АС\nФормирование требований пользователя к АС\nОформление отчета о выполнении работ и заявки на разработку АС\nРазработка концепции АС\nИзучение объекта\nПроведение необходимых научно-исследовательских работ\nРазработка вариантов концепции АС и выбор варианта концепции АС, удовлетворяющего требованиям пользователей\nОформление отчета о проделанной работе\nТехническое задание\nРазработка и утверждение технического задания на создание АС\nЭскизный проект\nРазработка предварительных проектных решений по системе и её частям\nРазработка документации на АС и её части\nТехнический проект\nРазработка проектных решений по системе и её частям\nРазработка документации на АС и её части\nРазработка и оформление документации на поставку комплектующих изделий\nРазработка заданий на проектирование в смежных частях проекта\nРабочая документация\nРазработка рабочей документации на АС и её части\nРазработка и адаптация программ\nВвод в действие\nПодготовка объекта автоматизации\nПодготовка персонала\nКомплектация АС поставляемыми изделиями (программными и техническими средствами, программно-техническими комплексами, информационными изделиями)\nСтроительно-монтажные работы\nПусконаладочные работы\nПроведение предварительных испытаний\nПроведение опытной эксплуатации\nПроведение приёмочных испытаний[англ.]\nСопровождение АС.\nВыполнение работ в соответствии с гарантийными обязательствами\nПослегарантийное обслуживание>>>",
            "Основными классификационными признаками[2], определяющими вид АСУ, являются:\n<<<сфера функционирования объекта управления (промышленность, строительство, транспорт, сельское хозяйство, непромышленная сфера и т. д.)\nвид управляемого процесса (технологический, организационный, экономический и т. д.);\nуровень в системе государственного управления, включения управление народным хозяйством в соответствии с действующими схемами управления отраслями (для промышленности: отрасль (министерство), всесоюзное объединение, всесоюзное промышленное объединение, научно-производственное объединение, предприятие (организация), производство, цех, участок, технологический агрегат).>>>",
            "Функции АСУ[2] устанавливают в техническом задании на создание конкретной АСУ на основе анализа целей управления, заданных ресурсов для их достижения, ожидаемого эффекта от автоматизации и в соответствии со стандартами, распространяющимися на данный вид АСУ.\nКаждая функция АСУ реализуется совокупностью комплексов задач, отдельных задач и операций.\nФункции АСУ в общем случае включают в себя следующие элементы (действия):\n<<<планирование и прогнозирование;\nучет, контроль, анализ;\nкоординацию и регулирование.>>>",
            "Функции при формировании управляющих воздействий[править | править код]<<<Функции обработки информации (вычислительные функции) — осуществляют учет, контроль, хранение, поиск, отображение, тиражирование, преобразование формы информации;\nФункции обмена (передачи) информации — связаны с доведением выработанных управляющих воздействий до ОУ и обменом информацией с ЛПР;\nГруппа функций принятия решения (преобразование содержания информации) — создание новой информации в ходе анализа, прогнозирования или оперативного управления объектом>>>",
            "Кроме того, в таких системах можно выделить следующие группы задач, каждая из которых характеризуется соответствующими требованиями по времени реакции на события, происходящие в управляемом процессе:\n<<<задачи сбора данных с объекта управления и прямого цифрового управления (время реакции — секунды, доли секунды);\nзадачи экстремального управления, связанные с расчётами желаемых параметров управляемого процесса и требуемых значений уставок регуляторов, с логическими задачами пуска и остановки агрегатов и др. (время реакции — секунды, минуты);\nзадачи оптимизации и адаптивного управления процессами, технико-экономические задачи (время реакции — несколько секунд);\nинформационные задачи для административного управления, задачи диспетчеризации и координации в масштабах цеха, предприятия, задачи планирования и др. (время реакции — часы).>>>",
            "Виды АСУ<<<Автоматизированная система управления технологическим процессом или АСУ ТП — решает задачи оперативного управления и контроля техническими объектами в промышленности, энергетике, на транспорте.\nАвтоматизированная система управления производством (АСУ П) — решает задачи организации производства, включая основные производственные процессы, входящую и исходящую логистику. Осуществляет краткосрочное планирование выпуска с учётом производственных мощностей, анализ качества продукции, моделирование производственного процесса. Для решения этих задач применяются MIS и MES-системы, а также LIMS-системы.>>>",
            "Примеры:\n<<<Автоматизированная система управления уличным освещением («АСУ УО») — предназначена для организации автоматизации централизованного управления уличным освещением.\nАвтоматизированная система управления наружного освещения («АСУНО») — предназначена для организации автоматизации централизованного управления наружным освещением.\nАвтоматизированная система управления дорожным движением («АСУ ДД») — предназначена для управления транспортных средств и пешеходных потоков на дорожной сети города или автомагистрали.\nАвтоматизированная система управления предприятием («АСУП») — Для решения этих задач применяются MRP,MRP II и ERP-системы. В случае, если предприятием является учебное заведение, применяются системы управления обучением.\nАвтоматизированная система управления войсками («АСУВ») — предназначена для организации автоматизации централизованного управления войсками.[4]>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Автоматизированная_система_управления"
    },
    {
        "task": [
            "Выделяют два вида радиолокации:\n<<<Пассивная радиолокация основана на приёме собственного излучения объекта;\nПри активной радиолокации радар излучает свой собственный зондирующий сигнал и принимает его отражённым от цели. В зависимости от параметров принятого сигнала определяются характеристики цели.>>>",
            "Активная радиолокация с пассивным ответом<<<С активным ответом — на объекте предполагается наличие радиопередатчика (ответчика), который излучает радиоволны в ответ на принятый сигнал. Активный ответ применяется для опознавания объектов (свой-чужой), дистанционного управления, а также для получения от них дополнительной информации (например, количество топлива, тип объекта и т. д.);\nС пассивным ответом — запросный сигнал отражается от объекта и воспринимается в пункте приёма как ответный.>>>",
            "Для просмотра окружающего пространства РЛС использует различные способы обзора за счёт перемещения направленного луча антенны РЛС:\n<<<круговой;\nсекторный;\nобзор по винтовой линии;\nконический;\nпо спирали;\n«V» обзор;\nлинейный (самолёты ДРЛО типа Ан-71 и А-50 (Россия) или американские с системой Авакс).>>>",
            "В соответствии с видом излучения РЛС делятся на:\n<<<РЛС непрерывного излучения;\nИмпульсные РЛС>>>",
            "Радиолокация основана на следующих физических явлениях:\n<<<Радиоволны рассеиваются на встретившихся на пути их распространения электрических неоднородностях (объектами с другими электрическими свойствами, отличными от свойств среды распространения). При этом отражённая волна, также, как и собственно, излучение цели, позволяет обнаружить цель.\nНа больших расстояниях от источника излучения можно считать, что радиоволны распространяются прямолинейно и с постоянной скоростью, благодаря чему имеется возможность измерять дальность и угловые координаты цели (Отклонения от этих правил, справедливых только в первом приближении, изучает специальная отрасль радиотехники — Распространение радиоволн. В радиолокации эти отклонения приводят к ошибкам измерения).\nЧастота принятого сигнала отличается от частоты излучаемых колебаний при взаимном перемещении точек приёма и излучения (эффект Доплера), что позволяет измерять радиальные скорости движения цели относительно РЛС.\nПассивная радиолокация использует излучение электромагнитных волн наблюдаемыми объектами, это может быть тепловое излучение, свойственное всем объектам, активное излучение, создаваемое техническими средствами объекта, или побочное излучение, создаваемое любыми объектами с работающими электрическими устройствами.>>>",
            "Основными моментами в противостоянии с авиацией были:\n<<<Применение для скрытия самолётов и вертолётов пассивных маскирующих помех в виде распыляемых в воздухе кусочков фольги, отражающей радиоволны. Ответом на это было внедрение в радиолокаторах систем селекции движущихся целей, которая на основе доплеровского эффекта отличает движущиеся самолёты от сравнительно неподвижной фольги.\nРазвитие технологий построения самолётов и кораблей, уменьшающих мощность отражённого назад к радиолокатору сигналов, получивших название Стелс. Для этого служат и специальные поглощающие покрытия, и специальная форма, отражающая падающую радиоволну не назад, а в другом направлении.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Радиолокация"
    },
    {
        "task": [
            "Чат-боты активно используются в сфере бизнеса и маркетинга. Они позволяют:\n<<<автоматизировать определенные этапы общения с клиентами и партнерами;\nповысить степень лояльности к компании;\nполучать прямые конверсии, переводя часть элементарных задач на ботов.[7]>>>",
            "Другим вредоносным проявлением ботов является их использование для координации сетевых атак на компьютеры, например, DDoS- и DoS-атак через ботнет. Интернет-боты могут использоваться для мошенничества типа кликфрод (англ. click fraud). В последнее время стали массовыми боты, используемые в играх жанра MMORPG. Спам-боты используются для распространения по различным ресурсам сети информации (обычно рекламного содержания).\n<<<Основные вредоносные действия ботов (и ботнетов):>>>",
            "Основные вредоносные действия ботов (и ботнетов):<<<Спам-боты, собирающие адреса E-mail из контактных форм и гостевых книг;\nПрограммы, загружающие интернет-канал потоком ненужной информации (как правило, рекламного характера);\nСайты, собирающие информацию о безвредных сайтах, для использования её в автоматически создаваемых дорвеях;\nНекоторые вирусы и черви;\nDoS- и DDoS-атаки;\nБотнеты и компьютеры-зомби.>>>",
            "Спам-боты, собирающие адреса E-mail из контактных форм и гостевых книг;\nПрограммы, загружающие интернет-канал потоком ненужной информации (как правило, рекламного характера);\nСайты, собирающие информацию о безвредных сайтах, для использования её в автоматически создаваемых дорвеях;\nНекоторые вирусы и черви;\nDoS- и DDoS-атаки;\nБотнеты и компьютеры-зомби.<<<Боты используются для скупки лучших мест на концертах, авиарейсах и т. п., особенно в целях последующей перепродажи. Это позволяет ботам в кратчайшие сроки забронировать максимально допустимое системой бронирования количество мест. Таким образом, прибывающая обычная публика зачастую имеет меньше шансов приобрести билеты.\nБоты широко используются во многих онлайн-играх для фарминга игровой валюты, игровых ценностей и т. п., что ставит игровые экономики в затруднительное положение.>>>",
            "Примеры<<<Бот в компьютерных играх — компьютерный соперник, имитирующий действия «живого» игрока.\nПауки (программы, скачивающие веб-страницы для последующего индексирования) поисковых систем, другие программы, автоматически сканирующие сайты. В этом случае чаще применяется слово робот. См. также Поисковый робот.\nАвтоответчики в электронной почте, чатах. Возможности таких ботов:>>>",
            "Служебные<<<Ведение логов чата\nУчёт прав участников. Например, служба IRC ChanServ на IRC-серверах позволяет зарегистрировать канал, и снимает статус оператора со входящих незарегистрированных пользователей, автоматически выдавая статусы тем, кому это позволил с помощью специальных команд создатель канала или уполномоченные им пользователи.\nОбеспечение безопасности чата. Например, «выкидывает» пользователей, если они повторяют одно и то же много раз (защита от флуда), или по каким-то параметрам (например, имя состоит из нескольких заглавных букв, или представляет собой нецензурное выражение) похожи на «нежелательного» участника.\nОбеспечение возможности конференции между более, чем двумя пользователями, в протоколах без такой функции.>>>",
            "Информационно-развлекательные<<<Справочная — интерфейс к базе данных, в которой хранятся слова и ответы на них («фактоиды», англ. factoids). Ответов может быть несколько, тогда из них может выбираться случайный. Один из таких ботов — IRC‑бот Infobot[англ.]. Фактоиды могут создаваться как пользователями напрямую, так и автоматически, путём «подслушивания» их разговоров между собой (например, из сообщений со строкой «— это»).\nЧастный случай — словарь\nВиртуальный собеседник — имитирует общение.\nУпрощённый вариант: бот запоминает всё сказанное участниками чата (см. ведение логов), и отвечает на сообщения произвольной фразой, построенной из него с помощью цепей Маркова.\nИгры (см. IRC-игра)>>>",
            "Утилиты<<<Переводчик\nКалькулятор\nКомментатор — комментирует сказанное для удобства работы с ним. Например, при упоминании выражения «bug 123456» выводит в чат URI-ссылку на соответствующую запись в системе отслеживания ошибок, имеющей отношение к данному каналу IRC или конференции Jabber.\nПоиск указанной строки в поисковой системе и выдача, например, адреса и заголовка страницы самого верхнего результата.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Бот_(программа)"
    },
    {
        "task": [
            "Спрайты могут применяться для оптимизации графического ядра, когда отрисовка трёхмерной детализованной модели слишком накладна и может привести к сильному падению скорости рендеринга. Таковыми являются:\n<<<Объекты, присутствующие в сцене в большом количестве и которые, будучи трёхмерными, имели бы большое количество граней и очень сильно влияли бы на производительность — например, массовка на заднем плане, дым, трава и т. д.\nУдалённые объекты, которые вблизи рисуются полигональными моделями, по мере удалённости превращаются в спрайты различной детализации (LOD).>>>",
            "Изредка спрайты применяются для добавления в игру живого фото или видео. Например:\n<<<Живые актёры, например в realMyst.\nРычаги управления в симуляторах самолётов, поездов и т. д., сфотографированные в реальной кабине.>>>",
            "Терминология[править | править код]<<<Billboard — спрайт, постоянно повёрнутый лицом к камере (по аналогии с рекламными щитами на автодорогах, которые повёрнуты под наиболее выгодным углом).\nImpostor — спрайт, который заменяет трёхмерную модель на большом удалении.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Спрайт_(компьютерная_графика)"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Пользователь"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Тактовый_сигнал"
    },
    {
        "task": [
            "Пусть\n<<<\n\n\n\n\nu\n\nm\n\n\n(\nt\n)\n\n\n{\\displaystyle u_{m}(t)}\n\n — информационный (модулирующий) сигнал,\n\n\n\n\n\nu\n\nc\n\n\n(\nt\n)\n=\n\nA\n\nc\n\n\ncos\n⁡\n(\n2\nπ\n\nf\n\nc\n\n\nt\n)\n\n\n{\\displaystyle u_{c}(t)=A_{c}\\cos(2\\pi f_{c}t)}\n\n — несущий (модулируемый) сигнал (несущее колебание).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Частотная_модуляция"
    },
    {
        "task": [
            "Обозначения:\n<<<b — бит (двоичная цифра);\nd — децит (десятичная цифра);\nw — размер машинного слова;\nn — переменное значение.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Машинное_слово"
    },
    {
        "task": [
            "MIPS IV — четвёртое поколение архитектуры, представляет собой расширенную версию MIPS III и совместим со всеми существующими моделями MIPS. Первая реализация MIPS IV была представлена в 1994 году под названием R8000.\nMIPS IV включил в себя:\n<<<Простой регистр + регистр адресации для загрузки и хранения чисел с плавающей запятой\nОперации FMA и FMS одинарной и двойной точности для чисел с плавающей запятой\nКоманды условного перехода для целых чисел и для чисел с плавающей запятой\nДополнительные условные биты в регистре контроля и состояния числа с плавающей запятой: в общей сложности 8 битов.>>>",
            "Данные инструкции языка ассемблера имеют прямую аппаратную реализацию, в отличие от псевдоинструкций, которые перед сборкой транслируются в настоящие составные инструкции.\n<<<Далее регистровые буквы d, t, и s будут обозначать указатели на номера и имена регистров.\nБуква \n\n\n\nC\n\n\n{\\displaystyle C}\n\n обозначает константу.\nВсе последующие команды являются собственными.\nВсе коды операций и функций представлены в шестнадцатеричной системе счисления.\nРуководство «Набор инструкций MIPS32» предупреждает, что слово «беззнаковый (unsigned)», используемое в описании инструкций сложения и вычитания является вводящим в заблуждение. Разница между знаковыми и беззнаковыми такими инструкциями заключается лишь в генерации исключения при обнаружении переполнения (в случае команд «со знаком»), или же игнорирование переполнения для «беззнаковых» (переполнением, как понятно, здесь считается именно переполнение для чисел со знаком). Операнд константа, в соответствии с этими инструкциями, всегда должен иметь знак.>>>",
            "Стоит отметить несколько особенностей:\n<<<В коде языка ассемблера MIPS, смещение для ветвящихся инструкций может быть представлено маркировками в другом месте кода.\nВ MIPS не существует команды «копирование в регистр, начиная с первых битов» (англ. load lower immediate). Это можно сделать с помощью инструкций addi (add immediate) или ori (or immediate) c регистром $0. Например, обе команды addi $1, $0, 0xFF и ori $1, $0, 0xFF загружают в регистр $1 значение FF16. При этом, стоит отметить, что инструкция addi расширит знак константы, то есть например addi $1, $0, 0xFFFF приведет к тому, что $1 = FFFFFFFF16 = (-1)10.>>>",
            "Несколько других важных инструкций[править | править код]<<<NOP (без операции) (машинный код 0x00000000, интерпретируется процессором как sll $0, $0, 0)\nBREAK (разрывы программы, используется отладчиками)\nСистемный вызов (используется для системных вызовов операционной системы)>>>",
            "Аппаратная архитектура определяет следующие критерии:\n<<<Регистр общего назначения $0 всегда возвращает значение 0.\nРегистр общего назначения $31 используется в качестве регистра-ссылки для команд перехода и связи.\nHI и LO используются для доступа к результатам умножения/деления, доступ к которым осуществляется командами mfhi (move from high) и mflo (move from low).>>>",
            "Список процессоров на базе архитектуры MIPS по компаниям<<<Alchemy Au1000, 1100, 1200\nAtheros AR23xx, AR52xx, AR71xx, AR72xx, AR93xx\nATI Xilleon\nBroadcom Sentry5\nБайкал Электроникс Baikal-T1\nIDT RC32438\nInfineon Technologies EasyPort, Amazon, Danube, ADM5120, WildPass, INCA-IP, INCA-IP2\nIngenic JZ47, M\nGodson-3B1500\nLemote Loongson I, Loongson II, Loongson III[6]\nMicrochip Technology PIC32\nNEC EMMA and EMMA2, NEC VR4181A, VR4121, VR4122, VR4181A, VR5432, VR5500\nНИИСИ РАН KOMDIV-32, KOMDIV-64\nOak Technologies Generation\nPMC-Sierra RM11200\nRealtek RTD1055, RTD1185, RTD1186[7]\nSigma Designs SMP8640, SMP8650, SMP8910[8]\nQuickLogic QuickMIPS ESP\nRMI XLR7xx, Cavium Octeon CN30xx, CN31xx, CN36xx, CN38xx и CN5xxx\nToshiba Donau, Toshiba TMPR492x, TX4925, TX9956, TX7901.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/MIPS_(архитектура)"
    },
    {
        "task": [
            "Стандартная математическая задача оптимизации формулируется таким образом. Среди элементов χ, образующих множества Χ, найти такой элемент χ*, который доставляет минимальное значение f(χ*) заданной функции f(χ). Для того, чтобы корректно поставить задачу оптимизации, необходимо задать:\n<<<Допустимое множество — множество \n\n\n\n\nX\n\n=\n{\n\n\n\nx\n→\n\n\n\n\n|\n\n\n\ng\n\ni\n\n\n(\n\n\n\nx\n→\n\n\n\n)\n≤\n0\n,\n\ni\n=\n1\n,\n…\n,\nm\n}\n⊂\n\n\nR\n\n\nn\n\n\n\n\n{\\displaystyle \\mathbb {X} =\\{{\\vec {x}}|\\;g_{i}({\\vec {x}})\\leq 0,\\;i=1,\\ldots ,m\\}\\subset \\mathbb {R} ^{n}}\n\n;\nЦелевую функцию — отображение \n\n\n\nf\n:\n\n\nX\n\n→\n\nR\n\n\n\n{\\displaystyle f:\\;\\mathbb {X} \\to \\mathbb {R} }\n\n;\nКритерий поиска (max или min).>>>",
            "Тогда решить задачу \n\n\n\nf\n(\nx\n)\n→\n\nmin\n\n\n\n\nx\n→\n\n\n\n∈\n\nX\n\n\n\n\n\n{\\displaystyle f(x)\\to \\min _{{\\vec {x}}\\in \\mathrm {X} }}\n\n означает одно из:\n<<<Показать, что \n\n\n\n\nX\n\n=\n∅\n\n\n{\\displaystyle \\mathbb {X} =\\varnothing }\n\n.\nПоказать, что целевая функция \n\n\n\nf\n(\n\n\n\nx\n→\n\n\n\n)\n\n\n{\\displaystyle f({\\vec {x}})}\n\n не ограничена снизу.\nНайти \n\n\n\n\n\n\n\nx\n→\n\n\n\n\n∗\n\n\n∈\n\nX\n\n:\n\nf\n(\n\n\n\n\nx\n→\n\n\n\n\n∗\n\n\n)\n=\n\nmin\n\n\n\n\nx\n→\n\n\n\n∈\n\nX\n\n\n\nf\n(\n\n\n\nx\n→\n\n\n\n)\n\n\n{\\displaystyle {\\vec {x}}^{*}\\in \\mathbb {X} :\\;f({\\vec {x}}^{*})=\\min _{{\\vec {x}}\\in \\mathbb {X} }f({\\vec {x}})}\n\n.\nЕсли \n\n\n\n∄\n\n\n\n\nx\n→\n\n\n\n\n∗\n\n\n\n\n{\\displaystyle \\nexists {\\vec {x}}^{*}}\n\n, то найти \n\n\n\n\ninf\n\n\n\n\nx\n→\n\n\n\n∈\n\nX\n\n\n\nf\n(\n\n\n\nx\n→\n\n\n\n)\n\n\n{\\displaystyle \\inf _{{\\vec {x}}\\in \\mathbb {X} }f({\\vec {x}})}\n\n.>>>",
            "Методы оптимизации классифицируют в соответствии с задачами оптимизации:\n<<<Локальные методы: сходятся к какому-нибудь локальному экстремуму целевой функции. В случае унимодальной целевой функции, этот экстремум единственен, и будет глобальным максимумом/минимумом.\nГлобальные методы: имеют дело с многоэкстремальными целевыми функциями. При глобальном поиске основной задачей является выявление тенденций глобального поведения целевой функции.>>>",
            "Существующие в настоящее время методы поиска можно разбить на три большие группы:\n<<<детерминированные;\nслучайные (стохастические);\nкомбинированные.>>>",
            "По виду целевой функции и допустимого множества, задачи оптимизации и методы их решения можно разделить на следующие классы:\n<<<Задачи оптимизации, в которых целевая функция \n\n\n\nf\n(\n\n\n\nx\n→\n\n\n\n)\n\n\n{\\displaystyle f({\\vec {x}})}\n\n и ограничения \n\n\n\n\ng\n\ni\n\n\n(\n\n\n\nx\n→\n\n\n\n)\n,\n\ni\n=\n1\n,\n…\n,\nm\n\n\n{\\displaystyle g_{i}({\\vec {x}}),\\;i=1,\\ldots ,m}\n\n являются линейными функциями, разрешаются так называемыми методами линейного программирования.\nВ противном случае имеют дело с задачей нелинейного программирования и применяют соответствующие методы. В свою очередь из них выделяют две частные задачи:\nесли \n\n\n\nf\n(\n\n\n\nx\n→\n\n\n\n)\n\n\n{\\displaystyle f({\\vec {x}})}\n\n и \n\n\n\n\ng\n\ni\n\n\n(\n\n\n\nx\n→\n\n\n\n)\n,\n\ni\n=\n1\n,\n…\n,\nm\n\n\n{\\displaystyle g_{i}({\\vec {x}}),\\;i=1,\\ldots ,m}\n\n — выпуклые функции, то такую задачу называют задачей выпуклого программирования;\nесли \n\n\n\n\nX\n\n⊂\n\nZ\n\n\n\n{\\displaystyle \\mathbb {X} \\subset \\mathbb {Z} }\n\n, то имеют дело с задачей целочисленного (дискретного) программирования.>>>",
            "По требованиям к гладкости и наличию у целевой функции частных производных, их также можно разделить на:\n<<<прямые методы, требующие только вычислений целевой функции в точках приближений;\nметоды первого порядка: требуют вычисления первых частных производных функции;\nметоды второго порядка: требуют вычисления вторых частных производных, то есть гессиана целевой функции.>>>",
            "Помимо того, оптимизационные методы делятся на следующие группы:\n<<<аналитические методы (например, метод множителей Лагранжа и условия Каруша — Куна — Таккера);\nчисленные методы;\nграфические методы.>>>",
            "В зависимости от природы множества X задачи математического программирования классифицируются как:\n<<<задачи дискретного программирования (или комбинаторной оптимизации) — если X конечно или счётно;\nзадачи целочисленного программирования — если X является подмножеством множества целых чисел;\nзадачи нелинейного программирования, если ограничения или целевая функция содержат нелинейные функции и X является подмножеством конечномерного векторного пространства.\nЕсли же все ограничения и целевая функция содержат лишь линейные функции, то это — задача линейного программирования.>>>",
            "Способ нахождения экстремума полностью определяется классом задачи. Но перед тем, как получить математическую модель, нужно выполнить 4 этапа моделирования:\n<<<Определение границ системы оптимизации\nОтбрасываем те связи объекта оптимизации с внешним миром, которые не могут сильно повлиять на результат оптимизации, а, точнее, те, без которых решение упрощается\nВыбор управляемых переменных\n«Замораживаем» значения некоторых переменных (неуправляемые переменные). Другие оставляем принимать любые значения из области допустимых решений (управляемые переменные)\nОпределение ограничений на управляемые переменные\n… (равенства и/или неравенства)\nВыбор числового критерия оптимизации (например, показателя эффективности)\nСоздаём целевую функцию>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Оптимизация_(математика)"
    },
    {
        "task": [
            "Другие децентрализованные сервисы<<<Протокол децентрализованной торговли OpenBazaar.\nПлатформа для создания децентрализованных онлайн-сервисов и автономных организаций на базе блокчейна — Ethereum, в которой используются умные контракты.\nРаспределённая поисковая система YaCy.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Одноранговая_сеть"
    },
    {
        "task": [
            "Настоящий стандарт:\n<<<определяет формат информации аутентификации, хранимой справочником;\nописывает способ получения из справочника информации аутентификации;\nустанавливает предпосылки о способах формирования и размещения в справочнике информации аутентификации;\nопределяет три способа, с помощью которых прикладные программы могут использовать такую информацию аутентификации для выполнения аутентификации, и описывает, каким образом с помощью аутентификации могут быть обеспечены другие услуги защиты.>>>",
            "В любой системе аутентификации обычно можно выделить несколько элементов:\n<<<субъект, который будет проходить процедуру\nхарактеристика субъекта — отличительная черта\nхозяин системы аутентификации, несущий ответственность и контролирующий её работу\nсам механизм аутентификации, то есть принцип работы системы\nмеханизм управления доступом, предоставляющий определённые права доступа субъекту>>>",
            "Ещё до появления компьютеров использовались различные отличительные черты субъекта, его характеристики. Сейчас использование той или иной характеристики в системе зависит от требуемой надёжности, защищённости и стоимости внедрения. Выделяют 3 фактора аутентификации:\n<<<Нечто, что нам известно, например, какая-либо секретная информация. Это тайные сведения, которыми должен обладать только авторизованный субъект. Секретом может быть некая фраза или пароль, например в виде устного сообщения, текстового представления, комбинации для замка или личного идентификационного номера (PIN). Парольный механизм может быть довольно легко воплощён и имеет низкую стоимость. Но имеет существенные недостатки: сохранить пароль в тайне зачастую бывает сложно, злоумышленники постоянно придумывают новые способы кражи, взлома и подбора пароля (см. бандитский криптоанализ, метод грубой силы). Это делает парольный механизм слабозащищённым.\nНечто, чем мы обладаем, например, какой-либо уникальный физический объект. Здесь важно обстоятельство обладания субъектом каким-то неповторимым предметом. Это может быть личная печать, ключ от замка, для компьютера это файл данных, содержащих характеристику. Характеристика часто встраивается в особое устройство аутентификации, например, пластиковая карта, смарт-карта. Для злоумышленника заполучить такое устройство становится более сложно, чем взломать пароль, а субъект может сразу же сообщить в случае кражи устройства. Это делает данный метод более защищённым, чем парольный механизм, однако стоимость такой системы более высокая.\nНечто, что является неотъемлемой частью нас самих — биометрика. Характеристикой является физическая особенность субъекта. Это может быть портрет, отпечаток пальца или ладони, голос или особенность глаза. С точки зрения субъекта, данный способ является наиболее простым: не надо ни запоминать пароль, ни переносить с собой устройство аутентификации. Однако биометрическая система должна обладать высокой чувствительностью, чтобы подтверждать авторизованного пользователя, но отвергать злоумышленника со схожими биометрическими параметрами. Также стоимость такой системы довольно велика. Но, несмотря на свои недостатки, биометрика остается довольно перспективным фактором.>>>",
            "Федеральный закон от 06.04.2011 N 63-ФЗ «Об электронной подписи» (с изменениями) предусматривает следующие виды электронной подписи:\n<<<Простая электронная подпись — электронная подпись, которая посредством использования кодов, паролей или иных средств подтверждает факт формирования электронной подписи определенным лицом.\nНеквалифицированная электронная подпись — электронная подпись, которая:>>>",
            "Простая электронная подпись — электронная подпись, которая посредством использования кодов, паролей или иных средств подтверждает факт формирования электронной подписи определенным лицом.\nНеквалифицированная электронная подпись — электронная подпись, которая:<<<получена в результате криптографического преобразования информации с использованием ключа электронной подписи;\nпозволяет определить лицо, подписавшее электронный документ;\nпозволяет обнаружить факт внесения изменений в электронный документ после момента его подписания;\nсоздается с использованием средств электронной подписи.>>>",
            "получена в результате криптографического преобразования информации с использованием ключа электронной подписи;\nпозволяет определить лицо, подписавшее электронный документ;\nпозволяет обнаружить факт внесения изменений в электронный документ после момента его подписания;\nсоздается с использованием средств электронной подписи.<<<Квалифицированная электронная подпись — электронная подпись, которая соответствует всем признакам неквалифицированной электронной подписи и следующим дополнительным признакам:>>>",
            "Квалифицированная электронная подпись — электронная подпись, которая соответствует всем признакам неквалифицированной электронной подписи и следующим дополнительным признакам:<<<ключ проверки электронной подписи указан в квалифицированном сертификате;\nдля создания и проверки электронной подписи используются средства электронной подписи, получившие подтверждение соответствия требованиям, установленным в соответствии с настоящим Федеральным законом.>>>",
            "Аутентификация по паролям[править | править код]<<<Аутентификация по многоразовым паролям\nАутентификация по одноразовым паролям>>>",
            "Простая аутентификация имеет следующий общий алгоритм:\n<<<Субъект запрашивает доступ в систему и вводит личный идентификатор и пароль.\nВведённые неповторимые данные поступают на сервер аутентификации, где сравниваются с эталонными.\nПри совпадении данных с эталонными аутентификация признаётся успешной, при различии — субъект перемещается к 1-му шагу>>>",
            "Введённый субъектом пароль может передаваться в сети двумя способами:\n<<<Незашифрованно, в открытом виде, на основе протокола парольной аутентификации (Password Authentication Protocol, PAP)\nС использованием шифрования SSL или TLS. В этом случае неповторимые данные, введённые субъектом, передаются по сети защищённо.>>>",
            "Технологии использования одноразовых паролей можно разделить на:\n<<<Использование генератора псевдослучайных чисел, единого для субъекта и системы\nИспользование временных меток вместе с системой единого времени\nИспользование базы случайных паролей, единой для субъекта и для системы>>>",
            "Процедура такой аутентификации включает в себя следующие шаги:\n<<<Ввод имени пользователя и пароля\nСразу после этого PhoneFactor (служба безопасности) присылает одноразовый аутентификационный ключ в виде текстового SMS-сообщения.\nПолученный ключ используется для аутентификации>>>",
            "Наиболее используемые биометрические атрибуты и соответствующие системы[править | править код]<<<Отпечатки пальцев. Такие сканеры универсальны, относительно недороги. Биологическая повторяемость отпечатка пальца составляет 10−5 %. В настоящее время пропагандируются правоохранительными органами из-за крупных ассигнований в электронные архивы отпечатков пальцев.\nГеометрия руки. Соответствующие устройства используются, когда из-за грязи или травм трудно применять сканеры пальцев. Биологическая повторяемость геометрии руки около 2 %.\nРадужная оболочка глаза. Данные устройства обладают наивысшей точностью. Теоретическая вероятность совпадения двух радужных оболочек составляет 1 из 1078.\nТермический образ лица. Системы позволяют идентифицировать человека на расстоянии до десятков метров. В комбинации с поиском данных по базе данных такие системы используются для опознания авторизованных сотрудников и отсеивания посторонних. Однако при изменении освещенности сканеры лица имеют относительно высокий процент ошибок.\nРаспознавание по лицу. Системы на основе данного подхода позволяют идентифицировать персону в определенных условиях с погрешностью не более 3 %. В зависимости от метода позволяют идентифицировать человека на расстояниях от полуметра до нескольких десятков метров. Данный метод удобен тем, что он позволяет реализацию штатными средствами (веб-камера и т. п.). Более сложные методы требуют более модифицированые устройства. Некоторые методы обладают недостатком подмены: можно провести идентификацию подменив лицо реального человека на его фотографию.\nГолос. Проверка голоса удобна для использования в телекоммуникационных приложениях. Необходимые для этого 16-разрядная звуковая плата и конденсаторный микрофон стоят менее 25 $ (217 ₽). Вероятность ошибки составляет 2 — 5 %. Данная технология подходит для верификации по голосу по телефонным каналам связи, она более надежна по сравнению с частотным набором личного номера. Сейчас развиваются направления идентификации личности и его состояния по голосу — возбужден, болен, говорит правду, не в себе и т. д.\nВвод с клавиатуры. Здесь при вводе, например, пароля отслеживаются скорость и интервалы между нажатиями.\nПодпись. Для контроля рукописной подписи используются дигитайзеры>>>",
            "В то же время биометрическая аутентификация имеет ряд недостатков:\n<<<Биометрический шаблон сравнивается не с результатом первоначальной обработки характеристик пользователя, а с тем, что пришло к месту сравнения. За время пути может много чего произойти.\nБаза шаблонов может быть изменена злоумышленником.\nСледует учитывать разницу между применением биометрии на контролируемой территории, под бдительным оком охраны, и в «полевых» условиях, когда, например, к устройству сканирования могут поднести муляж и т. п.\nНекоторые биометрические данные человека меняются (как в результате старения, так и травм, ожогов, порезов, болезни, ампутации и т. д.), так что база шаблонов нуждается в постоянном сопровождении, а это создает определенные проблемы и для пользователей, и для администраторов.\nЕсли у Вас крадут биометрические данные или их компрометируют, то это, как правило, на всю жизнь. Пароли, при всей их ненадежности, в крайнем случае можно сменить. Палец, глаз или голос сменить нельзя, по крайней мере быстро.\nБиометрические характеристики являются уникальными идентификаторами, но их нельзя сохранить в секрете.>>>",
            "Аутентификация через географическое местоположение[править | править код]<<<Аутентификация посредством GPS\nАутентификация, основанная на местоположении выхода в интернет>>>",
            "Аутентификация пользователя на PC:\n<<<Шифрованное имя (login)\nPassword Authentication Protocol, PAP (связка логин-пароль)\nКарта доступа (USB с сертификатом, SSO)\nБиометрия (голос, отпечаток пальца/ладони/радужки глаза)>>>",
            "Аутентификация в сети:\n<<<Secure SNMP с использованием цифровой подписи\nSAML (Security Assertion Markup Language)\nCookie сессии\nKerberos Tickets\nСертификаты X.509\nOpenID Connect аутентификационная надстройка над протоколом OAuth 2.0>>>",
            "Аутентификация требуется при доступе к таким сервисам как:\n<<<электронная почта\nвеб-форум\nсоциальные сети\nинтернет-банкинг\nплатежные системы\nкорпоративные сайты\nинтернет-магазины>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Аутентификация"
    },
    {
        "task": [
            "В настоящее время получили распространение сенсорные дисплеи, они бывают нескольких видов:\n<<<Резистивные.\nПроекционно-ёмкостные.\nПоверхностно-ёмкостные.\nДисплеи на поверхностно-акустических волнах.\nСенсорно-сканирующие.>>>",
            "Применение<<<в телевизорах\nв дисплеях компьютеров, ноутбуков\nв телефонах\nв калькуляторах\nв инфокиосках\nв навигаторах\nв банкоматах и платёжных терминалах\nв уличной рекламе и шоу>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Дисплей"
    },
    {
        "task": [
            "Национальным институтом стандартов и технологий США зафиксированы следующие обязательные характеристики облачных вычислений[9]:\n<<<самообслуживание по требованию (англ. self service on demand) — потребитель самостоятельно определяет свои вычислительные потребности: серверное время, скорости доступа и обработки данных, объём хранимых данных — без взаимодействия с представителем поставщика услуг;\nуниверсальный доступ по сети — услуги доступны потребителям по сети передачи данных вне зависимости от используемого терминального устройства;\nобъединение ресурсов (англ. resource pooling) — поставщик услуг объединяет ресурсы для обслуживания большого числа потребителей в единый пул для динамического перераспределения мощностей между потребителями в условиях постоянного изменения спроса на мощности; при этом потребители управляют только основными параметрами услуги (например, объёмом данных, скоростью доступа), но фактическое распределение ресурсов, предоставляемых потребителю, осуществляет поставщик (в некоторых случаях потребители всё-таки могут управлять некоторыми физическими параметрами перераспределения, например, указывать желаемый центр обработки данных из соображений географической близости);\nэластичность — услуги могут быть предоставлены, расширены, сужены в любой момент времени, без дополнительных издержек на взаимодействие с поставщиком, как правило, в автоматическом режиме;\nучёт потребления — поставщик услуг автоматически исчисляет потреблённые ресурсы на определённом уровне абстракции (например, объём хранимых данных, пропускная способность, количество пользователей, количество транзакций) и на основе этих данных оценивает объём предоставленных потребителям услуг.>>>",
            "Облачные сервисы являются комбинацией существующих технологических решений, которые взаимно интегрированы для обеспечения максимального автоматизма и минимизации участия человека в работе комплекса. Можно выделить основные блоки, которые в первую очередь отличают «облачный» сервис от классического[источник не указан 3179 дней]:\n<<<портал самообслуживания — инструмент, посредством которого пользователь может заказать для себя заранее предопределённый сервис с потенциальным уточнением деталей конфигурации (например, в случае с IaaS, виртуальную машину, уточнив объём требуемой оперативной памяти, число процессорных ядер, размер пространства хранения), изменить параметры ранее заказанного сервиса или отказаться от него;\nкаталог услуг — список доступных пользователю услуг и связанные с каждой из них шаблоны их создания, то есть правила, по которым средства автоматизации будут данный сервис конфигурировать на реальном оборудовании и программном обеспечении;\nоркестровщик — механизм, выполняющий последовательность операций, определённых в шаблоне для каждого сервиса\nбиллинг — механизм, определяющий объём потреблённых пользователем ресурсов и соотнесение с пользователем соответствующих финансовых затрат.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Облачные_вычисления"
    },
    {
        "task": [
            "Для кодирования отсчётов в ИКМ применяются самые разнообразные двоичные коды, например:\n<<<обычное представление чисел в двоичной системе счисления, причём последовательная передача битов двоичного числа может осуществляться как младшими битами вперёд, так и старшими битами вперёд;\nразнообразные коды с обнаружением и устранением ошибок в канале передачи, например, код Хэмминга, код Рида — Соломона и др. Простейший из них — избыточный код с передачей бита чётности;\nкоды, устраняющие постоянную составляющую в кодированном импульсном двухуровневом сигнале, например, самосинхронизирующийся манчестерский код.>>>",
            "Разновидности ИКМ<<<Дифференциальная (или дельта) импульсно-кодовая модуляция (ДИКМ, DPCM) — ИКМ в сочетании с дельта-кодированием, при котором сигнал кодируется в виде разности между текущим и предыдущим измеренными значениями. Для звуковых данных такой метод модуляции уменьшает требуемое количество бит на отсчёт примерно на 25%.\nАдаптивная ДИКМ (АДИКМ, ADPCM) — разновидность ДИКМ с переменным шагом квантования. Изменение шага позволяет уменьшить требования к полосе пропускания при заданном соотношении сигнала и шума.\nLPCM (Linear pulse code modulation, линейная импульсно-кодовая модуляция)>>>",
            "Практическое применение<<<В цифровой и IP-телефонии ИКМ применяется для преобразования голосового аудиосигнала в цифровой поток, передаваемый со скоростью 64 кбит/с (основной цифровой канал).\nИКМ применяется для преобразования аналогового аудиосигнала в цифровой с целью сохранения сигнала на цифровых устройствах и носителях (цифровая звукозапись). Список некоторых распространённых форматов файлов, используемых для хранения аудио (музыки, голоса и т. п.): WAV, MP3, WMA, OGG, FLAC, APE.\nИКМ использовалась ранее в протоколах модемной связи ITU V.90 (только входящий к клиенту сигнал) и V.92 (входящий и исходящий сигнал) для обеспечения максимальной скорости соединения в 56 Кбит/с.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Импульсно-кодовая_модуляция"
    },
    {
        "task": [
            "Таблица маршрутизации может составляться двумя способами:\n<<<статическая маршрутизация — когда записи в таблице вводятся и изменяются вручную. Такой способ требует вмешательства администратора каждый раз, когда происходят изменения в топологии сети. С другой стороны, он является наиболее стабильным и требующим минимума аппаратных ресурсов маршрутизатора для обслуживания таблицы.\nдинамическая маршрутизация — когда записи в таблице обновляются автоматически при помощи одного или нескольких протоколов маршрутизации — RIP, OSPF, IGRP, EIGRP, IS-IS, BGP, и др. Кроме того, маршрутизатор строит таблицу оптимальных путей к сетям назначения на основе различных критериев — количества промежуточных узлов, пропускной способности каналов, задержки передачи данных и т. п. Критерии вычисления оптимальных маршрутов чаще всего зависят от протокола маршрутизации, а также задаются конфигурацией маршрутизатора. Такой способ построения таблицы позволяет автоматически держать таблицу маршрутизации в актуальном состоянии и вычислять оптимальные маршруты на основе текущей топологии сети. Однако динамическая маршрутизация оказывает дополнительную нагрузку на устройства, а высокая нестабильность сети может приводить к ситуациям, когда маршрутизаторы не успевают синхронизировать свои таблицы, что приводит к противоречивым сведениям о топологии сети в различных её частях и потере передаваемых данных.>>>",
            "В бытовом секторе обычно используются маршрутизаторы, обеспечивающие подключение домашней сети компьютеров к каналу связи интернет-провайдера. Как правило, при этом маршрутизатор обеспечивает IP-адресацию устройств локальной сети по протоколу DHCP, а сам получает IP-адрес от внешнего провайдера. Wi-Fi-роутеры работают в диапазоне 2,4 ГГц, 5 ГГц или 6 ГГц. Обычно современный маршрутизатор[6] имеет ряд вспомогательных функций и встроенных возможностей: беспроводная точка доступа Wi-Fi для подключения мобильных устройств, межсетевой экран для защиты сети от внешних атак, резервирование доступа в Интернет через каналы от нескольких провайдеров, веб-интерфейс для упрощения настройки устройства, USB-порт для подключения принтера или дискового хранилища, родительский контроль и другие[7][8].\n<<<\n\n\nМаршрутизатор Cisco 71\n\n\n\nМаршрутизатор Linksys\n\n\n\nМаршрутизатор Netgear DG834G с Wi-Fi интерфейсом\n\n\n\nМаршрутизатор Asus RT-N10 с интерфейсом Wi-Fi и IPTV\n\n>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Маршрутизатор"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Стек"
    },
    {
        "task": [
            "Асимметричное шифрование с открытым ключом базируется на следующих принципах:\n<<<Можно сгенерировать пару очень больших чисел (открытый ключ и закрытый ключ) так, чтобы, зная открытый ключ, нельзя было вычислить закрытый ключ за разумный срок. При этом механизм генерации является общеизвестным.\nИмеются надёжные методы шифрования, позволяющие зашифровать сообщение открытым ключом так, чтобы расшифровать его можно было только закрытым ключом. Механизм шифрования является общеизвестным.\nВладелец двух ключей никому не сообщает закрытый ключ, но передает открытый ключ контрагентам или делает его общеизвестным.>>>",
            "<<<Боб выбирает пару \n\n\n\n(\ne\n,\nd\n)\n\n\n{\\displaystyle (e,d)}\n\n и шлёт ключ шифрования \n\n\n\ne\n\n\n{\\displaystyle e}\n\n (открытый ключ) Алисе по открытому каналу, а ключ расшифрования \n\n\n\nd\n\n\n{\\displaystyle d}\n\n (закрытый ключ) защищён и секретен (он не должен передаваться по открытому каналу).\nЧтобы послать сообщение \n\n\n\nm\n\n\n{\\displaystyle m}\n\n Бобу, Алиса применяет функцию шифрования, определённую открытым ключом \n\n\n\ne\n\n\n{\\displaystyle e}\n\n: \n\n\n\n\nE\n\ne\n\n\n(\nm\n)\n=\nc\n\n\n{\\displaystyle E_{e}(m)=c}\n\n, \n\n\n\nc\n\n\n{\\displaystyle c}\n\n — полученный шифротекст.\nБоб расшифровывает шифротекст \n\n\n\nc\n\n\n{\\displaystyle c}\n\n, применяя обратное преобразование \n\n\n\n\nD\n\nd\n\n\n\n\n{\\displaystyle D_{d}}\n\n, однозначно определённое значением \n\n\n\nd\n\n\n{\\displaystyle d}\n\n.>>>",
            "Основные принципы построения криптосистем с открытым ключом<<<Начинаем с трудной задачи \n\n\n\nP\n\n\n{\\displaystyle P}\n\n. Она должна решаться сложно в смысле теории: не должно быть алгоритма, с помощью которого можно было бы перебрать все варианты решения задачи \n\n\n\nP\n\n\n{\\displaystyle P}\n\n за полиномиальное время относительно размера задачи. Более правильно сказать: не должно быть известного полиномиального алгоритма, решающего данную задачу — так как ни для одной задачи ещё пока не доказано, что для неё подходящего алгоритма нет в принципе.\nМожно выделить легкую подзадачу \n\n\n\n\nP\n′\n\n\n\n{\\displaystyle P'}\n\n из \n\n\n\nP\n\n\n{\\displaystyle P}\n\n. Она должна решаться за полиномиальное время и лучше, если за линейное.\n«Перетасовываем и взбалтываем» \n\n\n\n\nP\n′\n\n\n\n{\\displaystyle P'}\n\n, чтобы получить задачу \n\n\n\n\nP\n″\n\n\n\n{\\displaystyle P''}\n\n, совершенно не похожую на первоначальную. Задача \n\n\n\n\nP\n″\n\n\n\n{\\displaystyle P''}\n\n должна по крайней мере выглядеть как оригинальная труднорешаемая задача \n\n\n\nP\n\n\n{\\displaystyle P}\n\n.\n\n\n\n\n\nP\n″\n\n\n\n{\\displaystyle P''}\n\n открывается с описанием, как она может быть использована в роли ключа зашифрования. Как из \n\n\n\n\nP\n″\n\n\n\n{\\displaystyle P''}\n\n получить \n\n\n\n\nP\n′\n\n\n\n{\\displaystyle P'}\n\n, держится в секрете как секретная лазейка.\nКриптосистема организована так, что алгоритмы расшифрования для легального пользователя и криптоаналитика существенно различны. В то время как второй решает \n\n\n\n\nP\n″\n\n\n\n{\\displaystyle P''}\n\n-задачу, первый использует секретную лазейку и решает \n\n\n\n\nP\n′\n\n\n\n{\\displaystyle P'}\n\n-задачу.>>>",
            "Криптография с несколькими открытыми ключами<<<В следующем примере показана схема, в которой Алиса шифрует сообщение так, что только Боб может прочитать его, и наоборот, Боб шифрует сообщение так, что только Алиса может расшифровать его.>>>",
            "\n\nШифруется ключом\nРасшифровывается ключом\n\n\n\n\n\n\n\nK\n\nB\n\n\n\n\n{\\displaystyle K_{B}}\n\n и \n\n\n\n\nK\n\nC\n\n\n\n\n{\\displaystyle K_{C}}\n\n\n\n\n\n\n\nK\n\nA\n\n\n\n\n{\\displaystyle K_{A}}\n\n\n\n\n\n\n\n\n\nK\n\nA\n\n\n\n\n{\\displaystyle K_{A}}\n\n и \n\n\n\n\nK\n\nC\n\n\n\n\n{\\displaystyle K_{C}}\n\n\n\n\n\n\n\nK\n\nB\n\n\n\n\n{\\displaystyle K_{B}}\n\n\n\n\n\n\n\n\n\nK\n\nA\n\n\n\n\n{\\displaystyle K_{A}}\n\n и \n\n\n\n\nK\n\nB\n\n\n\n\n{\\displaystyle K_{B}}\n\n\n\n\n\n\n\nK\n\nC\n\n\n\n\n{\\displaystyle K_{C}}\n\n\n\n\n\n\n\n\n\nK\n\nC\n\n\n\n\n{\\displaystyle K_{C}}\n\n\n\n\n\n\n\nK\n\nA\n\n\n\n\n{\\displaystyle K_{A}}\n\n, \n\n\n\n\nK\n\nB\n\n\n\n\n{\\displaystyle K_{B}}\n\n\n\n\n\n\n\n\n\nK\n\nA\n\n\n\n\n{\\displaystyle K_{A}}\n\n\n\n\n\n\n\nK\n\nB\n\n\n\n\n{\\displaystyle K_{B}}\n\n, \n\n\n\n\nK\n\nC\n\n\n\n\n{\\displaystyle K_{C}}\n\n\n\n\n\n\n\n\n\nK\n\nB\n\n\n\n\n{\\displaystyle K_{B}}\n\n\n\n\n\n\n\nK\n\nA\n\n\n\n\n{\\displaystyle K_{A}}\n\n, \n\n\n\n\nK\n\nC\n\n\n\n\n{\\displaystyle K_{C}}\n\n\n<<<Теперь можно посылать сообщения группам агентов, не зная заранее состав группы.>>>",
            "Алгоритмы криптосистемы с открытым ключом можно использовать[7]:\n<<<как самостоятельное средство для защиты передаваемой и хранимой информации,\nкак средство распределения ключей (обычно с помощью алгоритмов криптосистем с открытым ключом распределяют ключи, малые по объёму, а саму передачу больших информационных потоков осуществляют с помощью других алгоритмов),\nкак средство аутентификации пользователей.>>>",
            "Преимущества асимметричных шифров перед симметричными:\n<<<не нужно предварительно передавать секретный ключ по надёжному каналу;\nтолько одной стороне известен ключ зашифрования, который нужно держать в секрете (в симметричной криптографии такой ключ известен обеим сторонам и должен держаться в секрете обеими);\nв больших сетях число ключей в асимметричной криптосистеме значительно меньше, чем в симметричной.>>>",
            "Недостатки алгоритма несимметричного шифрования в сравнении с симметричным:\n<<<в алгоритм сложнее внести изменения;\nболее длинные ключи — ниже приведена таблица, сопоставляющая длину ключа симметричного алгоритма с длиной ключа RSA с аналогичной криптостойкостью:>>>",
            "\n\nДлина симметричного ключа, бит\nДлина ключа RSA, бит\n\n\n56\n384\n\n\n64\n512\n\n\n80\n768\n\n\n112\n1792\n\n\n128\n2304\n<<<шифрование-расшифровывание с использованием пары ключей проходит на два-три порядка медленнее, чем шифрование-расшифрование того же текста симметричным алгоритмом;\nтребуются существенно бо́льшие вычислительные ресурсы, поэтому на практике асимметричные криптосистемы используются в сочетании с другими алгоритмами:\nдля ЭЦП сообщение предварительно подвергается хешированию, а с помощью асимметричного ключа подписывается лишь относительно небольшой результат хеш-функции;\nдля шифрования они используются в форме гибридных криптосистем, где большие объёмы данных шифруются симметричным шифром на сеансовом ключе, а с помощью асимметричного шифра передаётся только сам сеансовый ключ.>>>",
            "Виды асимметричных шифров<<<RSA (Rivest-Shamir-Adleman)\nDSA (Digital Signature Algorithm)\nElgamal (Шифросистема Эль-Гамаля)\nDiffie-Hellman (Обмен ключами Диффи — Хелмана)\nECDSA (Elliptic Curve Digital Signature Algorithm) — алгоритм с открытым ключом для создания цифровой подписи.\nГОСТ Р 34.10-2012\nRabin\nLuc\nMcEliece\nКриптосистема Уильямса>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Криптосистема_с_открытым_ключом"
    },
    {
        "task": [
            "Программно доступные регистры есть те, к которым возможно так или иначе обратиться из выполняемой программы. Практически каждый такой регистр обозначается своим именем-идентификатором на уровне языка ассемблера и соответствующим числовым кодом-идентификатором на уровне машинного языка. По уровню доступности программно доступные регистры неодинаковы и практически делятся на две большие подгруппы:\n<<<системные регистры — любые регистры, программно доступные только системным программам (например, ядру операционной системы), имеющим достаточный для этого уровень системных привилегий/прав. В терминах многих машинных систем такой уровень привилегий часто называется «уровнем/режимом ядра» или «режимом супервизора». Для всех прочих программ — работающих в «режиме пользователя» — эти регистры недоступны. Примеры таких регистров: управляющие регистры и теневые регистры дескрипторов сегментов.\nрегистры общего назначения (РОН) — регистры, доступные любым программам. В частности, регистры, используемые без ограничения в арифметических и логических операциях, но имеющие определённые аппаратные ограничения (например, в строковых РОН). Эти регистры не характерны для эпохи мейнфреймов типа IBM/370[1] и стали популярными в микропроцессорах архитектуры X86 — Intel 8085, Intel 8086 и последующих[2].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Регистр_процессора"
    },
    {
        "task": [
            "Реализована поддержка единичных типов[англ.] данных — типов, которые имеют ровно один экземпляр и не занимают места в памяти, примеры:\n<<<пустой кортеж ();\nпустой массив (напр. [u8; 0]);\nструктура без полей (напр. struct Foo);\nструктура с единичными типами (struct Foo([u8; 0], ())).>>>",
            "Числовые типы:\n<<<целое (integer): i8, u8, i16, u16, i32, u32, i64, u64, i128, u128, а также isize и usize, имеющие размер указателя на данной платформе. u8 применяется для «байтовых» значений. Примеры значений: -5i8, 0x400_u16, 0o100i16, 20_922_789_888u64, b'*' (байтовый литерал), b'\\x1b', 42 (тип этого значения будет выведен автоматически), 0xfff_fc00usize\nЧисло с плавающей запятой (float). f32, f64. Примеры: 3.14f32, 6.0221e23f64, 2.,>>>",
            "Структуры (struct):\n<<<структура си-подобная: struct Color {red: u8, green: u8, blue: u8}\nструктура-кортеж: struct Color (u8, u8, u8);\nструктура — «единичное» значение: struct Electron;>>>",
            "Коллекции:\n<<<Массив (array) [T; N] — последовательность фиксированного размера N из однотипных (типа T) элементов. Примеры: [1, 2, 3], [true; 10000].\nВектор (vec, vector) Vec<T>  — динамический/расширяемый массив. Примеры: vec![0; 10];, Vec::with_capacity(10)\nСрез (slice, view) &[T]  — это ссылка (или «проекция») на другую структуру данных. Они полезны, когда нужно обеспечить безопасный, эффективный доступ к части массива без копирования. Пример: &a[1..4],\nКортеж (tuple) (T1, T2, T3, …). Подобно структуре, содержит произвольное количество разнотипных полей, но поля безымянны, обращение к полям возможно по индексу (t.0, t.1). Кортежи — безымянные типы: кортежи с одинаковым количеством и типами полей являются совместимыми по типу. С помощью ключевого слова type можно задать псевдоним, который, однако, не задаёт нового типа. Пример: (\"Age\", 22), (\"Europe\",),\nКортеж нулевой длины ((); пустой кортеж) часто называют «единичным значением». Соответственно, тип такого значения  — «единичный тип». Если функция не возвращает значения, то считается, что она возвращает ().\nХеш-таблица «ключ — значение» (HashMap) HashMap<T1, T2> — это структура данных, реализующая интерфейс ассоциативного массива, а именно, она позволяет хранить пары (ключ, значение) и выполнять три операции: операцию добавления новой пары, операцию поиска и операцию удаления пары по ключу. Хеш-таблицы в Rust похожи на векторы, и хранят свои значения не по индексу, а по ключу. Пример: HashMap::new();\nХеш-таблица — множество (HashSet) HashSet<T> — множество уникальных значений типа T. Добавление и удаление элементов, а также поиск элементов происходит быстрее, чем в других коллекциях[каких?].>>>",
            "Строковые типы:\n<<<Строка (String) (имеет внутреннее представление данных в виде Vec<u8>) — тип, владеющий содержимым. String представляет собой строку, размещённую в куче. Эта строка расширяема, и она гарантированно является корректной последовательностью байтов с точки зрения UTF-8. String обычно создаётся путём преобразования из строкового среза с использованием метода to_string. Примеры: \"строковый срез\".to_string(), String::new().\n«Строковый срез» (string slice, string literal) &str, &'static str. Частный случай среза. Строковые срезы имеют фиксированный размер и не могут быть изменены. Они представляют собой ссылку на последовательность байтов UTF-8. Пример: \"строковый срез\". &'static str — строка, введённая символами в коде самой программы, — тот же строковый срез, только статически размещённый (сохраняемый в скомпилированной программе).\n«Сырой строковый срез» (или сырой строковый литерал), в котором не работают управляющие последовательности: r\"\\d{0,5}.*\".\n«Байтовая строка» &[u8] — строковый литерал с префиксом «b»: b\"white\".>>>",
            "Перечисление (enum): каждый вариант в перечислении в Rust может быть также связан с другими данными, благодаря чему перечисление называют также tagged union или типом-суммой. Синтаксис для объявления вариантов схож с синтаксисом для объявления структур: могут быть варианты без данных, варианты с именованными данными и варианты с безымянными данными:\n<<<вариант с «единичным» значением: enum Day {Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday}\nвариант с конкретным значением: enum Foo {Bar = 123,}.\nвариант — структура (именованные данные): enum Message {Quit, Move { x: i32, y: i32 }}.\nвариант — кортежная структура (безымянные данные): enum Message {Quit, Size(i32)}.>>>",
            "Константы:\n<<<const — постоянные. Живут в течение всего времени работы программы. А именно, у них вообще нет определённого адреса в памяти. Это потому, что они встраиваются (inline) в каждое место, где есть их использование,\nstatic — значение с возможностью изменения, имеющее время жизни 'static. Похожи на постоянные, но статические значения не встраиваются в место их использования. Это значит, что каждое значение существует в единственном экземпляре, и у него есть определённый адрес. Также может быть изменяемым, при помощи ключевого слова mut. Изменения возможны только в unsafe блоках.>>>",
            "В блоках и функциях, помеченных unsafe (unsafe с англ. — «небезопасный»), компилятор разрешает делать лишь пять дополнительных вещей:\n<<<читать и обновлять изменяемые статические (static mut) переменные;\nразыменовывать сырые указатели;\nвызывать небезопасные (unsafe) функции;\nреализовывать небезопасные типажи;\nПолучать доступ к полям union.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Rust_(язык_программирования)"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Прикладное_программное_обеспечение"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Scala_(язык_программирования)"
    },
    {
        "task": [
            "Методы обнаружения DoS-атак можно разделить на несколько больших групп:\n<<<сигнатурные — основанные на качественном анализе трафика.\nстатистические — основанные на количественном анализе трафика.\nгибридные (комбинированные) — сочетающие в себе достоинства обоих вышеназванных методов.>>>",
            "Меры противодействия DDoS-атакам можно разделить на пассивные и активные, а также на превентивные и реакционные. Ниже приведён краткий перечень основных методов.\n<<<Предотвращение. Профилактика причин, побуждающих тех или иных лиц организовывать и предпринять DDoS-атаки. (Очень часто кибератаки вообще являются следствиями личных обид, политических, религиозных и иных разногласий, неадекватного ситуации поведения жертвы и т. п.). Нужно вовремя устранить причины DDoS-атак, после этого сделать выводы, чтобы избежать таких атак в будущем.\nОтветные меры. Применяя технические и правовые меры, нужно как можно активнее воздействовать на источник и организатора DDoS-атаки. В настоящее время даже существуют специальные фирмы, которые помогают найти не только человека, который провел атаку, но даже и самого организатора.\nПрограммное обеспечение. На рынке современного программного и аппаратного обеспечения существует и такое, которое способно защитить малый и средний бизнес от слабых DDoS-атак. Эти средства обычно представляют собой небольшой сервер.\nФильтрация и блэкхолинг. Блокирование трафика, исходящего от атакующих машин. Эффективность этих методов снижается по мере приближения к объекту атаки и повышается по мере приближения к атакующей машине. В этом случае фильтрация может быть двух видов: использование межсетевых экранов и списков ACL. Использование межсетевых экранов блокирует конкретный поток трафика, но не позволяет отделить «хороший» трафик от «плохого». ACL списки фильтруют второстепенные протоколы и не затрагивают протоколы TCP. Это не замедляет скорость работы сервера, но бесполезно в том случае, если злоумышленник использует первостепенные запросы.[40]\nОбратный DDOS — перенаправление трафика, используемого для атаки, на атакующего. При достаточной мощности атакуемого сервера позволяет не только успешно отразить атаку, но и вывести из строя сервер атакующего.\nУстранение уязвимостей. Не работает против флуд-атак, для которых «уязвимостью» является конечность тех или иных системных ресурсов. Данная мера нацелена на устранение ошибок в системах и службах.\nНаращивание ресурсов. Абсолютной защиты, естественно, не дает, но является хорошим фоном для применения других видов защиты от DDoS-атак.\nРассредоточение. Построение распределённых и дублирование систем, которые не прекратят обслуживать пользователей, даже если некоторые их элементы станут недоступны из-за DoS-атаки.\nУклонение. Увод непосредственной цели атаки (доменного имени или IP-адреса) подальше от других ресурсов, которые часто также подвергаются воздействию вместе с непосредственной целью атаки.\nАктивные ответные меры. Воздействие на источники, организатора или центр управления атакой, как техногенными, так и организационно-правовыми средствами.\nИспользование оборудования для отражения DDoS-атак. Например, DefensePro® (Radware), SecureSphere® (Imperva), Периметр (МФИ Софт), Arbor Peakflow®, Riorey, Impletec iCore и от других производителей. Устройства развёртываются перед серверами и маршрутизаторами, фильтруя входящий трафик.\nПриобретение сервиса по защите от DDoS-атак. Актуально в случае превышения флудом пропускной способности сетевого канала.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/DoS-атака"
    },
    {
        "task": [
            "Также SIM-карта может хранить дополнительную информацию, например:\n<<<телефонную книжку абонента\nсписки входящих/исходящих/пропущенных телефонных звонков\nтекст входящих/исходящих SMS.>>>",
            "\nРазмеры SIM-карт\n\n\nФормат SIM-карты\n\nГод появления\n\nСтандарты\n\nДлина (мм)\n\nШирина (мм)\n\nТолщина (мм)\n\nОбъём (мм3)\n\nПоколение сотовой связи\n\n\nПолноразмерные (1FF)\n\n1991\n\nISO/IEC 7810:2003, ID-1\n\n85,60\n\n53,98\n\n0,76\n\n3511,72\n\n\nMini-SIM (2FF)\n\n1996\n\nISO/IEC 7810:2003, ID-000\n\n25,00\n\n15,00\n\n0,76\n\n285,00\n\n2G, 3G, 4G\n\n\nMicro-SIM (3FF)\n\n2003\n\nETSI TS 102 221 V9.0.0, Mini-UICC\n\n15,00\n\n12,00\n\n0,76\n\n136,80\n\n2G, 3G, 4G\n\n\nNano-SIM (4FF)\n\n2012\n\nETSI TS 102 221 V11.0.0\n\n12,30\n\n8,80\n\n0,67\n\n72,52\n\n2G, 3G, 4G\n\n\nВстроенные SIM (Embedded-SIM)\n\n2019\n\nJEDEC Design Guide 4.8, SON-8\n\n-\n\n-\n\n-\n\n\n<<<Полноразмерная SIM-карта (86×54x0,84 мм — размером с банковскую карту) — устаревший стандарт, использовался в ранних сотовых телефонах;\nMini-SIM-карта (25×15x0,76 мм) — устаревший стандарт, используется в GSM и 3G телефонах, выпущенных с 1992 года. Впервые был применён в Motorola International 3200[англ.]/3300. В настоящее время используется только в некоторых кнопочных телефонах или спецустройствах, типа трекеров;\nMicro-SIM (15×12x0,76 мм) — используется в моделях с 3G и LTE (типа Nokia N9, всех моделях устаревшей линейки Nokia Lumia, LG U880, Samsung Galaxy S III, некоторых моделях BlackBerry, например Z10, Q10, Sony Xperia, LG Nexus 5 и других)\nNano-SIM (12,3×8,8x0,67 мм) — самый широкоиспользуемый стандарт сим карты, на 2021 год. Применяется во всех современных смартфонах. Европейским институтом телекоммуникационных стандартов (ETSI) был утверждён следующий размер Nano-SIM: длина — 12,3 мм, ширина — 8,8 мм, а толщина — 0,67 мм. Официальный стандарт Nano-SIM предполагает полную совместимость с предыдущими вариантами. По существу, новая сим-карта является такой же, как и предыдущие размеры SIM, только с полностью убранными пластиковыми краями. При принятии решения эксперты посчитали, что предложение от Apple наиболее удобное и простое[1].>>>",
            "ICCID (аббр. от англ. integrated circuit card identifier) — уникальный серийный номер SIM-карты. Обычно именно этот код печатается на SIM-карте. ICCID определяется в соответствии со стандартом ITU-T E.118[9]. В соответствии с этим стандартом длина ICCID — 19 цифр (ICCID старых SIM-карт может иметь длину в 20 цифр):\n<<<Идентификационный номер эмитента (до 7 цифр):\n2 цифры — Major Industry Identifier (идентификатор индустрии, по ISO/IEC 7812-1), для SIM-карт всегда 89;\n2-3 цифры — телефонный код страны (по E.164), 701 для России, 380 для Украины и т. д.;\n1-4 цифры — код эмитента;\n11 или более цифр — определяются оператором при производстве карты по внутренним правилам;\n1 цифра (последняя) — контрольная цифра, вычисленная по алгоритму Луна от всех остальных чисел.>>>",
            "Примеры Issuer Identification Number:\n<<<Билайн: 89 7 0199\nМТС: 89 7 0101\nМегаФон: 89 7 0102\nТеле2: 89 7 0120\nVodafone UA: 89 380 01>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Сим-карта"
    },
    {
        "task": [
            "Группы однородной кабельной продукции включают кабели:\n<<<кабели силовые для стационарной прокладки на напряжение до 35 кВ включительно;\nкабели силовые для стационарной прокладки на напряжение 110 кВ и выше;\nкабели силовые для нестационарной прокладки;\nкабели связи симметричные;\nкабели связи коаксиальные;\nкабели связи телефонные;\nкабели связи телефонные распределительные;\nкабели радиочастотные;\nкабели управления;\nкабели контрольные;\nкабели оптические;\nкабели греющие (саморегулируемые, самоограничивающиеся, кабели с постоянной мощностью параллельного типа, кабели последовательного типа с полимерной изоляцией, кабели с минеральной изоляцией);\nпрочие кабельные изделия (судовые, шланговые и т. д.)[18];\nтермоэлектродные кабели и провода — для подключения термопар.>>>",
            "Также кабели разделяют по:\n<<<типу и наличию изоляции;\nтипу и наличию экрана;\nпо количеству жил;\nпо материалу жил;\nпо гибкости:\nдля подвижного соединения;\nдля неподвижного соединения.>>>",
            "Жилы в кабелях изготавливаются из следующих материалов:\n<<<для передачи электрической энергии и сигналов: медь, алюминий, сталь, серебро, золото, сплавы различных металлов, сверхпроводящие материалы;\nдля передачи оптических сигналов: стекло, пластмассы;\nдля рассеивания тепла: нихром, константан.>>>",
            "Поливинилхлоридные пластикаты, применяемые в кабельных изделиях, делятся на три основные группы:\n<<<изоляционные — имеют высокие электрические характеристики;\nшланговые — применяемые для защиты элементов кабельных изделий;\nполупроводящие — используемые для изготовления экранов[23].>>>",
            "Физическая модель загорания в металлическом коробе с крышкой:\n<<<происходит короткое замыкание в одном из кабелей, выделяется значительное количества тепла, кабель нагревается до температуры 900—1000 °C и загорается;\nпрогреваются близлежащие кабели до температур пиролиза 280—900 °C, это приводит к выделению теплоты и вовлечения в процесс горения близлежащих кабелей по мере их прогрева;\nвыделяющиеся при пиролизе газы разогревают верхнюю крышку короба, и она под действием термических напряжений деформируется и смещается, давая доступ кислороду[37].>>>",
            "В качестве альтернативы применяется:\n<<<пайка многопроволочных медных жил припоем ПОС-30 методом повива с применением флюса (канифоль, паяльный жир, стеарин) и последующим наплавлением припоя непосредственно в форму или наконечник; пайка алюминиевых жил производится с предварительным облуживанием жил припоем А;\nтермитная сварка (для соединения и оконцевания алюминиевых жил с сечением от 16 до 800 мм²), которая осуществляется при помощи термитных патронов за счёт выделяемого при их сгорании тепла. Сечение жилы кабеля напряжением до 35 кВ, оконцовываемого при помощи термитной сварки от 300 до 800 мм².>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Кабель"
    },
    {
        "task": [
            "Причины использования патчей<<<Описание изменений обычно меньше полной версии программы, пригодной для установки с нуля (за исключением большого количества изменений, например, если обновление происходит сразу через несколько версий).\nПромежуточный вариант между мелкими патчами и заменой всего сразу — патч, включающий в себя изменения, указанные в нескольких последовательных патчах за определённый период — кумулятивный патч (лат. cumulatio — «увеличение, скопление»).\nОписание изменений может включать в себя контекст, так что патч может быть применим к версиям файлов, отличающимся от тех, для которых он был создан (обычно возможно для текстовых файлов). Патч, содержащий и заменяемые данные, позволяет отменить изменения, в том числе при наличии не мешающих последующих изменений.>>>",
            "Виды патчей<<<Патчи могут распространяться в виде списка различий между двумя версиями файла или набора файлов. Такие патчи обычно используются при разработке программного обеспечения. Существуют специальные утилиты для автоматического создания и применения таких патчей (например, diff и patch; различные системы управления версиями).\nПатчи для обновления откомпилированного программного обеспечения распространяются в виде двоичных файлов, скачиваемых самой программой, либо в составе самостоятельных программ, запускаемых самим пользователем. В этом случае необходимые изменения файлов программы или их полная замена зачастую происходит автоматически, без вмешательства пользователя.>>>",
            "Коротко выполняемые патчами задачи можно описать следующими действиями:\n<<<исправление обнаруженных за время существования программы недочётов и ошибок;\nизменение или улучшение работы существующих функций;\nдобавление новых функций и возможностей;\nобеспечение совместимости с разрабатываемыми отдельно библиотеками.>>>",
            "Причинами могут быть:\n<<<уязвимости в программе, делающие её использование опасным для сервисов разработчика, компьютера пользователя или других компьютеров;\nизменения или исправления, напрямую связанные с сервисами разработчика (совместимость между установленными у всех пользователей копиями, правила игры, условия использования сервисов);\nборьба против определённых действий пользователя (например, читерства в сетевых играх или использования несвободных компонентов ПО, не одобренного правообладателем); при этом могут удаляться важные функции, например, возможность установки Unix-подобных операционных систем на игровую консоль PlayStation 3 («OtherOS»).[2]>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Патч"
    },
    {
        "task": [
            "Квантовое состояние \n\n\n\n\n|\n\nΨ\n⟩\n\n\n{\\displaystyle |\\Psi \\rangle }\n\n может изменяться во времени двумя принципиально различными путями:\n<<<Унитарная квантовая операция (квантовый вентиль, англ. quantum gate), в дальнейшем просто операция.\nИзмерение (наблюдение).>>>",
            "Если измерить только первый кубит квантовой системы, находящейся в состоянии \n\n\n\n\n|\n\nΨ\n⟩\n\n\n{\\displaystyle |\\Psi \\rangle }\n\n, получится:\n<<<с вероятностью \n\n\n\n\np\n\n0\n\n\n=\n\n|\n\na\n\n\n|\n\n\n2\n\n\n+\n\n|\n\nb\n\n\n|\n\n\n2\n\n\n\n\n{\\displaystyle p_{0}=|a|^{2}+|b|^{2}}\n\n первый кубит перейдёт в состояние \n\n\n\n\n|\n\n0\n⟩\n\n\n{\\displaystyle |0\\rangle }\n\n, а второй — в состояние \n\n\n\n\n\n\n1\n\n\n|\n\na\n\n\n|\n\n\n2\n\n\n+\n\n|\n\nb\n\n\n|\n\n\n2\n\n\n\n\n\n\n(\na\n\n\n|\n\n0\n⟩\n+\nb\n\n\n|\n\n1\n⟩\n)\n\n\n{\\displaystyle {\\tfrac {1}{\\sqrt {|a|^{2}+|b|^{2}}}}(a\\,|0\\rangle +b\\,|1\\rangle )}\n\n,\nс вероятностью \n\n\n\n\np\n\n1\n\n\n=\n\n|\n\nc\n\n\n|\n\n\n2\n\n\n+\n\n|\n\nd\n\n\n|\n\n\n2\n\n\n\n\n{\\displaystyle p_{1}=|c|^{2}+|d|^{2}}\n\n первый кубит перейдёт в состояние \n\n\n\n\n|\n\n1\n⟩\n\n\n{\\displaystyle |1\\rangle }\n\n, а второй — в состояние \n\n\n\n\n\n\n1\n\n\n|\n\nc\n\n\n|\n\n\n2\n\n\n+\n\n|\n\nd\n\n\n|\n\n\n2\n\n\n\n\n\n\n(\nc\n\n\n|\n\n0\n⟩\n+\nd\n\n\n|\n\n1\n⟩\n)\n\n\n{\\displaystyle {\\tfrac {1}{\\sqrt {|c|^{2}+|d|^{2}}}}(c\\,|0\\rangle +d\\,|1\\rangle )}\n\n.>>>",
            "Основные квантовые алгоритмы:\n<<<алгоритм Гровера: позволяет найти решение уравнения \n\n\n\nf\n(\nx\n)\n=\n1\n,\n \n0\n⩽\nx\n<\nN\n\n\n{\\displaystyle f(x)=1,\\ 0\\leqslant x<N}\n\n за время \n\n\n\nO\n(\n\n\nN\n\n\n)\n\n\n{\\displaystyle O({\\sqrt {N}})}\n\n;\nалгоритм Шора: позволяет разложить натуральное число n на простые множители за полиномиальное от log n время;\nалгоритм Залки — Визнера позволяет моделировать унитарную эволюцию квантовой системы \n\n\n\nn\n\n\n{\\displaystyle n}\n\n частиц за почти линейное время с использованием \n\n\n\nO\n(\nn\n)\n\n\n{\\displaystyle O(n)}\n\n кубитов;\nалгоритм Дойча — Йожи позволяет «за одно вычисление» определить, является ли функция двоичной переменной f(n) постоянной (f1(n) = 0, f2(n) = 1 независимо от n) или «сбалансированной» (f3(0) = 0, f3(1) = 1; f4(0) = 1, f4(1) = 0);\nалгоритм Саймона[англ.] решает проблему чёрного ящика экспоненциально быстрее, чем любой классический алгоритм, включая вероятностные алгоритмы.>>>",
            "Главные технологии для квантового компьютера:\n<<<Твердотельные квантовые точки на полупроводниках: в качестве логических кубитов используются либо зарядовые состояния (нахождение или отсутствие электрона в определённой точке), либо направление электронного и/или ядерного спина в данной квантовой точке. Управление через внешние потенциалы или лазерным импульсом.\nСверхпроводящие элементы (джозефсоновские переходы, СКВИДы и др.). В качестве логических кубитов используются присутствие/отсутствие куперовской пары в определённой пространственной области. Управление: внешний потенциал/магнитный поток.\nИоны в вакуумных ловушках Пауля[англ.] (или атомы в оптических ловушках). В качестве логических кубитов используются основное/возбуждённое состояния внешнего электрона в ионе. Управление: классические лазерные импульсы вдоль оси ловушки или направленные на индивидуальные ионы + колебательные моды ионного ансамбля. Эту схему предложили в 1994 году Петер Цоллер и Хуан Игнасио Сирак[14][26].\nСмешанные технологии: использование заранее приготовленных запутанных состояний фотонов для управления атомными ансамблями или как элементы управления классическими вычислительными сетями.\nОптические технологии: использование генерации квантовых состояний света, быстрого и перенастраиваемого управления этими состояниями и их детектирование.[27][28]>>>",
            "Основные проблемы, связанные с созданием и применением квантовых компьютеров:\n<<<необходимо обеспечить высокую точность измерений;\nвнешние воздействия (включая передачу полученных результатов) могут разрушить квантовую систему или внести в неё искажения.>>>",
            "В 2021 году группы китайских учёных под руководством Пань Цзяньвэя создали два прототипа квантовых компьютеров:\n<<<сверхпроводящий квантовый процессор «Цзу Чунчжи 2.1» с 66 кубитами;\nквантовый компьютер «Цзючжан-2.0» со 113 обнаруженными фотонами (кубитами), решающий задачу отбора проб гауссовых бозонов в септиллион раз быстрее самых производительных суперкомпьютеров[56][57].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Квантовый_компьютер"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Теория_информации"
    },
    {
        "task": [
            "\nОт каких видов атак защищает брандмауэр\nМежсетевой экран предназначен для защиты от следующих типов киберугроз:\n<<<Бэкдор-доступа.>>>",
            "Это атаки с использованием уязвимостей в установленном на ПК программном обеспечении: операционной системе, утилитах, прикладных приложениях. Такие бреши могут иметься везде, включая Windows, они позволяют хакеру получить доступ к устройству, посылать и принимать с него трафик. Брандмауэр блокирует подобные действия.\n<<<Фишинг.>>>",
            "Мошенническая схема, в ходе которой пользователь попадает на фальшивый (фишинговый) сайт, один в один копирующий известный веб-ресурс. Например, повторяет страницы входа в социальную сеть или оплаты через онлайн-банкинг. Человек вводит личные данные, и они попадают в руки злоумышленника. Файервол запрещает подключения к подозрительным сайтам.\n<<<Взлом удаленного доступа.>>>",
            "С помощью удаленного рабочего стола пользователь может управлять компьютером через интернет, т. е. дистанционно. Хакеры могут перехватить этот доступ и украсть важные данные. В задачи брандмауэра входит запрет на передачу такого трафика.\n<<<Переадресация маршрута.>>>",
            "Пакеты данных передаются по сети определенными маршрутами, а этот вид атак предполагает подмену пути следования информации таким образом, чтобы конечное устройство ничего не «заподозрило».\n<<<DDoS-атаки.>>>",
            "До сих пор не существует единой и общепризнанной классификации межсетевых экранов[9]. Однако в большинстве случаев поддерживаемый уровень сетевой модели OSI является основной характеристикой при их классификации. Учитывая данную модель, различают следующие типы межсетевых экранов[10][11]:\n<<<Управляемые коммутаторы.\nПакетные фильтры.\nШлюзы сеансового уровня.\nПосредники прикладного уровня.\nИнспекторы состояния.>>>",
            "При анализе заголовка сетевого пакета могут использоваться следующие параметры[10]:\n<<<IP-адреса источника и получателя;\nтип транспортного протокола;\nполя служебных заголовков протоколов сетевого и транспортного уровней;\nпорт источника и получателя.>>>",
            "Пакетные фильтры могут быть реализованы в следующих компонентах сетевой инфраструктуры[18]:\n<<<пограничные маршрутизаторы;\nоперационные системы;\nперсональные межсетевые экраны.>>>",
            "Каждый из вышеперечисленных типов межсетевых экранов используется для защиты корпоративных сетей и обладает рядом преимуществ. Однако, куда эффективней было бы собрать все эти преимущества в одном устройстве и получить межсетевой экран, осуществляющий фильтрацию трафика с сетевого по прикладной уровень. Данная идея была реализована в инспекторах состояний, совмещающих в себе высокую производительность и защищённость. Данный класс межсетевых экранов позволяет контролировать[27]:\n<<<каждый передаваемый пакет — на основе таблицы правил;\nкаждую сессию — на основе таблицы состояний;\nкаждое приложение — на основе разработанных посредников.>>>",
            "В настоящее время чаще используется программное решение, которое на первый взгляд выглядит более привлекательным. Это вызвано тем, что для его применения достаточно, казалось бы, всего лишь приобрести программное обеспечение межсетевого экрана и установить на любой имеющийся в организации компьютер. Однако, как показывает практика, в организации далеко не всегда находится свободный компьютер, да ещё и удовлетворяющий достаточно высоким требованиям по системным ресурсам. После того, как компьютер всё-таки найден (чаще всего — куплен), следует процесс установки и настройки операционной системы, а также, непосредственно, программного обеспечения межсетевого экрана. Нетрудно заметить, что использование обычного персонального компьютера далеко не так просто, как может показаться. Именно поэтому всё большее распространение стали получать специализированные программно-аппаратные комплексы, называемые security appliance, на основе, как правило, FreeBSD или Linux, «урезанные» для выполнения только необходимых функций. Достоинствами данных решений являются[29]:\n<<<Простота внедрения: данные устройства имеют предустановленную и настроенную операционную систему и требуют минимум настроек после внедрения в сеть.\nПростота управления: данными устройствами можно управлять откуда угодно по стандартным протоколам, таким как SNMP или Telnet, либо посредством защищённых протоколов, таких как SSH или SSL.\nПроизводительность: данные устройства работают более эффективно, так как из их операционной системы исключены все неиспользуемые сервисы.\nОтказоустойчивость и высокая доступность: данные устройства созданы выполнять конкретные задачи с высокой доступностью.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Межсетевой_экран"
    },
    {
        "task": [
            "Основные характеристики твердотельных накопителей[6]:\n<<<наименьшее время доступа к данным: от ста до тысячи раз быстрее, чем у механических дисков;\nвысокая скорость, вплоть до нескольких гигабайт в секунду для произвольно расположенных данных;\nвысокие значения IOPS благодаря высокой скорости и низкому времени доступа;\nнизкая цена производительности, лучшее соотношение цены к производительности среди всех устройств хранения;\nвысокая надёжность; SSD дают уровень сохранности данных такой же, как другие полупроводниковые устройства.>>>",
            "Этот раздел нуждается в переработке.Пожалуйста, улучшите статью в соответствии с правилами написания статей. Дополнительные сведения есть на странице обсуждения.  (27 апреля 2019)<<<1978 год — американская компания StorageTek разработала первый полупроводниковый накопитель современного типа (основанный на RAM-памяти).\n1982 год — американская компания Cray представила полупроводниковый накопитель на RAM-памяти для своих суперкомпьютеров Cray-1 со скоростью 100 Мбит/с и Cray X-MP со скоростью 320 Мбит/с, объёмом 8, 16 или 32 миллиона 64-разрядных слов[17].\n1995 год — израильская компания M-Systems представила первый полупроводниковый накопитель на flash-памяти.\n2007 год — компания ASUS выпустила нетбук EEE PC 701 с SSD-накопителем объёмом 4 ГБ.\n2008 год — южнокорейской компании Mtron Storage Technology удалось создать SSD-накопитель объёмом 128 ГБ со скоростью записи 240 МБ/с и скоростью чтения 260 МБ/с.>>>",
            "USB-накопители были отлично стандартизированы и обеспечивали работоспособность на любых устройствах с этим разъёмом. Карты памяти имели большое разнообразие несовместимых конструкций и интерфейсов. Первоначально были популярны CompactFlash, SmartMedia, Memory Stick, MMC, SD. До нашего времени высокую популярность сохранили лишь SD-карты в двух форм-факторах: стандартном и миниатюрном (microSD).\n<<<\n\n\nUSB-флешка\n\n\n\nКарты памяти CompactFlash, SD и microSD\n\n\n\nSD-карта памяти в фотоаппарате\n\n>>>",
            "Несмотря на похожий конструктив накопители M.2 SATA нельзя установить вместо M.2 NVMe и M.2 NVMe нельзя установить вместо M.2 SATA, они несовместимы друг с другом. Внешне их можно различить по количеству вырезов на контактах платы накопителя и соответствующих ключевых вставок на ответном разъёме: у M.2 SATA их два, а у M.2 NVMe — один.\n<<<\n\n\n2,5-дюймовые накопители SATA и mSATA\n\n\n\nНакопители mSATA и M.2 SATA\n\n\n\nНакопители mSATA и M.2 NVMe\n\n\n\nM.2 SATA слева, M.2 NVMe справа\n\n\n\nРазъём и крепёж накопителя M.2 NVMe на материнской плате компьютера\n\n\n\nНакопитель M.2 NVMe на материнской плате компьютера\n\n>>>",
            "К 2016 году были созданы микросхемы NAND с тремя различными по плотности хранения данных технологиями[7]:\n<<<SLC (Single Level Cell), один бит на ячейку;\nMLC (Multi Level Cell) — два бита;\nTLC (Triple Level Cell) — три бита.>>>",
            "2,5\" SSD с разъёмом U.2[34]<<<Количество произвольных операций ввода-вывода в секунду (IOPS) у SSD на порядок выше, чем у жёстких дисков, за счёт возможности одновременного запуска множества операций и более низкой латентности каждой операции (нет необходимости ожидать оборота диска перед доступом, а также ожидать наведения головки диска на нужную дорожку). Благодаря этому запуск программ и операционной системы происходит значительно быстрее.[источник не указан 500 дней]\nСкорость линейного чтения/записи выше, чем у распространённых жёстких дисков, и в ряде операций может быть близка к пропускной способности интерфейсов (SAS/SATA III 600 МБ/с). Твердотельные накопители могут реализовываться с более быстрыми интерфейсами: SATA III, PCI Express, NGFF (M.2, в вариантах с PCIe), SATA Express, NVM Express (стандарт на подключение SSD по шинам PCI Express), U.2.[источник не указан 500 дней]\nМалые габариты и вес. Для твердотельных накопителей были разработаны более компактные типовые размеры, например mSATA, U.2, NGFF (M.2)[источник не указан 500 дней].\nСтабильность времени считывания файлов вне зависимости от их расположения или фрагментации.[источник не указан 500 дней]\nОтсутствие движущихся частей, отсюда:\nполное отсутствие шума;\nвысокая механическая стойкость (кратковременно выдерживают удары с ускорением 1500 g).\nНизкое энергопотребление.\nНамного меньшая чувствительность к внешним электромагнитным полям[комм. 1].[источник не указан 1837 дней]\nПри условии использования в качестве загрузочного диска на серверах — более высокая по сравнению с HDD надёжность. Это не относится к использованию SSD в качестве хранилища данных. Это было определено в компании Backblaze[англ.], которая проанализировала поломки SSD и HDD в течение 5 лет эксплуатации. В их анализе SSD показали в три раза более низкий процент отказов при использовании носителя в качестве загрузочного. В отчёте Backblaze нет информации об отказоустойчивости дисков при частой перезаписи больших объёмов данных, также ничего нет про сохранность информации при её длительном хранении[35].>>>",
            "Недостатки<<<Главный недостаток NAND SSD — ограниченное количество циклов перезаписи. Обычная (MLC, англ. multi-level cell «многоуровневые ячейки памяти») флеш-память позволяет записывать данные примерно три-десять тысяч раз (гарантированный ресурс); в самых дешёвых накопителях (USB, SD, µSD) может использоваться ещё более плотная память типа TLC[англ.] (MLC−3) с ресурсом порядка 1000 циклов или менее. Самые дорогостоящие виды памяти (SLC, англ. single-level cell «одноуровневые ячейки памяти») — имеют порядка сотен тысяч циклов перезаписи[36]. Для борьбы с неравномерным износом в высокопроизводительных (SATA и PCIe) SSD применяются схемы балансирования нагрузки (wear leveling): контроллер хранит информацию о том, сколько раз какие блоки перезаписывались, и при необходимости производит запись в менее изношенные блоки[37]. При выработке реального ресурса банков памяти накопитель может перейти в режим «только для чтения», что позволит скопировать данные[38][39]. При ряде вариантов использования, в том числе в бытовых компьютерах, при корректно работающих алгоритмах выравнивания износа, ресурс накопителей обычно серьёзно превышает заявленный производителем гарантийный срок службы, в среднем составляющий 5 лет[40];\nСкорость записи и ресурс SSD-накопителей значительно зависят от оставшегося свободного пространства. Причина в том, что максимальную скорость записи контроллер обеспечивает за счёт записи в режиме SLC, то есть 1 бит на ячейку, при этом же и выше ресурс. При дальнейшем заполнении SSD контроллер вынужден освобождать ячейки и перезаписывать в них максимальное количество данных (3-4 бита), при этом скорость записи резко падает, накопитель изнашивается. Поэтому для повышения как ресурса, так и скорости, желательно оставлять больше свободного места. В накопителях многих компаний для снижения остроты проблемы сохраняют недоступными для пользователя часть пространства, благодаря чему скорость записи снижается меньше, причём такие теневые блоки памяти используются для замещения выработавших ресурс[41].\nSSD-накопители малоизвестных производителей (англ. noname), продаваемые на онлайн-маркетах, зачастую имеют близкий к нулю ресурс, поскольку являются изношенными майнерами (SSD используются для «плоттинга»), счётчики Smart в них обнуляют специальными программами (Drevitalize, WD Marvel и тому подобными)[42].\nцена гигабайта SSD-накопителей, несмотря на продолжающееся на протяжении многих лет быстрое снижение, всё ещё в несколько раз (6−7 для наиболее дешёвой флеш-памяти) выше цены гигабайта HDD[43] (в 2012−2015 годах: менее 0,1 $/ГБ в HDD[какой?] , от 1 до 0,5−0,4 $/ГБ в SSD[44]). Уравнивание стоимости за единицу объёма SSD и HDD прогнозируется приблизительно к 2019 году[45], к тому же стоимость SSD практически прямо пропорциональна их ёмкости, в то время как стоимость традиционных жёстких дисков зависит не только от количества пластин и медленнее растёт при увеличении объёма накопителя[46]. В то же время небольшие по объёму SSD могут быть заметно дешевле, чем жёсткие диски наименьших объёмов, в которых всегда требуется использовать точные механические системы. Это позволяет удешевлять массовые ПК, дешёвые ноутбуки и встраиваемые системы[47];\nмодели накопителей минимального объёма обычно имеют немного более низкую производительность в ряде операций за счёт меньшего параллелизма[48];\nпроизводительность накопителя зачастую может временно снижаться при записи больших объёмов данных (и исчерпании быстрого буфера записи, например участка памяти, работающего в режиме псевдо-SLC), в процессе работы «сборщика мусора» или при обращении к более медленным страницам памяти[49];\nприменение в SSD-накопителях аппаратной команды TRIM для пометки удалённой информации может сильно осложнить или сделать невозможным восстановление удалённой информации соответствующими утилитами. С другой стороны, из-за выравнивания износа нет способа гарантированно удалять отдельные файлы с SSD: возможен лишь полный сброс всего накопителя при помощи команды «ATA Secure Erase». Команда TRIM помечает блоки как свободные, а решение о моменте физического стирания информации определяется прошивкой устройства[50];\nвозможен выход из строя электронных устройств, в том числе контроллера или отдельных микросхем NAND-памяти либо пассивных компонентов. Среди некоторых моделей выходят из строя до 0,5−2 % SSD накопителей в течение первых лет эксплуатации[51]. В отличие от HDD, выход из строя является внезапным[52];\nвысокая сложность или невозможность восстановления информации после электрических повреждений. Так как контроллер и носители информации в SSD находятся на одной плате, то при превышении или значительном перепаде напряжения могут повредиться несколько микросхем, что приводит к безвозвратной потере информации. Вероятность восстановления данных существует, если повреждён лишь контроллер[53]; в жёстких дисках восстановление информации с приемлемой трудоёмкостью также возможно только при выходе из строя платы контроллера, при сохранении целостности пластин, механики и считывающего оборудования;[источник не указан 373 дня]\nнизкая реальная помехозащищённость операций чтения из ячеек памяти и наличие сбойных ячеек, особенно при изготовлении по самым современным («тонким») техпроцессам, приводит к необходимости использования в контроллерах современных моделей всё более сложных внутренних кодов исправления ошибок: ECC, код Рида — Соломона, LDPC[54][55]. В ряде дешёвых SSD внутренние ошибки кодов коррекции могут приводить к значительному увеличению латентности отдельных операций.[источник не указан 373 дня]>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Твердотельный_накопитель"
    },
    {
        "task": [
            "Существует четыре основных вида прототипов, между собой они различаются на основе сферы применения модели, для которой делается прототип:\n<<<Промышленные прототипы. Обычно они называются мастер-моделью[источник не указан 1466 дней] (например, в микроэлектронике — «инженерный образец»).\nАрхитектурные презентационные макеты города, дома или отдельной комнаты (см. архитектура).\nТранспортные — прототипы любого транспортного средства (автомобиль, корабль, самолёт и т. д.).\nТоварный прототип — модель товара, которую используют для выставок и презентаций.>>>",
            "Процесс создания прототипа состоит из четырёх шагов:\n<<<Определение начальных требований.\nРазработки первого варианта прототипа (в ПО, например, — который содержит только пользовательский интерфейс системы, см. Прототипирование программного обеспечения).\nЭтап изучения прототипа заказчиком и конечным пользователем. Получение обратной связи о необходимых изменениях и дополнениях.\nПереработка прототипа с учётом полученных замечаний и предложений.>>>",
            "Качества, которыми должен обладать эффективный прототип[источник не указан 2033 дня]:\n<<<Этап создания прототипа не должен быть затяжным.\nЭффективные прототипы являются одноразовыми. Они предназначены для того чтобы донести идею до заинтересованного лица. После того как идея была донесена, прототип может быть отвергнут.\nЭффективные прототипы являются сфокусированными, это означает что следует обращать внимание на сложные части при создании прототипов. Необходимо найти шаблонные взаимодействия, которые давно известны в теории юзабилити.\nНеобходимо обращать внимание на элементы взаимодействия, которые принесут пользу вашему продукту.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Прототипирование"
    },
    {
        "task": [
            "Обычно процесс в вычислительной системе представлен (также говорят, «владеет») следующими ресурсами:\n<<<образом исполняемого машинного кода, ассоциированного с программой;>>>",
            "образом исполняемого машинного кода, ассоциированного с программой;<<< памятью (обычно некоторой областью виртуальной памяти), которая включает в себя:\nисполняемый код;\nвходные и выходные данные процесса;\nстек вызовов (для отслеживания активных подпрограмм);\nкучу (хип) для хранения промежуточных результатов вычислений, генерируемых во время выполнения;>>>",
            " памятью (обычно некоторой областью виртуальной памяти), которая включает в себя:\nисполняемый код;\nвходные и выходные данные процесса;\nстек вызовов (для отслеживания активных подпрограмм);\nкучу (хип) для хранения промежуточных результатов вычислений, генерируемых во время выполнения;<<<дескрипторами ресурсов операционной системы, выделенными для процесса, например, файл\nфайловыми дескрипторами (в терминологии ОС Unix) или «хэндлами» (в терминологии ОС Windows);>>>",
            "дескрипторами ресурсов операционной системы, выделенными для процесса, например, файл\nфайловыми дескрипторами (в терминологии ОС Unix) или «хэндлами» (в терминологии ОС Windows);<<<атрибутами безопасности, такими как владелец и набор полномочий процесса (допустимых операций);>>>",
            "атрибутами безопасности, такими как владелец и набор полномочий процесса (допустимых операций);<<<состоянием процессора (контекстом), таким как:\nсодержимое регистров;\nсхема преобразования виртуальных адресов в физические;\nи т. д.>>>",
            "Простейшей операционной системе не требуется создание новых процессов, поскольку внутри них работает одна-единственная программа, запускаемая во время включения устройства. В более сложных системах надо создавать новые процессы. Обычно они создаются:\n<<<При запуске ОС (например, когда происходит инициализация драйверов устройств),\nПри появлении запроса на создание процесса — происходит в случае, если работающий процесс выполняет системный вызов.>>>",
            "Процесс в ОС Linux может находиться в одном из следующих состояний:\n<<<R (running/runnable) — процесс исполняется либо ожидает своей очереди исполняться;\nD — непрерываемый сон — процесс ожидает определённого события;\nS — прерываемый сон — процесс ожидает определённого события либо сигнала;\nT — остановка — процесс приостановлен, например, отладчиком;\nZ (zombie) — процесс уже завершился, но ещё не передал родительскому процессу свой код возврата.>>>",
            "Минимум 2 этапа завершения:\n<<<Процесс удаляется из всех очередей планирования, то есть ОС больше не планирует выделение каких-либо ресурсов процессу,\nСбор статистики о потреблённых процессом ресурсах с последующим удалением его из памяти.>>>",
            "Причины завершения процесса:\n<<<Обычный выход,\nВыход по исключению или ошибке,\nНедостаточный объём памяти,\nПревышение лимита отведённого программе времени,\nВыход за пределы отведённой области памяти,\nНеверная команда (данные программы интерпретируются как инструкции для процессора),\nОшибка защиты (выполнение непривилегированной команды),\nЗавершение родительского процесса,\nОшибка ввода-вывода,\nВмешательство оператора.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Процесс_(информатика)"
    },
    {
        "task": [
            "Достоинства[править | править код]<<<Эмуляция сохраняет вид, поведение и ощущение от оригинальных систем, что не менее важно, чем данные сами по себе[3].\nНесмотря на высокую изначальную стоимость создания эмулятора, со временем эмуляторы могут становиться более финансово выгодным решением[6].\nСокращает трудозатраты, так как вместо долгой и постоянно продолжающейся работы по миграции данных для каждого цифрового объекта при внесении библиотек приложений и операционных систем прошлого и настоящего в эмулятор для работы со всеми документами можно использовать одинаковые технологии[3].\nМногие эмуляторы разработаны и доступны под лицензией GNU General Public License как открытое программное обеспечение, что расширяет масштабы сотрудничества[2].\nЭмуляция позволяет использовать программное обеспечение, эксклюзивное для одной платформы, на другой платформе. Например, игры, эксклюзивные для PlayStation 2, могут быть эмулированы на ПК или Xbox One. Это особенно полезно, когда оригинальная система труднодоступна для обретения или несовместима с современным оборудованием (например, старые игровые приставки может быть технически невозможно подключить к современным телевизорам).>>>",
            "Препятствия[править | править код]<<<Интеллектуальная собственность. Многие технологические компании, чтобы занять свою нишу на рынке, применяют при разработке своих продуктов нестандартизированные функции, постоянно внедряя улучшения, чтобы продукт оставался конкурентоспособным. Хоть это и приносит пользу, насыщая рынок технологичными продуктами и увеличивая рыночную долю продукта, это создаёт существенные проблемы пользователям, занимающимся архивированием, ввиду отсутствия всей необходимой документации, так как аппаратное и программное обеспечение проприетарно по своей сути[7].\nЗаконы об авторских правах до сих пор не регламентируют защиту документации и спецификаций проприетарного оборудования и программ, встроенных в эмулятор[8].\nЭмуляция часто используется в пиратских целях, поскольку эмуляторы освобождают пользователя от необходимости покупать оригинальное устройство, например игровую консоль, и крайне редко содержат какие-либо средства противодействия использованию нелегальных копий. Это приводит к весомой неопределенности правового положения эмуляции и к тому, что в программное обеспечение закладываются средства, препятствующие его работе в случае их запуска на эмуляторе. В компьютерных играх пользователь иногда может продолжить игру, но на последующих уровнях игра может становиться невозможной, что воспринимается либо как небрежность программиста, либо как просто чрезмерная сложность[9][10]. Такая защита способствует созданию более точных эмуляторов, которые бы не вызывали срабатывание программной защиты, которая зачастую не очевидна.>>>",
            "Как правило эмулятор состоит из нескольких модулей, каждый из которых соответствует отдельной эмулируемой подсистеме оригинального устройства. В наиболее общем случае эмулятор состоит из следующих блоков:\n<<<модуль эмуляции или симуляции CPU (в данном случае термины практически равнозначны);\nмодуль эмуляции подсистемы памяти;\nмодули эмуляции различных устройств ввода-вывода.>>>",
            "Преодолеть эти ограничения помог прогресс в технике динамической компиляции. Простая трансляция эмулированного программного кода в код, выполнимый на архитектуре хоста, невозможна априори по нескольким причинам:\n<<<код может являться самомодифицирующимся, даже если модификация происходит только во время загрузки кода эмулированной операционной системой (например, с диска);\nможет не существовать надежного способа разделения данных (не транслируются) и исполняемого кода.>>>",
            "Даже в эмуляторах, рассматривающих отдельно каждое устройство, как правило присутствует следующая виртуальная инфраструктура:\n<<<управление прерываниями посредством процедуры, которая устанавливает флаги, считываемые эмулятором CPU, когда объявлено прерывание, что позволяет виртуальному CPU «опрашивать прерывания»;\nзапись и чтение физической памяти посредством двух процедур, подобных обслуживающим логическую память (однако в отличие от последнего, первые часто могут быть заменены простыми ссылками на массив памяти).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Эмуляция"
    },
    {
        "task": [
            "Кластерный анализ выполняет следующие основные задачи:\n<<<Разработка типологии или классификации.\nИсследование полезных концептуальных схем группирования объектов.\nПорождение гипотез на основе исследования данных.\nПроверка гипотез или исследования для определения, действительно ли типы (группы), выделенные тем или иным способом, присутствуют в имеющихся данных.>>>",
            "Независимо от предмета изучения применение кластерного анализа предполагает следующие этапы:\n<<<Отбор выборки для кластеризации. Подразумевается, что имеет смысл кластеризовать только количественные данные.\nОпределение множества переменных, по которым будут оцениваться объекты в выборке, то есть признакового пространства.\nВычисление значений той или иной меры сходства (или различия) между объектами.\nПрименение метода кластерного анализа для создания групп сходных объектов.\nПроверка достоверности результатов кластерного решения.>>>",
            "Типы входных данных[править | править код]<<<Признаковое описание объектов. Каждый объект описывается набором своих характеристик, называемых признаками. Признаки могут быть числовыми или нечисловыми.\nМатрица расстояний между объектами. Каждый объект описывается расстояниями до всех остальных объектов метрического пространства.\nМатрица сходства между объектами[8]. Учитывается степень сходства объекта с другими объектами выборки в метрическом пространстве. Сходство здесь дополняет расстояние (различие) между объектами до 1.>>>",
            "Цели кластеризации[править | править код]<<<Понимание данных путём выявления кластерной структуры. Разбиение выборки на группы схожих объектов позволяет упростить дальнейшую обработку данных и принятия решений, применяя к каждому кластеру свой метод анализа (стратегия «разделяй и властвуй»).\nСжатие данных. Если исходная выборка избыточно большая, то можно сократить её, оставив по одному наиболее типичному представителю от каждого кластера.\nОбнаружение новизны (англ. novelty detection). Выделяются нетипичные объекты, которые не удаётся присоединить ни к одному из кластеров.>>>",
            "Общепринятой классификации методов кластеризации не существует, но можно выделить ряд групп подходов (некоторые методы можно отнести сразу к нескольким группам и потому предлагается рассматривать данную типизацию как некоторое приближение к реальной классификации методов кластеризации)[9]:\n<<<Вероятностный подход. Предполагается, что каждый рассматриваемый объект относится к одному из k классов. Некоторые авторы (например, А. И. Орлов) считают, что данная группа вовсе не относится к кластеризации и противопоставляют её под названием «дискриминация», то есть выбор отнесения объектов к одной из известных групп (обучающих выборок).\nK-средних\nК-медиан\nEM-алгоритм\nАлгоритмы семейства FOREL\nДискриминантный анализ\nПодходы на основе систем искусственного интеллекта: весьма условная группа, так как методов очень много и методически они весьма различны.\nМетод нечеткой кластеризации C-средних (C-means)\nНейронная сеть Кохонена\nГенетический алгоритм\nЛогический подход. Построение дендрограммы осуществляется с помощью дерева решений.\nТеоретико-графовый подход.\nГрафовые алгоритмы кластеризации\nИерархический подход. Предполагается наличие вложенных групп (кластеров различного порядка). Алгоритмы в свою очередь подразделяются на агломеративные (объединительные) и дивизивные (разделяющие). По количеству признаков иногда выделяют монотетические и политетические методы классификации.\nИерархическая дивизивная кластеризация или таксономия. Задачи кластеризации рассматриваются в количественной таксономии.\nДругие методы. Не вошедшие в предыдущие группы.\nСтатистические алгоритмы кластеризации\nАнсамбль кластеризаторов\nАлгоритмы семейства KRAB\nАлгоритм, основанный на методе просеивания\nDBSCAN и др.>>>",
            "Решение задачи кластеризации принципиально неоднозначно, и тому есть несколько причин (как считает ряд авторов):\n<<<не существует однозначно наилучшего критерия качества кластеризации. Известен целый ряд эвристических критериев, а также ряд алгоритмов, не имеющих чётко выраженного критерия, но осуществляющих достаточно разумную кластеризацию «по построению». Все они могут давать разные результаты. Следовательно, для определения качества кластеризации требуется эксперт предметной области, который бы мог оценить осмысленность выделения кластеров.\nчисло кластеров, как правило, неизвестно заранее и устанавливается в соответствии с некоторым субъективным критерием. Это справедливо только для методов дискриминации, так как в методах кластеризации выделение кластеров идёт за счёт формализованного подхода на основе мер близости.\nрезультат кластеризации существенно зависит от метрики, выбор которой, как правило, также субъективен и определяется экспертом. Но есть ряд рекомендаций по выбору мер близости для различных задач.>>>",
            "Проверить адекватность решения, не прибегая к помощи другого вида анализа, нельзя. По крайней мере, в теоретическом плане эта проблема не решена. В классической работе Олдендерфера и Блэшфилда «Кластерный анализ» подробно рассматриваются и в итоге отвергаются дополнительные пять методов проверки устойчивости:\n<<<кофенетическая корреляция — не рекомендуется и ограничена в использовании;\nтесты значимости (дисперсионный анализ) — всегда дают значимый результат;\nметодика повторных (случайных) выборок, что, тем не менее, не доказывает обоснованность решения;\nтесты значимости для внешних признаков пригодны только для повторных измерений;\nметоды Монте-Карло очень сложны и доступны только опытным математикам[источник не указан 4255 дней].>>>",
            "В информатике[править | править код]<<<Кластеризация результатов поиска — используется для «интеллектуальной» группировки результатов при поиске файлов, веб-сайтов, других объектов, предоставляя пользователю возможность быстрой навигации, выбора заведомо более релевантного подмножества и исключения заведомо менее релевантного — что может повысить юзабилити интерфейса по сравнению с выводом в виде простого сортированного по релевантности списка.\nClusty — кластеризующая поисковая машина компании Vivísimo\nNigma — российская поисковая система с автоматической кластеризацией результатов\nQuintura — визуальная кластеризация в виде облака ключевых слов\nСегментация изображений (англ. image segmentation) — кластеризация может быть использована для разбиения цифрового изображения на отдельные области с целью обнаружения границ (англ. edge detection) или распознавания объектов.\nИнтеллектуальный анализ данных (англ. data mining) — кластеризация в Data Mining приобретает ценность тогда, когда она выступает одним из этапов анализа данных, построения законченного аналитического решения. Аналитику часто легче выделить группы схожих объектов, изучить их особенности и построить для каждой группы отдельную модель, чем создавать одну общую модель для всех данных. Таким приемом постоянно пользуются в маркетинге, выделяя группы клиентов, покупателей, товаров и разрабатывая для каждой из них отдельную стратегию.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Кластерный_анализ"
    },
    {
        "task": [
            "Разновидности<<<sh — оригинальный шелл Борна; dash, bash, zsh — другие современные клоны Bourne shell (расположены по возрастанию функциональности).\nksh (KornShell) — клон шелла Борна, разработанный Дэвидом Корном из AT&T Labs. Синтаксис совместим, функциональность интерактивности увеличена[1].\npdksh (public domain ksh) — открытая (почти целиком является общественным достоянием[2]) реализация ksh.\nbash (bourne again shell) (эмуляция совместимости POSIX[1]) расширенная Борном свободная (разработанная в рамках проекта GNU) оболочка ash, сходная с pdksh. Стандартная оболочка в Linux.\nC shell — (несовместима с POSIX shell) оболочка, с синтаксисом на основе Си, созданная Университетом Беркли в рамках проекта по реализации BSD Unix.\ncsh (C-Shell) — оболочка из состава дистрибутива BSD, имеет Си-образный синтаксис и не является POSIX-совместимой. Впервые введены возможности управления заданиями и произведены другие улучшения.\ntcsh (csh) — реализация csh с интерактивными возможностями, не уступающими bash[1]. Удобна для интерактивной работы. Совместима с csh.\nash (Almquist shell, оболочка Альмквиста), BusyBox — современные микроверсии, предназначенные для встраиваемых систем, а также используемые в мини-дистрибутивах[неизвестный термин].\nxsh (Xiki shell, от executable wiki) — новая командная оболочка, совмещающая командный и графический режимы работы\nfish (Friendly Interactive SHell) — (несовместима с POSIX) командная оболочка, отличительными особенностями которой являются продвинутое автодополнение и подсветка синтаксиса \"из коробки\", а также упрощённый язык скриптов>>>",
            "sh является удобным и часто используемым интерпретируемым языком программирования. Он содержит стандартные конструкции для циклов, ветвления, объявления функций и т. п. Данный язык часто используется в UNIX-подобных системах при создании различных сценариев (скриптов) работы, в частности, сценариев автоматического конфигурирования исходных кодов программ перед их компиляцией. Отличительная особенность языка sh — многие операции, которые в традиционных языках программирования являются встроенными, выполняются с помощью вызова внешних программ. Так, например:\n<<<expr используется для вычисления арифметических выражений;\ntest используется для сравнения чисел и строк, а также для определения наличия или атрибутов файлов;\nsed, tr, awk, head, tail, cut и другие — для работы с текстом.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Командная_оболочка_Unix"
    },
    {
        "task": [
            "Типовые элементы интерфейса<<<аккордеон (accordion)\nкнопка (button)\nсдвоенная кнопка (split button) — кнопка, вызывающая список со вторичным(и) действием(и) (кнопками)\nрадиокнопка (radio button)\nфлаговая кнопка (check box)\nкнопка-переключатель (toggle button) — может находиться в одном из двух состояний: активна или неактивна\nзначок (иконка, icon)\nсписок (list box)\nдерево — иерархический список (tree view)\nраскрывающийся список (combo box, drop-down list)\nметка (label)\nполе редактирования (textbox, edit field)\nэлемент для отображения табличных данных (grid view)\nменю (menu)\nглавное меню окна (main menu или menu bar)\nконтекстное меню (popup menu)\nниспадающее меню (pull down menu)\nокно (window)\nдиалоговое окно (dialog box)\nмодальное окно (modal window)\nпанель (panel)\nвкладка (tab)\nпанель инструментов (toolbar)\nполоса прокрутки (scrollbar)\nползунок (slider)\nстрока состояния (status bar)\nвсплывающая подсказка (tooltip, hint)>>>",
            "Встречаются и другие элементы управления, которые могут не входить в некоторые наборы:\n<<<Радиальное меню (pie menu или radial menu) — кольцевое меню вокруг курсора. Выбор пункта меню осуществляется движением курсора в направлении пункта меню.\nКнопка последовательного выбора — элемент, значение в котором выбирается последовательным нажатием мыши по нему. В отличие от раскрывающегося списка, такая кнопка не позволяет видеть другие значения, кроме выбранного.\nСчётчик — двунаправленный вариант для числовых значений. Нажатие на кнопку позволяет изменить значение параметра на единицу в большую или меньшую сторону.\nHeads-up display — отображение поверх всех элементов значения каких-то параметров либо важных сообщений.\nПузырь — подсказка наподобие филактера в комиксах, которая указывает на элемент — источник сообщения.\nВалкодер — вращающийся элемент управления наподобие ручки настройки во многих радиоприёмниках. Может быть как одно-, так и многооборотным.\nСкрываемый виджет — элемент, позволяющий скрыть часть элементов управления, когда они не используются.\nИндикатор уровня (Level Indicator) — элемент для индикации значения какой-либо величины. Иногда вместо него используется индикатор процесса, но некоторые руководства (к примеру, HIG от Apple[4]) запрещают подобную практику.>>>",
            "В каждой оконной системе существует свой набор «родных» элементов с интерфейсом низкого уровня для работы с ними. \nОдни библиотеки элементов управления — это высокоуровневые «обёртки» к имеющимся стандартным виджетам, упрощающие работу с ними и расширяющие их функциональность. \nДругие предоставляют свой единый программный интерфейс для программирования интерфейса пользователя в нескольких платформах или оконных системах и с целью обеспечения кроссплатформенности приводят их к единому для всех платформ API. \nТретьи предоставляют кроссплатформенные возможности за счёт собственной, платформонезависимой, реализации элементов управления.\n<<<Кроссплатформенные, на основе Java\nStandard Widget Toolkit — в составе проекта Eclipse\nSwing — разработка Sun, компонента Java Foundation Classes (JFC) на основе AWT\nAWT — частично устаревший Abstract Windowing Toolkit (Sun, 1995)\nJavaFX — платформа для разработки RIA на Java>>>",
            "Кроссплатформенные, на основе Java\nStandard Widget Toolkit — в составе проекта Eclipse\nSwing — разработка Sun, компонента Java Foundation Classes (JFC) на основе AWT\nAWT — частично устаревший Abstract Windowing Toolkit (Sun, 1995)\nJavaFX — платформа для разработки RIA на Java<<<Кроссплатформенные, на основе C/C++, с возможностью использования в других языках\nTk\nGTK+\nQt\nwxWidgets (wxWindows)\nIUP\nFOX toolkit\nFLTK>>>",
            "Кроссплатформенные, на основе C/C++, с возможностью использования в других языках\nTk\nGTK+\nQt\nwxWidgets (wxWindows)\nIUP\nFOX toolkit\nFLTK<<<Кроссплатформенные, на основе Pascal\nLCL\nCLX — адаптация интерфейса Qt[источник не указан 4501 день] для Borland Delphi & Kylix>>>",
            "Кроссплатформенные, на основе Pascal\nLCL\nCLX — адаптация интерфейса Qt[источник не указан 4501 день] для Borland Delphi & Kylix<<<Кроссплатформенные, на основе AJAX\nDojo\nExtJS\nYAHOO User Interface library\nПод AmigaOS\nIntuition\nReaction\nMUI (Magic User Interface)>>>",
            "Кроссплатформенные, на основе AJAX\nDojo\nExtJS\nYAHOO User Interface library\nПод AmigaOS\nIntuition\nReaction\nMUI (Magic User Interface)<<<Под AROS\nZune>>>",
            "Под AROS\nZune<<<Под DOS\nTurbo Vision — в составе Borland Turbo Pascal 6.0/7.0, текстовый интерфейс\nZinc — библиотека для Borland C++>>>",
            "Под DOS\nTurbo Vision — в составе Borland Turbo Pascal 6.0/7.0, текстовый интерфейс\nZinc — библиотека для Borland C++<<<Под Microsoft Windows\nWindows API\nMicrosoft Foundation Classes\nWindows Template Library\nObject Windows Library (Borland Pascal 7.0, графический интерфейс)\nVisual Component Library (Borland Delphi)\nWindows Forms\nWindows Presentation Foundation (или Avalon)>>>",
            "Под Microsoft Windows\nWindows API\nMicrosoft Foundation Classes\nWindows Template Library\nObject Windows Library (Borland Pascal 7.0, графический интерфейс)\nVisual Component Library (Borland Delphi)\nWindows Forms\nWindows Presentation Foundation (или Avalon)<<<Под Unix — для X Window System\nXlib\nXt\nXaw\nMotif (Open Motif, LessTif)>>>",
            "Под Unix — для X Window System\nXlib\nXt\nXaw\nMotif (Open Motif, LessTif)<<<Под BREW\nBUIW>>>",
            "Под BREW\nBUIW<<<Графический интерфейс для игр\nMyGUI\nGWEN\nCEGUI>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Элемент_интерфейса"
    },
    {
        "task": [
            "Все задачи вычислительной математики решаются в следующей последовательности[3]:\n<<<Исходная математическая задача заменяется другой задачей — вычислительным алгоритмом. Основными требованиями к вычислительному алгоритму являются: высокая точность, устойчивость и экономичность. При переходе к дискретной модели появляется погрешность аппроксимации, а при реализации вычислений — погрешность округления, поэтому для реальных вычислительных алгоритмов проводится анализ погрешностей и устойчивости вычислительного алгоритма[2]. В современной науке для решения задач прикладной математики формулируется математическая модель в терминах интегральных и дифференциальных уравнений функций непрерывного аргумента. Переход от континуальной к дискретной математической модели осуществляется заменой функций непрерывного аргумента функциями дискретного аргумента. В получившихся конечно-разностных уравнениях интеграл и производная представлены конечной суммой и разностным отношением, соответственно[2]. Получившаяся модель представляет собой систему алгебраических уравнений, для решения которой с определённой точностью составляется вычислительный алгоритм, который реализуется на вычислительных машинах[2][4]. При решении больших систем необходимо вычислять собственные значения и вектора матриц, сводить нелинейные системы уравнений к линейным. Для некоторых задач (нейронная физика, физика плазмы, экономика) модель строится непосредственно на статистической выборке или на крупных объектах. Кроме того, строятся нерегулярные системы, для которых численные методы сочетаются с теорией графов. Отдельный класс представляют некорректно поставленные задачи[2].\nВычислительный алгоритм содержит параметр \n\n\n\nN\n\n\n{\\displaystyle N}\n\n, которого нет в исходной задаче;\nВыбором этого параметра \n\n\n\nN\n\n\n{\\displaystyle N}\n\n можно добиться любой близости решения второй задачи к решению первой. Для многих важных классов задач разработаны разнообразные численные методы решения. По способу дискретизации численные методы делятся на проекционные и конечно-разностные, по способу решения — на прямые и итерационные. В методах конечных разностей ставится задача определить значения функции на дискретном множестве точек, в то время как в проекционных методах функция представлена линейной комбинацией элементов. При этом дискретная функция также может рассматриваться как линейная комбинация полиномов. Прямые методы решения обладают слабой устойчивостью, в то время как итерационные методы более устойчивы и обеспечивают быструю сходимость[2].\nНеточная реализация алгоритма, вызванная округлениями при вычислениях, не меняет существенно его свойств. Необходимо помнить, что вычислительная машина выполняет только четыре основных арифметических операции[5]. Точность решения при этом должна быть несколько выше ожидаемой точности физического эксперимента[6]. При определении критериев и условий роста погрешности долгое время не принималась во внимание погрешность округления. Необходимость гарантированных оценок точности реальных вычислений привела к возникновению интервального анализа. Оптимальным алгоритмом считается алгоритм с минимальной погрешностью или с минимальным числом операций при заданной погрешности. При этом разрабатывается теория параллельных вычислительных алгоритмов[2].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Численные_методы"
    },
    {
        "task": [
            "Чипсет материнских плат современных компьютеров состоит из двух основных микросхем (иногда объединяемых в один чип, т. н. системный контроллер-концентратор (англ. System Controller Hub, SCH)):\n<<<контроллер-концентратор памяти (англ. Memory Controller Hub, MCH[3][4]) или северный мост (англ. northbridge) — обеспечивает взаимодействие ЦП с памятью. Соединяется с ЦП высокоскоростной шиной (FSB, HyperTransport или QPI). В современных ЦП (например, Opteron, Itanium, Nehalem, UltraSPARC T1) контроллер памяти может быть интегрирован непосредственно в ЦП. В MCH некоторых чипсетов может интегрироваться графический процессор[5];\nконтроллер-концентратор ввода-вывода (англ. I/O Controller Hub, ICH[6]) или южный мост (англ. southbridge) — обеспечивает взаимодействие между ЦП и жестким диском, картами PCI, низкоскоростными интерфейсами PCI Express, интерфейсами IDE, SATA, USB и пр.>>>",
            "Список основных производителей чипсетов для архитектуры x86:\n<<<Intel: (см. Список чипсетов Intel)\nNVidia: (см. Список чипсетов NVidia[англ.])\nATI/AMD: (см. Список чипсетов ATI[англ.], после покупки в 2006 году компании ATi корпорацией AMD, вошла в её состав как графическое подразделение AMD Graphics Products Group; также см. Список чипсетов AMD)\nVIA: (см. Список чипсетов VIA[англ.])\nSiS: (см. Чипсеты SiS)>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Чипсет"
    },
    {
        "task": [
            "По исполнению[править | править код]<<<внешние — подключаются через COM-, LPT-, USB- или Ethernet-порт, обычно имеют отдельный блок питания (существуют и USB-модемы с питанием от шины USB).\nвнутренние — дополнительно устанавливаются внутрь системного блока или ноутбука (в слот ISA, PCI, PCI-E, PCMCIA, AMR/CNR).\nвстроенные — являются частью устройства, куда встроены (материнской платы, ноутбука или док-станции).>>>",
            "По принципу работы[править | править код]<<<аппаратные — все операции преобразования сигнала, поддержка физических протоколов обмена производятся встроенным в модем вычислителем (например, с использованием DSP или микроконтроллера). Также в аппаратном модеме присутствует ПЗУ, в котором записана микропрограмма, управляющая модемом.\nмодемы без ПЗУ — работают полностью аппаратно, однако в начале работы драйвер должен загрузить микропрограмму в модем.[2]\nполупрограммные (модем с упрощённым контроллером, controller based soft-modem) — модемы, в которых часть функций модема выполняет компьютер, к которому подключён модем. Например, модуляцией и демодуляцией занимается аппаратура модема, а поддержкой высокоуровневых протоколов — драйвер.[2]\nпрограммные (софт-модемы, модемы без контроллера, host based soft-modem) — все операции по кодированию сигнала, контролю ошибок и управлению протоколами реализованы программно и производятся центральным процессором компьютера. В модеме находятся только входные/выходные аналоговые цепи и его значение и преобразователи (ЦАП и АЦП), а также контроллер интерфейса (например, USB).[2]>>>",
            "По типу сети и соединения[править | править код]<<<Модемы для телефонных линий:\nМодемы для коммутируемых телефонных линий — наиболее распространённый в XX веке и 2000-х годах тип модемов. Используют коммутируемый удалённый доступ.\nISDN — модемы для цифровых коммутируемых телефонных линий.\nDSL — используются для организации выделенных (некоммутируемых) линий средствами обычной телефонной сети. Отличаются от коммутируемых модемов тем, что используют другой частотный диапазон, а также тем, что по телефонным линиям сигнал передаётся только до АТС. Обычно позволяют одновременно с обменом данными осуществлять использование телефонной линии для переговоров.\nКабельные модемы — используются для обмена данными по специализированным кабелям — к примеру, через кабель коллективного телевидения по протоколу DOCSIS.\nРадиомодемы — работают в радиодиапазоне, используют собственные наборы частот и протоколы:\nБеспроводные модемы — работают по протоколам сотовой связи (GPRS, EDGE, 3G, LTE) или Wi-Fi. Часто имеют исполнения в виде USB-брелока. В качестве таких модемов также часто используют терминалы мобильной связи.\nСпутниковые модемы — используются для передачи данных через радиоканал с ретрансляцией через искусственные спутники Земли.\nPowerLine-модемы (стандарт HomePlug) — используют технологию передачи данных по проводам бытовой электрической сети.>>>",
            "Плата модема Acorp Sprinter@ADSL LAN120M<<<Порты ввода-вывода — схемы, предназначенные для обмена данными между телефонной линией и модемом с одной стороны, и модемом и компьютером — с другой. Для взаимодействия с аналоговой телефонной линией зачастую используется трансформатор.\nСигнальный процессор (Digital Signal Processor, DSP) Обычно модулирует исходящие сигналы и демодулирует входящие на цифровом уровне в соответствии с используемым протоколом передачи данных. Может также выполнять другие функции.\nКонтроллер управляет обменом с компьютером.\nМикросхемы памяти:\nROM — энергонезависимая память, в которой хранится микропрограмма управления модемом — прошивка, которая включает в себя наборы команд и данных для управления модемом, все поддерживаемые коммуникационные протоколы и интерфейс с компьютером. Обновление прошивки модема доступно в большинстве современных моделей, для чего служит специальная процедура, описанная в руководстве пользователя. Для обеспечения возможности перепрошивки для хранения микропрограмм применяется флэш-память (EEPROM). Флэш-память позволяет легко обновлять микропрограмму модема, исправляя ошибки разработчиков и расширяя возможности устройства. В некоторых моделях внешних модемов она так же используется для записи входящих голосовых и факсимильных сообщений при выключенном компьютере.\nNVRAM — энергонезависимая электрически перепрограммируемая память, в которой хранятся настройки модема (профиль модема)[3]. Пользователь может изменять установки, например, используя набор AT-команд.\nRAM — оперативная память модема, используется для буферизации принимаемых и передаваемых данных, работы алгоритмов сжатия и прочего.>>>",
            "Голосовой модем — с функцией оцифровки сигнала с телефонной линии и воспроизведения произвольного звука в линию. Часть голосовых модемов имеет встроенный микрофон.\nТакой модем позволяет осуществить:\n<<<передачу голосовых сообщений в режиме реального времени на другой удалённый голосовой модем, приём сообщений от него и воспроизведение их через внутренний динамик;\nиспользование в режиме автоответчика и для организации голосовой почты.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Модем"
    },
    {
        "task": [
            "Эволюционная биология исследует происхождение и появление видов, также как их развитие с течением времени. Информатика помогает эволюционным биологам в нескольких аспектах:\n<<<изучать эволюцию большого числа организмов, измеряя изменения в их ДНК, а не только в строении или физиологии;\nсравнивать целые геномы (см. BLAST), что позволяет изучать более комплексные эволюционные события, такие как: дупликация генов, горизонтальный перенос генов, и предсказывать бактериальные специализирующие факторы;\nстроить компьютерные модели популяций, чтобы предсказать поведение системы во времени;\nотслеживать появление публикаций, содержащих информацию о большом количестве видов.>>>",
            "Основные биоинформатические программы[править | править код]<<<ACT (Artemis Comparison Tool) — геномный анализ\nArlequin — анализ популяционно-генетических данных\nBioconductor — масштабный FLOSS-проект, предоставляющий множество отдельных пакетов для биоинформатических исследований. Написан на R.\nBioEdit — редактор множественного выравнивания нуклеотидных и аминокислотных последовательностей\nBioNumerics — коммерческий универсальный пакет программ\nBLAST — поиск родственных последовательностей в базе данных нуклеотидных и аминокислотных последовательностей\nClustal — множественное выравнивание нуклеотидных и аминокислотных последовательностей\nDnaSP — анализ полиморфизма последовательностей ДНК\nFigTree — редактор филогенетических деревьев\nGenepop — популяционно-генетический анализ\nGenetix — популяционно-генетический анализ (программа доступна только на французском языке)\nJalView — редактор множественного выравнивания нуклеотидных и аминокислотных последовательностей\nMacClade — коммерческая программа для интерактивного эволюционного анализа данных\nMEGA — молекулярно-эволюционный генетический анализ\nMesquite — программа для сравнительной биологии на языке Java\nMuscle — множественное сравнение нуклеотидных и аминокислотных последовательностей. Более быстрая и точная по сравнению с ClustalW\nPAUP — филогенетический анализ с использованием метода парсимонии (и других методов)\nPHYLIP — пакет филогенетических программ\nPhylo_win — филогенетический анализ. Программа имеет графический интерфейс.\nPopGene — анализ генетического разнообразия популяций\nPopulations — популяционно-генетический анализ\nPSI Protein Classifier — обобщение результатов, полученных с помощью программы PSI-BLAST\nSeaview — филогенетический анализ (с графическим интерфейсом)\nSequin — депонирование последовательностей в GenBank, EMBL, DDBJ\nSPAdes — сборщик бактериальных геномов\nSplitsTree — программа для построения филогенетических деревьев\nT-Coffee — множественное прогрессивное выравнивание нуклеотидных и аминокислотных последовательностей. Более чувствительное, чем в ClustalW/ClustalX.\nUGENE — свободный русскоязычный инструмент, множественное выравнивание нуклеотидных и аминокислотных последовательностей, филогенетический анализ, аннотирование, работа с базами данных.\nVelvet — сборщик геномов\nZENBU — обобщение результатов>>>",
            "К структурной биоинформатике относится разработка алгоритмов и программ для предсказания пространственной структуры белков. Темы исследований в структурной биоинформатике:\n<<<Рентгеноструктурный анализ (РСА) макромолекул\nИндикаторы качества модели макромолекулы, построенной по данным РСА\nАлгоритмы вычисления поверхности макромолекулы\nАлгоритмы нахождения гидрофобного ядра молекулы белка\nАлгоритмы нахождения структурных доменов белков\nПространственное выравнивание структур белков\nСтруктурные классификации доменов SCOP и CATH\nМолекулярная динамика>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Биоинформатика"
    },
    {
        "task": [
            "Стандарты<<<Web Services for Remote Portlets (WSRP) — сетевой протокольный стандарт для связи с удаленными портлетами\nJSR 168 (Java Portlet Definition Standard) определяет контракт между портлетами и контейнером портлетов и предоставляет удобную программную модель разработчикам портлетов>>>",
            "Источники<<<Интернет-портал, Корпоративный портал, Горизонтальный портал, Вертикальный портал>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Веб-портал"
    },
    {
        "task": [
            "Алгоритм работы простого интерпретатора<<<прочитать инструкцию;\nпроанализировать инструкцию и определить соответствующие действия;\nвыполнить соответствующие действия;\nесли не достигнуто условие завершения программы, прочитать следующую инструкцию и перейти к пункту 2.>>>",
            "Достоинства[править | править код]<<<Большая переносимость интерпретируемых программ — программа будет работать на любой платформе, на которой реализован соответствующий интерпретатор.\nКак правило, более совершенные и наглядные средства диагностики ошибок в исходных кодах.\nМеньшие размеры кода по сравнению с машинным кодом, полученным после обычных компиляторов.>>>",
            "Недостатки[править | править код]<<<Интерпретируемая программа не может выполняться отдельно без программы-интерпретатора. Сам интерпретатор при этом может быть очень компактным.\nИнтерпретируемая программа выполняется медленнее, поскольку промежуточный анализ исходного кода и планирование его выполнения требуют дополнительного времени в сравнении с непосредственным исполнением машинного кода, в который мог бы быть скомпилирован исходный код.\nПрактически отсутствует оптимизация кода, что приводит к дополнительным потерям в скорости работы интерпретируемых программ.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Интерпретатор"
    },
    {
        "task": [
            "Стиль этого раздела неэнциклопедичен или нарушает нормы литературного русского языка. Статью следует исправить согласно стилистическим правилам Википедии.<<<Среднее время наработки на отказ. Время наработки на отказ современных мейнфреймов оценивается в 12-15 лет. Надёжность мейнфреймов — это результат их почти 60-летнего совершенствования. Группа разработки операционной системы VM/ESA затратила 20 лет на удаление ошибок, и в результате была создана система, которую можно использовать в самых ответственных случаях.\nПовышенная устойчивость систем. Мейнфреймы могут изолировать и исправлять большинство аппаратных и программных ошибок за счёт использования следующих принципов:\nДублирование: два резервных процессора, резервные модули памяти, альтернативные пути доступа к периферийным устройствам.\nГорячая замена всех элементов вплоть до каналов, плат памяти и центральных процессоров.\nЦелостность данных. В мейнфреймах используется память с коррекцией ошибок. Ошибки не приводят к разрушению данных в памяти или данных, ожидающих вывода на внешние устройства. Дисковые подсистемы, построенные на основе RAID-массивов с горячей заменой и встроенных средств резервного копирования, защищают от потерь данных.\nРабочая нагрузка. Рабочая нагрузка мейнфреймов может составлять 80-95 % от их пиковой производительности. Операционная система мейнфрейма будет обрабатывать всё сразу, причём все приложения будут тесно сотрудничать и использовать общие компоненты ПО.\nПропускная способность. Подсистемы ввода-вывода мейнфреймов разработаны так, чтобы работать в среде с высочайшей рабочей нагрузкой на ввод-вывод данных.\nМасштабирование. Масштабирование мейнфреймов может быть как вертикальным, так и горизонтальным. Вертикальное масштабирование обеспечивается линейкой процессоров с производительностью от 5 до 200 MIPS и наращиванием до 12 центральных процессоров в одном компьютере. Горизонтальное масштабирование реализуется объединением ЭВМ в Sysplex (System Complex) — многомашинный кластер, выглядящий с точки зрения пользователя единым компьютером. Всего в Sysplex можно объединить до 32 машин. Географически распределённый Sysplex называют GDPS. В случае использования операционной системы VM для совместной работы можно объединить любое количество компьютеров. Программное масштабирование — на одном мейнфрейме может быть сконфигурировано фактически бесконечное число различных серверов. Причём все серверы могут быть изолированы друг от друга так, как будто они выполняются на отдельных выделенных компьютерах и в то же время совместно использовать аппаратные и программные ресурсы и данные.\nДоступ к данным. Поскольку данные хранятся на одном сервере, прикладные программы не нуждаются в сборе исходной информации из множества источников, не требуется дополнительное дисковое пространство для их временного хранения, не возникает сомнений в их актуальности. Требуется небольшое количество физических серверов и значительно более простое программное обеспечение. Всё это, в совокупности, ведёт к повышению скорости и эффективности обработки.\nЗащита. Встроенные в аппаратуру возможности защиты, такие как криптографические устройства и Logical Partition, и средства защиты операционных систем, дополненные программными продуктами RACF или VM:SECURE, обеспечивают надёжную защиту.\nПользовательский интерфейс. Пользовательский интерфейс у мейнфреймов всегда оставался наиболее слабым местом. Сейчас же стало возможно для прикладных программ мейнфреймов в кратчайшие сроки и при минимальных затратах обеспечить современный веб-интерфейс.\nСохранение инвестиций — использование данных и существующих прикладных программ не влечёт дополнительных расходов на приобретение нового программного обеспечения для другой платформы, переучивание персонала, перенос данных и т. д.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Мейнфрейм"
    },
    {
        "task": [
            "По природе носителя:\n<<<вещественно-предметные (книги, письма, археологические и палеонтологические находки, аппаратные запоминающие устройства);\nбиохимические (ДНК, РНК и т. п.).>>>",
            "По основному назначению:\n<<<общего (широкого) назначения (например, бумага);\nспециализированные (например, предназначенные только для цифровой записи).>>>",
            "По количеству циклов записи:\n<<<для однократной записи;\nдля многократной записи.>>>",
            "По долговечности:\n<<<для долговременного хранения (прекращение выполнения функции носителя обусловлено случайными обстоятельствами);\nдля кратковременного хранения (прекращение функции обусловлено процессами закономерными, приводящими к неизбежной деградации носителя).>>>",
            "Основные материалы<<<бумага: перфолента, перфокарта, листы, свитки (устар.).\nпластик: бирки, оптические диски\nмагнитные материалы: ленты и диски\nполупроводники: различные типы полупроводниковой памяти>>>",
            "Для внесения изменений в структуру материала носителя используются различные виды воздействия:\n<<<механическое (резьба, сверление, шитьё);\nтермическое (выжигание);\nэлектрическое (электрические сигналы);\nхимическое (нанесение краски, травление и т. п.);>>>",
            "К электронным носителям относят носители для однократной или многократной записи (обычно цифровой) электрическим способом:\n<<<оптические (CD-ROM, DVD-ROM, Blu-ray Disc);\nполупроводниковые (флеш-память, SSD-диски);\nмагнитные (магнитные ленты, дискеты, жёсткие диски).>>>",
            "Электронные носители имеют значительные преимущества перед бумажными (листами, газетами, журналами):\n<<<по объёму (размеру) хранимой информации;\nпо удельной стоимости хранения;\nпо экономичности и оперативности предоставления актуальной (предназначенной для недолговременного хранения) информации;\nпо возможности предоставления информации в виде, удобном потребителю (форматирование, сортировка);\nкардинальное ускорение поиска файлов и данных, полностью изменившее подход к документообороту. Ведь если информация есть, но её невозможно найти (например, время поиска превышает разумные пределы), то это эквивалентно тому, что этой информации нет.>>>",
            "Недостатки:\n<<<низкое разрешение экрана, в некоторых случаях;\nхрупкость устройств считывания;\nвес (масса), в некоторых случаях;\nзависимость от источников электропитания;\nнеобходимость наличия устройства считывания/записи для каждого типа и формата носителя.\nМожет в неожиданный момент сломаться>>>",
            "Устройство хранения информации состоит из следующих элементов:\n<<<носитель информации;\nзаписывающее устройство — механизмы, выполняющие запись информации на носитель;\nсчитывающее устройство (устройство считывания) — механизмы, выполняющие считывание информации с носителя.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Носитель_информации"
    },
    {
        "task": [
            "Являясь технологией построения массово-распределённых баз данных, блокчейн испытывает ряд специфических проблем, которые затрудняют его использование. Среди этих проблем можно назвать следующие:\n<<<постоянный рост размера файлов блокчейна[30]\nограничения пропускной способности каналов связи между узлами сети и сложности синхронизации отдельных реплик, связанные с этим ограничением[31]\nобщее ограничение производительности блокчейна, связанное со спецификой работы алгоритмов консенсуса[32].>>>",
            "Разработка новых видов блокчейна зачастую связана с преодолением или обходом этих проблем и ограничений. При этом есть ряд функций, без которых не может обойтись ни одна система блокчейна:\n<<<Данные сохраняются в структуре из цепочки блоков, в которой каждый блок связан с предыдущим. Изменение информации в блоке невозможно без внесения изменений во все последующие блоки.\nУ каждого участника сети есть копия всех данных (всей цепочки блоков). Участники взаимодействуют между собой в одноранговом формате (peer-to-peer).\nУстановлен механизм консенсуса — определённое взаимодействие узлов, обеспечивающее достижение согласия о правильности информации, записываемой в очередной блок цепочки и выбора включаемого в цепочку блока из нескольких возможных альтернатив.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Блокчейн"
    },
    {
        "task": [
            "Архитектурный вид состоит из двух компонентов:\n<<<Элементы\nОтношения между элементами>>>",
            "Архитектурные виды можно поделить на три основных типа[10]:\n<<<Модульные виды (module views) — показывают систему как структуру из программных блоков.\nКомпоненты-и-коннекторы (component-and-connector views) — показывают систему как структуру из параллельно запущенных элементов (компонентов) и способов их взаимодействия (коннекторов).\nРазмещение (allocation views) — показывает размещение элементов системы во внешних средах.>>>",
            "Примеры модульных видов:\n<<<Декомпозиция (decomposition view) — состоит из модулей в контексте отношения «является подмодулем».\nИспользование (uses view) — состоит из модулей в контексте отношения «использует» (то есть один модуль использует сервисы другого модуля).\nВид уровней (layered view) — показывает структуру, в которой связанные по функциональности модули объединены в группы (уровни).\nВид классов/обобщений (class/generalization view) — состоит из классов, связанные через отношения «наследуется от» и «является экземпляром».>>>",
            "Примеры видов компонентов-и-коннекторов:\n<<<Процессный вид (process view) — состоит из процессов, соединённых операциями коммуникации, синхронизации и/или исключения.\nПараллельный вид (concurrency view) — состоит из компонентов и коннекторов, где коннекторы представляют собой «логические потоки».\nВид обмена данными (shared-data (repository) view) — состоит из компонентов и коннекторов, которые создают, сохраняют и получают постоянные данные.\nВид клиент-сервер (client-server view) — состоит из взаимодействующих клиентов и серверов, а также коннекторов между ними (например, протоколов и общих сообщений).>>>",
            "Примеры видов размещения:\n<<<Развертывание (deployment view) — состоит из программных элементов, их размещения на физических носителях и коммуникационных элементов.\nВнедрение (implementation view) — состоит из программных элементов и их соответствия файловым структурам в различных средах (разработческой, интеграционной и т. д.).\nРаспределение работы (work assignment view) — состоит из модулей и описания того, кто ответственен за внедрение каждого из них.>>>",
            "Примеры архитектурных шаблонов:\n<<<Многоуровневый шаблон (Layered pattern). Система разбивается на уровни, которые на диаграмме изображаются один над другим. Каждый уровень может вызывать только уровень на один ниже его. Таким образом, разработку каждого уровня можно вести относительно независимо, что повышает модифицируемость системы. Однако при таком подходе сложность системы возрастает, а её производительность снижается.\nШаблон посредника (Broker pattern). Когда в системе присутствует большое количество модулей, их прямое взаимодействие друг с другом становится слишком сложным. Для решения проблемы вводится посредник (например, шина данных), по которой модули общаются друг с другом. Таким образом, повышается функциональная совместимость модулей системы. Все недостатки вытекают из наличия посредника: он понижает производительность, его недоступность может сделать недоступной всю систему, он может стать объектом атак и узким местом системы.\nШаблон «Модель-Представление-Контроллер» (Model-View-Controller pattern, MVC). Так как требования к интерфейсу меняются чаще всего, то возникает потребность часто его модифицировать, при этом сохраняя корректное взаимодействие с данными (чтение, сохранение). Для этого в шаблоне MVC интерфейс отделён от данных. Это позволяет менять интерфейсы, равно как и создавать их разные варианты. В MVC система разделена на:\nмодель, хранящую данные;\nпредставление, отображающее часть данных и взаимодействующее с пользователем;\nконтроллер, являющийся посредником между видами и моделью.>>>",
            "Однако концепция MVC имеет и свои недостатки. В частности, из-за усложнения взаимодействия падает скорость работы системы.\n<<<Клиент-серверный шаблон (Client-Server pattern). Если есть ограниченное число ресурсов, к которым требуется ограниченный правами доступ большого числа потребителей, то удобно реализовать клиент-серверную архитектуру. Такой подход повышает масштабируемость и доступность системы. Но при этом сервер может стать узким местом системы, при его недоступности становится недоступна вся система.>>>",
            "Существуют следующие фреймворки (software architecture frameworks), относящиеся к области архитектуры ПО:\n<<<4+1\nRM-ODP (эталонная модель открытой распределенной обработки)\nService-Oriented Modeling Framework (SOMF)>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Архитектура_программного_обеспечения"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Распределённые_вычисления"
    },
    {
        "task": [
            "Криптографические ключи различаются согласно алгоритмам, в которых они используются.\n<<<Секретные (Симметричные) ключи — ключи, используемые в симметричных алгоритмах (шифрование, выработка кодов аутентичности). Главное свойство симметричных ключей: для выполнения как прямого, так и обратного криптографического преобразования (шифрование/расшифровывание, вычисление MAC/проверка MAC) необходимо использовать один и тот же ключ (либо же ключ для обратного преобразования легко вычисляется из ключа для прямого преобразования, и наоборот). С одной стороны, это обеспечивает более высокую конфиденциальность сообщений, с другой стороны, создаёт проблемы распространения ключей в системах с большим количеством пользователей.\nАсимметричные ключи — ключи, используемые в асимметричных алгоритмах (шифрование, ЭЦП). Более точно, они являются ключевой парой, поскольку состоят из двух ключей:\nЗакрытый ключ (англ. Private key) — ключ, известный только своему владельцу. Только сохранение пользователем в тайне своего закрытого ключа гарантирует невозможность подделки злоумышленником документа и цифровой подписи от имени заверяющего.\nОткрытый ключ (англ. Public key) — ключ, который может быть опубликован и используется для проверки подлинности подписанного документа, а также для предупреждения мошенничества со стороны заверяющего лица в виде отказа его от подписи документа. Открытый ключ подписи вычисляется как значение некоторой функции от закрытого ключа, но знание открытого ключа не даёт возможности определить закрытый ключ.>>>",
            "Использование асимметричных алгоритмов снимает проблему распространения ключей пользователей в системе, но ставит новые проблемы: достоверность полученных ключей. Эти проблемы более-менее успешно решаются в рамках инфраструктуры открытых ключей (PKI).\n<<<Сеансовые (сессионные) ключи — ключи, вырабатываемые между двумя пользователями, обычно для защиты канала связи. Обычно сеансовым ключом является общий секрет — информация, которая вырабатывается на основе секретного ключа одной стороны и открытого ключа другой стороны. Существует несколько протоколов выработки сеансовых ключей и общих секретов, среди них, в частности, алгоритм Диффи — Хеллмана.\nПодключи — ключевая информация, вырабатываемая в процессе работы криптографического алгоритма на основе ключа. Зачастую подключи вырабатываются на основе специальной процедуры развёртывания ключа.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Ключ_(криптография)"
    },
    {
        "task": [
            "Существуют основные способы передачи данных:\n<<<фельдъегерско-почтовая;\nвизуальная (флажковая, факельная, световая и т. д.);\nакустическая (см. акустика, громкоговоритель);\nэлектросвязь: оптическая, проводная, радио, радиорелейная, волоконно-оптическая, спутниковая и др.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Передача_информации"
    },
    {
        "task": [
            "Регулярные выражения используются некоторыми текстовыми редакторами и утилитами для поиска и подстановки текста. Например, при помощи регулярных выражений можно задать шаблоны, позволяющие:\n<<<найти все последовательности символов «кот» в любом контексте, как то: «кот», «котлета», «терракотовый»;\nнайти отдельно стоящее слово «кот» и заменить его на «кошка»;\nнайти слово «кот», которому предшествует слово «персидский» или «чеширский»;\nубрать из текста все предложения, в которых упоминается слово кот или кошка.>>>",
            "Результатом работы с регулярным выражением может быть:\n<<<проверка наличия искомого образца в заданном тексте;\nопределение подстроки текста, которая сопоставляется образцу;\nопределение групп символов, соответствующих отдельным частям образца.>>>",
            "Регулярные выражения состоят из констант и операторов, которые определяют множества строк и множества операций на них соответственно.\nОпределены следующие константы:\n<<<(пустое множество) ∅;\n(пустая строка) ε обозначает строку, не содержащую ни одного символа; эквивалентно \"\";\n(символьный литерал) «a», где a — символ используемого алфавита;\n(множество) из символов, либо из других множеств;>>>",
            "и следующие операции:\n<<<(сцепление, конкатенация) RS обозначает множество {αβ | α ∈ R & β ∈ S}, например: {\"boy\", \"girl\"}{\"friend\", \"cott\"} = {\"boyfriend\", \"girlfriend\", \"boycott\", \"girlcott\"};\n(дизъюнкция, чередование) R|S обозначает объединение R и S, например: {\"ab\", \"c\"}|{\"ab\", \"d\", \"ef\"} = {\"ab\", \"c\", \"d\", \"ef\"}[4];\n(замыкание Клини, звезда Клини) R* обозначает минимальное надмножество множества R, которое содержит ε и замкнуто относительно конкатенации (это есть множество всех строк, полученных конкатенацией нуля или более строк из R, например: {«Run», «Forrest»}* = {ε, «Run», «Forrest», «RunRun», «RunForrest», «ForrestRun», «ForrestForrest», «RunRunRun», «RunRunForrest», «RunForrestRun», …})[источник не указан 1814 дней].>>>",
            "Эту проблему можно решить двумя способами.\n<<<Учитывать символы, не соответствующие желаемому образцу (<[^>]*> для вышеописанного случая).\nОпределить квантификатор как нежадный (ленивый, англ. lazy) — большинство реализаций позволяют это сделать, добавив после него знак вопроса.>>>",
            "В некоторых языках (например, в JavaScript) реализованы т. н. «флаги», которые расширяют функции RegExp. Флаги указываются после регулярного выражения (порядок флагов значения не имеет). Типичные флаги:\n<<<g — глобальный поиск (обрабатываются все совпадения с шаблоном поиска);\ni — регистр букв не имеет значения;\nm — многострочный поиск;\ns — текст трактуется как одна строка, в этом случае метасимволу . (точка) соответствует любой одиночный символ, включая символ новой строки;\nu — unicode-трактовка. Выражение может содержать специальные паттерны, характерные для юникода, например, /\\p{Lu}/ — заглавные буквы.>>>",
            "В данную версию включены метасимволы:\n<<<.;\n[ ];\n[^ ];\n^ (действует только в начале выражения);\n$ (действует только в конце выражения);\n*;\n\\{ \\} — первоначальный вариант для { };\n\\( \\) — первоначальный вариант для ( );\n\\n, где n — номер от 1 до 9.>>>",
            "Особенности:\n<<<Звёздочка должна следовать после выражения, соответствующего единичному символу. Пример: [xyz]*.\nВыражение \\(блок\\)* следует считать неправильным. В некоторых случаях оно соответствует нулю или более повторений строки блок. В других оно соответствует строке блок*.\nВнутри символьного класса специальные значения символов, в основном, игнорируются. Особые случаи:\nЧтобы добавить символ ^ в набор, его следует поместить туда не первым.\nЧтобы добавить символ - в набор, его следует поместить туда первым или последним. Например:\nшаблон DNS-имени, куда могут входить буквы, цифры, минус и точка-разделитель: [-0-9a-zA-Z.];\nлюбой символ, кроме минуса и цифры: [^-0-9].\nЧтобы добавить символ [ или ] в набор, его следует поместить туда первым. Например:\n[][ab] соответствует ], [, a или b.>>>",
            "(англ. extended regular expressions (ERE)). Синтаксис в основном аналогичен традиционному.\n<<<Отменено использование обратной косой черты для метасимволов { } и ( ).\nОбратная косая черта перед метасимволом отменяет его специальное значение (см. Представление специальных символов).\nОтвергнута теоретически нерегулярная конструкция \\n.\nДобавлены метасимволы +, ?, |.>>>",
            "В некоторых случаях регулярные выражения удобно применить для анализа текстовых фрагментов на естественном языке, то есть написанных людьми, и, возможно, содержащих опечатки либо нестандартные варианты употреблений слов. Например, если проводить опрос (допустим, на веб-сайте) «какой станцией метро вы пользуетесь», может оказаться, что «Невский проспект» посетители могут указать как:\n<<<Невский\nНевск. просп.\nНев. проспект\nнаб. Канала Грибоедова («Канал Грибоедова» — это название второго выхода ст. м. Невский проспект)>>>",
            "Существует небольшое количество библиотек, реализующих механизм регулярных выражений с возможностью нечёткого сравнения:\n<<<TRE — бесплатная библиотека на С, использующая синтаксис регулярных выражений, похожий на POSIX (стабильный проект);\nFREJ — open-source библиотека на Java, использующая Lisp-образный синтаксис и лишённая многих возможностей обычных регулярных выражений, но сосредоточенная на различного рода автоматических заменах фрагментов текста (бета-версия).>>>",
            "Реализации<<<NFA (англ. nondeterministic finite-state automata — недетерминированные конечные автоматы) используют жадный алгоритм отката, проверяя все возможные расширения регулярного выражения в определённом порядке и выбирая первое подходящее значение. NFA может обрабатывать подвыражения и обратные ссылки. Но из-за алгоритма отката традиционный NFA может проверять одно и то же место несколько раз, что отрицательно сказывается на скорости работы. Поскольку традиционный NFA принимает первое найденное соответствие, он может и не найти самое длинное из вхождений (этого требует стандарт POSIX, и существуют модификации NFA, выполняющие это требование — GNU sed). Именно такой механизм регулярных выражений используется, например, в Perl, Tcl и .NET.\nDFA (англ. deterministic finite-state automata — детерминированные конечные автоматы) работают линейно по времени, поскольку не используют откаты и никогда не проверяют какую-либо часть текста дважды. Они могут гарантированно найти самую длинную строку из возможных. DFA содержит только конечное состояние, следовательно, не обрабатывает обратных ссылок, а также не поддерживает конструкций с явным расширением, то есть не способен обработать и подвыражения. DFA используется, например, в lex и egrep.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Регулярные_выражения"
    },
    {
        "task": [
            "Основные компоненты флешки:\n<<<USB-интерфейс (чаще USB 2.0 или 3.0 Стандарт-А, иногда microUSB) — обеспечивает физическое соединение с компьютером.\nКонтроллер — небольшой микроконтроллер со встроенными ROM и RAM[2].\nNAND  - чип флеш-памяти — хранит основную информацию.\nОсциллятор — генерирует синхронизирующий сигнал (12 MHz) для шины USB.>>>",
            "Некоторые варианты дизайна USB-флеш-накопителей:\n<<<\n\n\nПростая форма, фиксированный USB-разъём\n\n\n\nПростая форма, выдвигающийся USB-разъём\n\n\n\nДекоративный внешний вид корпуса (имитация суши)\n\n\n\nИнкрустированная бриллиантами флешка Uniq\n\n\n\nС USB-разъёмом типа А и microUSB-разъёмом типа B (для подключения к смартфонам, планшетам и т. д.)\n\n\n\nМиниатюрных размеров с цельнозалитым корпусом и без металлической рамки USB-разъёма типа А\n\n\n\nНакопители с комбинированными интерфейсами USB-флеш и Secure Digital\n\n>>>",
            "Преимущества<<<Малый вес, бесшумность работы и портативность.\nУниверсальность: современные компьютеры, телевизоры, DVD- и медиа-проигрыватели имеют USB-порты.\nНизкое энергопотребление (благодаря отсутствию механических систем, в отличие от CD, DVD, BD и жёстких дисков)\nРаботоспособность в широком диапазоне температур.\nБолее устойчивы к механическим воздействиям (вибрации и ударам), а также к воздействию магнитных полей по сравнению с жёсткими дисками.\nНе подвержены воздействию царапин и пыли, которые были проблемой для оптических носителей и дискет.\nСпособны сравнительно длительно хранить данные в автономном режиме (не требуя питания), от единиц до 10 лет. В худшем случае (дешёвый накопитель с большим износом) хранение данных обеспечивается в течение 3—5 месяцев[5].>>>",
            "Недостатки<<<Ограниченное число циклов записи-стирания перед выходом из строя. Чипы памяти, сделанные по технологии MLC (большинство), чаще всего выдерживают не более 5000 циклов перезаписи[6]. Кроме этого, ограничен ресурс USB-коннектора — около 1500 подключений[7].\nСкорость записи и чтения ограничены пропускной способностью USB, что особенно сильно проявляется для USB 2.0 (не более 35 МБ/с)[8].\nВ отличие от компакт-дисков, имеют недостатки, свойственные любой электронике:\nчувствительны к электростатическому разряду — обычное явление в быту, особенно зимой;\nчувствительны к радиации.\nНесимметричность интерфейса при симметрично выглядящем разъёме, отчего подключить сразу получается не всегда. Недостаток многих разъёмов, проявившийся для USB вообще, а для флешек особенно — из-за частого подключения-отключения. Похожий недостаток — у ключей, устраняемый симметричной бородкой. Однако данная проблема в будущем будет устранена благодаря симметричному разъёму USB Type-C.>>>",
            "Методика восстановления данных с неисправного USB-флеш накопителя состоит из нескольких этапов:\n<<<Первый этап — это выпаивание микросхем памяти. Это необходимо сделать, потому что когда флешка выходит из строя, то чип памяти перестаёт быть доступным через USB интерфейс. При этом флешка может даже определяться в компьютере, но показывать, что у неё нулевой объём. Это происходит, потому что контроллер USB-флеш исправен, а доступа к микросхеме памяти у него нет из-за её повреждения. Единственным способом считать данные с повреждённой NAND микросхемы памяти является считывание полного дампа (образа) этой микросхемы. Это возможно сделать только по контактам микросхемы, установив её в специальный считыватель (ридер) программно-аппаратного комплекса;\nВторой этап — это считывания дампов (образов) с каждой из микросхем памяти USB-флеш накопителя. Микросхемы памяти изготавливаются в корпусах разного типа и размера. Для различных корпусов микросхем существуют соответствующего типа адаптеры (переходники). Адаптеры подключаются к основному блоку программно-аппаратного комплекса;\nЗавершающим этапом работ по восстановлению данных с USB-флешки является сборка полученных дампов микросхем в единый образ: определяется тип ECC (код коррекции ошибок) и подбирается XOR. После чего появляется доступ к файловой системе с привычной для всех пользователей структурой файлов и каталогов[12];>>>",
            "В искусстве<<<Флэшка (фильм)>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/USB-флеш-накопитель"
    },
    {
        "task": [
            "Примеры[править | править код]<<<«почистить ковёр пылесосом» требует время, линейно зависящее от его площади (\n\n\n\nΘ\n(\nA\n)\n\n\n{\\displaystyle \\Theta (A)}\n\n), то есть на ковёр, площадь которого больше в два раза, уйдет в два раза больше времени. Соответственно, при увеличении площади ковра в сто тысяч раз объём работы увеличивается строго пропорционально в сто тысяч раз, и т. п.\n«найти имя в телефонной книге» требует всего лишь времени, логарифмически зависящего от количества записей (\n\n\n\nO\n(\n\nlog\n\n2\n\n\n⁡\n(\nn\n)\n)\n\n\n{\\displaystyle O(\\log _{2}(n))}\n\n), так как, открыв книгу примерно в середине, мы уменьшаем размер «оставшейся проблемы» вдвое (за счет сортировки имен по алфавиту). Таким образом, в книге объёмом в 1000 страниц любое имя находится не больше, чем за \n\n\n\n\nlog\n\n2\n\n\n⁡\n1000\n≈\n10\n\n\n{\\displaystyle \\log _{2}1000\\approx 10}\n\n раз (открываний книги). При увеличении объёма страниц до ста тысяч проблема все ещё решается за \n\n\n\n\nlog\n\n2\n\n\n⁡\n100000\n≈\n17\n\n\n{\\displaystyle \\log _{2}100000\\approx 17}\n\n заходов. (См. Двоичный поиск.)>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Вычислительная_сложность"
    },
    {
        "task": [
            "Тело (англ. body) — объект игровой физики, который определяется:\n<<<его формой (есть простые формы: шар, куб, цилиндр; есть сложные формы, набор которых в разных движках может различаться);\nнеким набором параметров (масса, упругость, коэффициент трения, инертность по осям).>>>",
            "Игровые проприетарные[править | править код]<<<Havok — некогда самый популярный и распространённый физический движок, используемый в более чем в 100 играх. На данный момент немного уступил своему конкуренту[1];\nDigital Molecular Matter>>>",
            "Игровые свободные[править | править код]<<<PhysX — основной конкурент Havok, единственный в мире физический движок, имеющий аппаратную поддержку (см. Физический процессор). Покупка Ageia компанией nVidia привела к переименованию движка в nVidia PhysX. В 2015 году NVIDIA опубликовала исходный код PhysX для пользователей Unreal Engine. На данный момент PhysX занимает первое место по популярности среди физических движков[1];\nBullet Physics Library — второй по популярности среди свободных физических движков.[1];\nOpen Dynamics Engine — третий по популярности среди свободных физических движков[1];\nTokamak — физический движок с открытым исходным кодом.\nNewton Game Dynamics — изначально проприетарный, а с февраля 2011 года — свободный физический движок.\nBox2D — мультиплатформенный движок для симуляции физики твёрдых тел.>>>",
            "Ныне несуществующие[править | править код]<<<NovodeX — физический движок, приобретённый компанией Ageia и преобразованный в PhysX.\nMeqon — физический движок, приобретённый компанией Ageia и интегрированный в состав её движка PhysX.\nIpion Virtual Physics — физический движок, приобретённый компанией Havok и интегрированный в состав её движка Havok Physics;\nKarma — коммерческий движок от ныне закрытой компании MathEngine, интегрирован в Unreal Engine 2.0/2.5.>>>",
            "Другие[править | править код]<<<Open Physics Initiative — проект, инициированный компаниями AMD и Pixelux Entertainment по объединению Bullet Physics Library и Digital Molecular Matter, добавлении в новообразованный продукт поддержки OpenCL и DirectCompute и оптимизации результирующего движка для выполнения на графических процессорах Radeon.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Физический_движок"
    },
    {
        "task": [
            "Проектировать структуры данных для функциональных языков более сложно, чем для императивных, как минимум по двум причинам[1]:\n<<<Почти все структуры данных интенсивно используют присваивание, которое в чисто функциональном стиле не используется;\nФункциональные структуры данных являются более гибкими, и поэтому там, где в императивном программировании старая версия теряется, просто заменяясь новой, в функциональном она автоматически продолжает существовать. Другими словами, в императивном программировании (если не принять особых мер, которые могут серьёзно усложнить программу) структуры данных являются эфемерными (англ. ephemeral), а в функциональных программах они как правило постоянные (англ. persistent).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Структура_данных"
    },
    {
        "task": [
            "Простой калькулятор Casio HL-820ER<<<Простейшие калькуляторы предназначены для выполнения только ординарных арифметических расчётов. Имеют небольшие размеры и вес, обычно не более одного дополнительного регистра памяти и минимальное число функций (как правило, только арифметические операции и, возможно, одна-две функции, такие, как извлечение квадратного корня, обратная функция, смена знака или вычисление процентов). Не поддерживают представление чисел с плавающей запятой. Как правило, имеют 8-разрядный семисегментный индикатор, диапазон представляемых чисел: от ±10−7 до ±(108−1);\nИнженерные (англ. scientific, изредка употребляется русская калька «научный калькулятор»): предназначены для научных и инженерных расчётов различной степени сложности. Ориентированы на научных работников, инженеров, студентов технических специальностей и старших школьников.\nРаботают с представлением чисел в форматах как с естественной, так и с плавающей запятой (во втором случае порядок обычно имеет два, реже — три разряда, мантисса — не менее восьми разрядов, так что максимальный диапазон поддерживаемых ненулевых значений — от 1⋅10−999 до 9,999999999⋅10999 по модулю), многие современные конструкции также позволяют непосредственно оперировать обыкновенными дробями, в том числе выполнять с ними операции, преобразовывать обыкновенные дроби из правильных в неправильные и обратно, обыкновенные дроби в десятичные и обратно.\nРеализуют алгебраическую логику, с приоритетами операций и скобками; реже применяется обратная польская запись. Поддерживают вычисление элементарных функций. Обычный минимум: квадрат и квадратный корень, обратная функция, десятичные и натуральные логарифмы и антилогарифмы, прямые и обратные тригонометрические функции; развитые модели реализуют более широкий набор элементарных функций, могут также поддерживать статистические расчёты, переводы мер из одной системы в другую, преобразования углов из системы «градус, минута, секунда» в десятичные доли градуса и обратно, логические функции, работу в различных системах счисления, тригонометрические расчёты с углами в градусах, радианах и градах. Общее число поддерживаемых функций может составлять до нескольких сотен.\nЧисло дополнительных регистров памяти — не менее одного, но может доходить до десятка и более. Из-за большого количества поддерживаемых функций клавиатура инженерных калькуляторов содержит клавиши двойного/тройного назначения; в некоторых моделях на одну кнопку может быть возложено до четырёх функций. Наиболее развитые модели поддерживают не только числовые, но и символьные вычисления.>>>",
            "Бухгалтерский калькулятор Casio DS-20<<<Бухгалтерские калькуляторы ориентированы на профессиональные арифметические расчёты с денежными суммами, то есть на применение бухгалтерами и кассирами. Обычно выпускаются в настольном исполнении, имеют корпус с крупными клавишами и дисплеем большого размера. Клавиатура может дополнительно содержать клавиши для более удобного ввода денежных сумм (кнопки «00» и «000»), поддерживается большее, чем в инженерных калькуляторах, число знаков (индикатор вмещает до 12—15 цифр), режимы работы с фиксированным количеством разрядов дробной части и автоматическое округление). Обычно имеют не более одного-двух регистров памяти, но поддерживают арифметические операции с записью в регистр и вычисление процентов. Как правило, не имеют на клавиатуре кнопок двойного/тройного назначения. Некоторые модели реализуют арифметическую логику: операции сложения и вычитания нажимаются после ввода числа, но функции умножения и деления производятся в обычной форме.Дополнительно часто поддерживают специальные «бухгалтерские» функции:\nCheck&Correct («проверка и коррекция»): калькулятор запоминает цепочку выполняемых операций, позволяя впоследствии просмотреть её, при необходимости внести изменения и автоматически повторить все вычисления с новым значением некоторых промежуточных данных.\nCost-Sell-Margin («стоимость-продажа-прибыль»): вычисляет себестоимость, продажную цену или прибыль, зная остальные два параметра.\nMU, Mark-Up / Mark-Down («продажная цена и себестоимость»): вычисляет наценку/скидку к цене.\nVAT и VAT-II («налог на добавленную стоимость»): позволяет нажатием одной кнопки добавлять/убирать из цены величину НДС, по, соответственно, одной или одной из двух ставок.\nGT (Grand Total function «общий итог»): автоматическое вычисление итоговой суммы по всем произведённым вычислениям (выдача суммы всех значений, которые калькулятор вычислил после нажатий клавиши «=» с момента сброса).\nCurrency Conversion («конвертация валюты»).\nRATE / -TAX / +TAX: вычисление налогов (НДС)[2]>>>",
            "Бухгалтерские калькуляторы ориентированы на профессиональные арифметические расчёты с денежными суммами, то есть на применение бухгалтерами и кассирами. Обычно выпускаются в настольном исполнении, имеют корпус с крупными клавишами и дисплеем большого размера. Клавиатура может дополнительно содержать клавиши для более удобного ввода денежных сумм (кнопки «00» и «000»), поддерживается большее, чем в инженерных калькуляторах, число знаков (индикатор вмещает до 12—15 цифр), режимы работы с фиксированным количеством разрядов дробной части и автоматическое округление). Обычно имеют не более одного-двух регистров памяти, но поддерживают арифметические операции с записью в регистр и вычисление процентов. Как правило, не имеют на клавиатуре кнопок двойного/тройного назначения. Некоторые модели реализуют арифметическую логику: операции сложения и вычитания нажимаются после ввода числа, но функции умножения и деления производятся в обычной форме.Дополнительно часто поддерживают специальные «бухгалтерские» функции:\nCheck&Correct («проверка и коррекция»): калькулятор запоминает цепочку выполняемых операций, позволяя впоследствии просмотреть её, при необходимости внести изменения и автоматически повторить все вычисления с новым значением некоторых промежуточных данных.\nCost-Sell-Margin («стоимость-продажа-прибыль»): вычисляет себестоимость, продажную цену или прибыль, зная остальные два параметра.\nMU, Mark-Up / Mark-Down («продажная цена и себестоимость»): вычисляет наценку/скидку к цене.\nVAT и VAT-II («налог на добавленную стоимость»): позволяет нажатием одной кнопки добавлять/убирать из цены величину НДС, по, соответственно, одной или одной из двух ставок.\nGT (Grand Total function «общий итог»): автоматическое вычисление итоговой суммы по всем произведённым вычислениям (выдача суммы всех значений, которые калькулятор вычислил после нажатий клавиши «=» с момента сброса).\nCurrency Conversion («конвертация валюты»).\nRATE / -TAX / +TAX: вычисление налогов (НДС)[2]<<<Финансовые ориентированы на выполнение финансовых расчетов и поддерживают стандартный минимальный набор математических функций, к которому добавляются операции со сложными процентами и специфические функции, применяемые в банковской сфере и иных финансовых приложениях: расчет аннуитета, перпетуитета, дисконтов, размера выплат по кредитам, приведённого денежного потока и тому подобное. Как правило, реализуют алгебраическую логику с приоритетами операций и скобками.Основная статья: Финансовый калькулятор\n\nСовременный программируемый калькуляторПрограммируемые калькуляторы по функциональным возможностям находятся на уровне сложных инженерных калькуляторов, но дополнительно они дают возможность многократно повторять вычисления, создавая и исполняя программы пользователя. Как правило имеют большое количество регистров памяти (10 и более), могут иметь интерфейсы для подключения внешних устройств, персонального компьютера, дополнительных модулей памяти, аппаратных датчиков, исполнительных устройств. По функциональности наиболее развитые программируемые калькуляторы приближаются к простейшим портативным компьютерам, формально отличаясь от них исключительно своей узкой специализацией, такие калькуляторы имеют полноценные операционные системы с графическим интерфейсом, ранее широкое применение на наиболее продвинутых калькуляторах имела операционная система Windows CE. Существует несколько способов программирования калькуляторов (см. статью), в зависимости от модели калькулятор может поддерживать один или два из них.>>>",
            "Основная статья: Программируемый калькулятор<<<Графические калькуляторы — разновидность программируемых калькуляторов — имеют графический экран и поддерживают команды, которые позволяют отображать графики функций или даже выводить на экран произвольные рисунки. Почти все графические калькуляторы являются программируемыми[3]. Графический дисплей может также иметь обычный инженерный калькулятор для поддержки натурального ввода формул и отображения таблиц, но он не называется графическим калькулятором.\nПечатающие калькуляторы, оснащённые встроенным печатающим устройством, обеспечивающим вывод производимых вычислений, результатов, итогов, графиков на бумажную ленту. Выделяются в отдельный класс в маркетинговых материалах и рыночной аналитике[4]. Современные печатающие калькуляторы по конструкции и вычислительным возможностям обычно относятся к классу бухгалтерских. Ранее со встроенными печатающими устройствами выпускались некоторые инженерные и программируемые калькуляторы, но современные модели этих типов чаще просто имеют интерфейс для подключения внешнего печатающего устройства.\nСпециализированные калькуляторы — калькуляторы или программно-аппаратные комплексы, предназначенные для выполнения узкоспециализированных вычислений. Например, штурманский калькулятор для навигационных вычислений, калькулятор для расчета конструкций зданий и сооружений (Construction Master[5]) и т. п.>>>",
            "В зависимости от назначения калькулятора информация отображается на следующих типах индикаторов:\n<<<на цифровом семисегментном (простейшие модели);\nспециализированном матричном для вывода цифровых и нецифровых символов;\nграфическом (построение графиков, вывод формул в алгебраическом виде, таблиц и т. п.)>>>",
            "Клавиатура калькуляторов содержит клавиши (кнопки), нажатие которых обеспечивает ввод чисел и выполнение операций и функций. Клавиатура содержит как минимум следующие клавиши:\n<<<Цифровые — десять клавиш с арабскими цифрами от 0 до 9, для ввода чисел. Возможно также использование в сложных командах. Традиционно клавиши 1-9 располагаются квадратом 3×3, единица — слева внизу, девятка — справа вверху, нуль — отдельно, под единицей (то же расположение, что на дополнительном правом цифровом поле компьютерной клавиатуры).\nДесятичная запятая (точка) — для ввода десятичного разделителя.\nАрифметические операции — для ввода операций «+» (сложение), «-» (вычитание), «×» (умножение), «÷» (деление).\nЗнак равенства «=» — для выполнения последней операции в цепочных вычислениях в калькуляторах с арифметической или алгебраической логикой.\nВвод («↑» или «ENTER» или «В↑» или «E↑») — для завершения ввода числа в калькуляторах с обратной польской записью.\nОчистка (обозначается «C», обычно красного цвета) — для обнуления значения на индикаторе и отмены операции, если таковая была введена.>>>",
            "Помимо этого, в калькуляторе может выделяться один или более командно-доступный регистр памяти для хранения констант или промежуточных результатов вычислений. В калькуляторах с одним регистром памяти клавиши управления этим регистром обозначаются, как правило, следующим образом:\n<<<CM (MC) — очистка регистра памяти, то есть запись в него значения 0 (нуль).\nM, П, STO — сохранение в регистре текущего значения из операционного регистра X (числа, отображаемого на дисплее).\nMR, RM, RC, ИП — копирование значения из регистра памяти в операционный регистр X (на дисплей).\nMR(c) — комбинированная клавиша извлечения значения из регистра памяти и очистки регистра. При однократном её нажатии значение из регистра памяти копируется в операционный регистр X (на дисплей), а при нажатии её два раза подряд в регистр памяти записывается нуль.\nM+, M-, M×, M÷ — выполнение указанной после «M» операции между текущим значением в регистре памяти и значением на дисплее, с помещением результата снова в регистр памяти. Содержимое операционного регистра X при этом остаётся прежним. Чаще всего встречается операция суммирования в регистре («M+»), остальные три — значительно реже. Изредка встречаются и другие операции с регистром памяти, например «M+X²» в калькуляторе «Электроника Б3-18». Операции в регистре могут существенно облегчать некоторые типы расчётов. Например, при вычислении суммы рекуррентного ряда, где каждый следующий член получается из предыдущего, оператор может после получения каждого члена ряда нажимать клавишу суммирования в регистре; так как при суммировании в регистре значение на дисплее не меняется, его нет необходимости специально сохранять для вычисления следующего члена ряда. При этом в регистре памяти будет накапливаться сумма, которую можно будет отобразить после того, как будут вычислены все нужные члены ряда.>>>",
            "Вычисление одноместных функций (фиксированных степеней и корней, тригонометрических, логарифмов и пр.), независимо от логики вычислений, чаще всего реализуется по постфиксной схеме:\n<<<Пользователь вычисляет или вводит с клавиатуры аргумент.\nПользователь нажимает клавишу (клавиши) вычисляемой функции.\nКалькулятор вычисляет функцию, соответствующую нажатой клавише, и отображает результат вычисления на индикаторе.>>>",
            "Cуществуют также более сложные компьютерные программы-калькуляторы. Такие программы представляют собой специализированный программный продукт, предназначенный для узкого круга вычислений, например:\n<<<Статистические калькуляторы предназначены для выполнения различных расчётов, необходимых при обработке больших массивов данных — результатов социологических опросов, научных исследований и тому подобное. Имеют средства для быстрого вычисления распределений, отклонений, корреляций, средних значений и так далее. Большинство инженерных калькуляторов также поддерживают важнейшие статистические функции.\nМедицинские калькуляторы используются врачами, фармацевтами, медсёстрами, студентами-медиками. Могут быть реализованы как в виде отдельного устройства, планшета для обхода больных, так и в виде программы универсального компьютера/КПК. Реализуют функции медицинского справочника, обеспечивают медицинские расчёты со справочным материалом, расчёт дозировки лекарств, доступ к базам данных лечебного учреждения и так далее.\nКалькулятор беременности — рассчитывает срок беременности и её ход при помощи календаря.\nКалькулятор калорий — рассчитывают калорийность отдельных блюд и помогают следить за соблюдением калорийности диеты.\nКалькулятор строительства (строительный калькулятор) — комплексный инструмент для автоматизации и упрощения расчётов для типовых конструкций (фундаментов, лестниц, крыш…). Чаще всего позволяет получить расчёт количества материалов и чертежи объекта.\nИпотечный калькулятор — для расчёта банковских займов.\nДругие типы программ-калькуляторов: калькулятор вкладов, курсов валют, НДС, ОСАГО и т. д.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Калькулятор"
    },
    {
        "task": [
            "Для защиты от вирусов используют три группы методов[9]:\n<<<Методы, основанные на анализе содержимого файлов (как файлов данных, так и файлов с кодами команд). К этой группе относятся сканирование сигнатур вирусов, а также проверка целостности и сканирование подозрительных команд.\nМетоды, основанные на отслеживании поведения программ при их выполнении. Эти методы заключаются в протоколировании всех событий, угрожающих безопасности системы и происходящих либо при реальном выполнении проверяемого кода, либо при его программной эмуляции.\nМетоды регламентации порядка работы с файлами и программами. Эти методы относятся к административным мерам обеспечения безопасности.>>>",
            "Вопрос в том, насколько эффективными являются антивирусы против самых актуальных угроз. Чтобы ответить на этот вопрос, компания Imperva и студенты Тель-Авивского университета раздобыли на российских подпольных форумах 82 образца самого свежего вредоносного ПО — и проверили его по базе VirusTotal, то есть против 42 антивирусных движков. Результат оказался плачевным.\n<<<Эффективность антивирусов против только что скомпилированных зловредов оказалась менее 5 %. Это вполне логичный результат, поскольку создатели вирусов обязательно тестируют их по базе VirusTotal.\nОт появления вируса до начала его распознавания антивирусами проходит до четырёх недель. Такой показатель достигается «элитными» антивирусами, а у остальных антивирусов срок может доходить до 9-12 месяцев. Например, в начале исследования 9 февраля 2012 года был проверен свежий образец фальшивого инсталлятора Google Chrome. После окончания исследования 17 ноября 2012 года его определяли только 23 из 42 антивирусов.\nУ антивирусов с самым высоким процентом определения зловредов присутствует также высокий процент ложных срабатываний.\nХотя исследование сложно назвать объективным, ибо выборка зловредов была слишком маленькой, но можно предположить, что антивирусы совершенно непригодны против свежих киберугроз.>>>",
            "Антивирусные программы подразделяются по исполнению (средствам блокирования)[1] на:\n<<<программные;\nпрограммно-аппаратные.>>>",
            "По признаку размещения в оперативной памяти[1] выделяют:\n<<<резидентные (начинают свою работу при запуске операционной системы, постоянно находятся в памяти компьютера и осуществляют автоматическую проверку файлов);\nнерезидентные (запускаются по требованию пользователя или в соответствии с заданным для них расписанием).>>>",
            "По виду (способу) защиты от вирусов различают:\n<<<Программы-детекторы, или сканеры[1], находят вирусы в оперативной памяти, на внутренних и(или) внешних носителях, выводя сообщение при обнаружении вируса.\nПрограммы-доктора, (фаги[1], полифаги[1]) находят зараженные файлы и «лечат» их. Среди этого вида программ существуют полифаги, которые способны удалять разнообразные виды вирусов, самые известные из антивирусов-полифагов Norton AntiVirus, Doctor Web, Kaspersky Antivirus.\nПрограммы-вакцины (иммунизаторы[1]) выполняют иммунизацию системы (файлов, каталогов) блокируя действие вирусов[1].\nПрограммы-ревизоры[1] являются наиболее надежными в плане защиты от вирусов. Ревизоры запоминают исходное состояние программ, каталогов, системных областей диска до момента инфицирования компьютера (как правило, на основе подсчета контрольных сумм[1]), затем сравнивают текущее состояние с первоначальным, выводя найденные изменения на дисплей.\nПрограммы-мониторы начинают свою работу при запуске операционной системы, постоянно находятся в памяти компьютера и осуществляют автоматическую проверку файлов по принципу «здесь и сейчас».\nПрограммы-фильтры (сторожа) обнаруживают вирус на ранней стадии, пока он не начал размножаться.\nПрограммы-сторожа — небольшие резидентные программы, целью которых является обнаружение действий, характерных для вирусов.>>>",
            "Основные виды антивирусных программ<<<Программы-детекторы обеспечивают поиск и обнаружение вирусов в оперативной памяти и на внешних носителях, и при обнаружении выдают соответствующее сообщение. Различают детекторы универсальные и специализированные.\nПрограммы-доктора (фаги) не только находят зараженные вирусами файлы, но и «лечат» их, то есть удаляют из файла тело программы вируса, возвращая файлы в исходное состояние. В начале своей работы фаги ищут вирусы в оперативной памяти, уничтожая их, и только затем переходят к «лечению» файлов. Среди фагов выделяют полифаги, то есть программы-доктора, предназначенные для поиска и уничтожения большого количества вирусов. Учитывая, что постоянно появляются новые вирусы, программы-детекторы и программы-доктора быстро устаревают, и требуется регулярное обновление их версий.\nПрограммы-ревизоры относятся к самым надежным средствам защиты от вирусов. Ревизоры запоминают исходное состояние программ, каталогов и системных областей диска тогда, когда компьютер не заражен вирусом, а затем периодически или по желанию пользователя сравнивают текущее состояние с исходным. Обнаруженные изменения выводятся на экран монитора. Как правило, сравнение состояний производят сразу после загрузки операционной системы. При сравнении проверяются длина файла, код циклического контроля (контрольная сумма файла), дата и время модификации, другие параметры.\nПрограммы-фильтры (сторожа) представляют собой небольшие резидентные программы, предназначенные для обнаружения подозрительных действий при работе компьютера, характерных для вирусов.\nПрограммы-вакцины (иммунизаторы) — это резидентные программы, предотвращающие заражение файлов. Вакцины применяют, если отсутствуют программы-доктора, «лечащие» этот вирус. Вакцинация возможна только от известных вирусов. Вакцина модифицирует программу или диск таким образом, чтобы это не отражалось на их работе, а вирус будет воспринимать их зараженными и поэтому не внедрится. Существенным недостатком таких программ является их ограниченные возможности по предотвращению заражения от большого числа разнообразных вирусов.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Антивирусная_программа"
    },
    {
        "task": [
            "Динамические страницы обычно обрабатывают и выводят информацию из базы данных. Наиболее популярные на данный момент технологии для генерации динамических страниц:\n<<<PHP — Для серверов Apache и других под управлением GNU/Linux, других UNIX-подобных, и прочих ОС.\nJSP и Java Servlet — Для серверов Apache, JBoss, Tomcat под управлением различных ОС.\nASP.NET — Для Microsoft Windows серверов под управлением IIS.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Веб-страница"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Оболочка_операционной_системы"
    },
    {
        "task": [
            "Наиболее часто употребляемыми в настоящее время позиционными системами являются:\n<<<2 — двоичная (в дискретной математике, информатике, программировании);\n3 — троичная;\n4 — четверичная[1] (кватричная)[2];\n5 — пятиричная[3];\n8 — восьмеричная;\n10 — десятичная (используется повсеместно);\n12 — двенадцатеричная (счёт дюжинами);\n16 — шестнадцатеричная (используется в программировании, информатике);\n20 — двадцатеричная;\n60 — шестидесятеричная (единицы измерения времени, измерение углов и, в частности, координат, долготы и широты).>>>",
            "Умножение и деление чисел в FPR-системе счисления выполняется с помощью сложения и вычитания соответствующих числовых кортежей. Пусть даны числовые \n\n\n\nn\n\n\n{\\displaystyle n}\n\n-кортежи \n\n\n\nA\n=\n(\n\na\n\n1\n\n\n,\n\na\n\n2\n\n\n,\n⋯\n,\n\na\n\nn\n\n\n)\n\n\n{\\displaystyle A=(a_{1},a_{2},\\cdots ,a_{n})}\n\n и \n\n\n\nB\n=\n(\n\nb\n\n1\n\n\n,\n\nb\n\n2\n\n\n,\n⋯\n,\n\nb\n\nn\n\n\n)\n\n\n{\\displaystyle B=(b_{1},b_{2},\\cdots ,b_{n})}\n\n. Определим для них следующие операции:\n<<<\n\n\n\nA\n+\nB\n=\n(\n(\n\na\n\n1\n\n\n+\n\nb\n\n1\n\n\n)\n,\n(\n\na\n\n2\n\n\n+\n\nb\n\n2\n\n\n)\n,\n⋯\n,\n(\n\na\n\nn\n\n\n+\n\nb\n\nn\n\n\n)\n)\n.\n\n\n{\\displaystyle A+B=((a_{1}+b_{1}),(a_{2}+b_{2}),\\cdots ,(a_{n}+b_{n})).}\n\n\n\n\n\n\nA\n−\nB\n=\n(\n(\n\na\n\n1\n\n\n−\n\nb\n\n1\n\n\n)\n,\n(\n\na\n\n2\n\n\n−\n\nb\n\n2\n\n\n)\n,\n⋯\n,\n(\n\na\n\nn\n\n\n−\n\nb\n\nn\n\n\n)\n)\n.\n\n\n{\\displaystyle A-B=((a_{1}-b_{1}),(a_{2}-b_{2}),\\cdots ,(a_{n}-b_{n})).}\n\n>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Система_счисления"
    },
    {
        "task": [
            "Преимущества:\n<<<Универсальность — текстовый файл может быть прочитан (так или иначе) на любой системе или ОС, особенно если речь идёт об однобайтных кодировках вроде ASCII, которые не подвержены проблеме, характерной для других форматов файлов — для них не важна разница в порядке байтов или длине машинного слова.\nУстойчивость — каждое слово и символ в таком файле самодостаточны и, если случится повреждение байтов в таком файле, то обычно можно восстановить данные или продолжить обработку остального содержимого, в то время как у сжатых или двоичных файлов повреждение нескольких байтов может сделать файл совершенно невосстановимым. Многие системы управления версиями рассчитаны на текстовые файлы и с двоичными файлами могут работать только как с единым целым.\nФормат текстового файла крайне прост и его можно изменять текстовым редактором — программой, входящей в комплект практически любой ОС.>>>",
            "Недостатки:\n<<<У больших несжатых текстовых файлов низкая информационная энтропия — эти файлы занимают больше места, нежели минимально необходимо. Хотя эта избыточность и определяет повышенную устойчивость к сбоям в каналах передачи данных и при получении данных с носителей, например, с магнитной ленты.\nНекоторые операции с текстовыми файлами неэффективны. Например, если в файле встретится число, вычислительная система до начала операций с ним должна будет перевести его в свой внутренний формат, применив сравнительно сложную процедуру конвертации числа; чтобы перейти на 1000-ю строку, требуется считать 999 строк, идущих до неё; сложно заменить одну строку другой и т. д. Поэтому при работе с большими объёмами данных текстовые файлы применяют только как промежуточный формат, обеспечивающий интероперабельность.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Текстовый_файл"
    },
    {
        "task": [
            "Методы и алгоритмы решения типовых математических задач с применением вычислительной техники носят название численных методов. К типовым задачам относят[2]:\n<<<Алгебра: решение систем линейных уравнений, обращение матриц, поиск собственных значений и векторов матриц (ограниченная и полная проблема собственных значений), поиск сингулярных значений и векторов матриц, решение нелинейных алгебраических уравнений, решение систем нелинейных алгебраических уравнений;\nДифференциальные уравнения: дифференцирование и интегрирование функций одной или нескольких переменных, решение обыкновенных дифференциальных уравнений, решение уравнений с частными производными, решение систем дифференциальных уравнений, решение интегральных уравнений;\nОптимизация: изучение минимальных и максимальных значений функционалов на множествах;\nИсследование операций и теория игр: минимаксные задачи (в частности, для многошаговых игр);\nМатематическое программирование: задачи аппроксимации, задачи интерполяции, задачи экстраполяции.>>>",
            "Основами для вычислительных методов являются:\n<<<решение систем линейных уравнений;\nинтерполирование и приближённое вычисление функций;\nчисленное интегрирование;\nчисленное решение системы нелинейных уравнений;\nчисленное решение обыкновенных дифференциальных уравнений;\nчисленное решение уравнений в частных производных (уравнений математической физики);\nрешение задач оптимизации.>>>",
            "Прямые методы<<<Метод Гаусса\nМетод Гаусса — Жордана\nМетод Крамера\nМатричный метод\nМетод прогонки (для трёхдиагональных матриц)\nРазложение Холецкого или метод квадратных корней (для положительно-определённых симметричных и эрмитовых матриц)\nМетод вращений[6]>>>",
            "Итерационные методы<<<Метод Якоби\nМетод Гаусса — Зейделя\nМетод релаксации\nМногосеточный метод\nМетод Монтанте\nМетод Абрамова (пригоден для решения небольших СЛАУ)\nМетод обобщённых минимальных невязок[англ.]\nМетод бисопряжённых градиентов\nСтабилизированный метод бисопряжённых градиентов\nКвадратичный метод сопряжённых градиентов[англ.]\nМетод квази-минимальных невязок (QMR)>>>",
            "Способы интерполяции<<<Интерполяция методом ближайшего соседа.\nЛинейная интерполяция\nИнтерполяционная формула Ньютона\nМетод конечных разностей\nИМН-1 и ИМН-2\nМногочлен Лагранжа (интерполяционный многочлен)\nПо схеме Эйткена\nСплайн-функция\nКубический сплайн\nПолином Лагранжа\nОбратное интерполирование по формуле Ньютона\nОбратное интерполирование по формуле Гаусса\nБилинейная интерполяция\nБикубическая интерполяция\nРациональная интерполяция\nТригонометрическая интерполяция\nАппроксимация — методы построения приближённых кривых\nЭкстраполяция — методы нахождения точек за пределами заданного интервала (продление кривой)>>>",
            "Численное интегрирование применяется, когда:\n<<<Сама подынтегральная функция не задана аналитически. Например, она представлена в виде таблицы (массива) значений в узлах некоторой расчётной сетки.\nАналитическое представление подынтегральной функции известно, но её первообразная не выражается через аналитические функции. Например, \n\n\n\nf\n(\nx\n)\n=\nexp\n⁡\n(\n−\n\nx\n\n2\n\n\n)\n\n\n{\\displaystyle f(x)=\\exp(-x^{2})}\n\n.>>>",
            "Существует два вида методов решения данного типа уравнений:\n<<<аналитический, при котором результат выводится различными математическими преобразованиями;\nчисленный, при котором полученный результат соответствует действительному с заданной точностью, но который требует много рутинных вычислений и поэтому выполним только при помощи вычислительной техники (ЭВМ).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Вычислительная_математика"
    },
    {
        "task": [
            "По степени распределённости отличают:\n<<<настольные (desktop), или локальные ИС, в которых все компоненты (БД, СУБД, клиентские приложения) находятся на одном компьютере;\nраспределённые (distributed) ИС, в которых компоненты распределены по нескольким компьютерам.>>>",
            "Распределённые ИС, в свою очередь, разделяют на:\n<<<файл-серверные ИС (ИС с архитектурой «файл-сервер»);\nклиент-серверные ИС (ИС с архитектурой «клиент-сервер»).>>>",
            "По степени автоматизации ИС делятся на:\n<<<автоматизированные: информационные системы, в которых автоматизация может быть неполной (то есть требуется постоянное вмешательство персонала);\nавтоматические: информационные системы, в которых автоматизация является полной, то есть вмешательство персонала не требуется или требуется только эпизодически.>>>",
            "По характеру обработки данных ИС делятся на:\n<<<информационно-справочные, или информационно-поисковые ИС, в которых нет сложных алгоритмов обработки данных, а целью системы является поиск и выдача информации в удобном виде[14];\nИС обработки данных, или решающие ИС, в которых данные подвергаются обработке по сложным алгоритмам. К таким системам в первую очередь относят автоматизированные системы управления и системы поддержки принятия решений.>>>",
            "Поскольку ИС создаются для удовлетворения информационных потребностей в рамках конкретной предметной области, то каждой предметной области (сфере применения) соответствует свой тип ИС. Перечислять все эти типы не имеет смысла, так как количество предметных областей велико, но можно указать в качестве примера следующие типы ИС:\n<<<Экономическая информационная система — информационная система, предназначенная для выполнения функций управления на предприятии.\nМедицинская информационная система — информационная система, предназначенная для использования в лечебном или лечебно-профилактическом учреждении.\nГеографическая информационная система — информационная система, обеспечивающая сбор, хранение, обработку, доступ, отображение и распространение пространственно-координированных данных (пространственных данных).>>>",
            "Классификация по охвату задач (масштабности)[править | править код]<<<Персональная ИС предназначена для решения некоторого круга задач одного человека.\nГрупповая ИС ориентирована на коллективное использование информации членами рабочей группы или подразделения.\nКорпоративная ИС автоматизирует все бизнес-процессы целого предприятия (организации) или их значительную часть[8]:73, достигая их полной информационной согласованности, без  безизбыточности и прозрачности. Такие системы иногда называют информационными системами предприятия и системами комплексной автоматизации предприятия.>>>",
            "К таким информационным системам относятся:\n<<<АСК НДС;\nГАС «Выборы»;\nГАС «Правосудие»;\nГосударственная автоматизированная система правовой статистики;\nГосударственная информационная система о государственных и муниципальных платежах;\nЕГАИС (алкоголь);\nЕГАИС учёта древесины;\nЕдиная биометрическая система;\nЕдиная информационная система в сфере закупок;\nИСДМ-Рослесхоз;\nФедеральная информационная адресная система;\nФедеральная государственная информационная система координации информатизации.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Информационная_система"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Монолитное_ядро"
    },
    {
        "task": [
            "Интересные факты<<<В честь проекта GNU назван астероид — (9965) GNU.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Проект_GNU"
    },
    {
        "task": [
            "Разрешение по напряжению равно разности напряжений, соответствующих максимальному и минимальному выходному коду, делённой на количество выходных дискретных значений. Например:\n<<<Пример 1\nДиапазон входных значений = от 0 до 10 вольт\nРазрядность двоичного АЦП 12 бит: 212 = 4096 уровней квантования\nРазрешение двоичного АЦП по напряжению: (10-0)/4096 = 0,00244 вольта = 2,44 мВ\nРазрядность троичного АЦП 12 трит: 312 = 531 441 уровень квантования\nРазрешение троичного АЦП по напряжению: (10-0)/531441 = 0,0188 мВ = 18,8 мкВ\nПример 2\nДиапазон входных значений = от −10 до +10 вольт\nРазрядность двоичного АЦП 14 бит: 214 = 16384 уровня квантования\nРазрешение двоичного АЦП по напряжению: (10-(-10))/16384 = 20/16384 = 0,00122 вольта = 1,22 мВ\nРазрядность троичного АЦП 14 трит: 314 = 4 782 969 уровней квантования\nРазрешение троичного АЦП по напряжению: (10-(-10))/4782969 = 0,00418 мВ = 4,18 мкВ>>>",
            "По способу применяемых алгоритмов АЦП делят на:\n<<<Последовательные прямого преобразования\nПоследовательного приближения\nПоследовательные с сигма-дельта-модуляцией\nПараллельные одноступенчатые\nПараллельные двух- и более ступенчатые (конвейерные)>>>",
            "Дополнительные сведения: АЦП прямого преобразования<<<Параллельные АЦП прямого преобразования (Direct-conversion (Flash) ADC), полностью параллельные АЦП, содержат по одному компаратору на каждый дискретный уровень входного сигнала. В любой момент времени только компараторы, соответствующие уровням ниже уровня входного сигнала, выдают на своём выходе сигнал превышения. Сигналы со всех компараторов поступают либо прямо в параллельный регистр, тогда обработка кода осуществляется программно, либо на аппаратный логический шифратор, аппаратно генерирующий нужный цифровой код в зависимости от кода на входе шифратора. Данные с шифратора фиксируются в параллельном регистре. Частота дискретизации параллельных АЦП, в общем случае, зависит от аппаратных характеристик аналоговых и логических элементов, а также от требуемой частоты выборки значений. Параллельные АЦП прямого преобразования — самые быстрые, но обычно имеют разрешение от 8 бит, как цифровые осциллографы, так как влекут за собой большие аппаратные затраты (\n\n\n\n\n2\n\nn\n\n\n−\n1\n=\n\n2\n\n8\n\n\n−\n1\n=\n255\n\n\n{\\displaystyle 2^{n}-1=2^{8}-1=255}\n\n компараторов). АЦП этого типа имеют очень большой размер кристалла микросхемы, высокую входную ёмкость, и могут выдавать кратковременные ошибки на выходе. Часто используются для видео или других высокочастотных сигналов, а также широко применяются в промышленности для отслеживания быстро изменяющихся процессов в реальном времени. Профессиональные модели могут иметь разрешение до 14 бит и выше[5].\nПараллельно-последовательные АЦП прямого преобразования (Subranging Direct-conversion (Flash) ADC)[6] частично последовательные АЦП. Были предложены R. Staffin и R. Lohman R. в 1956 году (Staffin and R. Lohman, «Signal Amplitude Quantizer», U.S. Patent 2,869,079, Filed December 19, 1956, Issued January 13, 1959)[7]. Немного уменьшая быстродействие позволяют значительно уменьшить количество ОУ до \n\n\n\nk\n⋅\n(\n\n2\n\nn\n\n/\n\nk\n\n\n−\n1\n)\n+\nk\n−\n1\n\n\n{\\displaystyle k\\cdot (2^{n/k}-1)+k-1}\n\n, где n — число битов выходного кода, а k — число параллельных АЦП прямого преобразования. При 8 битах и 2 АЦП потребуется 31 ОУ. Используют два (k=2) или более шагов-поддиапазонов. При k=2 преобразователь называется Half-Flash (Subranging) ADC. Второй, третий и т. д. АЦП служат для уменьшения ошибки квантования первого АЦП путём оцифровки этой ошибки. На первом шаге производится грубое преобразование (с низким разрешением). Далее определяется разница между входным сигналом и аналоговым сигналом, соответствующим результату грубого преобразования (со вспомогательного ЦАП, на который подаётся грубый код). На втором шаге найденная разница умножается на \n\n\n\n\n2\n\nn\n\n/\n\nk\n\n\n\n\n{\\displaystyle 2^{n/k}}\n\n и подвергается следующему преобразованию. Полученный код объединяется с грубым кодом для получения полного выходного цифрового значения. АЦП этого типа медленнее параллельных АЦП прямого преобразования, имеют высокое разрешение и небольшой размер корпуса. Для увеличения скорости выходного оцифрованного потока данных в параллельно-последовательных АЦП прямого преобразования применяется конвейерная работа параллельных АЦП.\nКонвейерная работа АЦП (Pipelined Subranging Direct-conversion (Flash) ADC)[8], применяется в параллельно-последовательных АЦП прямого преобразования, в отличие от обычного режима работы параллельно-последовательных АЦП прямого преобразования, в котором данные передаются после полного преобразования, при конвейерной работе данные частичных преобразований передаются по мере готовности до окончания полного преобразования. В 1966 году Kinniment и др. предложили архитектуру параллельно-последовательного АЦП прямого преобразования с рециркуляцией (Recirculating ADC Architecture)[9]. В этой архитектуре используется один поддиапазонный параллельный АЦП прямого преобразования.\nПоследовательные АЦП прямого преобразования (Subranging Direct-conversion (Flash) ADC), полностью последовательные АЦП (k=n), медленнее параллельных АЦП прямого преобразования и немного медленнее параллельно-последовательных АЦП прямого преобразования, но ещё больше (до \n\n\n\nn\n⋅\n(\n\n2\n\nn\n\n/\n\nn\n\n\n−\n1\n)\n+\nn\n−\n1\n=\nn\n⋅\n(\n\n2\n\n1\n\n\n−\n1\n)\n+\nn\n−\n1\n=\n2\nn\n−\n1\n\n\n{\\displaystyle n\\cdot (2^{n/n}-1)+n-1=n\\cdot (2^{1}-1)+n-1=2n-1}\n\n, где n — число битов выходного кода, а k — число параллельных АЦП прямого преобразования) уменьшают количество ОУ (при 8 битах потребуется 15 ОУ: 8 компараторов на ОУ и 7 вычитателей-умножителей на 2 на ОУ)[10]. Троичные АЦП этого вида приблизительно в 1,5 раза быстрее соизмеримых по числу уровней и аппаратных затрат двоичных АЦП этого же вида[11].>>>",
            "АЦП последовательного приближения[править | править код]<<<АЦП последовательного приближения или АЦП с поразрядным уравновешиванием содержит компаратор, вспомогательный ЦАП и регистр последовательного приближения. АЦП преобразует аналоговый сигнал в цифровой за N шагов, где N — разрядность АЦП. На каждом шаге определяется по одному биту искомого цифрового значения, начиная от СЗР (Старшего Значащего Разряда) и заканчивая МЗР (Младшим Значащим Разрядом). Последовательность действий по определению очередного бита заключается в следующем. На вспомогательном ЦАП выставляется аналоговое значение, образованное из битов, уже определённых на предыдущих шагах; бит, который должен быть определён на этом шаге, выставляется в 1, более младшие биты установлены в 0. Полученное на вспомогательном ЦАП значение сравнивается с входным аналоговым значением. Если значение входного сигнала больше значения на вспомогательном ЦАП, то определяемый бит получает значение 1, в противном случае 0. Таким образом, определение итогового цифрового значения напоминает двоичный поиск. АЦП этого типа обладают одновременно высокой скоростью и хорошим разрешением. Однако при отсутствии устройства выборки хранения погрешность будет значительно больше (представьте, что после оцифровки самого большого разряда сигнал начал меняться).>>>",
            "АЦП дифференциального кодирования[править | править код]<<<АЦП дифференциального кодирования (англ. delta-encoded ADC) содержат реверсивный счётчик, код с которого поступает на вспомогательный ЦАП. Входной сигнал и сигнал со вспомогательного ЦАП сравниваются на компараторе. Благодаря отрицательной обратной связи с компаратора на счётчик код на счётчике постоянно меняется так, чтобы сигнал со вспомогательного ЦАП как можно меньше отличался от входного сигнала. По прошествии некоторого времени разница сигналов становится меньше, чем МЗР, при этом код счётчика считывается как выходной цифровой сигнал АЦП. АЦП этого типа имеют очень большой диапазон входного сигнала и высокое разрешение, но время преобразования зависит от входного сигнала, хотя и ограничено сверху. В худшем случае время преобразования равно Tmax=(2q)/fс, где q — разрядность АЦП, fс — частота тактового генератора счётчика. АЦП дифференциального кодирования обычно являются хорошим выбором для оцифровки сигналов реального мира, так как большинство сигналов в физических системах не склонны к скачкообразным изменениям. В некоторых АЦП применяется комбинированный подход: дифференциальное кодирование и последовательное приближение; это особенно хорошо работает в случаях, когда известно, что высокочастотные компоненты в сигнале относительно невелики.>>>",
            "АЦП сравнения с пилообразным сигналом[править | править код]<<<АЦП сравнения с пилообразным сигналом (некоторые АЦП этого типа называют Интегрирующие АЦП, также к ним относятся АЦП последовательного счета) содержат генератор пилообразного напряжения (в АЦП последовательного счета генератор ступенчатого напряжения, состоящий из счетчика и ЦАП), компаратор и счётчик времени. Пилообразный сигнал линейно нарастает от нижнего до верхнего уровня, затем быстро спадает до нижнего уровня. В момент начала нарастания запускается счётчик времени. Когда пилообразный сигнал достигает уровня входного сигнала, компаратор срабатывает и останавливает счётчик; значение считывается со счётчика и подаётся на выход АЦП. Данный тип АЦП является наиболее простым по структуре и содержит минимальное число элементов. Вместе с тем простейшие АЦП этого типа обладают довольно низкой точностью и чувствительны к температуре и другим внешним параметрам. Для увеличения точности генератор пилообразного сигнала может быть построен на основе счётчика и вспомогательного ЦАП, однако такая структура не имеет никаких других преимуществ по сравнению с АЦП последовательного приближения и АЦП дифференциального кодирования.>>>",
            "АЦП с уравновешиванием заряда[править | править код]<<<АЦП с уравновешиванием заряда (к ним относятся АЦП с двухстадийным интегрированием, АЦП с многостадийным интегрированием и некоторые другие) содержат генератор стабильного тока, компаратор, интегратор тока, тактовый генератор и счётчик импульсов. Преобразование происходит в два этапа (двухстадийное интегрирование). На первом этапе значение входного напряжения преобразуется в ток (пропорциональный входному напряжению), который подаётся на интегратор тока, заряд которого изначально равен нулю. Этот процесс длится в течение времени TN, где T — период тактового генератора, N — константа (большое целое число, определяет время накопления заряда). По прошествии этого времени вход интегратора отключается от входа АЦП и подключается к генератору стабильного тока. Полярность генератора такова, что он уменьшает заряд, накопленный в интеграторе. Процесс разряда длится до тех пор, пока заряд в интеграторе не уменьшится до нуля. Время разряда измеряется путём счёта тактовых импульсов от момента начала разряда до достижения нулевого заряда на интеграторе. Посчитанное количество тактовых импульсов и будет выходным кодом АЦП. Можно показать, что количество импульсов n, посчитанное за время разряда, равно: n=UвхN(RI0)−1, где Uвх — входное напряжение АЦП, N — число импульсов этапа накопления (определено выше), R — сопротивление резистора, преобразующего входное напряжение в ток, I0 — значение тока от генератора стабильного тока, разряжающего интегратор на втором этапе. Таким образом, потенциально нестабильные параметры системы (прежде всего, ёмкость конденсатора интегратора) не входят в итоговое выражение. Это является следствием двухстадийности процесса: погрешности, введённые на первом и втором этапах, взаимно вычитаются. Не предъявляются жёсткие требования даже к долговременной стабильности тактового генератора и напряжению смещения компаратора: эти параметры должны быть стабильны лишь кратковременно, то есть в течение каждого преобразования (не более 2TN). Фактически принцип двухстадийного интегрирования позволяет напрямую преобразовывать отношение двух аналоговых величин (входного и образцового тока) в отношение числовых кодов (n и N в терминах, определённых выше) практически без внесения дополнительных ошибок. Типичная разрядность АЦП этого типа составляет от 10 до 18[источник не указан 3854 дня] двоичных разрядов. Дополнительным достоинством является возможность построения преобразователей, нечувствительных к периодическим помехам (например, помеха от сетевого питания) благодаря точному интегрированию входного сигнала за фиксированный временной интервал. Недостатком данного типа АЦП является низкая скорость преобразования. АЦП с уравновешиванием заряда используются в измерительных приборах высокой точности.>>>",
            "АЦП с промежуточным преобразованием в частоту следования импульсов[править | править код]<<<АЦП с промежуточным преобразованием в частоту следования импульсов. Сигнал с датчика проходит через преобразователь уровня, а затем через преобразователь напряжение-частота. Таким образом на вход непосредственно логической схемы поступает сигнал, характеристикой которого является лишь частота импульсов. Логический счётчик принимает эти импульсы на вход в течение времени выборки, таким образом, выдавая к её окончанию кодовую комбинацию, численно равную количеству импульсов, пришедших на преобразователь за время выборки. Такие АЦП довольно медленны и не очень точны, но тем не менее очень просты в исполнении и поэтому имеют низкую стоимость.>>>",
            "Сигма-дельта АЦП[править | править код]<<<Сигма-дельта АЦП (называемые также «дельта-сигма АЦП») производит аналого-цифровое преобразование с частотой дискретизации, во много раз превышающей требуемую, и, путём фильтрации, оставляет в сигнале только нужную спектральную полосу.>>>",
            "Современные АЦП, используемые в звукозаписи, могут работать на частотах дискретизации до 192 кГц. Многие люди, занятые в этой области, считают, что данный показатель избыточен и используется из чисто маркетинговых соображений (об этом свидетельствует теорема Котельникова — Шеннона). Можно сказать, что звуковой аналоговый сигнал не содержит столько информации, сколько может быть сохранено в цифровом сигнале при такой высокой частоте дискретизации, и зачастую для Hi-Fi-аудиотехники используется частота дискретизации 44,1 кГц (стандартная для компакт-дисков) или 48 кГц (типична для представления звука в компьютерах). Однако широкая полоса полезна следующим, причём, чем шире (больше по сравнению с минимально необходимой) полоса, тем сильнее соответствующий эффект:\n<<<упрощает и удешевляет реализацию антиалиасинговых фильтров, позволяя делать их с меньшим числом звеньев или с меньшей крутизной в полосе заграждения, что положительно сказывается на фазовой характеристике фильтра в полосе пропускания;\nупрощает требования к точности и особенно к паразитным параметрам пассивных электронных компонентов, составляющих антиалиасинговый фильтр, например, меньше влияние добротности катушек индуктивности;>>>",
            "Аналого-цифровое преобразование используется везде, где требуется принимать аналоговый сигнал и обрабатывать его в цифровой форме.\n<<<АЦП является составной частью цифрового вольтметра и мультиметра.\nСпециальные видео-АЦП используются в компьютерных ТВ-тюнерах, платах видеовхода, видеокамерах для оцифровки видеосигнала. Микрофонные и линейные аудиовходы компьютеров подключены к аудио-АЦП.\nАЦП являются составной частью систем сбора данных.\nАЦП последовательного приближения разрядностью 8-12 бит и сигма-дельта-АЦП разрядностью 16-24 бита встраиваются в однокристальные микроконтроллеры.\nОчень быстрые АЦП необходимы в цифровых осциллографах (используются параллельные и конвейерные АЦП)\nСовременные весы используют АЦП с разрядностью до 24 бит, преобразующие сигнал непосредственно от тензометрического датчика (сигма-дельта-АЦП).\nАЦП входят в состав радиомодемов и других устройств радиопередачи данных, где используются совместно с процессором ЦОС в качестве демодулятора.\nСверхбыстрые АЦП используются в цифровых антенных решётках (SMART-антеннах) в базовых станциях сотовой связи и РЛС.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Аналого-цифровой_преобразователь"
    },
    {
        "task": [
            "В начале рулона ленты с фонограммой подклеивается немагнитный ракорд, цвет которого должен соответствовать скорости записанной фонограммы:\n<<<19,05 см/с — жёлтый\n9,53 см/с — синий\n4,76 см/с — белый.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Магнитная_лента"
    },
    {
        "task": [
            "Ссылки и примечания<<<Comparing Linux/UNIX Binary Package Formats (англ.). — Сравнение бинарных форматов пакетов Linux/UNIX. Дата обращения: 31 октября 2008. Архивировано 4 марта 2012 года.\nThe Debian GNU/Linux FAQ  (рус.). — Глава 6 — Основы системы управления пакетами Debian. Дата обращения: 31 октября 2008. Архивировано 4 марта 2012 года.\nPackage Management Cheatsheet (англ.). DistroWatch.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Система_управления_пакетами"
    },
    {
        "task": [
            "Обратная разработка программного обеспечения производится с помощью следующих методик.\n<<<Анализ обмена данными, наиболее распространённый в обратной разработке протоколов обмена данными, который производится с помощью анализатора шины и пакетного сниффера для прослушивания шины компьютера и компьютерной сети соответственно.\nДизассемблирование машинного кода программы для получения её листинга на языке ассемблера. Этот способ работает на любой компьютерной программе, но требует достаточно много времени, особенно для неспециалиста.\nДекомпиляция машинного или байт-кода программы для создания исходного кода на некотором языке программирования высокого уровня.>>>",
            "Примеры:\n<<<Советский грузовик АМО-3 был практически полной копией американского грузовика «AutoCar-SA».\nСоветский лодочный мотор «Москва» был практически полной копией очень удачного американского мотора ScottAtWater.\nПример неудачного выбора прототипа для обратной разработки — советский лодочный мотор «Вихрь», копия немецкого мотора Koening.\nСоветский самолёт Ту-4, за исключением двигателей, является почти точной копией американского Boeing B-29 Superfortress.\nПрактически все бензиновые двигатели, установленные на мотоблоках, генераторах и других малогабаритных машинах китайского производства — копии японских моторов Honda GX.\nЗнаменитые японские АКПП Aisin A130 и A140 — несколько доработанные нелицензионные копии АКПП Chrysler 1940—1950-х годов, которые производились американской компанией на заводах в Японии после Второй мировой войны.\nПервые китайские внедорожники Admiral, Great Wall и другие — нелицензионные практически точные копии внедорожника Toyota Hilux Surf.>>>",
            "Обратная разработка электронных устройств появилась ещё на заре радиотехники. В 1920—1930 годах различные фирмы копировали друг у друга радиолампы и схемотехнические решения их применения. Именно с обратной разработкой, а не с лицензионным производством, связано то, что радиолампы одного назначения почти всех производителей оказались унифицированными и взаимозаменяемыми. Например европейская лампа EL95 клон более ранней американской лампы 6KA5. Есть и обратные примеры: американские 6CA5 и KT88 — клоны европейской лампы EL34. То же самое относится и к советским радиолампам, многие из которых являются клонами американских ламп, получаемых по ленд-лизу (например 6Ж4, 6П9) или немецких из трофейной аппаратуры (6Г2, ГУ50). Вместе с лампами копировались и типовые схемы их включения, то есть фактически схемы блоков радиоаппаратуры. Поэтому именно благодаря обратной разработке ламповая эпоха охарактеризовалась по сути переходом к типовому проектированию в электронике. В частности, все выпускаемые в мире бытовые приемники-супергетеродины строились фактически по трём схемам, которая определялась лампой смесительно-гетеродинного узла: двойной триод, триод-гептод или пентагрид. То же самое относилось и к усилителям низкой частоты. Существовало не более десятка типовых схем их построения в зависимости от выходной мощности: маломощные однотактные на комбинированной лампе типа 6Ф3П, маломощные однотактные с темброблоком на двойном триоде (типа 6Н1П) и выходном пентоде (6П14П, EL84) или лучевом тетроде (6П3С, EL34), двухтактные с триодным фазоинвертором (6Н1П + 2х6П14П), двухтактные многокаскадные (6Н8П + 2х6П6С + ГУ50). Чёрно-белые телевизоры в 1960—1970-х годах строились фактически двум схемам: одна для совсем простых аппаратов с малыми размерами экрана без АПЧГ и АПЧиФ строчной развёртки (по типу советских телевизоров УНТ-35), вторая схема предназначалась для аппаратов на кинескопах с углом отклонения луча 110°, АПЧГ, АПЧиФ (советские УНТ-59, большинство телевизоров европейских фирм)[источник не указан 712 дней].\n<<<Советская игра «Ну, погоди!» («Электроника ИМ-02») является нелицензионной копией японской игры Nintendo EG-26.\nКопирование различных электронных блоков без фактической разработки. Известно[9], что многие элементы, в частности, ТТЛ различных компаний и национальных стандартов, взаимозаменяемы. Например, американская серия интегральных схем 7400 и её советский аналог К(Р)155.>>>",
            "Самыми[источник не указан 3817 дней] известными фактами обратной разработки являлись:\n<<<Немецкие канистры для бензина — в британских и американских войсках заметили, что немцы имели очень удобные канистры. Они скопировали эти канистры, и те получили название Jerry cans (от слова «gerrys» — от «Germans»)[10].\nТуполев Ту-4 — несколько американских бомбардировщиков B-29 при осуществлении вылетов в Японию совершили вынужденную посадку в СССР. Советские военные, не имевшие подобных стратегических бомбардировщиков, решили скопировать B-29. Через несколько лет они разработали Ту-4, практически его полную копию[11]. В то же время двигатели, вооружение и радиоэлектронное оборудование Ту-4 не было копиями соответствующих систем В-29.\nТепловоз ТЭ1 — в 1945 году тепловоз RSD-1 (Да) (поставлялся в СССР по ленд-лизу) привёл литерный поезд Сталина на Потсдамскую конференцию. Сталин высоко оценил данный локомотив, поэтому в 1947 году начался выпуск советской копии американского тепловоза — ТЭ1. Несмотря на некоторые отличия в размерах и отдельном оборудовании, ТЭ1 оказался практически идентичен Да[12]. Все нынешние российские маневровые тепловозы — потомки американского тепловоза.\nМиномёты — немцы в военные годы успешно скопировали советские трофейные 120 мм миномёты, которые взяли себе на вооружение под именем Granatwerfer 42.\nАвтомат Калашникова — недавно руководство ОАО «Ижмаш» заявило, что около половины всех АК в мире — «контрафактные» (то есть, производимые без лицензии и передачи технологий), из-за чего Россия недополучает около миллиарда долларов в год. В то же время, патентные ограничения (если таковые имелись) на технологии и технические решения утратили свою силу[13].\nАмериканский гранатомёт PSRL-1[англ.] является нелицензионной модернизированной копией советского РПГ-7.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Обратная_разработка"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Амплитудно-частотная_характеристика"
    },
    {
        "task": [
            "Apple разделила код Swift на несколько открытых репозиториев.\n<<<Компилятор и стандартная библиотека:\nSwift: основной Swift репозиторий, который содержит исходный код для компилятора Swift, стандартная библиотека и SourceKit;\nSwift-Evolution: документы, относящиеся к продолжающемуся развитию Swift, включая цели для предстоящих выпусков, предложения для изменений и расширений Swift;\nБиблиотеки ядра:\nSwift corelibs-foundation: исходный код для Foundation, который предоставляет общую функциональность для всех приложений;\nSwift corelibs-libdispatch: исходный код для libdispatch, который предоставляет примитивы параллелизма для работы на многоядерном аппаратном обеспечении;\nSwift corelibs-xctest: исходный код для XCTest, который обеспечивает фундаментальную инфраструктуру тестирования для Swift-приложений и библиотек;\nМенеджер пакетов:\nSwift package-manager: исходный код для менеджера пакетов Swift;\nSwift llbuild: исходный код для llbuild, системы низкого уровня, которую использует Swift package-manager;\nКлонированные репозитории:\nSwift опирается на несколько других проектов с открытым кодом, особенно на компилятор LLVM.\nSwift llvm: исходный код LLVM, с кусочками Swift-дополнений;\nSwift clang: исходный код для Clang, с кусочками Swift дополнений;\nSwift lldb: исходный код Swift-версии LLDB, для отладки Swift программ;>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Swift_(язык_программирования)"
    },
    {
        "task": [
            "Системы распознавания речи классифицируются:[6]\n<<<по размеру словаря (ограниченный набор слов, словарь большого размера);\nпо зависимости от диктора (дикторозависимые и дикторонезависимые системы);\nпо типу речи (слитная или раздельная речь);\nпо назначению (системы диктовки, командные системы);\nпо используемому алгоритму (нейронные сети, скрытые Марковские модели, динамическое программирование);\nпо типу структурной единицы (фразы, слова, фонемы, дифоны, аллофоны);\nпо принципу выделения структурных единиц (распознавание по шаблону, выделение лексических элементов).>>>",
            "Для систем автоматического распознавания речи, помехозащищённость обеспечивается, прежде всего, использованием двух механизмов:[7]\n<<<Использование нескольких, параллельно работающих, способов выделения одних и тех же элементов речевого сигнала на базе анализа акустического сигнала;\nПараллельное независимое использование сегментного (фонемного) и целостного восприятия слов в потоке речи.>>>",
            "Сегодня системы распознавания речи строятся на основе [кем?] форм распознавания[неизвестный термин]. Методы и алгоритмы, которые использовались до сих пор, могут быть разделены на следующие большие классы распознавания речи на основе сравнения с эталоном.:[10][11]\n<<<Динамическое программирование — временные динамические алгоритмы (Dynamic Time Warping).>>>",
            "Контекстно-зависимая классификация.\nПри её реализации из потока речи выделяются отдельные лексические элементы — фонемы и аллофоны, которые затем объединяются в слоги и морфемы.\n<<<Методы дискриминантного анализа, основанные на Байесовской дискриминации (Bayesian discrimination);\nСкрытые Марковские модели (Hidden Markov Model, см. Марковское свойство);\nНейронные сети (Neural networks).>>>",
            "Одна из архитектур систем автоматической обработки речи, основанной на статистических данных, может быть следующей[12][13]:\n<<<Модуль шумоочистки и отделение полезного сигнала.\nАкустическая модель — позволяет оценить распознавание речевого сегмента с точки зрения схожести на звуковом уровне. Для каждого звука изначально строится сложная статистическая модель, которая описывает произнесение этого звука в речи.\nЯзыковая модель — позволяют определить наиболее вероятные последовательности слов. Сложность построения языковой модели во многом зависит от конкретного языка. Так, для английского языка достаточно использовать статистические модели (так называемые N-граммы). Для высокофлективных языков (языков, в которых существует много форм одного и того же слова), к которым относится и русский, языковые модели, построенные только с использованием статистики, уже не дают такого эффекта — слишком много нужно данных, чтобы достоверно оценить статистические связи между словами. Поэтому применяют гибридные языковые модели, использующие правила русского языка, информацию о части речи и форме слова и классическую статистическую модель.\nFactored language model[англ.]\nCache language model[англ.]\nKatz's back-off model[англ.]>>>",
            "Модуль шумоочистки и отделение полезного сигнала.\nАкустическая модель — позволяет оценить распознавание речевого сегмента с точки зрения схожести на звуковом уровне. Для каждого звука изначально строится сложная статистическая модель, которая описывает произнесение этого звука в речи.\nЯзыковая модель — позволяют определить наиболее вероятные последовательности слов. Сложность построения языковой модели во многом зависит от конкретного языка. Так, для английского языка достаточно использовать статистические модели (так называемые N-граммы). Для высокофлективных языков (языков, в которых существует много форм одного и того же слова), к которым относится и русский, языковые модели, построенные только с использованием статистики, уже не дают такого эффекта — слишком много нужно данных, чтобы достоверно оценить статистические связи между словами. Поэтому применяют гибридные языковые модели, использующие правила русского языка, информацию о части речи и форме слова и классическую статистическую модель.\nFactored language model[англ.]\nCache language model[англ.]\nKatz's back-off model[англ.]<<<Декодер — программный компонент системы распознавания, который совмещает данные, получаемые в ходе распознавания от акустических и языковых моделей, и на основании их объединения, определяет наиболее вероятную последовательность слов, которая и является конечным результатом распознавания слитной речи.>>>",
            "Этапы распознавания[12]:\n<<<Обработка речи начинается с оценки качества речевого сигнала. На этом этапе определяется уровень помех и искажений.\nРезультат оценки поступает в модуль акустической адаптации, который управляет модулем расчета параметров речи, необходимых для распознавания.\nВ сигнале выделяются участки, содержащие речь, и происходит оценка параметров речи. Происходит выделение фонетических и просодических вероятностных характеристик для синтаксического, семантического и прагматического анализа. (Оценка информации о части речи, форме слова и статистические связи между словами.)\nДалее параметры речи поступают в основной блок системы распознавания — декодер. Это компонент, который сопоставляет входной речевой поток с информацией, хранящейся в акустических и языковых моделях, и определяет наиболее вероятную последовательность слов, которая и является конечным результатом распознавания.>>>",
            "Спектральные признаки:\n<<<Среднее значение спектра анализируемого речевого сигнала;\nНормализованные средние значения спектра;\nОтносительное время пребывания сигнала в полосах спектра;\nНормализованное время пребывания сигнала в полосах спектра;\nМедианное значение спектра речи в полосах;\nОтносительная мощность спектра речи в полосах;\nВариация огибающих спектра речи;\nНормализованные величины вариации огибающих спектра речи;\nКоэффициенты кросскорреляции спектральных огибающих между полосами спектра.>>>",
            "Временные признаки:\n<<<Длительность сегмента, фонемы;\nВысота сегмента;\nКоэффициент формы сегмента.>>>",
            "Спектрально-временные признаки характеризуют речевой сигнал в его физико-математической сущности исходя из наличия компонентов трех видов:\n<<<периодических (тональных) участков звуковой волны;\nнепериодических участков звуковой волны (шумовых, взрывных);\nучастков, не содержащих речевых пауз.>>>",
            "Кепстральные признаки[править | править код]<<<Мел-частотные кепстральные коэффициенты;\nКоэффициенты линейного предсказания с коррекцией на неравномерность чувствительности человеческого уха;\nКоэффициенты мощности частоты регистрации;\nКоэффициенты спектра линейного предсказания;\nКоэффициенты кепстра линейного предсказания.>>>",
            "Амплитудно-частотные признаки[править | править код]<<<Интенсивность, амплитуда\nЭнергия\nЧастота основного тона (ЧОТ)\nФормантные частоты\nДжиттер (jitter) — дрожание частотная модуляция основного тона (шумовой параметр);\nШиммер (shimmer) — амплитудная модуляция на основном тоне (шумовой параметр);\nРадиальная базисная ядерная функция\nНелинейный оператор Тигер>>>",
            "Признаки нелинейной динамики[править | править код]<<<Отображение Пуанкаре;\nРекуррентный график;\nМаксимальный характеристический показатель Ляпунова — Эмоциональное состояние человека, которому соответствует определенная геометрия аттрактора (фазовый портрет);[16]\nФазовый портрет (аттрактор);\nРазмерность Каплана-Йорка — количественная мера эмоционального состояния человека, от «спокойствия» до «гнева» (деформация и последующее смещение спектра речевого сигнала).[16].>>>",
            "Параметры качества речи по цифровым каналам:\n[17]\n<<<Слоговая разборчивость речи;\nФразовая разборчивость речи;\nКачество речи по сравнению с качеством речи эталонного тракта;\nКачество речи в реальных условиях работы.>>>",
            "Основные понятия[править | править код]<<<Разборчивость речи — относительное количество правильно принятых элементов речи (звуков, слогов, слов, фраз), выраженное в процентах от общего числа переданных элементов.\nКачество речи — параметр, характеризующий субъективную оценку звучания речи в испытуемой системе передачи речи.\nНормальный темп речи — произнесение речи со скоростью, при которой средняя длительность контрольной фразы равна 2,4 с.\nУскоренный темп речи — произнесение речи со скоростью, при которой средняя длительность контрольной фразы равна 1,5-1,6 с.\nУзнаваемость голоса говорящего — возможность слушателей отождествлять звучание голоса, с конкретным лицом, известным слушателю ранее.\nСмысловая разборчивость — показатель степени правильного воспроизведения информационного содержания речи.\nИнтегральное качество — показатель, характеризующий общее впечатление слушателя от принимаемой речи.>>>",
            "Основным преимуществом голосовых систем объявлялась дружественность к пользователю. Речевые команды должны были избавить конечного пользователя от необходимости использования сенсорных и иных методов ввода данных и команд.\n<<<Голосовое управление\nГолосовые команды\nГолосовой ввод текста\nГолосовой поиск>>>",
            "Помимо мобильных устройств, технология распознавания речи находит широкое распространение в различных сферах бизнеса:\n<<<Телефония: автоматизация обработки входящих и исходящих звонков путём создания голосовых систем самообслуживания в частности для: получения справочной информации и консультирования, заказа услуг/товаров, изменения параметров действующих услуг, проведения опросов, анкетирования, сбора информации, информирования и любые другие сценарии;\nРешения «Умный дом»: голосовой интерфейс управления системами «Умный дом»;\nБытовая техника и роботы: голосовой интерфейс электронных роботов; голосовое управление бытовой техникой и т.д;\nДесктопы и ноутбуки: голосовой ввод в компьютерных играх и приложениях;\nАвтомобили: голосовое управление в салоне автомобиля — например, навигационной системой;\nСоциальные сервисы для людей с ограниченными возможностями.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Распознавание_речи"
    },
    {
        "task": [
            "Почти каждому члену класса можно установить модификатор доступа (за исключением статических конструкторов и некоторых других вещей). В большинстве объектно-ориентированных языков программирования поддерживаются следующие модификаторы доступа:\n<<<private (закрытый, внутренний член класса) — обращения к члену допускаются только из методов того класса, в котором этот член определён. Любые наследники класса уже не смогут получить доступ к этому члену. Наследование по типу private делает все члены родительского класса (в том числе public и protected) private-членами класса-наследника (C++);\nprotected (защищённый, внутренний член иерархии классов) — обращения к члену допускаются из методов того класса, в котором этот член определён, а также из любых методов его классов-наследников. Наследование по типу protected делает все public-члены родительского класса protected-членами класса-наследника (C++);\npublic (открытый член класса) — обращения к члену допускаются из любой части кода. Наследование по типу public не меняет модификаторов родительского класса (C++);>>>",
            "Отношения между классами<<<Наследование (Генерализация) — объекты дочернего класса наследуют все свойства родительского класса.\nАссоциация — объекты классов вступают во взаимодействие между собой.\nАгрегация — объекты одного класса входят в объекты другого.\nКомпозиция — объекты одного класса входят в объекты другого и зависят друг от друга по времени жизни.\nКласс-Метакласс — отношение, при котором экземплярами одного класса являются другие классы.>>>",
            "См. также: Наследование (программирование)<<<Базовый (родительский) класс\nПроизводный класс (наследник, потомок)\nАбстрактный класс\nИнтерфейс>>>",
            "  TMyClass = class(TObject)\n  private\n    {Описанные в этой секции элементы не доступны извне (за пределами класса, но доступны в пределах модуля).}\n    {Здесь обычно находятся поля класса.}\n  strict private\n    {Для версии Delphi 2007 и выше. Описанные в этой секции элементы доступны только внутри класса}\n  protected\n    {Описанные в этой секции элементы доступны только классу и всем его потомкам.}\n  public\n    {Описанные в этой секции элементы доступны всем.}\n  published\n    {Описанные в этой секции элементы доступны всем и отображаются в Object Inspector'e.}\n  end;\n<<<TMyClass — имя класса;\nclass — ключевое слово, начинающее определение класса (в старых версиях также было ключевое слово object);\nTObject — класс-предок, если есть наследование;\nprivate, protected, public, published — ключевые слова, определяющие иерархический доступ к полям и методам в виде обозначения секций областей доступа.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Класс_(программирование)"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Транспондер"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Виртуальная_файловая_система"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Текстовый_редактор"
    },
    {
        "task": [
            "На Западе эта последовательность была исследована Леонардо Пизанским, известным как Фибоначчи, в его труде «Книга абака» (1202)[12][13]. Он рассматривает развитие идеализированной (биологически нереальной) популяции кроликов, где условия таковы: изначально дана новорождённая пара кроликов (самец и самка); со второго месяца после своего рождения кролики начинают спариваться и производить новую пару кроликов, причём уже каждый месяц; кролики никогда не умирают[14][15], — а в качестве искомого выдвигает количество пар кроликов через год.\n<<<В начале первого месяца есть только одна новорождённая пара (1).\nВ конце первого месяца по-прежнему только одна пара кроликов, но уже спарившаяся (1).\nВ конце второго месяца первая пара рождает новую пару и опять спаривается (2).\nВ конце третьего месяца первая пара рождает ещё одну новую пару и спаривается, вторая пара только спаривается (3).\nВ конце четвёртого месяца первая пара рождает ещё одну новую пару и спаривается, вторая пара рождает новую пару и спаривается, третья пара только спаривается (5).>>>",
            "Иллюстрация формулы для суммы квадратов первых n чисел Фибоначчи[19]<<<\n\n\n\n\nF\n\n1\n\n\n+\n\nF\n\n2\n\n\n+\n\nF\n\n3\n\n\n+\n⋯\n+\n\nF\n\nn\n\n\n=\n\nF\n\nn\n+\n2\n\n\n−\n1.\n\n\n{\\displaystyle F_{1}+F_{2}+F_{3}+\\dots +F_{n}=F_{n+2}-1.}\n\n[20]>>>",
            "Доказательство\nДокажем формулу индукцией по n:\nБаза индукции: \n\n\n\nn\n=\n0\n:\n\n\n{\\displaystyle n=0\\colon }\n\n\n\n\n\n\n\nF\n\n0\n\n\n=\n\nF\n\n2\n\n\n−\n1\n=\n0.\n\n\n{\\displaystyle F_{0}=F_{2}-1=0.}\n\n\nШаг индукции: пусть утверждение для \n\n\n\nn\n\n\n{\\displaystyle n}\n\n верно:\n\n\n\n\n\nF\n\n1\n\n\n+\n\nF\n\n2\n\n\n+\n\nF\n\n3\n\n\n+\n.\n.\n.\n+\n\nF\n\nn\n\n\n=\n\nF\n\nn\n+\n2\n\n\n−\n1.\n\n\n{\\displaystyle F_{1}+F_{2}+F_{3}+...+F_{n}=F_{n+2}-1.}\n\n\nТогда надо доказать утверждение для \n\n\n\nn\n+\n1\n:\n\n\n{\\displaystyle n+1\\colon }\n\n\n\n\n\n\n\nF\n\n1\n\n\n+\n\nF\n\n2\n\n\n+\n\nF\n\n3\n\n\n+\n.\n.\n.\n+\n\nF\n\nn\n\n\n+\n\nF\n\nn\n+\n1\n\n\n=\n\nF\n\nn\n+\n3\n\n\n−\n1.\n\n\n{\\displaystyle F_{1}+F_{2}+F_{3}+...+F_{n}+F_{n+1}=F_{n+3}-1.}\n\n\n\nРаскладываем \n\n\n\n\nF\n\nn\n+\n3\n\n\n\n\n{\\displaystyle F_{n+3}}\n\n на \n\n\n\n\nF\n\nn\n+\n2\n\n\n\n\n{\\displaystyle F_{n+2}}\n\n и \n\n\n\n\nF\n\nn\n+\n1\n\n\n:\n\n\n{\\displaystyle F_{n+1}\\colon }\n\n\n\n\n\n\n\nF\n\n1\n\n\n+\n\nF\n\n2\n\n\n+\n\nF\n\n3\n\n\n+\n.\n.\n.\n+\n\nF\n\nn\n\n\n+\n\nF\n\nn\n+\n1\n\n\n=\n\nF\n\nn\n+\n2\n\n\n+\n\nF\n\nn\n+\n1\n\n\n−\n1\n\n\n{\\displaystyle F_{1}+F_{2}+F_{3}+...+F_{n}+F_{n+1}=F_{n+2}+F_{n+1}-1}\n\n\nСокращаем обе части на \n\n\n\n\nF\n\nn\n+\n1\n\n\n:\n\n\n{\\displaystyle F_{n+1}\\colon }\n\n\n\n\n\n\n\nF\n\n1\n\n\n+\n\nF\n\n2\n\n\n+\n\nF\n\n3\n\n\n+\n.\n.\n.\n+\n\nF\n\nn\n\n\n=\n\nF\n\nn\n+\n2\n\n\n−\n1\n,\n\n\n{\\displaystyle F_{1}+F_{2}+F_{3}+...+F_{n}=F_{n+2}-1,}\n\n\nчто и требовалось доказать. ∎\n\n<<<\n\n\n\n\nF\n\n1\n\n\n+\n\nF\n\n3\n\n\n+\n\nF\n\n5\n\n\n+\n⋯\n+\n\nF\n\n2\nn\n−\n1\n\n\n=\n\nF\n\n2\nn\n\n\n.\n\n\n{\\displaystyle F_{1}+F_{3}+F_{5}+\\dots +F_{2n-1}=F_{2n}.}\n\n[20][21]>>>",
            "Доказательство\nДокажем формулу индукцией по n:\nБаза индукции: \n\n\n\nn\n=\n1\n:\n\n\n{\\displaystyle n=1\\colon }\n\n\n\n\n\n\n\nF\n\n1\n\n\n=\n\nF\n\n2\n\n\n=\n1.\n\n\n{\\displaystyle F_{1}=F_{2}=1.}\n\n\nШаг индукции: Пусть утверждение для \n\n\n\nn\n\n\n{\\displaystyle n}\n\n верно:\n\n\n\n\n\nF\n\n1\n\n\n+\n\nF\n\n3\n\n\n+\n\nF\n\n5\n\n\n+\n⋯\n+\n\nF\n\n2\nn\n−\n1\n\n\n=\n\nF\n\n2\nn\n\n\n.\n\n\n{\\displaystyle F_{1}+F_{3}+F_{5}+\\dots +F_{2n-1}=F_{2n}.}\n\n\nТогда надо доказать утверждение для \n\n\n\nn\n+\n1\n:\n\n\n{\\displaystyle n+1\\colon }\n\n\n\n\n\n\n\nF\n\n1\n\n\n+\n\nF\n\n3\n\n\n+\n\nF\n\n5\n\n\n+\n⋯\n+\n\nF\n\n2\nn\n−\n1\n\n\n+\n\nF\n\n2\nn\n+\n1\n\n\n=\n\nF\n\n2\nn\n+\n2\n\n\n.\n\n\n{\\displaystyle F_{1}+F_{3}+F_{5}+\\dots +F_{2n-1}+F_{2n+1}=F_{2n+2}.}\n\n\n\nРаскладываем \n\n\n\n\nF\n\n2\nn\n+\n2\n\n\n\n\n{\\displaystyle F_{2n+2}}\n\n на \n\n\n\n\nF\n\n2\nn\n+\n1\n\n\n\n\n{\\displaystyle F_{2n+1}}\n\n и \n\n\n\n\nF\n\n2\nn\n\n\n:\n\n\n{\\displaystyle F_{2n}\\colon }\n\n\n\n\n\n\n\nF\n\n1\n\n\n+\n\nF\n\n3\n\n\n+\n\nF\n\n5\n\n\n+\n⋯\n+\n\nF\n\n2\nn\n−\n1\n\n\n+\n\nF\n\n2\nn\n+\n1\n\n\n=\n\nF\n\n2\nn\n+\n1\n\n\n+\n\nF\n\n2\nn\n\n\n.\n\n\n{\\displaystyle F_{1}+F_{3}+F_{5}+\\dots +F_{2n-1}+F_{2n+1}=F_{2n+1}+F_{2n}.}\n\n\nСокращаем обе части на \n\n\n\n\nF\n\n2\nn\n+\n1\n\n\n:\n\n\n{\\displaystyle F_{2n+1}\\colon }\n\n\n\n\n\n\n\nF\n\n1\n\n\n+\n\nF\n\n3\n\n\n+\n\nF\n\n5\n\n\n+\n⋯\n+\n\nF\n\n2\nn\n−\n1\n\n\n=\n\nF\n\n2\nn\n\n\n.\n\n\n{\\displaystyle F_{1}+F_{3}+F_{5}+\\dots +F_{2n-1}=F_{2n}.}\n\n\nчто и требовалось доказать. ∎\n\n<<<\n\n\n\n\nF\n\n2\n\n\n+\n\nF\n\n4\n\n\n+\n\nF\n\n6\n\n\n+\n⋯\n+\n\nF\n\n2\nn\n\n\n=\n\nF\n\n2\nn\n+\n1\n\n\n−\n1.\n\n\n{\\displaystyle F_{2}+F_{4}+F_{6}+\\dots +F_{2n}=F_{2n+1}-1.}\n\n[20][22]>>>",
            "Это тождество можно доказать вычитанием первого из второго: \n\n\n\n\n\n\n\n(\n\nF\n\n1\n\n\n+\n\nF\n\n2\n\n\n+\n⋯\n+\n\nF\n\n\n\n2\n\n\nn\n\n\n)\n−\n(\n\nF\n\n1\n\n\n+\n\nF\n\n3\n\n\n+\n⋯\n+\n\nF\n\n2\nn\n−\n1\n\n\n)\n\n\n\n=\n\nF\n\n\n\n2\n\n\nn\n+\n2\n\n\n−\n1\n−\n\nF\n\n2\nn\n\n\n,\n\n\n\n\n\nF\n\n2\n\n\n+\n\nF\n\n4\n\n\n+\n⋯\n+\n\nF\n\n2\nn\n\n\n\n\n\n=\n\nF\n\n2\nn\n+\n1\n\n\n−\n1.\n\n\n\n\n\n\n{\\displaystyle {\\begin{alignedat}{2}(F_{1}+F_{2}+\\dots +F_{{\\color {Red}2}n})-(F_{1}+F_{3}+\\dots +F_{2n-1})&=F_{{\\color {Red}2}n+2}-1-F_{2n},\\\\F_{2}+F_{4}+\\dots +F_{2n}&=F_{2n+1}-1.\\\\\\end{alignedat}}}\n\n<<<\n\n\n\n\nF\n\nn\n+\n1\n\n\n\nF\n\nn\n+\n2\n\n\n−\n\nF\n\nn\n\n\n\nF\n\nn\n+\n3\n\n\n=\n(\n−\n1\n\n)\n\nn\n\n\n.\n\n\n{\\displaystyle F_{n+1}F_{n+2}-F_{n}F_{n+3}=(-1)^{n}.}\n\n[23]\n\n\n\n\n\nF\n\n1\n\n\n2\n\n\n+\n\nF\n\n2\n\n\n2\n\n\n+\n\nF\n\n3\n\n\n2\n\n\n+\n⋯\n+\n\nF\n\nn\n\n\n2\n\n\n=\n\nF\n\nn\n\n\n\nF\n\nn\n+\n1\n\n\n\n\n{\\displaystyle F_{1}^{2}+F_{2}^{2}+F_{3}^{2}+\\dots +F_{n}^{2}=F_{n}F_{n+1}}\n\n (см. рис.).\n\n\n\n\n\nF\n\nn\n\n\n2\n\n\n+\n\nF\n\nn\n+\n1\n\n\n2\n\n\n=\n\nF\n\n2\nn\n+\n1\n\n\n.\n\n\n{\\displaystyle F_{n}^{2}+F_{n+1}^{2}=F_{2n+1}.}\n\n[20]\n\n\n\n\n\nF\n\n2\nn\n\n\n=\n\nF\n\nn\n+\n1\n\n\n2\n\n\n−\n\nF\n\nn\n−\n1\n\n\n2\n\n\n.\n\n\n{\\displaystyle F_{2n}=F_{n+1}^{2}-F_{n-1}^{2}.}\n\n[20]\n\n\n\n\n\nF\n\n3\nn\n\n\n=\n\nF\n\nn\n+\n1\n\n\n3\n\n\n+\n\nF\n\nn\n\n\n3\n\n\n−\n\nF\n\nn\n−\n1\n\n\n3\n\n\n.\n\n\n{\\displaystyle F_{3n}=F_{n+1}^{3}+F_{n}^{3}-F_{n-1}^{3}.}\n\n[24]\n\n\n\n\n\nF\n\n5\nn\n\n\n=\n25\n\nF\n\nn\n\n\n5\n\n\n+\n25\n(\n−\n1\n\n)\n\nn\n\n\n\nF\n\nn\n\n\n3\n\n\n+\n5\n\nF\n\nn\n\n\n.\n\n\n{\\displaystyle F_{5n}=25F_{n}^{5}+25(-1)^{n}F_{n}^{3}+5F_{n}.}\n\n\n\n\n\n\n\nF\n\nn\n+\n1\n\n\n=\n\nC\n\nn\n\n\n0\n\n\n+\n\nC\n\nn\n−\n1\n\n\n1\n\n\n+\n\nC\n\nn\n−\n2\n\n\n2\n\n\n+\n…\n\n\n{\\displaystyle F_{n+1}=C_{n}^{0}+C_{n-1}^{1}+C_{n-2}^{2}+\\dots }\n\n[25], где \n\n\n\n\nC\n\nn\n\n\nk\n\n\n\n\n{\\displaystyle C_{n}^{k}}\n\n — биномиальные коэффициенты.>>>",
            "И более общие формулы:\n<<<\n\n\n\n\nF\n\nn\n+\nm\n\n\n=\n\nF\n\nn\n−\n1\n\n\n\nF\n\nm\n\n\n+\n\nF\n\nn\n\n\n\nF\n\nm\n+\n1\n\n\n=\n\nF\n\nn\n+\n1\n\n\n\nF\n\nm\n+\n1\n\n\n−\n\nF\n\nn\n−\n1\n\n\n\nF\n\nm\n−\n1\n\n\n.\n\n\n{\\displaystyle F_{n+m}=F_{n-1}F_{m}+F_{n}F_{m+1}=F_{n+1}F_{m+1}-F_{n-1}F_{m-1}.}\n\n[26]\n\n\n\n\n\nF\n\n(\nk\n+\n1\n)\nn\n\n\n=\n\nF\n\nn\n−\n1\n\n\n\nF\n\nk\nn\n\n\n+\n\nF\n\nn\n\n\n\nF\n\nk\nn\n+\n1\n\n\n.\n\n\n{\\displaystyle F_{(k+1)n}=F_{n-1}F_{kn}+F_{n}F_{kn+1}.}\n\n\n\n\n\n\n\nF\n\nn\n\n\n=\n\nF\n\nl\n\n\n\nF\n\nn\n−\nl\n+\n1\n\n\n+\n\nF\n\nl\n−\n1\n\n\n\nF\n\nn\n−\nl\n\n\n.\n\n\n{\\displaystyle F_{n}=F_{l}F_{n-l+1}+F_{l-1}F_{n-l}.}\n\n\nЧисла Фибоначчи представляются значениями континуант на наборе единиц: \n\n\n\n\nF\n\nn\n+\n1\n\n\n=\n\nK\n\nn\n\n\n(\n1\n,\n…\n,\n1\n)\n,\n\n\n{\\displaystyle F_{n+1}=K_{n}(1,\\dots ,1),}\n\n то есть\n\n\n\n\n\nF\n\nn\n+\n1\n\n\n=\ndet\n\n\n(\n\n\n\n1\n\n\n1\n\n\n0\n\n\n⋯\n\n\n0\n\n\n\n\n−\n1\n\n\n1\n\n\n1\n\n\n⋱\n\n\n⋮\n\n\n\n\n0\n\n\n−\n1\n\n\n⋱\n\n\n⋱\n\n\n0\n\n\n\n\n⋮\n\n\n⋱\n\n\n⋱\n\n\n⋱\n\n\n1\n\n\n\n\n0\n\n\n⋯\n\n\n0\n\n\n−\n1\n\n\n1\n\n\n\n)\n\n\n\n\n{\\displaystyle F_{n+1}=\\det {\\begin{pmatrix}1&1&0&\\cdots &0\\\\-1&1&1&\\ddots &\\vdots \\\\0&-1&\\ddots &\\ddots &0\\\\\\vdots &\\ddots &\\ddots &\\ddots &1\\\\0&\\cdots &0&-1&1\\end{pmatrix}}}\n\n, а также \n\n\n\n \n\nF\n\nn\n+\n1\n\n\n=\ndet\n\n\n(\n\n\n\n1\n\n\ni\n\n\n0\n\n\n⋯\n\n\n0\n\n\n\n\ni\n\n\n1\n\n\ni\n\n\n⋱\n\n\n⋮\n\n\n\n\n0\n\n\ni\n\n\n⋱\n\n\n⋱\n\n\n0\n\n\n\n\n⋮\n\n\n⋱\n\n\n⋱\n\n\n⋱\n\n\ni\n\n\n\n\n0\n\n\n⋯\n\n\n0\n\n\ni\n\n\n1\n\n\n\n)\n\n\n,\n\n\n{\\displaystyle \\ F_{n+1}=\\det {\\begin{pmatrix}1&i&0&\\cdots &0\\\\i&1&i&\\ddots &\\vdots \\\\0&i&\\ddots &\\ddots &0\\\\\\vdots &\\ddots &\\ddots &\\ddots &i\\\\0&\\cdots &0&i&1\\end{pmatrix}},}\n\n>>>",
            "где матрицы имеют размер \n\n\n\nn\n×\nn\n\n\n{\\displaystyle n\\times n}\n\n и где i — мнимая единица.<<<Числа Фибоначчи можно выразить через многочлены Чебышёва:\n\n\n\n\n\nF\n\nn\n+\n1\n\n\n=\n(\n−\ni\n\n)\n\nn\n\n\n\nU\n\nn\n\n\n\n(\n\n\n\n−\ni\n\n2\n\n\n)\n\n,\n\n\n{\\displaystyle F_{n+1}=(-i)^{n}U_{n}\\left({\\frac {-i}{2}}\\right),}\n\n\n\n\n\n\n\nF\n\n2\nn\n+\n2\n\n\n=\n\nU\n\nn\n\n\n\n(\n\n\n3\n2\n\n\n)\n\n.\n\n\n{\\displaystyle F_{2n+2}=U_{n}\\left({\\frac {3}{2}}\\right).}\n\n\nДля любого n справедливо\n\n\n\n\n\n\n\n(\n\n\n\n1\n\n\n1\n\n\n\n\n1\n\n\n0\n\n\n\n)\n\n\n\nn\n\n\n=\n\n\n(\n\n\n\n\nF\n\nn\n+\n1\n\n\n\n\n\nF\n\nn\n\n\n\n\n\n\n\nF\n\nn\n\n\n\n\n\nF\n\nn\n−\n1\n\n\n\n\n\n)\n\n\n.\n\n\n{\\displaystyle {\\begin{pmatrix}1&1\\\\1&0\\end{pmatrix}}^{n}={\\begin{pmatrix}F_{n+1}&F_{n}\\\\F_{n}&F_{n-1}\\end{pmatrix}}.}\n\n\nКак следствие, подсчёт определителей даёт тождество Кассини:[27][28]>>>",
            "\n\n\n\n(\n−\n1\n\n)\n\nn\n\n\n=\n\nF\n\nn\n+\n1\n\n\n\nF\n\nn\n−\n1\n\n\n−\n\nF\n\nn\n\n\n2\n\n\n.\n\n\n{\\displaystyle (-1)^{n}=F_{n+1}F_{n-1}-F_{n}^{2}.}\n\n<<<С равенством Кассини сопряжено более общее утверждение, названное в честь Эжена Каталана:\n\n\n\n\nF\n\nn\n\n\n2\n\n\n−\n\nF\n\nn\n−\nr\n\n\n\nF\n\nn\n+\nr\n\n\n=\n(\n−\n1\n\n)\n\nn\n−\nr\n\n\n\nF\n\nr\n\n\n2\n\n\n.\n\n\n{\\displaystyle F_{n}^{2}-F_{n-r}F_{n+r}=(-1)^{n-r}F_{r}^{2}.}\n\n>>>",
            "С равенством Кассини сопряжено более общее утверждение, названное в честь Эжена Каталана:\n\n\n\n\nF\n\nn\n\n\n2\n\n\n−\n\nF\n\nn\n−\nr\n\n\n\nF\n\nn\n+\nr\n\n\n=\n(\n−\n1\n\n)\n\nn\n−\nr\n\n\n\nF\n\nr\n\n\n2\n\n\n.\n\n\n{\\displaystyle F_{n}^{2}-F_{n-r}F_{n+r}=(-1)^{n-r}F_{r}^{2}.}\n\n<<<\n\n\n\n\nF\n\nn\n+\n1\n\n\n=\n\n\n\n\nF\n\nn\n\n\n+\n\n\n5\n\nF\n\nn\n\n\n2\n\n\n+\n4\n(\n−\n1\n\n)\n\nn\n\n\n\n\n\n2\n\n\n.\n\n\n{\\displaystyle F_{n+1}={\\frac {F_{n}+{\\sqrt {5F_{n}^{2}+4(-1)^{n}}}}{2}}.}\n\nЭто утверждение выводится из тождества Кассини при помощи основного соотношения чисел Фибоначчи: \n\n\n\n(\n−\n1\n\n)\n\nn\n\n\n=\n\nF\n\nn\n+\n1\n\n\n(\n\nF\n\nn\n+\n1\n\n\n−\n\nF\n\nn\n\n\n)\n−\n\nF\n\nn\n\n\n2\n\n\n\n\n{\\displaystyle (-1)^{n}=F_{n+1}(F_{n+1}-F_{n})-F_{n}^{2}}\n\n \n\n\n\n⟺\n\n\n{\\displaystyle \\Longleftrightarrow }\n\n \n\n\n\n0\n=\n\n\n\n\nF\n\nn\n+\n1\n\n\n\n\n\n2\n\n\n−\n\n\n\nF\n\nn\n+\n1\n\n\n\n\n\nF\n\nn\n\n\n−\n(\n\nF\n\nn\n\n\n2\n\n\n+\n(\n−\n1\n\n)\n\nn\n\n\n)\n.\n\n\n{\\displaystyle 0={\\color {Red}F_{n+1}}^{2}-{\\color {Red}F_{n+1}}F_{n}-(F_{n}^{2}+(-1)^{n}).}\n\n>>>",
            "Последовательные наклоны плоскости и график приближений к золотому сечению, рассчитанному путём деления каждого числа Фибоначчи на предыдущее<<<Наибольший общий делитель двух чисел Фибоначчи равен числу Фибоначчи с индексом, равным наибольшему общему делителю индексов, то есть \n\n\n\n(\n\nF\n\nm\n\n\n,\n\nF\n\nn\n\n\n)\n=\n\nF\n\n(\nm\n,\nn\n)\n\n\n.\n\n\n{\\displaystyle (F_{m},F_{n})=F_{(m,n)}.}\n\n Следствия:\n\n\n\n\n\nF\n\nm\n\n\n\n\n{\\displaystyle F_{m}}\n\n делится на \n\n\n\n\nF\n\nn\n\n\n\n\n{\\displaystyle F_{n}}\n\n тогда и только тогда, когда \n\n\n\nm\n\n\n{\\displaystyle m}\n\n делится на \n\n\n\nn\n\n\n{\\displaystyle n}\n\n (за исключением \n\n\n\nn\n=\n2\n\n\n{\\displaystyle n=2}\n\n). В частности, \n\n\n\n\nF\n\nm\n\n\n\n\n{\\displaystyle F_{m}}\n\n делится на \n\n\n\n\nF\n\n3\n\n\n=\n2\n\n\n{\\displaystyle F_{3}=2}\n\n (то есть является чётным) только для \n\n\n\nm\n=\n3\nk\n;\n\n\n{\\displaystyle m=3k;}\n\n \n\n\n\n\nF\n\nm\n\n\n\n\n{\\displaystyle F_{m}}\n\n делится на \n\n\n\n\nF\n\n4\n\n\n=\n3\n\n\n{\\displaystyle F_{4}=3}\n\n только для \n\n\n\nm\n=\n4\nk\n;\n\n\n{\\displaystyle m=4k;}\n\n \n\n\n\n\nF\n\nm\n\n\n\n\n{\\displaystyle F_{m}}\n\n делится на \n\n\n\n\nF\n\n5\n\n\n=\n5\n\n\n{\\displaystyle F_{5}=5}\n\n только для \n\n\n\nm\n=\n5\nk\n\n\n{\\displaystyle m=5k}\n\n и т. д.\n\n\n\n\n\nF\n\nm\n\n\n\n\n{\\displaystyle F_{m}}\n\n может быть простым только для простых \n\n\n\nm\n\n\n{\\displaystyle m}\n\n (с единственным исключением \n\n\n\nm\n=\n4\n\n\n{\\displaystyle m=4}\n\n). Например, число \n\n\n\n\nF\n\n13\n\n\n=\n233\n\n\n{\\displaystyle F_{13}=233}\n\n простое, и его индекс 13 также прост. Но, даже если число \n\n\n\nm\n\n\n{\\displaystyle m}\n\n простое, число \n\n\n\n\nF\n\nm\n\n\n\n\n{\\displaystyle F_{m}}\n\n не всегда оказывается простым, и наименьший контрпример — \n\n\n\n\nF\n\n19\n\n\n=\n4181\n=\n37\n⋅\n113.\n\n\n{\\displaystyle F_{19}=4181=37\\cdot 113.}\n\n Неизвестно, бесконечно ли множество чисел Фибоначчи, являющихся простыми.\nПоследовательность чисел Фибоначчи является частным случаем возвратной последовательности, её характеристический многочлен \n\n\n\n\nx\n\n2\n\n\n−\nx\n−\n1\n\n\n{\\displaystyle x^{2}-x-1}\n\n имеет корни \n\n\n\nφ\n\n\n{\\displaystyle \\varphi }\n\n и \n\n\n\n−\n\n\n1\nφ\n\n\n.\n\n\n{\\displaystyle -{\\frac {1}{\\varphi }}.}\n\n\nОтношения \n\n\n\n\n\n\nF\n\nn\n+\n1\n\n\n\nF\n\nn\n\n\n\n\n\n\n{\\displaystyle {\\frac {F_{n+1}}{F_{n}}}}\n\n являются подходящими дробями золотого сечения \n\n\n\nϕ\n:\n\n\n{\\displaystyle \\phi \\colon }\n\n в частности, \n\n\n\n\nlim\n\nn\n→\n∞\n\n\n\n\n\nF\n\nn\n+\n1\n\n\n\nF\n\nn\n\n\n\n\n=\nφ\n.\n\n\n{\\displaystyle \\lim _{n\\to \\infty }{\\frac {F_{n+1}}{F_{n}}}=\\varphi .}\n\n\nСуммы биномиальных коэффициентов на диагоналях треугольника Паскаля являются числами Фибоначчи ввиду формулы\n\n\n\n\n\nF\n\nn\n+\n1\n\n\n=\n\n∑\n\nk\n=\n0\n\n\n⌊\nn\n\n/\n\n2\n⌋\n\n\n\n\n\n(\n\n\n\nn\n−\nk\n\nk\n\n\n)\n\n\n\n.\n\n\n{\\displaystyle F_{n+1}=\\sum _{k=0}^{\\lfloor n/2\\rfloor }{n-k \\choose k}.}\n\n>>>",
            "Наибольший общий делитель двух чисел Фибоначчи равен числу Фибоначчи с индексом, равным наибольшему общему делителю индексов, то есть \n\n\n\n(\n\nF\n\nm\n\n\n,\n\nF\n\nn\n\n\n)\n=\n\nF\n\n(\nm\n,\nn\n)\n\n\n.\n\n\n{\\displaystyle (F_{m},F_{n})=F_{(m,n)}.}\n\n Следствия:\n\n\n\n\n\nF\n\nm\n\n\n\n\n{\\displaystyle F_{m}}\n\n делится на \n\n\n\n\nF\n\nn\n\n\n\n\n{\\displaystyle F_{n}}\n\n тогда и только тогда, когда \n\n\n\nm\n\n\n{\\displaystyle m}\n\n делится на \n\n\n\nn\n\n\n{\\displaystyle n}\n\n (за исключением \n\n\n\nn\n=\n2\n\n\n{\\displaystyle n=2}\n\n). В частности, \n\n\n\n\nF\n\nm\n\n\n\n\n{\\displaystyle F_{m}}\n\n делится на \n\n\n\n\nF\n\n3\n\n\n=\n2\n\n\n{\\displaystyle F_{3}=2}\n\n (то есть является чётным) только для \n\n\n\nm\n=\n3\nk\n;\n\n\n{\\displaystyle m=3k;}\n\n \n\n\n\n\nF\n\nm\n\n\n\n\n{\\displaystyle F_{m}}\n\n делится на \n\n\n\n\nF\n\n4\n\n\n=\n3\n\n\n{\\displaystyle F_{4}=3}\n\n только для \n\n\n\nm\n=\n4\nk\n;\n\n\n{\\displaystyle m=4k;}\n\n \n\n\n\n\nF\n\nm\n\n\n\n\n{\\displaystyle F_{m}}\n\n делится на \n\n\n\n\nF\n\n5\n\n\n=\n5\n\n\n{\\displaystyle F_{5}=5}\n\n только для \n\n\n\nm\n=\n5\nk\n\n\n{\\displaystyle m=5k}\n\n и т. д.\n\n\n\n\n\nF\n\nm\n\n\n\n\n{\\displaystyle F_{m}}\n\n может быть простым только для простых \n\n\n\nm\n\n\n{\\displaystyle m}\n\n (с единственным исключением \n\n\n\nm\n=\n4\n\n\n{\\displaystyle m=4}\n\n). Например, число \n\n\n\n\nF\n\n13\n\n\n=\n233\n\n\n{\\displaystyle F_{13}=233}\n\n простое, и его индекс 13 также прост. Но, даже если число \n\n\n\nm\n\n\n{\\displaystyle m}\n\n простое, число \n\n\n\n\nF\n\nm\n\n\n\n\n{\\displaystyle F_{m}}\n\n не всегда оказывается простым, и наименьший контрпример — \n\n\n\n\nF\n\n19\n\n\n=\n4181\n=\n37\n⋅\n113.\n\n\n{\\displaystyle F_{19}=4181=37\\cdot 113.}\n\n Неизвестно, бесконечно ли множество чисел Фибоначчи, являющихся простыми.\nПоследовательность чисел Фибоначчи является частным случаем возвратной последовательности, её характеристический многочлен \n\n\n\n\nx\n\n2\n\n\n−\nx\n−\n1\n\n\n{\\displaystyle x^{2}-x-1}\n\n имеет корни \n\n\n\nφ\n\n\n{\\displaystyle \\varphi }\n\n и \n\n\n\n−\n\n\n1\nφ\n\n\n.\n\n\n{\\displaystyle -{\\frac {1}{\\varphi }}.}\n\n\nОтношения \n\n\n\n\n\n\nF\n\nn\n+\n1\n\n\n\nF\n\nn\n\n\n\n\n\n\n{\\displaystyle {\\frac {F_{n+1}}{F_{n}}}}\n\n являются подходящими дробями золотого сечения \n\n\n\nϕ\n:\n\n\n{\\displaystyle \\phi \\colon }\n\n в частности, \n\n\n\n\nlim\n\nn\n→\n∞\n\n\n\n\n\nF\n\nn\n+\n1\n\n\n\nF\n\nn\n\n\n\n\n=\nφ\n.\n\n\n{\\displaystyle \\lim _{n\\to \\infty }{\\frac {F_{n+1}}{F_{n}}}=\\varphi .}\n\n\nСуммы биномиальных коэффициентов на диагоналях треугольника Паскаля являются числами Фибоначчи ввиду формулы\n\n\n\n\n\nF\n\nn\n+\n1\n\n\n=\n\n∑\n\nk\n=\n0\n\n\n⌊\nn\n\n/\n\n2\n⌋\n\n\n\n\n\n(\n\n\n\nn\n−\nk\n\nk\n\n\n)\n\n\n\n.\n\n\n{\\displaystyle F_{n+1}=\\sum _{k=0}^{\\lfloor n/2\\rfloor }{n-k \\choose k}.}\n\n<<<Нахождение числа Фибоначчи \n\n\n\n\nF\n\nn\n\n\n\n\n{\\displaystyle F_{n}}\n\n с помощью бинома Ньютона \n\n\n\n\nF\n\nn\n\n\n=\n\n\n1\n\n2\n\nn\n−\n1\n\n\n\n\n\n∑\n\nk\n=\n0\n\n\n⌊\nn\n\n/\n\n2\n⌋\n\n\n\n\n\n(\n\n\nn\n\n2\nk\n+\n1\n\n\n\n)\n\n\n\n\n5\n\nk\n\n\n\n\n{\\displaystyle F_{n}={1 \\over 2^{n-1}}\\sum _{k=0}^{\\lfloor n/2\\rfloor }{n \\choose 2k+1}5^{k}}\n\n>>>",
            "Нахождение числа Фибоначчи \n\n\n\n\nF\n\nn\n\n\n\n\n{\\displaystyle F_{n}}\n\n с помощью бинома Ньютона \n\n\n\n\nF\n\nn\n\n\n=\n\n\n1\n\n2\n\nn\n−\n1\n\n\n\n\n\n∑\n\nk\n=\n0\n\n\n⌊\nn\n\n/\n\n2\n⌋\n\n\n\n\n\n(\n\n\nn\n\n2\nk\n+\n1\n\n\n\n)\n\n\n\n\n5\n\nk\n\n\n\n\n{\\displaystyle F_{n}={1 \\over 2^{n-1}}\\sum _{k=0}^{\\lfloor n/2\\rfloor }{n \\choose 2k+1}5^{k}}\n\n<<<В 1964 году Дж. Кон (J. H. E. Cohn) доказал,[29] что единственными точными квадратами среди чисел Фибоначчи являются числа Фибоначчи с индексами 0, 1, 2, 12:\n\n\n\n\n\nF\n\n0\n\n\n=\n\n0\n\n2\n\n\n=\n0\n,\n\n\n{\\displaystyle F_{0}=0^{2}=0,}\n\n \n\n\n\n\nF\n\n1\n\n\n=\n\n1\n\n2\n\n\n=\n1\n,\n\n\n{\\displaystyle F_{1}=1^{2}=1,}\n\n \n\n\n\n\nF\n\n2\n\n\n=\n\n1\n\n2\n\n\n=\n1\n,\n\n\n{\\displaystyle F_{2}=1^{2}=1,}\n\n \n\n\n\n\nF\n\n12\n\n\n=\n\n12\n\n2\n\n\n=\n144.\n\n\n{\\displaystyle F_{12}=12^{2}=144.}\n\n\nПроизводящей функцией последовательности чисел Фибоначчи является:\n\n\n\n\nx\n+\n\nx\n\n2\n\n\n+\n2\n\nx\n\n3\n\n\n+\n3\n\nx\n\n4\n\n\n+\n5\n\nx\n\n5\n\n\n+\n⋯\n=\n\n∑\n\nn\n=\n0\n\n\n∞\n\n\n\nF\n\nn\n\n\n\nx\n\nn\n\n\n=\n\n\nx\n\n1\n−\nx\n−\n\nx\n\n2\n\n\n\n\n\n\n\n{\\displaystyle x+x^{2}+2x^{3}+3x^{4}+5x^{5}+\\dots =\\sum _{n=0}^{\\infty }F_{n}x^{n}={\\frac {x}{1-x-x^{2}}}}\n\n\nВ частности, 1/998,999 = 0.001001002003005008013021…\nМножество чисел Фибоначчи совпадает с множеством неотрицательных значений многочлена\n\n\n\n\nz\n(\nx\n,\ny\n)\n=\n2\nx\n\ny\n\n4\n\n\n+\n\nx\n\n2\n\n\n\ny\n\n3\n\n\n−\n2\n\nx\n\n3\n\n\n\ny\n\n2\n\n\n−\n\ny\n\n5\n\n\n−\n\nx\n\n4\n\n\ny\n+\n2\ny\n\n\n{\\displaystyle z(x,y)=2xy^{4}+x^{2}y^{3}-2x^{3}y^{2}-y^{5}-x^{4}y+2y}\n\n>>>",
            "на множестве неотрицательных целых чисел x и y[30].<<<Произведение и частное двух любых различных чисел Фибоначчи, отличных от единицы, никогда не является числом Фибоначчи.\nПериод чисел Фибоначчи по модулю натурального числа \n\n\n\nn\n\n\n{\\displaystyle n}\n\n называется периодом Пизано и обозначается \n\n\n\nπ\n(\nn\n)\n\n\n{\\displaystyle \\pi (n)}\n\n. Периоды Пизано \n\n\n\nπ\n(\nn\n)\n\n\n{\\displaystyle \\pi (n)}\n\n образуют последовательность:\n1, 3, 8, 6, 20, 24, 16, 12, 24, 60, 10, 24, 28, 48, 40, 24, 36, … (последовательность A001175 в OEIS).\nВ частности, последние цифры чисел Фибоначчи образуют периодическую последовательность с периодом \n\n\n\nπ\n(\n10\n)\n=\n60\n\n\n{\\displaystyle \\pi (10)=60}\n\n, последняя пара цифр чисел Фибоначчи образует последовательность с периодом \n\n\n\nπ\n(\n100\n)\n=\n300\n\n\n{\\displaystyle \\pi (100)=300}\n\n, последние три цифры — с периодом \n\n\n\nπ\n(\n1000\n)\n=\n1500\n,\n\n\n{\\displaystyle \\pi (1000)=1500,}\n\n последние четыре — с периодом \n\n\n\nπ\n(\n10000\n)\n=\n15000\n,\n\n\n{\\displaystyle \\pi (10000)=15000,}\n\n последние пять — с периодом \n\n\n\nπ\n(\n100000\n)\n=\n150000\n\n\n{\\displaystyle \\pi (100000)=150000}\n\n и т. д.\nНатуральное число \n\n\n\nN\n\n\n{\\displaystyle N}\n\n является числом Фибоначчи тогда и только тогда, когда \n\n\n\n5\n\nN\n\n2\n\n\n+\n4\n\n\n{\\displaystyle 5N^{2}+4}\n\n или \n\n\n\n5\n\nN\n\n2\n\n\n−\n4\n\n\n{\\displaystyle 5N^{2}-4}\n\n является квадратом[31].\nНе существует арифметической прогрессии длиной больше 3, состоящей из чисел Фибоначчи[32].\nЧисло Фибоначчи \n\n\n\n\nF\n\nn\n+\n2\n\n\n=\n\nF\n\nn\n+\n1\n\n\n+\n\nF\n\nn\n\n\n\n\n{\\displaystyle F_{n+2}=F_{n+1}+F_{n}}\n\n равно количеству кортежей длины n из нулей и единиц, в которых нет двух соседних единиц. При этом \n\n\n\n\nF\n\nn\n+\n1\n\n\n\n\n{\\displaystyle F_{n+1}}\n\n равно количеству таких кортежей, начинающихся с нуля, а \n\n\n\n\nF\n\nn\n\n\n\n\n{\\displaystyle F_{n}}\n\n — начинающихся с единицы.\nПроизведение любых \n\n\n\nn\n\n\n{\\displaystyle n}\n\n подряд идущих чисел Фибоначчи делится на произведение первых \n\n\n\nn\n\n\n{\\displaystyle n}\n\n чисел Фибоначчи.\nБесконечная сумма чисел, обратных числам Фибоначчи, сходится, его сумма («обратная постоянная Фибоначчи») равна 3,359884...>>>",
            "Основная статья: Обобщение чисел Фибоначчи<<<Числа трибоначчи\nЧисла Фибоначчи являются частным случаем последовательностей Люка \n\n\n\n\nF\n\nn\n\n\n=\n\nU\n\nn\n\n\n(\n1\n,\n−\n1\n)\n\n\n{\\displaystyle F_{n}=U_{n}(1,-1)}\n\n.\nПри этом их дополнением являются числа Люка \n\n\n\n\nL\n\nn\n\n\n=\n\nV\n\nn\n\n\n(\n1\n,\n−\n1\n)\n\n\n{\\displaystyle L_{n}=V_{n}(1,-1)}\n\n.>>>",
            "В природе[править | править код]<<<Филлотаксис (листорасположение) у растений описывается последовательностью Фибоначчи, если листья (почки) на однолетнем приросте (побеге, стебле) имеют так называемое спиральное листорасположение. При этом число последовательно расположенных листьев (почек) по спирали плюс один, а также число совершенных при этом полных оборотов спирали вокруг оси однолетнего прироста (побега, стебля) выражаются обычно первыми числами Фибоначчи.\nСемена подсолнуха, сосновые шишки, лепестки цветков, ячейки ананаса также располагаются согласно последовательности Фибоначчи[36][37][38][39].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Числа_Фибоначчи"
    },
    {
        "task": [
            "Структура «типичной» статьи словаря Форта:\n<<<поле имени — содержит имя статьи (идентификатор слова) в виде строки со счётчиком, а также несколько флагов.\nполе связи — указатель на предыдущую статью.\nполе кода — указатель на код для интерпретации статьи.\nполе параметров — семантика слова (в зависимости от поля кода).>>>",
            "Механизм передачи параметров между словами:\n<<<через стек данных;\nчерез ячейки памяти;\nчерез именованные локальные переменные (стандарт 1994 года).>>>",
            "Этот вариант сильно отличается от других видов кода и заслуживает особого внимания.\n<<<Как и в косвенном шитом коде, примитивы Форта могут быть расположены в едином сегменте кода, защищённом от вмешательства, прошитом в ПЗУ. Примитивы зависят от конкретной платформы и могут быть выполнены в виде отдельного блока. Вся остальная часть Форта является платформонезависимой и переносимой на любую машину.\nВокруг таблицы на 256 определений группируется отдельный словарь, лексикон, предназначенный для конкретной задачи или группы задач. Эти 256 определений занимают места не более 64К, то есть таблица может содержать 2-байтовые адреса (смещения относительно начала словаря).\nБайтовый код позволяет расширить количество определений за счет древовидной структуры словарей до любой величины, сохраняя минимальные размеры программы.\nБайтовый код может быть стандартизован. Как и для Java, такой код может быстро пересылаться по сети и исполняться на машинах с любой платформой.\nБайтовый код позволяет эмулировать любой процессор или программную систему и выполнять отладку разработанных для них программ.>>>",
            "Одна из постоянных тем споров вокруг языка Форт — это место, которое он занимает среди «классических» императивных языков. Программы на Форте имеют крайне непривычный вид:\n<<<Программа состоит из необычной последовательности слов, среди которых отсутствуют так называемые «ключевые» слова, которые распознаются и обрабатываются в других языках программирования специальным образом.>>>",
            "\n\nЙоды магистра тайна речи раскрыта:\nСтарым Форта программистом был он просто.\n\n\nОригинальный текст (англ.)\n\nThe mistery of Yoda’s speech uncovered is:\nJust an old Forth programmer Yoda was.[15]\n\n\n\n<<<Приведённый пример заодно указывает на уникальную особенность Форта: отсутствие списка параметров в скобках и возможность программировать на родном языке. Использование словарных конструкций родного языка позволяет сделать программу понятной, что повышает её надёжность [источник не указан 3298 дней].\n«Обратная польская запись» арифметических выражений и наличие нескольких стеков.\nДвойственная природа компилятора Форта. Нельзя утверждать однозначно, является ли Форт компилятором или интерпретатором. Практически всегда его можно использовать в двух режимах, за исключением редких случаев вроде «целевой компиляции» (трансляции в машинный код программы для системы с иной архитектурой).\nОтсутствие системы типов. Подобно языкам ассемблера, в Форте нет встроенной системы типов. Нет возможности узнать, что лежит на вершине стека — число со знаком, число без знака, указатель на строку, символ, или два числа, рассматриваемых как одно длинное число. Контроль типов возлагается на программиста. При этом используются специальные наборы слов (например, запись и чтение ячеек памяти производят словами ! и @, а символов — словами C! и C@), некоторые сущности выносятся в специальные стеки (например, стек чисел с плавающей запятой, согласно стандарту ANSI FORTH 94; он может быть, а может и не быть, реализован с помощью основного стека).>>>",
            "Эти особенности и определяют преимущества и недостатки языка Форт:\n<<<Опытный программист, знакомый с системой команд и архитектурой процессора, может написать «ядро» форт-системы за несколько дней.\nСвобода, предоставляемая программисту, требует сильного самоконтроля. Входной порог для программирования на Форте ниже, чем у классических языков программирования, но требует привыкания и понимания не только возможностей и особенностей синтаксиса Форта, но, также, понимания философии, лежащей в его основе.\nФорт не поддерживает никакую парадигму программирования и поддерживает их все одновременно. Написать набор слов для организации ООП в программе на Форте (а их может быть одновременно несколько и они будут отлично уживаться вместе) гораздо проще, чем решить, какие возможности от этого набора слов требуются.\nРазбиение программы на множество мелких слов позволяет легко и быстро проверять их по отдельности, передавая им нужные наборы входных параметров и контролируя то, что остаётся на стеке. Фактически, это означает, что для тестирования какого-то компонента программы можно не загружать все зависимые компоненты целиком.\nБольшинство реализаций Форта позволяют сделать декомпиляцию программы. Полученный текст мало отличается от исходного.\nФорт позволяет реализовать любую технологию программирования, доступную в других языках и системах. В нём также допустимы приёмы, запрещённые в других языках (например — самомодификация кода). Устранение негативных последствий этих приёмов путём создания правильного лексикона, стимулирующего грамотную методику их использования, также возложено на программиста.\nРазмер кода Форта для 16-разрядных систем, при грамотном написании программы, иногда в 10-20 раз меньше кода, скомпилированного из программы на Си. Для 32-разрядных систем этот разрыв ещё больше. В операционных системах общий выигрыш может составлять уже сотни, а то и тысячи крат. Причина очень простая — готовая задача на Форте имеет размер несколько байт, все вспомогательные подпрограммы реализованы в виде определений, доступных всем. Система на Форте вместится в процессор, в который другие системы влезть в принципе не способны.\nСинхронизация процессов и потоков в многозадачных системах, переключение контекста, реализация доступа к ограниченным ресурсам — сложнейшие проблемы при написании ОС. Для поддержки этих возможностей даже создаются специальные команды в микропроцессорах. Для интерпретатора это вообще не проблема, поскольку он эмулирует любой процессор и любую необходимую команду.>>>",
            "Возможно, что на самом деле больше всего развитию Форта препятствует «тяжёлое наследство», пришедшее от машин с низкими возможностями, для которых он изначально создавался. В стандарте ANSI FORTH 94 существуют, например, следующие особенности:\n<<<Переносимая программа должна предполагать, что стек чисел с плавающей запятой может быть реализован с использованием основного стека. К счастью, для большинства современных компиляторов это не так. Но сам факт наличия такого пункта в стандарте создаёт определённые неудобства. При программировании с активным использованием арифметики с плавающей точкой, эту норму стандарта традиционно игнорируют.\nАналогичная норма существует относительно стека потока управления. Здесь всё не так просто, так как часто это именно так и есть — в процессе компиляции стек используется самим компилятором. В абсолютном большинстве случаев никакого влияния на программу это не оказывает, но про саму особенность надо помнить. Например, если вы хотите в процессе компиляции вычислить какое-то число, за пределами начала определения, а потом вставить его в слово как константу, то для этого придётся использовать какой-либо обходной путь.\nОпределения многих слов в стандарте слишком низкоуровневые. Например, слово 2* производит не умножение на два, как следует из его названия, а «смещает число на один бит к старшему двоичному разряду, заполняя младший бит нулём». Конечно, на большинстве современных машин — это одно и то же, но сам факт использования особенностей конкретной архитектуры настораживает. (Существуют также более очевидные стандартные слова для сдвига битов — LSHIFT и RSHIFT.)>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Форт_(язык_программирования)"
    },
    {
        "task": [
            "Распространённые типы уязвимостей включают в себя:\n<<<Нарушения безопасности доступа к памяти, такие как:\nПереполнения буфера\nВисячие указатели\nОшибки проверки вводимых данных, такие как:\nОшибки форматирующей строки\nНеверная поддержка интерпретации метасимволов командной оболочки\nSQL-инъекция\nИнъекция кода\nИнъекция E-mail\nОбход каталогов\nМежсайтовый скриптинг в веб-приложениях\nМежсайтовый скриптинг при наличии SQL-инъекции\nСостояния гонки, такие как:\nОшибки времени-проверки-ко-времени-использования\nГонки символьных ссылок\nОшибки путаницы привилегий, такие как:\nПодделка межсайтовых запросов в веб-приложениях\nЭскалация привилегий, такие как:\nShatter attack\nУязвимость нулевого дня>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Уязвимость_(компьютерная_безопасность)"
    },
    {
        "task": [
            "Основные элементы спутниковой системы навигации:\n<<<орбитальная группировка (Спутниковая группировка) спутников, излучающих специальные радиосигналы;\nназемная система управления и контроля (наземный сегмент), включающая блоки измерения текущего положения спутников и передачи на них полученной информации для корректировки информации об орбитах;\nаппаратура потребителя спутниковых навигационных систем («спутниковые навигаторы»), используемая для определения координат;\nопционально: наземная система радиомаяков, позволяющая значительно повысить точность определения координат;[1]\nопционально: информационная радиосистема для передачи пользователям поправок, позволяющих значительно повысить точность определения координат[2].>>>",
            "Исторические системы[править | править код]<<<Transit — первая в мире спутниковая навигационная система, США, 1960-е — 1996.\nЦиклон — первая спутниковая система навигации в СССР[2], 1976—2010.\nЦикада — низкоорбитальная «космическая навигационная система»* (КНС) — гражданский вариант морской спутниковой навигационной системы «Циклон», аналог Transit — 1976—2008 гг.\nПарус — низкоорбитальная КНС (именно с таким названием была принята на вооружение в 1976 г.) — серия российских (советских) навигационных спутников военного назначения.>>>",
            "Информация в этом разделе устарела. Вы можете помочь проекту, обновив её и убрав после этого данный шаблон.<<<GPS — принадлежит министерству обороны США[источник не указан 422 дня]. Этот факт, по мнению некоторых государств, является её главным недостатком. Устройства, поддерживающие навигацию по GPS, являются самыми распространёнными в мире. Также известна под более ранним названием NAVSTAR.\nГЛОНАСС — принадлежит министерству обороны РФ[источник не указан 422 дня]. Разработка системы официально началась в 1976 г., полное развёртывание системы завершилось в 1995 г. После 1996 года спутниковая группировка сокращалась и к 2002 году пришла в упадок. Была восстановлена к концу 2011 г. В настоящее время на орбите находится 26 спутников, из которых 24 используется по назначению[3]. К 2025 году предполагается глубокая модернизация системы.\n«Бэйдоу» — китайская глобальная спутниковая система навигации, основанная на геостационарных, геосинхронных спутниках и спутниках со средними орбитами. Реализация программы началась в 1994 году. Первый спутник вышел на орбиту в 2000 году. По состоянию на 2015 год система имела 4 работающих спутников: 2 на геостационарных орбитах, 3 — на геосинхронных и 4 — на средних околоземных. 23 июня 2020 года был запущен 15 спутник системы «Бэйдоу», тем самым было завершено создание глобальной спутниковой системы навигации. 31 июля 2020 года председатель КНР Си Цзиньпин заявил о начале эксплуатации системы «Бэйдоу»[4].\nDORIS — французская навигационная система. Принцип работы системы связан с применением эффекта Доплера. В отличие от других спутниковых навигационных систем основана на системе стационарных наземных передатчиков, приёмники расположены на спутниках. После определения точного положения спутника система может установить точные координаты и высоту маяка на поверхности Земли. Первоначально предназначалась для наблюдения за океанами и дрейфом материков.\nGalileo — европейская система, находящаяся на этапе создания спутниковой группировки. По состоянию на ноябрь 2016 года на орбите находится 16 спутников, 9 действующих и 7 тестируемых. Планируется полностью развернуть спутниковую группировку к 2020 году[5].>>>",
            "Создаваемые региональные спутниковые системы[править | править код]<<<IRNSS — индийская навигационная спутниковая система, в состоянии разработки. Предполагается для использования только в Индии. Первый спутник был запущен в 2008 году. Общее количество спутников системы IRNSS — 7.\nQZSS — японская квази-зенитная спутниковая система (Quasi-Zenith Satellite System, QZSS) была задумана в 2002 г. как коммерческая система с набором услуг для подвижной связи, вещания и широкого использования для навигации в Японии и соседних районах Юго-Восточной Азии. Первый QZSS-спутник был запущен в 2010 г. Предполагается создание группировки из трёх спутников, находящихся на геосинхронных орбитах, а также собственной системы дифференциальной коррекции.>>>",
            "Кроме навигации, координаты, получаемые благодаря спутниковым системам, используются в следующих отраслях:\n<<<Геодезия: с помощью систем навигации определяются точные координаты точек\nНавигация: с применением систем навигации осуществляется как морская, так и дорожная навигация\nСпутниковый мониторинг транспорта: с помощью систем навигации ведётся мониторинг за положением, скоростью автомобилей, контроль за их движением\nСотовая связь: первые мобильные телефоны с GPS появились в 90-х годах. В некоторых странах (например, США) это используется для оперативного определения местонахождения человека, звонящего 911. В России в 2010 году начата реализация аналогичного проекта — Эра-ГЛОНАСС.\nТектоника, тектоника плит: с помощью систем навигации ведутся наблюдения движений и колебаний плит\nАктивный отдых: существуют различные игры, где применяются системы навигации, например, Геокэшинг и др.\nГеотегинг: информация, например фотографии «привязываются» к координатам благодаря встроенным или внешним GPS-приёмникам>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Спутниковая_система_навигации"
    },
    {
        "task": [
            "Некоторые прямые методы:\n<<<Метод Гаусса\nМетод Гаусса — Жордана\nМетод Крамера\nМатричный метод\nМетод прогонки (для трёхдиагональных матриц)\nРазложение Холецкого или метод квадратных корней (для положительно-определённых симметричных и эрмитовых матриц)>>>",
            "Итерационные методы делятся на несколько типов, в зависимости от применяемого подхода:\n<<<Основанные на расщеплении: \n\n\n\n(\nM\n−\nN\n)\n\nx\n\n=\n\nb\n\n⇔\nM\n\nx\n\n=\nN\n\nx\n\n+\n\nb\n\n⇒\nM\n\n\nx\n\n\nn\n+\n1\n\n\n=\nN\n\n\nx\n\n\nn\n\n\n+\n\nb\n\n\n\n{\\displaystyle (M-N)\\mathbf {x} =\\mathbf {b} \\Leftrightarrow M\\mathbf {x} =N\\mathbf {x} +\\mathbf {b} \\Rightarrow M\\mathbf {x} ^{n+1}=N\\mathbf {x} ^{n}+\\mathbf {b} }\n\n\nВариационного типа: \n\n\n\nA\n\nx\n\n=\n\nb\n\n⇒\n‖\nA\n\nx\n\n−\n\nb\n\n‖\n→\nmin\n\n\n{\\displaystyle A\\mathbf {x} =\\mathbf {b} \\Rightarrow \\|A\\mathbf {x} -\\mathbf {b} \\|\\rightarrow \\min }\n\n\nПроекционного типа: \n\n\n\nA\n\nx\n\n=\n\nb\n\n⇒\n(\nA\n\nx\n\n,\n\nm\n\n)\n=\n(\n\nb\n\n,\n\nm\n\n)\n∀\n\nm\n\n\n\n{\\displaystyle A\\mathbf {x} =\\mathbf {b} \\Rightarrow (A\\mathbf {x} ,\\mathbf {m} )=(\\mathbf {b} ,\\mathbf {m} )\\forall \\mathbf {m} }\n\n>>>",
            "Среди итерационных методов:\n<<<Метод Якоби (метод простой итерации)\nМетод Гаусса — Зейделя\nМетод релаксации\nМногосеточный метод\nМетод Монтанте\nМетод Абрамова (пригоден для решения небольших СЛАУ)\nМетод обобщённых минимальных невязок[англ.]\nМетод бисопряжённых градиентов\nСтабилизированный метод бисопряжённых градиентов\nКвадратичный метод бисопряжённых градиентов[англ.]\nМетод квази-минимальных невязок (QMR)\nМетод вращений[2]>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Система_линейных_алгебраических_уравнений"
    },
    {
        "task": [
            "Более развитые многозадачные системы проводят распределение ресурсов динамически, когда задача стартует в памяти или покидает память в зависимости от её приоритета и от стратегии системы. Такая многозадачная среда обладает следующими особенностями:\n<<<Каждая задача имеет свой приоритет, в соответствии с которым получает процессорное время и память\nСистема организует очереди задач так, чтобы все задачи получили ресурсы, в зависимости от приоритетов и стратегии системы\nСистема организует обработку прерываний, по которым задачи могут активироваться, деактивироваться и удаляться\nПо окончании положенного кванта времени ядро временно переводит задачу из состояния выполнения в состояние готовности, отдавая ресурсы другим задачам. При нехватке памяти страницы невыполняющихся задач могут быть вытеснены на диск (своппинг), а потом, через определённое системой время, восстанавливаться в памяти\nСистема обеспечивает защиту адресного пространства задачи от несанкционированного вмешательства других задач\nСистема обеспечивает защиту адресного пространства своего ядра от несанкционированного вмешательства задач\nСистема распознаёт сбои и зависания отдельных задач и прекращает их\nСистема решает конфликты доступа к ресурсам и устройствам, не допуская тупиковых ситуаций общего зависания от ожидания заблокированных ресурсов\nСистема гарантирует каждой задаче, что рано или поздно она будет активирована\nСистема обрабатывает запросы реального времени\nСистема обеспечивает коммуникацию между процессами>>>",
            "Преимущества:\n<<<возможность полной реализации многозадачного ввода-вывода в ядре ОС, когда ожидание завершения ввода-вывода одной программой позволяет процессору тем временем исполнять другую программу;\ncильное повышение надежности системы в целом, в сочетании с использованием защиты памяти — идеал в виде «ни одна программа пользовательского режима не может нарушить работу ОС в целом» становится достижимым хотя бы теоретически, вне вытесняющей многозадачности он не достижим даже в теории.\nвозможность полного использования многопроцессорных и многоядерных систем.>>>",
            "Недостатки:\n<<<необходимость особой дисциплины при написании кода, особые требования к его реентерабельности, к защите всех разделяемых и глобальных данных объектами типа критических секций и мьютексов.>>>",
            "Список примеров в этой статье не основывается на авторитетных источниках, посвящённых непосредственно предмету статьи. Добавьте ссылки на источники, предметом рассмотрения которых является тема настоящей статьи (или раздела) в целом, а не отдельные элементы списка. В противном случае список примеров может быть удалён.<<<VMS\nMenuetOS\nLinux\nв пользовательском режиме (а часто и в режиме ядра) всех UNIX-подобных ОС, включая версии Mac OS X, iOS; Symbian OS\nв режиме ядра ОС Windows 3.x — только при исполнении на процессоре 386 или старше, «задачами» являются только все Windows-приложения, вместе взятые, и каждая отдельная виртуальная машина ДОС, между приложениями Windows вытесняющая многозадачность не использовалась\nWindows 95/98/ME — без полноценной защиты памяти, что служило причиной крайне низкой, на одном уровне с MS-DOS, Windows 3.x и Mac OS версий до X — надежности этих ОС\nWindows NT/2000/XP/Vista/7 и в режиме ядра, и в пользовательском режиме.\nAmigaOS — все версии, до версии 4.0 без полноценной защиты памяти, что на практике для системных программ почти не сказывалось на надёжности из-за высокой стандартизированности, прозрачных API и SDK. Программы, ориентированные на «железо» Амиги, наоборот, не отличались надёжностью.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Многозадачность"
    },
    {
        "task": [
            "Наиболее известными языками функционального программирования являются[2]:\n<<<Лисп (Джон Маккарти, 1958) и множество его диалектов, наиболее известные — Scheme, Clojure и Common Lisp; в 1970-е годы для поддержки языка создавались специализированные аппаратные комплексы — лисп-машины;\nErlang (Джо Армстронг, 1986) — функциональный язык с поддержкой процессов, а также его прямой потомок Elixir;\nAPL — предшественник современных научных вычислительных сред, таких как MATLAB;\nML (Робин Милнер, 1979) и его основные диалекты Standard ML и OCaml;\nF# — функциональный язык семейства ML для платформы .NET;\nScala — язык платформы JVM, сочетающий возможности функционального и объектно-ориентированного программирования;\nMiranda (Дэвид Тёрнер, 1985) и его прямой потомок чистый функциональный язык Haskell;\nNemerle — гибридный функционально-императивный язык.>>>",
            "Чистыми называют функции, которые не имеют побочных эффектов ввода-вывода и памяти (они зависят только от своих параметров и возвращают только свой результат). Чистые функции обладают несколькими полезными свойствами, многие из которых можно использовать для оптимизации кода:\n<<<если результат чистой функции не используется, её вызов может быть удалён без вреда для других выражений;\nрезультат вызова чистой функции может быть мемоизирован, то есть сохранён в таблице значений вместе с аргументами вызова;\nесли нет никакой зависимости по данным между двумя чистыми функциями, то порядок их вычисления можно поменять или распараллелить (говоря иначе, вычисление чистых функций удовлетворяет принципам потокобезопасности);\nесли весь язык не допускает побочных эффектов, то можно использовать любую политику вычисления. Это предоставляет свободу компилятору комбинировать и реорганизовывать вычисление выражений в программе (например, исключить древовидные структуры).>>>",
            "Более точно, существует четыре ступени развития функционального стиля, в порядке убывания роли данных в программах[источник не указан 331 день]:\n<<<Рефал (для этой категории, представленной единственным языком[источник не указан 331 день], нет общепринятого названия);\nАппликативные (Лисп, ML, Tcl, Rebol);\nКомбинаторные (APL/J/K, FP[англ.]/FL[англ.]);\nБесточечные (чистые конкатенативные) (Joy, Cat, Factor, подмножество PostScript).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Функциональное_программирование"
    },
    {
        "task": [
            "Чаще всего прокси-серверы применяются для следующих целей:\n<<<обеспечение доступа компьютеров локальной сети к сети Интернет;\nкэширование данных: если часто происходят обращения к одним и тем же внешним ресурсам для снижения нагрузки на канал во внешнюю сеть и ускорения получения клиентом запрошенной информации;\nсжатие данных: прокси-сервер загружает информацию из Интернета и передаёт информацию конечному пользователю в сжатом виде для экономии внешнего сетевого трафика клиента или внутреннего — организации, в которой установлен прокси-сервер;\nзащита локальной сети от внешнего доступа: например, можно настроить прокси-сервер так, что локальные компьютеры будут обращаться к внешним ресурсам только через него, а внешние компьютеры не смогут обращаться к локальным вообще (они «видят» только прокси-сервер);\nограничение доступа из локальной сети к внешней: например, можно запрещать доступ к определённым веб-сайтам, ограничивать использование интернета каким-то локальным пользователям, устанавливать квоты на трафик или полосу пропускания, фильтровать рекламу и вирусы;\nанонимизация доступа к различным ресурсам: прокси-сервер может скрывать сведения об источнике запроса или пользователе. В таком случае целевой сервер видит лишь информацию о прокси-сервере, например IP-адрес, но не имеет возможности определить истинный источник запроса; существуют также искажающие прокси-серверы, которые передают целевому серверу ложную информацию об истинном пользователе;\nобход ограничений доступа: используется, например, пользователями стран, где доступ к некоторым ресурсам ограничен законодательно и фильтруется.>>>",
            "Прокси-серверы являются самым популярным способом выхода в Интернет из локальных сетей предприятий и организаций. Этому способствуют следующие обстоятельства:\n<<<основной используемый во Всемирной паутине протокол — HTTP, в стандарте которого описана поддержка работы через прокси;\nподдержка прокси большинством браузеров и операционных систем;\nконтроль доступа и учёт трафика по пользователям;\nфильтрация трафика (интеграция прокси с антивирусами);\nпрокси-сервер — может работать с минимальными правами на любой ОС с поддержкой сети (стека TCP/IP);\nмногие приложения, использующие собственные специализированные протоколы, могут использовать HTTP как альтернативный транспорт или SOCKS-прокси как универсальный прокси, подходящий для практически любого протокола;\nотсутствие доступа в Интернет по другим (нестандартным) протоколам может повысить безопасность в корпоративной сети.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Прокси-сервер"
    },
    {
        "task": [
            "Преимущества<<<Отсутствие дублирования кода программы-сервера программами-клиентами.\nТак как все вычисления выполняются на сервере, то требования к компьютерам, на которых установлен клиент, снижаются.\nВсе данные хранятся на сервере, который, как правило, защищён гораздо лучше большинства клиентов. На сервере проще организовать контроль полномочий, чтобы разрешать доступ к данным только клиентам с соответствующими правами доступа.>>>",
            "Недостатки<<<Неработоспособность сервера может сделать неработоспособной всю вычислительную сеть. Неработоспособным сервером следует считать сервер, производительности которого не хватает на обслуживание всех клиентов, а также сервер, находящийся на ремонте, профилактике и т. п.\nПоддержка работы данной системы требует отдельного специалиста — системного администратора.\nВысокая стоимость оборудования.>>>",
            "Частные случаи многоуровневой архитектуры:\n<<<Трёхуровневая архитектура>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Клиент_—_сервер"
    },
    {
        "task": [
            "Поисковые системы учитывают множество внутренних и внешних параметров сайта при вычислении его релевантности (степени соответствия введённому запросу):\n<<<плотность ключевых слов (сложные алгоритмы современных поисковых систем позволяют производить семантический анализ текста, чтобы отсеять поисковый спам, в котором ключевое слово встречается слишком часто (терм. сленг «тошнота»);\nиндекс цитирования («ИЦ») и тематический индекс цитирования («ТИЦ») зависят от количества и авторитетности веб-ресурсов, ссылающихся на данный сайт; многими поисковиками не учитываются взаимные ссылки (друг на друга). Способ наращивания числа сайтов-доноров, ссылающихся на продвигаемый сайт, называется Линкбилдинг. Примером метрики индекса цитирования являлся PageRank. В сентябре 2018 года Яндекс прекратил расчёт и отображение ТИЦ, заменив его на «Индекс качества сайта»;\nводность текста — показатель, определяющий наличие малозначимых слов, которые не несут никакой полезной информации и служат для разбавления текста (стоп-слова);\nповеденческие факторы (внутренние) — ряд всевозможных действий пользователей, которые они могут произвести на сайте: вход, общее время проведённое пользователем на сайте, количество сессий одного пользователя на сайте, просмотр страниц, количество просмотренных пользователем страниц, возврат пользователя на сайт, клики на ссылки в тексте, переходы по ссылкам в меню;\nповеденческие факторы (внешние) — основным внешним показателем качества поведения пользователя при взаимодействии с сайтом является отказ от дальнейшего поиска по ключевой фразе в поисковой системе;\nиндекс качества сайта («ИКС») — это показатель того, насколько полезен конкретный сайт для пользователей с точки зрения Яндекса. ИКС введён в 2018 году взамен тематического индекса цитирования (тИЦ), учитывавшего тематику ссылающихся сайтов.\nскорость загрузки сайта — показатель скорости загрузки сайта. Используется несколько параметров для характеристики скорости загрузки сайта — загрузка до появления первого контента, загрузка первого контента до взаимодействия, скорость ответа сервера на запрос, длина html кода. Общепринятым стандартом скорости загрузки сайта принято считать сервис Google PageSpeed.\nвнутренняя перелинковка — ссылки внутри сайта, ссылки для переходов между страницами непосредственно в тексте на странице, а не через меню.>>>",
            "Методы внутренней поисковой оптимизации:\n<<<HTML, CSS — валидация;\nувеличение скорости работы сайта;\nадаптация под мобильные устройства;\nсоставление семантического ядра (СЯ);\nанализ сайтов-конкурентов;\nнаписание качественного контента и создание правильной структуры сайта;;\nкорректировка текстовой релевантности всей страницы;\nоптимизация тегов H1, Title и мета-тегов Description;\nвнутренняя перелинковка.>>>",
            "Внешние факторы делятся на статические и динамические:\n<<<Статические внешние факторы определяют релевантность сайта на основании цитируемости его внешними веб-ресурсами, а также их авторитетности вне зависимости от текста цитирования.\nДинамические внешние факторы определяют релевантность сайта на основании цитируемости его внешними веб-ресурсами и их авторитетности в зависимости от текста цитирования.\n«Поведенческие факторы и конверсия» показывают качество сайта для непосредственных потребителей. Ресурсы с плохими ПФ не могут занимать лидирующие позиции.[источник не указан 2414 дней]>>>",
            "Методы внешней поисковой оптимизации:\n<<<регистрация в самостоятельных каталогах. Она может осуществляться вручную либо с помощью специальных ресурсов;\nрегистрация в каталогах поисковых систем, таких как: Яндекс. Каталог (с декабря 2017 года прекращён приём заявок на добавление в него новых сайтов)[1], Рамблер/Топ100, каталог Yahoo и другие;\nобмен ссылками. Существует несколько способов обмена — прямой, кольцевой, односторонний (покупка ссылок);\nрегистрация в сервисах: Google Мой Бизнес[2] и Яндекс. Справочник[3];\nразмещение статей («гостевые посты», публикация в СМИ, инфоповоды);\nсоциальные сети;\nпресс-релизы;\nкрауд-маркетинг;\nсоздание и ведение блогов;\nсоздание сети сайтов («сателлиты»), используемых для увеличения количества упоминаний и ссылок в поисковой выдаче. Данный метод продвижения сайтов относится к «чёрным». Поисковые системы не советуют использовать подобные методы оптимизации и могут принять санкции в отношении таких сайтов.>>>",
            "К факторам, понижающим рейтинг сайта, относятся:\n<<<неуникальный контент (статьи, новости и так далее);\nтехнологии, которые поисковые машины рассматривают как спам;\nизбыточное число внешних ссылок, как результат неестественного прироста ссылочной массы (если ссылки некачественные или не тематические);\nссылки со спамными анкорами;\nнакрутки поведенческих факторов;\nбольшое количество исходящих ссылок;\nнекорректная вёрстка;\nтяжёлый «замусоренный» код;\nбольшой вес страницы (HTML-кода, картинок, JS-скриптов, CSS-стилей и прочее);\nнекорректные ответы сервера;\nвирусы на сайте.\nНарушение авторского права. Использование контента без соответствующей лицензии, либо права на использование контента, личных данных и другой приватной информации.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Поисковая_оптимизация"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Восьмеричная_система_счисления"
    },
    {
        "task": [
            "Пусть \n\n\n\n\nL\n\n1\n\n\n\n\n{\\displaystyle L_{1}}\n\n и \n\n\n\n\nL\n\n2\n\n\n\n\n{\\displaystyle L_{2}}\n\n — два языка над алфавитом \n\n\n\nΣ\n\n\n{\\displaystyle \\Sigma }\n\n. Язык \n\n\n\n\nL\n\n1\n\n\n\n\n{\\displaystyle L_{1}}\n\n называется сводимым (по Карпу) к языку \n\n\n\n\nL\n\n2\n\n\n\n\n{\\displaystyle L_{2}}\n\n, если существует функция, \n\n\n\nf\n:\n\nΣ\n\n∗\n\n\n→\n\nΣ\n\n∗\n\n\n\n\n{\\displaystyle f\\colon \\Sigma ^{*}\\to \\Sigma ^{*}}\n\n, вычислимая за полиномиальное время, обладающая следующим свойством:\n<<<\n\n\n\nx\n∈\n\nL\n\n1\n\n\n\n\n{\\displaystyle x\\in L_{1}}\n\n тогда и только тогда, когда \n\n\n\nf\n(\nx\n)\n∈\n\nL\n\n2\n\n\n\n\n{\\displaystyle f(x)\\in L_{2}}\n\n. Сводимость по Карпу обозначается как \n\n\n\n\nL\n\n1\n\n\n\n\n≤\n\n\np\n\n\n\nL\n\n2\n\n\n\n\n{\\displaystyle L_{1}{\\leq }_{p}L_{2}}\n\n или \n\n\n\n\nL\n\n1\n\n\n∝\n\nL\n\n2\n\n\n\n\n{\\displaystyle L_{1}\\varpropto L_{2}}\n\n.>>>",
            "Задача называется NP-полной в сильном смысле, если у неё существует подзадача, которая:\n<<<не является задачей с числовыми параметрами (то есть максимальное значение величин, встречающихся в этой задаче, ограничено сверху полиномом от длины входа)\nявляется NP-полной.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/NP-полная_задача"
    },
    {
        "task": [
            "Многоядерные процессоры можно подразделить по наличию поддержки когерентности (общей) кэш-памяти между ядрами. Бывают процессоры с такой поддержкой и без неё. Способ связи между ядрами:\n<<<разделяемая шина;\nсеть (Mesh) на каналах точка-точка;\nсеть с коммутатором;\nобщая кэш-память.>>>",
            "Кэш-память:\nВо всех существующих на сегодня многоядерных процессорах кэш-памятью 1-го уровня обладает каждое ядро в отдельности, а кэш-память 2-го уровня существует в нескольких вариантах:\n<<<разделяемая — расположена на одном кристалле с ядрами и доступна каждому из них в полном объёме. Используется в процессорах семейств Intel Core;\nиндивидуальная — отдельные кэши равного объёма, интегрированные в каждое из ядер. Обмен данными из кэшей 2-го уровня между ядрами осуществляется через контроллер памяти — интегрированный (Athlon 64 X2, Turion X2, Phenom) или внешний (использовался в Pentium D, в дальнейшем Intel отказалась от такого подхода).>>>",
            "Многоядерные процессоры также имеют гомогенную или гетерогенную архитектуру:\n<<<гомогенная архитектура — все ядра процессора одинаковы и выполняют одни и те же задачи. Типичные примеры: Intel Core Duo, Sun SPARC T3, AMD Opteron;\nгетерогенная архитектура — ядра процессора выполняют разные задачи. Типичный пример: процессор Cell альянса IBM, Sony и Toshiba, у которого из девяти ядер одно является ядром процессора общего назначения PowerPC, а восемь остальных — специализированными процессорами, оптимизированными для векторных операций, которые используются в игровой приставке Sony PlayStation 3.>>>",
            "Например:\n<<<seaForth-24[25] — новая разработка многоядерной MISC-архитектуры Чака Мура: 1 ГГц 24-ядерный асинхронный контроллер.\nКонтроллер от Parallax[англ.][26] имеет восемь 32-разрядных процессоров (COG) в одном кристалле P8X32A.\nKilocore PowerPC-процессор с 1024 8-битными ядрами, работающими на частоте 125 МГц. На данный момент существует 256-ядерный процессор.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Многоядерный_процессор"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Гипертекст"
    },
    {
        "task": [
            "Данная программа работает при её размещении по смещению 10016. Отдельные инструкции выделены цветом:\n<<<BB 11 01, B9 0D 00, B4 0E, 8A 07 — команды присвоения значений регистрам.\n43 — инкремент регистра BX.\nCD 10, CD 20 — вызов программных прерываний 1016 и 2016.\nE2 F9 — команда для организации цикла.\nМалиновым показаны данные (строка «Hello, world!»).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Машинный_код"
    },
    {
        "task": [
            "Понятие экзистенциального типа часто используется совместно с понятием типа записи для представления модулей и абстрактных типов данных, что обусловлено их назначением — отделением реализации от интерфейса. Например, тип T = ∃X { a: X; f: (X → int); } описывает интерфейс модуля (семейства модулей с одинаковой сигнатурой), имеющий в своём составе значение данных типа X и функцию, принимающую параметр в точности этого же типа X и возвращающую целое число. Реализация может быть различной:\n<<<intT = { a: int; f: (int → int); }\nfloatT = { a: float; f: (float → int); }>>>",
            "В общем случае механизм проверки согласования типов не способен определить, к какому именно экзистенциальному типу принадлежит данный модуль. В примере выше intT { a: int; f: (int → int); } также мог бы иметь тип ∃X { a: X; f: (int → int); }. Простейшим решением является явное указание для каждого модуля подразумеваемого в нём типа, например:\n<<<intT = { a: int; f: (int → int); } as ∃X { a: X; f: (X → int); }>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Система_типов"
    },
    {
        "task": [
            "Компьютерное моделирование дает возможность[источник не указан 1244 дня]:\n<<<расширить круг исследовательских объектов — становится возможным изучать не повторяющиеся явления, явления прошлого и будущего, объекты, которые не воспроизводятся в реальных условиях;\nвизуализировать объекты любой природы, в том числе и абстрактные;\nисследовать явления и процессы в динамике их развертывания;\nуправлять временем (ускорять, замедлять и т.д);\nсовершать многоразовые испытания модели, каждый раз возвращая её в первичное состояние;\nполучать разные характеристики объекта в числовом или графическом виде;\nнаходить оптимальную конструкцию объекта, не изготовляя его пробных экземпляров;\nпроводить эксперименты без риска негативных последствий для здоровья человека или окружающей среды.>>>",
            "В процессе проведения эксперимента может выясниться, что нужно:\n<<<скорректировать план исследования;\nвыбрать другой метод решения задачи;\nусовершенствовать алгоритм получения результатов;\nуточнить информационную модель;\nвнести изменения в постановку задачи.>>>",
            "Компьютерное моделирование применяют для широкого круга задач, таких как:\n<<<анализ распространения загрязняющих веществ в атмосфере;\nпроектирование шумовых барьеров для борьбы с шумовым загрязнением;\nконструирование транспортных средств;\nсимуляция полёта на авиационном тренажёре для тренировки лётчиков;\nпрогнозирование погоды;\nэмуляция работы других электронных устройств;\nпрогнозирование цен на финансовых рынках;\nисследование поведения зданий, конструкций и деталей под механической нагрузкой;\nпрогнозирование прочности конструкций и механизмов их разрушения;\nпроектирование производственных процессов, например химических;\nстратегическое управление организацией;\nисследование поведения гидравлических систем: нефтепроводов, водопровода;\nмоделирование роботов и автоматических манипуляторов;\nмоделирование сценарных вариантов развития городов;\nмоделирование транспортных систем;\nконечно-элементное моделирование краш-тестов;\nмоделирование результатов пластических операций;>>>",
            "Моделирование:Медиафайлы на Викискладе<<<Метод конечных элементов\nМетод конечных разностей\nМетод конечных объёмов\nМетод подвижных клеточных автоматов\nМетод классической молекулярной динамики\nМетод компонентных цепей\nМетод узловых потенциалов>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Компьютерное_моделирование"
    },
    {
        "task": [
            "Виды хостинга<<<Виртуальный хостинг — сервер с множеством сайтов, владельцы которых имеют одинаковые права и обязанности.\nВиртуальный выделенный сервер (VPS/VDS) — автономная (выделенная) часть дискового пространства на сервере и фиксированные ресурсы. Владелец получает права администратора, и самостоятельно может настраивать и устанавливать программы.\nВыделенный сервер — полное владение сервером с отдельной ОС, ПО.\nColocation — размещение сервера, которым владеет отдельный человек, предприниматель, компания, в дата-центре хостинговой компании.\nОблачный хостинг[1] - сеть взаимосвязанных серверов для распространения файлов и ресурсов веб-сайта.>>>",
            "Одним из критериев выбора хостинга является используемая операционная система, поскольку от неё зависит программное обеспечение, которое будет поддерживать функциональность сервисов в дальнейшем.\nВажным аспектом описания хостинга является наличие таких служб и возможностей:\n<<<поддержка CGI: Perl, PHP, Python, ASP, Ruby, JSP, Java;\nподдержка .htaccess/.htpasswd (для Apache);\nподдержка баз данных, а также установленные модули и фреймворки для каждой из возможностей.>>>",
            "Хостинг, как услугу, сравнивают, описывают и оценивают по таким ограничениям:\n<<<размер дискового пространства под файлы пользователя;\nколичество месячного трафика;\nколичество сайтов, которые можно разместить в рамках одной учётной записи;\nколичество FTP пользователей;\nколичество E-Mail ящиков и объём дискового пространства, предназначенного для почты;\nколичество баз данных и размер дискового пространства под базы данных;\nколичество одновременных процессов на пользователя;\nколичество ОЗУ, и максимальное время исполнения, выделяемое каждому процессу пользователя.>>>",
            "Качественные ограничения:\n<<<свободные ресурсы CPU, оперативной памяти, которые влияют на быстродействие сервера;\nпропускная способность каналов, от которой зависит загрузка информации;\nудалённость оборудования хостера от целевой аудитории сайта, которая влияет на загрузку информации.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Хостинг"
    },
    {
        "task": [
            "«Копилефт» (англ. copyleft) — сложное слово, образованное из двух слов:\n<<<copy — экземпляр, копия.\nleft — лево, левый.>>>",
            "Право копирования — одно из прав, предоставляемых автором произведения (одно из авторских прав) — по-английски называется «copyright», поэтому «copyleft» можно условно перевести как «авторское лево» (порой так и говорят — в противоположность термину «авторское право»). Здесь присутствует игра слов: «right» — омоним, в английском языке обозначающий:\n<<<право в юридическом смысле;\nпонятие «правый» (справа), указывающее на относительное пространственное расположение сторон.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Копилефт"
    },
    {
        "task": [
            "<<<Амплитудная модуляция (АМ)\nАмплитудная модуляция с одной боковой полосой (SSB — однополосная АМ)\nБалансная амплитудная модуляция (БАМ) — АМ с подавлением несущей\nКвадратурная модуляция (QAM)\nУгловая модуляция\nЧастотная модуляция (ЧМ)\nЛинейная частотная модуляция (ЛЧМ)\nФазовая модуляция (ФМ)\nСигнально-кодовая модуляция (СКМ), в англоязычном варианте Signal Code Modulation (SCM)13\nКруглое модуляция (ФМ)\nЧастота модуляции (ЧМ)\n Линейная частотная модуляция  (ЛЧМ)>>>",
            "a — несущий сигналb — полезный сигналc — амплитудно-импульсная модуляцияd — частотно-импульсная модуляцияe — широтно-импульсная модуляцияf — фазово-импульсная модуляция<<<Импульсно-кодовая модуляция (ИКМ или PCM — Pulse Code Modulation)\nДифференциальная импульсно-кодовая модуляция (ДИКМ или DPCM — Differential PCM)\nАдаптивная дифференциальная импульсно-кодовая модуляция (АДИКМ или ADPCM — Adaptive DPCM)\nШиротно-импульсная модуляция (ШИМ)\nАмплитудно-импульсная модуляция (АИМ)\nЧастотно-импульсная модуляция (ЧИМ)\nСкважностно-импульсная модуляция\nФазово-импульсная модуляция (ФИМ)\nДельта-модуляция (ДМ или Δ-модуляция)\nСигма-дельта модуляция (ΣΔ)>>>",
            "Основные характеристики<<<Энергетическая эффективность (потенциальная помехоустойчивость) характеризует достоверность передаваемых данных при воздействии на сигнал аддитивного белого гауссовского шума, при условии, что последовательность символов восстановлена идеальным демодулятором. Определяется минимальным отношением сигнал/шум (Eb/N0), которое необходимо для передачи данных через канал с вероятностью ошибки, не превышающей заданную. Энергетическая эффективность определяет минимальную мощность передатчика, необходимую для приемлемой работы. Характеристикой метода модуляции является кривая энергетической эффективности — зависимость вероятности ошибки идеального демодулятора от отношения сигнал/шум (Eb/N0).\nСпектральная эффективность \n\n\n\n\n\nC\n\nΔ\nF\n\n\n\n\n\n{\\displaystyle {C \\over \\Delta F}}\n\n — отношение скорости передачи данных к используемой полосе пропускания радиоканала.\nAMPS: 0,83\nNMT: 0,46\nGSM: 1,35\nУстойчивость к воздействиям канала передачи характеризует достоверность передаваемых данных при воздействии на сигнал специфичных искажений: замирания вследствие многолучевого распространения, ограничение полосы, сосредоточенные по частоте или времени помехи, эффект Доплера и др.\nТребования к линейности усилителей. Для усиления сигналов с некоторыми видами модуляции могут быть использованы нелинейные усилители класса C, что позволяет существенно снизить энергопотребление передатчика, при этом уровень внеполосного излучения не превышает допустимые пределы. Данный фактор особенно важен для систем подвижной связи.\nСложность реализации модемов определяется вычислительным ресурсом, требуемым для реализации алгоритма демодуляции, и требованиями к характеристикам аналоговой части.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Модуляция"
    },
    {
        "task": [
            "Отказоустойчивые кластеры и системы разделяются на 3 основных типа:\n<<<с холодным резервом или активный/пассивный. Активный узел выполняет запросы, а пассивный ждет его отказа и включается в работу, когда таковой произойдет. Пример — резервные сетевые соединения, в частности, Алгоритм связующего дерева. Например, связка DRBD и HeartBeat/Corosync.\nс горячим резервом или активный/активный. Все узлы выполняют запросы, в случае отказа одного нагрузка перераспределяется между оставшимися. То есть кластер распределения нагрузки с поддержкой перераспределения запросов при отказе. Примеры — практически все кластерные технологии, например, Microsoft Cluster Server. OpenSource проект OpenMosix.\nс модульной избыточностью. Применяется только в случае, когда простой системы совершенно недопустим. Все узлы одновременно выполняют один и тот же запрос (либо части его, но так, что результат достижим и при отказе любого узла), из результатов берется любой. Необходимо гарантировать, что результаты разных узлов всегда будут одинаковы (либо различия гарантированно не повлияют на дальнейшую работу). Примеры — RAID и Triple modular redundancy.>>>",
            "В отличие от аппаратного кластера компьютеров, кластеры организуемые программно, требуют:\n<<<наличия специального программного модуля (Cluster Manager), основной функцией которого является поддержание взаимодействия между всеми серверами — членами кластера:\nсинхронизации данных между всеми серверами — членами кластера;\nраспределение нагрузки (клиентских запросов) между серверами — членами кластера;\nот умения клиентского программного обеспечения распознавать сервер, представляющий собой кластер серверов, и соответствующим образом обрабатывать команды от Cluster Manager;\nесли клиентская программа не умеет распознавать кластер, она будет работать только с тем сервером, к которому обратилась изначально, а при попытке Cluster Manager перераспределить запрос на другие серверы, клиентская программа может вообще лишиться доступа к этому серверу (результат зависит от конкретной реализации кластера).>>>",
            "Примеры программных кластерных решений<<<IBM Lotus Notes\nHP MC/ServiceGuard Архивная копия от 27 апреля 2009 на Wayback Machine>>>",
            "Однако, принцип организации кластера серверов (на уровне программного протокола) позволяет исполнять по нескольку программных серверов на одном аппаратном. Такое использование может быть востребовано:\n<<<при разработке и тестировании кластерных решений;\nпри необходимости обеспечить доступность кластера только с учётом частых изменений конфигурации серверов — членов кластера, требующих их перезагрузки (перезагрузка производится поочерёдно) в условиях ограниченных аппаратных ресурсов.>>>",
            "Среди пользователей GNU/Linux популярны несколько программ:\n<<<distcc, MPICH и др. — специализированные средства для распараллеливания работы программ. distcc допускает параллельную компиляцию в GNU Compiler Collection.\nLinux Virtual Server, Linux-HA — узловое ПО для распределения запросов между вычислительными серверами.\nMOSIX, openMosix, Kerrighed, OpenSSI — полнофункциональные кластерные среды, встроенные в ядро, автоматически распределяющие задачи между однородными узлами. OpenSSI, openMosix и Kerrighed создают среду единой операционной системы между узлами.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Кластер_(группа_компьютеров)"
    },
    {
        "task": [
            "Типичный дата-центр состоит из:\n<<<информационной инфраструктуры, включающей в себя серверное оборудование и обеспечивающей основные функции дата-центра — обработку и хранение информации;\nтелекоммуникационной инфраструктуры, обеспечивающей взаимосвязь элементов дата-центра, а также передачу данных между дата-центром и пользователями;\nинженерной инфраструктуры, обеспечивающей нормальное функционирование основных систем дата-центра.>>>",
            "Модульный датацентр<<<Крупные дата-центры имеют своё здание, специально сконструированное для обеспечения наилучших условий размещения. Обычно они имеют свои каналы связи, к которым подключают серверы.\nМодульные дата-центры собираются из модульных блоков, имеют разные конструктивные особенности, масштабируются от минимальной площади серверного зала одного модуля, увеличиваются до бесконечности путём постепенного наращивания модулей. Имеют повышенные уровни безопасности работы автономных систем дата-центра.\nСредние дата-центры обычно арендуют площадку определённого размера и каналы определённой пропускной способности (обычно измеряется в Гбит/с).\nМалые дата-центры размещаются в малоприспособленных помещениях. Часто ими используется оборудование плохого качества, а также предоставляется самый минимум услуг.\nКонтейнерные дата-центры. Стойки с оборудованием размещаются в стандартных ISO контейнерах размером 20 и 40 футов. Имеют преимущества, так как могут перевозиться автомобильным и железнодорожным транспортом.>>>",
            "Например, стандарт TIA-942 предполагает четыре уровня надёжности дата-центров:\n<<<Уровень 1 (N) — отказы оборудования или проведение ремонтных работ приводят к остановке работы всего дата-центра; в дата-центре отсутствуют фальшполы, резервные источники электроснабжения и источники бесперебойного питания; инженерная инфраструктура не зарезервирована;\nУровень 2 (N+1) — имеется небольшой уровень резервирования; в дата-центре имеются фальшполы и резервные источники электроснабжения, однако проведение ремонтных работ также вызывает остановку работы дата-центра;\nУровень 3 (2N) — имеется возможность проведения ремонтных работ (включая замену компонентов системы, добавление и удаление вышедшего из строя оборудования) без остановки работы дата-центра; инженерные системы однократно зарезервированы, имеется несколько каналов распределения электропитания и охлаждения, однако постоянно активен только один из них;\nУровень 4 (2(N+1)) — имеется возможность проведения любых работ без остановки работы дата-центра; инженерные системы двукратно зарезервированы, то есть продублированы как основная, так и дополнительная системы (например, бесперебойное питание представлено двумя ИБП, каждый из которых уже зарезервирован по схеме N+1).>>>",
            "Услуги дата-центров<<<Виртуальный хостинг. Крупные дата-центры обычно не предоставляют подобную массовую услугу из-за необходимости обеспечения техническо-консультационной поддержки.\nВиртуальный сервер. Предоставление гарантированной и лимитированной части сервера (части всех ресурсов). Важная особенность данного вида хостинга — разделение сервера на несколько виртуальных независимых серверов, реализуемых программным способом.\nВыделенный сервер. Дата-центр предоставляет клиенту в аренду сервер в различной конфигурации. Крупные дата-центры в основном специализируются именно на подобных типах услуг.\nColocation. Размещение сервера клиента на площадке дата-центра за определённую плату. Стоимость зависит от энергопотребления и тепловыделения размещаемого оборудования, пропускной способности подключаемого к оборудованию канала передачи данных, а также размера и веса стойки.\nАренда телекоммуникационных стоек. Передача клиенту стоек для монтажа собственного или клиентского оборудования. Формально это частный случай colocation, но с основным отличием в том, что арендаторы в основном юридические лица.\nВыделенная зона (Dedicated area). В некоторых случаях владельцы дата-центра выделяют часть технологических площадей для специальных клиентов, как правило, финансовых компаний, имеющих строгие внутренние нормы безопасности. В этом случае дата-центр предоставляет некую выделенную зону, обеспеченную каналами связи, электроснабжением, холодоснабжением и системами безопасности, а клиент сам создает свой дата-центр внутри этого пространства.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Дата-центр"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Хеш-сумма"
    },
    {
        "task": [
            "Параллельные[править | править код]<<<Проприетарная Asus Media Bus[англ.], использовалась на некоторых материнских платах ASUS с Socket 7 и представляла собой шину ISA в специфическом разъеме, размещенном в одну линию с разъемом шины PCI.\nCAMAC для измерительных систем (instrumentation systems)\nExtended ISA или EISA\nIndustry Standard Architecture или ISA\nLow Pin Count или LPC\nMicroChannel или MCA\nMBus\nMultibus для промышленных систем\nNuBus или IEEE 1196\nOPTi local bus, использовалась для ранних материнских плат для Intel 80486\nPeripheral Component Interconnect или PCI, также PCI-X\nS-100 bus или IEEE 696, использовалась в Altair и похожих микрокомпьютерах\nSBus или IEEE 1496\nVESA Local Bus или VLB или VL-bus, использовалась в основном на материнских платах для 80486 процессоров и была подключена непосредственно к выводам микропроцессора. Однако встречалась и реализация этой шины в сочетании с ЦПУ IBM BL3 (аналог i386SX) и ранними Pentium\nVMEbus, VERSAmodule Eurocard bus\nSTD Bus для 8- и 16-битных микропроцессорных систем\nUnibus\nQ-Bus>>>",
            "Последовательные[править | править код]<<<1-Wire\nHyperTransport\nI²C\nPCI Express или PCIe\nSerial Peripheral Interface Bus или шина SPI\nUSB, Universal Serial Bus, чаще используется как внешняя\nFireWire, i.Link, IEEE 1394, чаще используется как внешняя\nDirect Media Interface (DMI)\nIntel QuickPath Interconnect или просто QuickPath (QPI)\nSATA/SAS>>>",
            "Примеры внешних компьютерных шин<<<Advanced Technology Attachment или ATA (также известна как PATA, IDE, EIDE, ATAPI) — шина для подключения дисковой и ленточной периферии.\nSATA, Serial ATA — современный вариант ATA\nUSB, Universal Serial Bus, используется для множества внешних устройств\nHIPPI, HIgh Performance Parallel Interface\nIEEE-488, GPIB (General-Purpose Instrumentation Bus), HPIB, (Hewlett-Packard Instrumentation Bus)\nPC card, ранее известная как PCMCIA, часто используется в ноутбуках и других портативных компьютерах, но теряет своё значение с появлением USB и встраиванием сетевых карт и модемов\nSCSI, Small Computer System Interface, шина для подключения дисковых и ленточных накопителей\nSerial Attached SCSI, SAS — современный вариант SCSI>>>",
            "Примеры универсальных компьютерных шин<<<Futurebus\nInfiniBand\nQuickRing\nSCI>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Шина_(компьютер)"
    },
    {
        "task": [
            "Модели вычислений<<<Машина Тьюринга — абстрактный исполнитель (абстрактная вычислительная машина). Была предложена Аланом Тьюрингом в 1936 году для формализации понятия алгоритма. Машина Тьюринга является расширением конечного автомата и, согласно тезису Чёрча — Тьюринга, способна имитировать все другие исполнители (с помощью задания правил перехода), каким-либо образом реализующие процесс пошагового вычисления, в котором каждый шаг вычисления достаточно элементарен.\nЛямбда-исчисление — рассматривается пара: λ-выражение и его аргумент, — а вычислением считается применение, или апплицирование, первого члена пары ко второму. Это позволяет отделить функцию и то, к чему она применяется. В более общем случае вычислением считаются цепочки, начинающиеся с исходного λ-выражения, за которым следует конечная последовательность λ-выражений, каждое из которых получается из предыдущего применением β-редукции, то есть правила подстановки.\nКомбинаторная логика — трактовка вычисления сходна с λ-исчислением, но имеются и важные отличия (например, комбинатор неподвижной точки Y имеет нормальную форму в комбинаторной логике, а в λ-исчислении — нет). Комбинаторная логика была первоначально разработана для изучения природы парадоксов и для построения концептуально ясных оснований математики, причем представление о переменной исключалось вовсе, что помогало прояснить роль и место переменных в математике.\nРегистровые машины, в частности, RAM-машина — абстрактная вычислительная машина, моделирующая компьютер с произвольным доступом к памяти. Именно эта модель вычислений наиболее часто используется при анализе алгоритмов.>>>",
            "Теория алгоритмов развивается, главным образом, по трём направлениям:\n<<<Классическое:\nФормальная формулировка задач;\nПонятие проблемы разрешения;\nКлассификация уровней сложности («P», «NP» и другие).\nАнализ:\nАсимптотический:\nОценка ресурсоёмкости и времени выполнения (в частности, для рекурсивных алгоритмов);\nОценка роста потребности в ресурсах (например, времени выполнения) с увеличением объёма данных.\nПрактический:\nПолучение «явных» функции трудоёмкости;\nИнтервальный анализ функций;\nПоиск критериев качества;\nМетодика рационального выбора.>>>",
            "На трудоёмкость могут в разной мере влиять свойства входных данных:\n<<<Объём;\nЗначения;\nПорядок поступления.>>>",
            "В рамках классической теории, осуществляется классификация задач по их сложности (P-сложные, NP-сложные, экспоненциально сложные и другие):\n<<<«P» — могут быть решены за время, полиномиально зависящее от объёма исходных данных, с помощью детерминированной вычислительной машины (например, «машина Тьюринга»);\n«NP»:\nЗадачи, решение которых осуществимо за полиномиально выраженное время с помощью недетерминированной вычислительной машины (следующее состояние которой не всегда однозначно определяется предыдущими). Её работу можно представить как разветвляющийся на каждой неоднозначности процесс: задача решена, если хотя бы одна ветвь достигла ответа;\nЗадачи, решение которых с помощью дополнительной информации полиномиальной длины, данной нам свыше, мы можем проверить за полиномиальное время. В частности, к классу «NP» относятся все задачи, решение которых можно проверить за полиномиальное время.>>>",
            "Некоторые приложения теории алгоритмов:\n<<<исследование массовых проблем;\nприложения к основаниям математики: конструктивная семантика;\nприложения к математической логике: анализ формализованных языков логики и арифметики;\nвычислимый анализ;\nнумерованные структуры;\nприложения к теории вероятностей: определения случайной последовательности;\nприложения к теории информации: алгоритмический подход к понятию количества информации;\nоценки сложностей решения отдельных задач;\nвлияние теории алгоритмов на алгоритмическую практику[3].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Теория_алгоритмов"
    },
    {
        "task": [
            "Поколения процессоров Intel<<<\n\n\nБлок-схема микроархитектуры первого в мире микропроцессора Intel 4004\n\n\n\nМикроархитектура Intel 80286\n\n\n\nМикроархитектура Intel Core 2\n\n>>>",
            "В отличие от архитектурного дизайна, где достижение определённого уровня производительности является главной целью, проектирование микроархитектуры уделяет большее внимание другим ограничениям. Поскольку дизайн микроархитектуры прямо влияет на то, что происходит в системе, внимание должно быть уделено следующим проблемам:\n<<<Площадь/стоимость чипа\nПотребление энергии\nСложность логики\nПростота соединений\nТехнологичность\nПростота отладки\nТестируемость.>>>",
            "В общем случае, все ЦПУ, одночиповые микропроцессоры и многочиповые реализации выполняют программы, производя следующие шаги:\n<<<Чтение инструкции и её декодирование\nПоиск всех связанных данных, необходимых для обработки инструкции\nОбработка инструкции\nЗапись результатов>>>",
            "Статьи<<<Евгений Музыченко. FAQ по процессоpам семейства x86  (рус.). iXBT.com (24 февраля 2001). Дата обращения: 20 декабря 2016.\nСтанислав Гарматюк. Современные десктопные процессоры архитектуры x86: общие принципы работы (x86 CPU FAQ 1.0)  (рус.). iXBT.com (9 февраля 2006). Дата обращения: 20 декабря 2016.\nОбзор микроархитектур современных десктопных процессоров, часть 1 (рус.)\nОбзор микроархитектур современных десктопных процессоров, часть 2 (рус.)\nОбзор микроархитектур современных десктопных процессоров, часть 3 (рус.)\nЭволюция микропроцессорных архитектур (рус.)>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Микроархитектура"
    },
    {
        "task": [
            "Виртуальные машины могут использоваться для:\n<<<защиты информации и ограничения возможностей программ (см.: песочница);\nисследования производительности ПО или новой компьютерной архитектуры;\nэмуляции различных архитектур (например, эмулятор игровой приставки);\nоптимизации использования ресурсов мейнфреймов и прочих мощных компьютеров (см., например: IBM eServer);\nзапуска вредоносного кода с целью перехвата управления инфицированной системой: вирус PMBS, обнаруженный в 1993 году, а также руткит SubVirt, созданный в 2006 году в Microsoft Research, создавали виртуальную систему, которой ограничивался пользователь и все защитные программы (антивирусы и прочие).[2]\nмоделирования информационных систем с клиент-серверной архитектурой на одной ЭВМ (эмуляция компьютерной сети с помощью нескольких виртуальных машин).\nупрощения управления кластерами — виртуальные машины могут просто мигрировать с одной физической машины на другую во время работы.\nтестирования и отладки системного программного обеспечения;\nпроверки программ на содержание вредоносного ПО.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Виртуальная_машина"
    },
    {
        "task": [
            "Классическими примерами таких алгоритмов являются симметричные криптографические алгоритмы, перечисленные ниже:\n<<<Простая перестановка\nОдиночная перестановка по ключу\nДвойная перестановка\nПерестановка «Магический квадрат»>>>",
            "В настоящее время симметричные шифры — это:\n<<<блочные шифры. Обрабатывают информацию блоками определённой длины (обычно 64, 128 бит), применяя к блоку ключ в установленном порядке, как правило, несколькими циклами перемешивания и подстановки, называемыми раундами. Результатом повторения раундов является лавинный эффект — нарастающая потеря соответствия битов между блоками открытых и зашифрованных данных.\nпоточные шифры, в которых шифрование проводится над каждым битом либо байтом исходного (открытого) текста с использованием гаммирования. Поточный шифр может быть легко создан на основе блочного (например, ГОСТ 28147-89 в режиме гаммирования), запущенного в специальном режиме.>>>",
            "Существует множество (не менее двух десятков) алгоритмов симметричных шифров, существенными параметрами которых являются:\n<<<стойкость\nдлина ключа\nчисло раундов\nдлина обрабатываемого блока\nсложность аппаратной/программной реализации\nсложность преобразования>>>",
            "блочные шифры<<<AES (англ. Advanced Encryption Standard) — американский стандарт шифрования\nГОСТ 28147-89 — советский и российский стандарт шифрования, также является стандартом СНГ\nDES (англ. Data Encryption Standard) — стандарт шифрования данных в США\n3DES (Triple-DES, тройной DES)\nRC2 (Шифр Ривеста (Rivest Cipher или Ron’s Cipher))\nRC5\nBlowfish\nTwofish\nNUSH\nIDEA (International Data Encryption Algorithm, международный алгоритм шифрования данных)\nCAST (по инициалам разработчиков Carlisle Adams и Stafford Tavares)\nCRAB\n3-WAY\nKhufu и Khafre\nKuznechik>>>",
            "потоковые шифры<<<RC4 (алгоритм шифрования с ключом переменной длины)\nSEAL (Software Efficient Algorithm, программно-эффективный алгоритм)\nWAKE (World Auto Key Encryption algorithm, алгоритм шифрования на автоматическом ключе)>>>",
            "Достоинства[править | править код]<<<скорость\nпростота реализации (за счёт более простых операций)\nменьшая требуемая длина ключа для сопоставимой стойкости\nизученность (за счёт большего возраста)>>>",
            "Недостатки[править | править код]<<<сложность управления ключами в большой сети\nсложность обмена ключами. Для применения необходимо решить проблему надёжной передачи ключей каждому абоненту, так как нужен секретный канал для передачи каждого ключа обеим сторонам>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Симметричные_криптосистемы"
    },
    {
        "task": [
            "Различают также:\n<<<полимасштабные, или масштабно-независимые геоинформационные системы (multiscale), основанные на множественных, или полимасштабных представлениях пространственных объектов, обеспечивая графическое или картографическое воспроизведение данных на любом из избранных уровней масштабного ряда на основе единственного набора данных с наибольшим пространственным разрешением;\nпространственно-временные геоинформационные системы (spatio-temporal), оперирующие пространственно-временными данными.>>>",
            "Геоинформационный проект — наполнение геоинформационной системы пространственными данными и сведениями об объектах в привязке к пространственным данным. Проект может быть реализован на какой-либо из тиражируемых геоинформационных систем, либо такая система может быть разработана специально для геоинформационного проекта. Типичные этапы геоинформационного проекта:\n<<<предпроектные исследования, включающие изучение функциональных требований, оценку функциональных возможностей геоинформационных систем, технико-экономическое обоснование;\nсистемное проектирование, включая стадию пилотного проекта, при необходимости — разработку геоинформационных систем или расширение существующих;\nтестирование на небольшом территориальном фрагменте, или тестовом участке, прототипирование, или создание опытного образца, или прототипа (prototype);\nвнедрение;\nэксплуатация.>>>",
            "Типичные вопросы, на которые может ответить геоинформационная система:\n<<<«Что находится в…?» (определяется место).\n«Где это находится?» (пространственный анализ).\n«Что изменилось начиная с…?» (определить временные изменения на определённой площади).\n«Какие пространственные структуры существуют?»\n«Что, если…?» (моделирование, что произойдет, если добавить новый объект).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Геоинформационная_система"
    },
    {
        "task": [
            "Тип данных характеризует одновременно:\n<<<множество допустимых значений, которые могут принимать данные, принадлежащие к этому типу;\nнабор операций, которые можно осуществлять над данными, принадлежащими к этому типу.>>>",
            "Примеры<<<примитивные типы, в том числе:\nлогический тип\nцелые типы\nвещественные типы\nссылочные типы\nопциональные типы[англ.]\nобнуляемые типы[англ.]\nКомпозитные типы, в том числе:\nмассивы\nзаписи\nкортежи\nабстрактные типы (АТД, англ. ADT)\nалгебраические типы\nвариантные типы[англ.]\nподтипы[англ.]\nунаследованные типы\nобъектные типы, то есть объекты, значением которых являются типы — например, переменные типов\nчастичные типы[англ.]\nрекурсивные типы[англ.]\nфункциональные типы, например бинарные функции\nуниверсально квантифицированные типы, такие как параметрические типы\nэкзистенциально квантифицированные, такие как модули\nзависимые типы — типы, зависящие от термов (значений)\nуточняющие типы[англ.] — типы, идентифицирующие подмножества других типов\nПредопределённые типы (являющиеся фактически структурными, но предоставляемые на правах примитивных) для удобства промышленных разработок, такие как «дата», «время», «валюта» и др.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Тип_данных"
    },
    {
        "task": [
            "Ряд Фурье любого элемента \n\n\n\nf\n\n\n{\\displaystyle f}\n\n по любой ортогональной системе сходится в пространстве \n\n\n\nH\n\n\n{\\displaystyle H}\n\n, но его сумма не обязательно равна \n\n\n\nf\n\n\n{\\displaystyle f}\n\n. Для ортонормированной системы \n\n\n\n\n\nφ\n\nk\n\n\n\n\n\n{\\displaystyle {\\varphi _{k}}}\n\n в сепарабельном гильбертовом пространстве следующие условия эквивалентны:\n<<<система является базисом, то есть сумма ряда Фурье любого элемента равна этому элементу.\nсистема является полной, то есть в \n\n\n\nH\n\n\n{\\displaystyle H}\n\n не существует ненулевого элемента, ортогонального всем элементам \n\n\n\n\nφ\n\n1\n\n\n,\n\nφ\n\n2\n\n\n,\n.\n.\n.\n,\n\nφ\n\nn\n\n\n,\n.\n.\n.\n\n\n{\\displaystyle \\varphi _{1},\\varphi _{2},...,\\varphi _{n},...}\n\n одновременно.\nсистема является замкнутой, то есть для любого \n\n\n\nf\n∈\nH\n\n\n{\\displaystyle f\\in H}\n\n выполнено равенство Парсеваля>>>",
            "\n\n\n\n\n∑\n\nk\n=\n1\n\n\n∞\n\n\n\n|\n\n\nc\n\nk\n\n\n\n\n|\n\n\n2\n\n\n=\n‖\nf\n\n‖\n\n2\n\n\n\n\n{\\displaystyle \\sum _{k=1}^{\\infty }|c_{k}|^{2}=\\|f\\|^{2}}\n\n.<<<линейные комбинации элементов \n\n\n\n\nφ\n\n1\n\n\n,\n\nφ\n\n2\n\n\n,\n.\n.\n.\n,\n\nφ\n\nn\n\n\n,\n.\n.\n.\n\n\n{\\displaystyle \\varphi _{1},\\varphi _{2},...,\\varphi _{n},...}\n\n плотны в пространстве \n\n\n\nH\n\n\n{\\displaystyle H}\n\n.>>>",
            "Далее обсуждается сходимость последовательности функций \n\n\n\n\nS\n\nN\n\n\n(\nf\n,\nx\n)\n\n\n{\\displaystyle S_{N}(f,x)}\n\n к функции \n\n\n\nf\n(\nx\n)\n\n\n{\\displaystyle f(x)}\n\n в различных смыслах. Функция \n\n\n\nf\n\n\n{\\displaystyle f}\n\n предполагается \n\n\n\n2\nπ\n\n\n{\\displaystyle 2\\pi }\n\n-периодической (если она задана только на промежутке \n\n\n\n[\n−\nπ\n,\nπ\n]\n\n\n{\\displaystyle [-\\pi ,\\pi ]}\n\n, её можно периодически продолжить).\n<<<Если \n\n\n\nf\n∈\n\nL\n\n2\n\n\n(\n[\n−\nπ\n,\nπ\n]\n)\n\n\n{\\displaystyle f\\in L_{2}([-\\pi ,\\pi ])}\n\n, то последовательность \n\n\n\n\nS\n\nN\n\n\n(\nf\n,\nx\n)\n\n\n{\\displaystyle S_{N}(f,x)}\n\n сходится к функции \n\n\n\nf\n(\nx\n)\n\n\n{\\displaystyle f(x)}\n\n в смысле \n\n\n\n\nL\n\n2\n\n\n\n\n{\\displaystyle L_{2}}\n\n. Кроме того, \n\n\n\n\nS\n\nN\n\n\n(\nf\n,\nx\n)\n\n\n{\\displaystyle S_{N}(f,x)}\n\n являются наилучшим (в смысле расстояния в \n\n\n\n\nL\n\n2\n\n\n\n\n{\\displaystyle L_{2}}\n\n) приближением функции \n\n\n\nf\n\n\n{\\displaystyle f}\n\n тригонометрическим многочленом степени не выше \n\n\n\nN\n\n\n{\\displaystyle N}\n\n.\nСходимость ряда Фурье в заданной точке \n\n\n\n\nx\n\n0\n\n\n\n\n{\\displaystyle x_{0}}\n\n — локальное свойство, то есть, если функции \n\n\n\nf\n\n\n{\\displaystyle f}\n\n и \n\n\n\ng\n\n\n{\\displaystyle g}\n\n совпадают в некоторой окрестности \n\n\n\n\nx\n\n0\n\n\n\n\n{\\displaystyle x_{0}}\n\n, то последовательности \n\n\n\n\nS\n\nN\n\n\n(\nf\n,\n\nx\n\n0\n\n\n)\n\n\n{\\displaystyle S_{N}(f,x_{0})}\n\n и \n\n\n\n\nS\n\nN\n\n\n(\ng\n,\n\nx\n\n0\n\n\n)\n\n\n{\\displaystyle S_{N}(g,x_{0})}\n\n либо одновременно расходятся, либо одновременно сходятся, и в этом случае их пределы совпадают. (Принцип локализации).\nЕсли функция \n\n\n\nf\n\n\n{\\displaystyle f}\n\n дифференцируема в точке \n\n\n\n\nx\n\n0\n\n\n\n\n{\\displaystyle x_{0}}\n\n, то её ряд Фурье в этой точке сходится к \n\n\n\nf\n(\n\nx\n\n0\n\n\n)\n\n\n{\\displaystyle f(x_{0})}\n\n. Более точные достаточные условия в терминах гладкости функции \n\n\n\nf\n\n\n{\\displaystyle f}\n\n задаются признаком Дини.\nФункция, непрерывная в точке \n\n\n\n\nx\n\n0\n\n\n\n\n{\\displaystyle x_{0}}\n\n, может иметь расходящийся в ней ряд Фурье. Однако, если он сходится, то непременно к \n\n\n\nf\n(\n\nx\n\n0\n\n\n)\n\n\n{\\displaystyle f(x_{0})}\n\n. Это следует из того, что для непрерывной в \n\n\n\n\nx\n\n0\n\n\n\n\n{\\displaystyle x_{0}}\n\n функции \n\n\n\nf\n\n\n{\\displaystyle f}\n\n последовательность \n\n\n\n\nS\n\nN\n\n\n(\nf\n,\n\nx\n\n0\n\n\n)\n\n\n{\\displaystyle S_{N}(f,x_{0})}\n\n сходится по Чезаро к \n\n\n\nf\n(\n\nx\n\n0\n\n\n)\n\n\n{\\displaystyle f(x_{0})}\n\n.\nЕсли функция \n\n\n\nf\n\n\n{\\displaystyle f}\n\n разрывна в точке \n\n\n\n\nx\n\n0\n\n\n\n\n{\\displaystyle x_{0}}\n\n, но имеет пределы в этой точке справа и слева \n\n\n\nf\n(\n\nx\n\n0\n\n\n+\n0\n)\n≠\nf\n(\n\nx\n\n0\n\n\n−\n0\n)\n,\n\n\n{\\displaystyle f(x_{0}+0)\\neq f(x_{0}-0),}\n\n то при некоторых дополнительных условиях \n\n\n\n\nS\n\nN\n\n\n(\nf\n,\n\nx\n\n0\n\n\n)\n\n\n{\\displaystyle S_{N}(f,x_{0})}\n\n сходятся к \n\n\n\n(\nf\n(\n\nx\n\n0\n\n\n+\n0\n)\n+\nf\n(\n\nx\n\n0\n\n\n−\n0\n)\n)\n\n/\n\n2\n\n\n{\\displaystyle (f(x_{0}+0)+f(x_{0}-0))/2}\n\n. Подробнее см. модифицированный признак Дини.\nТеорема Карлесона: если \n\n\n\nf\n∈\n\nL\n\n2\n\n\n(\n[\n−\nπ\n,\nπ\n]\n)\n\n\n{\\displaystyle f\\in L_{2}([-\\pi ,\\pi ])}\n\n, то её ряд Фурье сходится к ней почти всюду. Это верно и если \n\n\n\nf\n∈\n\nL\n\np\n\n\n(\n[\n−\nπ\n,\nπ\n]\n)\n,\np\n>\n1\n\n\n{\\displaystyle f\\in L_{p}([-\\pi ,\\pi ]),p>1}\n\n. Однако, существуют функции из \n\n\n\n\nL\n\n1\n\n\n(\n[\n−\nπ\n,\nπ\n]\n)\n\n\n{\\displaystyle L_{1}([-\\pi ,\\pi ])}\n\n, ряд Фурье которых расходится во всех точках (пример такой функции построен Колмогоровым[11]).\nЗафиксируем точку \n\n\n\n\nx\n\n0\n\n\n∈\n(\n−\nπ\n,\nπ\n)\n\n\n{\\displaystyle x_{0}\\in (-\\pi ,\\pi )}\n\n. Тогда множество всех непрерывных функций, ряд Фурье которых сходится в этой точке, является множеством первой категории в пространстве \n\n\n\nC\n(\n[\n−\nπ\n,\nπ\n]\n)\n\n\n{\\displaystyle C([-\\pi ,\\pi ])}\n\n. В некотором смысле это означает, что «типичная» непрерывная функция имеет расходящийся ряд Фурье.>>>",
            "Существует фундаментальная связь между аналитичностью функции и скоростью убывания её коэффициентов Фурье. Чем «лучше» функция, тем быстрее её коэффициенты стремятся к нулю, и наоборот. Степенное убывание коэффициентов Фурье присуще функциям класса \n\n\n\n\nC\n\n(\nk\n)\n\n\n\n\n{\\displaystyle C^{(k)}}\n\n, а экспоненциальное — аналитическим функциям. Примеры такого рода связи:\n<<<Коэффициенты Фурье любой интегрируемой функции стремятся к нулю (лемма Римана — Лебега[англ.]).\nЕсли функция \n\n\n\nf\n\n\n{\\displaystyle f}\n\n принадлежит классу \n\n\n\n\nC\n\n(\nk\n)\n\n\n(\n[\n−\nπ\n,\nπ\n]\n)\n\n\n{\\displaystyle C^{(k)}([-\\pi ,\\pi ])}\n\n, то есть дифференцируема \n\n\n\nk\n\n\n{\\displaystyle k}\n\n раз и её \n\n\n\nk\n\n\n{\\displaystyle k}\n\n-я производная непрерывна, то \n\n\n\n\n\n\n\nf\n^\n\n\n\n\nn\n\n\n=\no\n\n(\n\n\n1\n\nn\n\nk\n\n\n\n\n)\n\n\n\n{\\displaystyle {\\hat {f}}_{n}=o\\left({\\frac {1}{n^{k}}}\\right)}\n\n\nЕсли ряд \n\n\n\n∑\n\nn\n\nα\n\n\n\n\n\n\nf\n^\n\n\n\n\nn\n\n\n\n\n{\\displaystyle \\sum n^{\\alpha }{\\hat {f}}_{n}}\n\n сходится абсолютно, то \n\n\n\nf\n\n\n{\\displaystyle f}\n\n совпадает почти всюду с функцией класса \n\n\n\n\nC\n\n(\nk\n)\n\n\n(\n[\n−\nπ\n,\nπ\n]\n)\n\n\n{\\displaystyle C^{(k)}([-\\pi ,\\pi ])}\n\n при всех \n\n\n\nk\n<\nα\n\n\n{\\displaystyle k<\\alpha }\n\n.\nЕсли функция принадлежит классу Гёльдера с показателем \n\n\n\nα\n>\n1\n\n/\n\n2\n\n\n{\\displaystyle \\alpha >1/2}\n\n, то ряд \n\n\n\n∑\n\n\n\n\nf\n^\n\n\n\n\nn\n\n\n\n\n{\\displaystyle \\sum {\\hat {f}}_{n}}\n\n сходится абсолютно (теорема Бернштейна).[источник не указан 451 день]>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Ряд_Фурье"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Ассемблер"
    },
    {
        "task": [
            "Основная статья: Канал связи<<<Симплекс\nПолудуплекс\nДуплекс\nТочка-точка\nМноготочечная:\nШина\nКольцо\nЗвезда\nЯчеистая топология\nБеспроводная сеть>>>",
            "Существуют следующие виды сетей передачи данных:\n<<<Телефонные сети — сети, в которых оконечными устройствами являются простые преобразователи сигнала между электрическим и видимым/слышимым.\nКомпьютерные сети — сети, конечными устройствами которых являются компьютеры.>>>",
            "По принципу коммутации сети делятся на:\n<<<Сети с коммутацией каналов — для передачи между оконечными устройствами выделяется физический или логический канал, по которому возможна непрерывная передача информации. Сетью с коммутацией каналов является, например, телефонная сеть. В таких сетях возможно использование узлов весьма простой организации, вплоть до ручной коммутации, однако недостатком такой организации является неэффективное использование каналов связи, если поток информации непостоянный и малопредсказуемый.\nСети с коммутацией пакетов — данные между конечными устройствами в такой сети передаются короткими посылками — пакетами, которые коммутируются независимо. По такой схеме построено подавляющее большинство компьютерных сетей. Этот тип организации весьма эффективно использует каналы передачи данных, но требует более сложного оборудования узлов, что и определило использование почти исключительно в компьютерной среде.>>>",
            "Терминалы, подключенные к  IP – сетям, таким как интернет, адресуются с использованием IP-адресов. Протоколы Интернета (протокол Suite) обеспечивают управление и маршрутизацию сообщений через IP-сети передачи данных. Существует множество различных сетевых структур, через которые IP-адрес может быть использован для эффективной маршрутизации сообщений, например:\n<<<Глобальная вычислительная сеть (ГВС)\nГородская вычислительная сеть (MAN)\nЛокальная вычислительная сеть (ЛВС)\nКампусная вычислительная сеть (CAN)\nВиртуальная частная сеть (VPN)>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Передача_данных"
    },
    {
        "task": [
            "ЦАП применяется всегда в телекоммуникационных системах и системах управления. Например:\n<<<В системах воспроизведения аудио;\nВ дисплеях;\nФормирование информационного сигнала для смесителей и управляемых генераторов;\nВ системах управлением двигателем;\nВ системах прямого цифрового синтеза (DDS — Direct Digital Synthesizer);>>>",
            "Общие[править | править код]<<<Разрядность. Определяет количество уровней аналогового сигнала, которое может воспроизводить ЦАП. Для N разрядного ЦАП число уровней аналогового сигнала равно 2N (включая значение для нулевого кода);\nНапряжение питания;>>>",
            "Статические характеристики:\n<<<Статическая характеристика преобразования — это зависимости значения выходного сигнала ЦАП от значения входного кода;\nСтатическая нелинейность. Для описания статической нелинейности используют две величины: дифференциальная нелинейность (DNL) и интегральная нелинейность (INL);\nМонотонность. Одна из важнейших характеристик ЦАП, которая говорит о том, что при увеличении кода значение аналогового сигнала также увеличивается. Унарная архитектура гарантирует монотонность. Для бинарной архитектуры монотонность не гарантируется;\nСмещение нуля;\nОшибка усиления;>>>",
            "Динамические характеристики:\n<<<Быстродействие. Определяется как максимальная частота, с которой можно изменять код на входе ЦАП, получая при этом корректный результат на его выходе. Измеряется в «выборок/с» или в герцах. Может именоваться как частота дискретизации или максимальная частота смены входного кода;\nSNR (отношение сигнал/шум). Считается как отношение мощности восстанавливаемого гармонического сигнала к сумме мощностей всех остальных гармоник в спектре выходного сигнала, кроме кратных, и выражается в децибелах;\nSFDR (динамический диапазон, свободный от паразитных составляющих). Считается как отношение амплитуды восстанавливаемого гармонического сигнала к амплитуде наибольшей гармоники в спектре выходного сигнала, также выражается в децибелах. Эту характеристику так же ещё называют \"динамической линейностью\".\nПотребляемая мощность;>>>",
            "В последовательных ЦАП входной код преобразуется в аналоговый сигнал поразрядно. При этом для преобразования всех разрядов используется одна и та же схема, что значительно упрощает устройство, однако скорость преобразования в таких обратно пропорциональна разрядности. Не стоит путать способ преобразования и входной интерфейс устройства: на вход последовательного ЦАП входной код может подаваться как последовательно, так и параллельно. К последовательным ЦАП можно отнести следующие виды:\n<<<Широтно-импульсный модулятор — простейший тип ЦАП. Стабильный источник тока или напряжения периодически включается на время, пропорциональное преобразуемому цифровому коду, далее полученная импульсная последовательность фильтруется аналоговым фильтром нижних частот. Такой способ часто используется для управления скоростью электромоторов, а также становится популярным в Hi-Fi-аудиотехнике;\nЦиклический ЦАП (cyclic DAC);\nКонвейерный ЦАП (pipeline DAC);>>>",
            "Архитектура ЦАП — это способ формирования выходного сигнала на функциональном уровне. Иначе говоря, это описание того, на сумму из каких чисел будет раскладываться значение выходного сигнала. Выходной сигнал формируется с помощью взвешивающих элементов, каждый из которых отвечает за свою \"порцию\" выходного аналогового сигнала. Различают следующие архитектуры по набору значений взвешивающих элементов:\n<<<Бинарная архитектура;>>>",
            "Соотношение двух соседних взвешивающих элементов равно 2. То есть выходной сигнал формируется так же, как это происходит в двоичной системе счисления. Соответственно, веса элементов, формирующих выходной сигнал, в нормированном виде, будут равны 1, 2, 4, 8, 16 и т. д. Управление взвешивающими элементами осуществляется бинарным кодом.\n<<<Унарная архитектура;>>>",
            "Соотношение двух соседних взвешивающих элементов равно 1. То есть выходной сигнал формируется так же, как это происходит в унарной системе счисления. Соответственно, веса всех элементов, в нормированном виде, равны 1. Управление осуществляется унарным или унитарным кодом.\n<<<Архитектура Фибоначчи;>>>",
            "Цифро-аналоговые преобразователи независимо от архитектуры могут использовать в качестве элемента, взвешивающего аналоговый сигнал, следующие типы компонентов: конденсаторы, резисторы и источники тока.\n<<<Конденсаторы. Данный тип взвешивающих элементов в случае применения в бинарной архитектуре может либо иметь номиналы, отличающиеся у соседних элементов в 2 раза, либо иметь номиналы 1 и 2 и формировать лестничную цепь C-2C.\nРезисторы. Данный тип взвешивающих элементов имеет те же принципы построения, что конденсаторы. Кроме того, существуют реализации подобных структур на основе не резисторов, а транзисторов, выступающих в роли резисторов. Такие цепи называются M-2M.\nИсточники тока. Это, как правило, транзистор в режиме насыщения. Использование данных типов взвешивающих элементов позволяет обойтись без буферов, которые необходимы для других типов взвешивающих элементов.>>>",
            "Для формирования веса взвешивающего элемента есть следующие способы:\n<<<Масштабирование номиналов. Применимо к любому типу взвешивающих элементов. С точки зрения полупроводниковой технологии это всегда эквивалентно масштабированию размеров элементов;\nИспользование лестничной структуры. Применимо только к ёмкостным и резистивным взвешивающим элементам. В зависимости от типа взвешивающего элемента такие структуры получают названия R-2R, C-2C или M-2M (вместо резисторов используются транзисторы);\nИзменение напряжения смещения. Применимо только к источникам тока. Изменение напряжения смещения может происходить как с помощью перестраиваемой цепи формирования напряжения смещения, так и с помощью инжекции заряда на плавающий затвор. Последнее применимо лишь для специальных технологий, предусматривающих формирование плавающего затвора у транзистора. Как правило, это технологии предназначенные для изготовления энергонезависимой памяти.>>>",
            "Бинарные[править | править код]<<<ЦАП взвешивающего типа, в котором каждому биту преобразуемого двоичного кода соответствует резистор или источник тока, подключённый на общую точку суммирования. Сила тока источника (проводимость резистора) пропорциональна весу бита, которому он соответствует. Таким образом, все ненулевые биты кода суммируются с весом. Взвешивающий метод один из самых быстрых, но ему свойственна низкая точность из-за необходимости наличия набора множества различных прецизионных источников или резисторов и непостоянного импеданса. По этой причине взвешивающие ЦАП имеют разрядность не более восьми бит;\nЦАП лестничного типа (цепная R-2R-схема). В R-2R-ЦАП значения создаются в специальной схеме, состоящей из резисторов с сопротивлениями R и 2R, называемой матрицей постоянного импеданса, которая имеет два вида включения: прямое — матрица токов и инверсное — матрица напряжений. Применение одинаковых резисторов позволяет существенно улучшить точность по сравнению с обычным взвешивающим ЦАП, так как сравнительно просто изготовить набор прецизионных элементов с одинаковыми параметрами. ЦАП типа R-2R позволяют отодвинуть ограничения по разрядности. С лазерной подгонкой плёночных резисторов, расположенных на одной подложке гибридной микросхемы, достигается точность 20—22 бита. Основное время на преобразование тратится в операционном усилителе, поэтому он должен иметь максимальное быстродействие. Быстродействие ЦАП единицы микросекунд и ниже (то есть наносекунды). В троичных ЦАП матрица постоянного импеданса состоит из резисторов 3R-4R с терминатором 2R[1].>>>",
            "Унарные[править | править код]<<<ЦАП на основе линейки сопротивлений.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Цифро-аналоговый_преобразователь"
    },
    {
        "task": [
            "Арифметико-логическое устройство в зависимости от выполнения функций можно разделить на две части:\n<<<микропрограммное устройство (устройство управления), задающее последовательность микрокоманд (команд);\nоперационное устройство, в котором реализуется заданная последовательность микрокоманд (команд).>>>",
            "Типовые функции регистров, входящих в арифметико-логическое устройство:\n<<<Рг1 — аккумулятор (или аккумуляторы) — главный регистр АЛУ, в котором образуется результат вычислений;\nРг2, Рг3 — регистры операндов (слагаемого, сомножителя, делителя, делимого и других) в зависимости от выполняемой операции;\nРг4 — регистр адреса (или адресные регистры), предназначенные для запоминания (бывает, что формирования) адреса операндов результата;\nРг6 — k индексных регистров, содержимое которых используется для формирования адресов;\nРг7 — l вспомогательных регистров, которые по желанию программиста могут быть аккумуляторами, индексными регистрами или использоваться для запоминания промежуточных результатов.>>>",
            "Функционально АЛУ состоит из двух регистров (Регистр1, Регистр 2), схемы управления и сумматора[1]. Арифметическая операция выполняется по тактам:\n<<<значения операнда 1, участвующего в арифметической операции по шине данных поступает в Регистр 1 или уже там находится;\nзначения операнда 2, участвующего в арифметической операции по шине данных поступает в Регистр 2 или уже там находится;\nпо шине инструкций поступает инструкция на выполнение операции в схему управления;\nданные из регистров поступают в сумматор, схема управления дает команду на выполнение сложения;\nрезультат сложения поступает в Регистр 1;\nпризнаки выполнения операции в АЛУ поступают в регистр флагов.>>>",
            "Пример работы АЛУ на операции вычитания:\n<<<значение операнда 1, участвующего в арифметической операции по кодовой шине данных поступает в Регистр 1;\nзначение операнда 2, участвующего в арифметической операции по кодовой шине данных поступает в Регистр 2;\nпо кодовой шине инструкций, поступает инструкция на выполнение операции вычитания в схему управления;\nсхема управления преобразовывает положительное число в отрицательное (в формате дополнительного кода до двух);\nрезультат преобразования операнда поступает в сумматор;\nсумматор складывает два числа;\nрезультат сложения поступает в Регистр 1;\nрезультат операции АЛУ поступает в результирующий блок.>>>",
            "Все выполняемые в арифметико-логическом устройстве операции являются логическими операциями (функциями), которые можно разделить на следующие группы:\n<<<операции двоичной арифметики для чисел с фиксированной точкой;\nоперации двоичной (или шестнадцатеричной) арифметики для чисел с плавающей точкой;\nоперации десятичной арифметики;\nоперации индексной арифметики (при модификации адресов команд);\nоперации специальной арифметики;\nоперации над логическими кодами (логические операции);\nоперации над алфавитно-цифровыми полями.>>>",
            "По способу представления чисел различают арифметико-логические устройства:\n<<<для чисел с фиксированной точкой;\nдля чисел с плавающей точкой;\nдля десятичных чисел.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Арифметико-логическое_устройство"
    },
    {
        "task": [
            "Статистические модели алгоритмов для текста (или текстовых бинарных данных, таких как исполняемые файлы) включают:\n<<<Преобразование Барроуза — Уилера (блочно-сортирующая пре-обработка, которая делает сжатие более эффективным)\nLZ77 и LZ78 (используется Deflate)\nLZW>>>",
            "Алгоритмы кодирования через генерирование битовых последовательностей:\n<<<Алгоритм Хаффмана (также используется Deflate)\nАрифметическое кодирование>>>",
            "Многоцелевые[править | править код]<<<Кодирование длин серий — простая схема, дающая хорошее сжатие данных, которые содержат много повторяющихся значений\nLZW — используется в gif и во многих других.\nDeflate — используется в gzip, усовершенствованной версии zip и как часть процесса сжатия PNG.\nLZMA — используется в 7-zip.>>>",
            "Сжатие аудио[править | править код]<<<Apple Lossless — ALAC (Apple Lossless Audio Codec)\nAudio Lossless Coding — также известен как MPEG-4 ALS\nDirect Stream Transfer — DST\nDolby TrueHD\nDTS-HD Master Audio\nFree Lossless Audio Codec — FLAC\nMeridian Lossless Packing — MLP\nMonkey's Audio — Monkey’s Audio APE\nOptimFROG\nRealPlayer — RealAudio Lossless\nShorten — SHN\nTAK — (T)om’s verlustfreier (A)udio (K)ompressor (нем.)\nTTA — True Audio Lossless\nWavPack — WavPack lossless\nWMA Lossless — Windows Media Lossless>>>",
            "Сжатие графики[править | править код]<<<ABO — Adaptive Binary Optimization\nAVIF — AV1 Image File Format (сжатие с/без потерь)\nBTPC\nCALIC\nCREW\nCTW\nDPCM\nGIF — (без потерь только для изображений, содержащих не более 256 цветов)\nJBIG2 — (с потерями или без ч/б изображений)\nLossless JPEG — (расширение стандарта сжатия JPEG, обеспечивающее сжатие без потерь)\nJPEG-LS — (стандарт сжатия без потерь/почти без потерь)\nJPEG 2000 — (в режиме сжатия без потерь)\nLOCO-I\nMRP\nPGF — Progressive Graphics File (сжатие с/без потерь)\nPNG — Portable Network Graphics\nPWC\nTIFF — (исключая режимы сжатия с потерями[1])\nTMW\nTruevision TGA\nHD Photo — (включая метод сжатия без потерь)\nFLIF — Free Lossless Image Format\nJXL[2] - JPEG XL (сжатие с/без потерь) кодек с самым высоким сжатием без потерь.>>>",
            "Сжатие видео[править | править код]<<<Animation codec\nCamStudio Video Codec\nCorePNG\nFFV1\nHuffyuv — ограничен YUY2 и RGB, не совместим с ffvhuff, оригинальный не обновлялся с 2002 года\nFFvhuff — улучшенный по сжатию huffyuv, поддерживает ещё YV12, обратно совместим с исходным кодеком\nLagarith\nLCL\nMSU Lossless Video Codec\nQbit Lossless Codec\nSheerVideo\nTSCC — TechSmith Screen Capture Codec\nСжатие с использованием вейвлет\nMotion JPEG 2000>>>",
            "Сжатие текстов[править | править код]<<<PPM — архиватор HA (автор Harry Hirvola), использующий алгоритм PPM, известен высокой степенью сжатия на текстовых файлах; по этому параметру он превосходил первые версии появившегося несколько лет спустя RAR. Поэтому популярные в конце 90-х годов компакт-диски наподобие «Библиотека в кармане» использовали именно HA.>>>",
            "Примеры алгоритмов<<<Семейство алгоритмов Лемпеля-Зива\nRLE (Run-length encoding — Кодирование длин серий)>>>",
            "Примеры форматов и их реализаций<<<универсальные — Zip, 7-Zip, RAR, GZip, PAQ и др.\nзвук — FLAC (Free Lossless Audio Codec), Monkey's Audio (APE), TTA (True Audio), TTE, LA (LosslessAudio), RealAudio Lossless, WavPack и др.\nизображения — PNG, AVIF и др.\nвидео — Huffyuv.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Сжатие_без_потерь"
    },
    {
        "task": [
            "Тем не менее, длительное время термин «модель данных» использовался без формального определения. Одним из первых специалистов, который достаточно формально определил это понятие, был Э. Кодд. В статье «Модели данных в управлении базами данных»[3] он определил модель данных как комбинацию трёх компонентов:\n<<<коллекции типов объектов данных, образующих базовые строительные блоки для любой базы данных, соответствующей модели;\nколлекции общих правил целостности, ограничивающих набор экземпляров тех типов объектов, которые законным образом могут появиться в любой такой базе данных;\nколлекции операций, применимых к таким экземплярам объектов для выборки и других целей[4].>>>",
            "Различают как минимум следующие модели данных:\n<<<Логические модели:\nИерархическая модель\nСетевая модель\nРеляционная модель\nМодель «сущность — связь» (ER)\nМодель «сущность — атрибут — значение»[англ.] (EAV)\nОбъектно-ориентированная модель (из ООП)\nДокументная модель\nЗвёздная модель и модель снежинки\nФизические модели:\nПлоская модель[англ.]\nТабличная модель\nИнвертированная модель\nПрочие модели:\nАссоциативная модель[англ.]\nКорреляционная модель[англ.]\nСемантическая модель[англ.]\nМодель XML[англ.]\nMultiValue[англ.]\nСемантическая паутина и именованные графы[англ.]\nСклад троек>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Модель_данных"
    },
    {
        "task": [
            "Список примеров в этой статье не основывается на авторитетных источниках, посвящённых непосредственно предмету статьи. Добавьте ссылки на источники, предметом рассмотрения которых является тема настоящей статьи (или раздела) в целом, а не отдельные элементы списка. В противном случае список примеров может быть удалён.<<<MCP, MCSE, MCSA, MCTS, MCITP и MCDBA — для работы в Windows-средах.\nLPI — для работы в Linux-средах.\nRHCE, RHCT — для работы в среде Red Hat Enterprise Linux.\nCCNA/CCDA, CCNP/CCSP/CCIP/CCVP и CCIE — для работы с оборудованием Cisco Systems (см.: Сертификации Cisco).\nOCP DBA — для работы с базами данных Oracle.\nSCSA — для работы в Solaris-средах.\nCCA, CCIA, CCEA — для работы с продуктами Citrix.\nVCP — для работы с продуктами VMware.\nMTCNA, MTCRE, MTCWE, MTCTCE, MTCUME, MTCINE — для работы с оборудованием и ПО латвийской компании MikroTik.>>>",
            "В круг типовых задач системного администратора обычно входит:\n<<<подготовка и сохранение резервных копий данных, их периодическая проверка и уничтожение;\nустановка и конфигурирование необходимых обновлений для операционной системы и используемых программ;\nустановка и конфигурирование нового аппаратного и программного обеспечения;\nсоздание и поддержание в актуальном состоянии пользовательских учётных записей;\nответственность за информационную безопасность в компании;\nустранение неполадок в системе;\nпланирование и проведение работ по расширению сетевой структуры предприятия;\nдокументирование всех произведенных действий.>>>",
            "Системных администраторов можно разделить на несколько категорий:\n<<<Администратор веб-сервера — занимается установкой, настройкой и обслуживанием программного обеспечения веб-серверов. Как правило, работает в хостинговой компании.\nНеобходимы знания Unix-систем (главным образом Linux и FreeBSD), умение конфигурировать веб-сервер Apache и почтовые сервера (qmail, Sendmail, Exim, Postfix), которые установлены на более чем 90 % web-серверов во всем мире; дополнительно веб-сервер IIS и ОС семейства Windows Server. Обязательно глубокое понимание модели OSI, стека протоколов TCP/IP.\nАдминистратор баз данных — специализируется на обслуживании баз данных.\nНужны глубокие знания СУБД (как минимум одной из MySQL, PostgreSQL, MS SQL, Oracle, Informix, Firebird, DB2), операционной системы, на которой работает база данных (Windows Server, *nix (главным образом Linux/FreeBSD) или Solaris), знание особенностей реализации баз данных, а также знание информационно-логического языка SQL.\nСетевой администратор — занимается разработкой и обслуживанием сетей.\nНеобходимы глубокие познания в области сетевых протоколов (стек TCP/IP, IPX) и их реализации, маршрутизации, реализации VPN, системах биллинга, активного сетевого оборудования, физическом построении сетей (Ethernet, Token ring, FDDI, 802.11).\nСистемный инженер (или системный архитектор) — занимается построением корпоративной информационной инфраструктуры на уровне приложений. Работает, как правило, в аутсорсинговой компании либо крупной компании, корпорации.\nНужны знания распространённых ОС (Windows NT, Linux, FreeBSD, Mac OS); службы каталогов Active Directory, Lotus Domino, LDAP; распространённые СУБД, почтовые, groupware, веб-серверы, CRM, ERP, CMS, системы документооборота — связью которых в контексте бизнес-процессов и занимается.\nАдминистратор защиты — занимается проблемами информационной безопасности, документированием политик безопасности, регламентов и положений об информационных ресурсах. Работает, как правило, в аутсорсинговой компании либо крупной компании, корпорации.\nТребуются знания о протоколах шифрования и аутентификации, их практическом применении (VPN, RADIUS, SSL, IPsec, RAS), планировании PKI, системах контроля доступа (брандмауэры, прокси-сервера, смарт-карты, CheckPoint, SecurID), инцидентном анализе, резервном копировании.\nСистемный администратор малой компании (от 5 до 30 рабочих мест) — занимается поддержанием работоспособности небольшого парка компьютерной техники и обслуживанием сети. Выполняет все обязанности, связанные с компьютерами и коммуникациями, в том числе техническую поддержку пользователей. В компаниях, занимающихся разработкой программного обеспечения, обслуживает Web-сервера, программы, используемые разработчиками. Также может тестировать разрабатываемое компанией программное обеспечение.\nТребуется знание ОС от Microsoft, офисных и бухгалтерских программ типа Microsoft Office и 1С, умение прокладывать локальную сеть, начальные знания баз данных и языков программирования.\nАдминистратор почтовых серверов — занимается настройкой и поддержкой электронной почты.\nТребуется знание Windows Server или же Linux/FreeBSD в зависимости от требования программы почтового сервера — Microsoft Exchange Server, qmail, Sendmail, Exim, Postfix, дополнительные модули для проверки на вирусы, спам, или для интеграции с базами данных LDAP, MySQL, PostgreSQL, Oracle, Active Directory\nТребуется знание протоколов и технологий SMTP, SSL, POP3, DNS, Microsoft Active Directory, стека протоколов TCP/IP и основных программ-клиентов электронной почты Microsoft Outlook, The Bat!, Mozilla Thunderbird, KMail, Evolution.>>>",
            "Памятник системному администратору у деревни Колюпаново Калужской области<<<В силу особенностей профессии, о «сисадминах» существует множество анекдотов и юмористических текстов, в которых обыгрываются сложные взаимоотношения системного администратора с пользователями сети, их режим работы. Очень часто о «сисадминах» упоминается на известном цитатнике Рунета bash.im и на созданном той же командой[2] проекте IT happens.\nВ Великобритании был снят комедийный сериал о технических специалистах ИТ-сферы — «Компьютерщики».\nМузыкальный сборник «Админские песни». В сборник вошли 20 песен о компьютерах, Интернете, о программистах и системных администраторах, об их пристрастии к пиву и непонимании со стороны рядовых пользователей[3].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Системный_администратор"
    },
    {
        "task": [
            "В зависимости от множества \n\n\n\n\nD\n\nf\n\n\n\n\n{\\displaystyle D_{f}}\n\n признаки делятся на следующие типы:\n<<<бинарный признак: \n\n\n\n\nD\n\nf\n\n\n=\n{\n0\n,\n1\n}\n\n\n{\\displaystyle D_{f}=\\{0,1\\}}\n\n;\nноминальный признак: \n\n\n\n\nD\n\nf\n\n\n\n\n{\\displaystyle D_{f}}\n\n — конечное множество;\nпорядковый признак: \n\n\n\n\nD\n\nf\n\n\n\n\n{\\displaystyle D_{f}}\n\n — конечное упорядоченное множество;\nколичественный признак: \n\n\n\n\nD\n\nf\n\n\n\n\n{\\displaystyle D_{f}}\n\n — множество действительных чисел.>>>",
            "Типы входных данных[править | править код]<<<Признаковое описание — наиболее распространённый случай. Каждый объект описывается набором своих характеристик, называемых признаками. Признаки могут быть числовыми или нечисловыми.\nМатрица расстояний между объектами. Каждый объект описывается расстояниями до всех остальных объектов обучающей выборки. С этим типом входных данных работают немногие методы, в частности, метод ближайших соседей, метод парзеновского окна, метод потенциальных функций.\nВременной ряд или сигнал представляет собой последовательность измерений во времени. Каждое измерение может представляться числом, вектором, а в общем случае — признаковым описанием исследуемого объекта в данный момент времени.\nИзображение или видеоряд.\nВстречаются и более сложные случаи, когда входные данные представляются в виде графов, текстов, результатов запросов к базе данных, и т. д. Как правило, они приводятся к первому или второму случаю путём предварительной обработки данных и извлечения признаков.>>>",
            "Типы классов[править | править код]<<<Двухклассовая классификация. Наиболее простой в техническом отношении случай, который служит основой для решения более сложных задач.\nМногоклассовая классификация. Когда число классов достигает многих тысяч (например, при распознавании иероглифов или слитной речи), задача классификации становится существенно более трудной.\nНепересекающиеся классы.\nПересекающиеся классы. Объект может относиться одновременно к нескольким классам.\nНечёткие классы. Требуется определять степень принадлежности объекта каждому из классов, обычно это действительное число от 0 до 1.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Задача_классификации"
    },
    {
        "task": [
            "Тем не менее, криптоанализ пока ещё рано списывать со счетов. Во-первых, неизвестно, насколько эффективны применяемые спецслужбами методы криптоанализа, а во-вторых, за годы становления и совершенствования современной компьютерной криптографии было высказано множество претензий как к теоретическим, так и к практическим криптографическим примитивам:[источник не указан 4382 дня]\n<<<в 1998 г. было обнаружена уязвимость для атак на основе шифротекста у блочного шифра MADRYGA, предложенного ещё в 1984 г., но не получившего широкого распространения;\nцелая серия атак со стороны научного сообщества, многие из которых были целиком практическими, буквально уничтожила блочный шифр FEAL, предложенный как замена DES в качестве стандартного алгоритма шифрования, но также не получивший широкого распространения;\nтакже было установлено, что при помощи широко доступных вычислительных средств поточные шифры A5/1, A5/2, блочный шифр CMEA, и стандарт шифрования DECT, используемые для защиты мобильной и беспроводной телефонной связи, могут быть взломаны за считанные часы или минуты, а порою и в режиме реального времени;\nатака методом грубой силы помогла взломать некоторые из прикладных систем защиты, например, CSS— систему защиты цифрового медиаконтента на DVD-носителях.>>>",
            "Основные методы криптоанализа\n<<<Атака на основе шифротекста.\nАтака на основе открытых текстов и соответствующих шифротекстов.\nАтака на основе подобранного открытого текста (возможность выбора текста для шифрования).\nАтака на основе адаптивно подобранного открытого текста.>>>",
            "Дополнительные методы криптоанализа\n<<<Атака на основе подобранного шифротекста.\nАтака на основе подобранного ключа.\n«Бандитский» криптоанализ.>>>",
            "Тогда существуют два варианта постановки задачи:\n<<<Найти ключ, использованный для преобразования открытого текста в шифротекст.\nСоздать алгоритм, способный дешифровать любое сообщение, закодированное с помощью этого ключа.>>>",
            "В случае взлома переписки можно сделать предположение, что письмо имеет структуру типа:\n<<<«приветствие»;\n«основной текст»;\n«заключительная форма вежливости»;\n«подпись».>>>",
            "Получить входные данные для такого вида атаки можно, например, следующим образом:\n<<<Создать и отправить поддельное не зашифрованное сообщение якобы от одного из пользователей, которые обычно пользуются шифрованием.\nВ некоторых случаях можно получить ответ, в котором будет содержится зашифрованный текст, цитирующий содержание поддельного сообщения.>>>",
            "Различные виды атак<<<Атака «человек посередине»\nАтака по сторонним каналам\nАтака «дней рождения»\nАтака «грубой силой»\nАтака на основе связанных ключей\nИнтерполяционная атака>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Криптоанализ"
    },
    {
        "task": [
            "Основные модели программирования<<<Императивное программирование\nДекларативное программирование\nСтруктурное программирование\nФункциональное программирование\nЛогическое программирование\nОбъектно-ориентированное программирование\nКомпонентно-ориентированное программирование\nПрототипно-ориентированное программирование\nАгентно-ориентированное программирование>>>",
            "Подходы и приёмы<<<Структурное программирование\nПроцедурное программирование\nАппликативное программирование\nОбобщённое программирование\nДоказательное программирование\nПорождающее программирование\nАспектно-ориентированное программирование\nАгентно-ориентированное программирование\nКонтрактное программирование\nРекурсия\nАвтоматное программирование\nСобытийно-ориентированное программирование\nКомпонентно-ориентированное программирование\nГрамотное программирование>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Парадигма_программирования"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Мобильная_операционная_система"
    },
    {
        "task": [
            "Свойства аналоговых сигналов в значительной степени противоположны свойствам квантованных:\n<<<Аналоговый сигнал нельзя дискретизировать без потери части его данных (из-за своей непрерывности). Например, этот процесс физически ограничен возможностями измерительного устройства.\nВнесённые помехи малоустранимы. Несмотря на это, можно воспользоваться фильтром частот, если известна дополнительная информация о свойствах данного сигнала, в частности, о его полосе пропускания.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Аналоговый_сигнал"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Сетевой_трафик"
    },
    {
        "task": [
            "Потоки выполнения отличаются от традиционных процессов многозадачной операционной системы тем, что:\n<<<процессы, как правило, независимы, тогда как потоки выполнения существуют как составные элементы процессов\nпроцессы несут значительно больше информации о состоянии, тогда как несколько потоков выполнения внутри процесса совместно используют информацию о состоянии, а также память и другие вычислительные ресурсы\nпроцессы имеют отдельные адресные пространства, тогда как потоки выполнения совместно используют их адресное пространство\nпроцессы взаимодействуют только через предоставляемые системой механизмы связей между процессами\nпереключение контекста между потоками выполнения в одном процессе, как правило, быстрее, чем переключение контекста между процессами.>>>",
            "Операционные системы планируют выполнение потоков одним из двух способов:\n<<<Приоритетная многопоточность, вообще говоря, считается более совершенным подходом, так как она позволяет операционной системе определить, когда должно происходить переключение контекста. Недостаток приоритетной многопоточности состоит в том, что система может сделать переключение контекста в неподходящее время, что приводит к инверсии приоритета и другим негативным эффектам, которых можно избежать, применяя кооперативную многопоточность.\nКооперативная многопоточность полагается на сами потоки и отказывается от управления, если потоки выполнения находятся в точках остановки. Это может создать проблемы, если поток выполнения ожидает ресурс, пока он не станет доступным.>>>",
            "Примеры реализаций потоков на уровне ядра[править | править код]<<<Light Weight Kernel Threads (LWKT) в различных версиях BSD\nПотоковость MxN\nБиблиотека потоков POSIX (NPTL) для Linux, реализация стандарта POSIX Threads\nApple Multiprocessing Services, версия 2.0 и последующие, использует встроенное микроядро в Mac OS 8.6, в более поздних версиях сделана модификация с целью последующего сопровождения.\nWindows начиная с Windows 95, Windows NT и после них.>>>",
            "Примеры реализаций потоков на уровне пользователя[править | править код]<<<GNU Portable Threads\nFSU Pthreads\nThread Manager компании Apple\nREALbasic (включая API для совместного использования потоков)\nNetscape Portable Runtime (включая реализацию файберов в пользовательском пространстве)>>>",
            "Примеры реализаций смешанных потоков[править | править код]<<<«Scheduler activations» используется в собственной библиотеке приложений потоков POSIX для NetBSD (модель M:N в противоположность модели 1:1 ядра или модели приложений пользовательского пространства)\nMarcel из проекта PM2\nОС для суперкомпьютера Tera/Cray MTA\nWindows 7>>>",
            "Файберы могут быть реализованы без поддержки операционной системы, хотя некоторые операционные системы и библиотеки предоставляют явную поддержку для них.\n<<<Библиотека Win32 содержит API для файберов[4] (Windows NT 3.51 SP3 и выше)\nRuby как реализация «зелёных потоков»>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Поток_выполнения"
    },
    {
        "task": [
            "Гиперссылка — фрагмент HTML-документа и его базовый элемент:\n<<<указывающий на другой файл, который может быть расположен в Интернете;\nсодержащий полный путь (URL) к этому файлу.>>>",
            "Например, гипертекстовая ссылка:[2]\n<<<<a href=\"my-photo.html\">Мои работы</a> — ссылается на документ my-photo.html в текущем каталоге, образуя гипертекстовую ссылку в виде выделенного текста «Мои работы»;\n<a href=\"/photo/my-photo.html\">Мой фотоальбом</a> — ссылается на файл my-photo.html, расположенный в подкаталоге photo корневого каталога и образует ссылку в виде текста «Мой фотоальбом»;\n<a href=\"layout/comments.html\">Комментарии</a> — ссылается на файл comments.html, расположенный относительно текущего в подкаталоге layout;\n<a href=\"./\">Фото</a> — ссылается на индексный файл в текущем каталоге;\n<a href=\"../profile.html\">Профиль</a> — ссылается на файл profile.html в родительском каталоге;\n<a href=\"http://www.site.com\">Мой сайт</a> — ссылается на ресурс, расположенный на удаленном сервере.\n<a href=\"//www.site.com/index.html\">Мой сайт</a> — ссылается на ресурс, расположенный на удаленном сервере, без уточнения протокола http/https.\n<a href=\"my-photo.html\" target=\"_blank\">Открыть в новом окне</a>>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Гиперссылка"
    },
    {
        "task": [
            "Алгоритм<<<Присвоить \n\n\n\nH\n:=\n\n⌊\n\n\np\n\n\n⌋\n\n+\n1\n\n\n{\\displaystyle H:=\\left\\lfloor {\\sqrt {p}}\\right\\rfloor +1}\n\n\nВычислить \n\n\n\nc\n=\n\na\n\nH\n\n\n\nmod\n\np\n\n\n\n\n{\\displaystyle c=a^{H}{\\bmod {p}}}\n\n\nСоставить таблицу значений \n\n\n\n\nc\n\nu\n\n\n\nmod\n\np\n\n\n\n\n{\\displaystyle c^{u}{\\bmod {p}}}\n\n для \n\n\n\n1\n≤\nu\n≤\nH\n\n\n{\\displaystyle 1\\leq u\\leq H}\n\n и отсортировать её.\nСоставить таблицу значений \n\n\n\nb\n⋅\n\na\n\nv\n\n\n\nmod\n\np\n\n\n\n\n{\\displaystyle b\\cdot a^{v}{\\bmod {p}}}\n\n для \n\n\n\n0\n≤\nv\n≤\nH\n\n\n{\\displaystyle 0\\leq v\\leq H}\n\n и отсортировать её.\nНайти общие элементы в таблицах. Для них \n\n\n\n\nc\n\nu\n\n\n≡\nb\n⋅\n\na\n\nv\n\n\n\n\n(\nmod\n\np\n)\n\n,\n\n\n{\\displaystyle c^{u}\\equiv b\\cdot a^{v}{\\pmod {p}},}\n\n откуда \n\n\n\n\na\n\nH\nu\n−\nv\n\n\n≡\nb\n\n\n(\nmod\n\np\n)\n\n.\n\n\n{\\displaystyle a^{Hu-v}\\equiv b{\\pmod {p}}.}\n\n\nВыдать \n\n\n\nH\nu\n−\nv\n\n\n{\\displaystyle Hu-v}\n\n.>>>",
            "Алгоритмы с экспоненциальной сложностью[править | править код]<<<Алгоритм Шенкса (алгоритм больших и малых шагов, baby-step giant-step)\nАлгоритм Полига — Хеллмана работает, если известно разложение числа \n\n\n\np\n−\n1\n=\n\n∏\n\ni\n=\n1\n\n\ns\n\n\n\nq\n\ni\n\n\n\nα\n\ni\n\n\n\n\n\n\n{\\displaystyle p-1=\\prod \\limits _{i=1}^{s}q_{i}^{\\alpha _{i}}}\n\n на простые множители. Сложность: \n\n\n\nO\n(\n\n∑\n\ni\n=\n1\n\n\ns\n\n\n\nα\n\ni\n\n\n(\nlog\n⁡\n\np\n\n+\n\nq\n\ni\n\n\n)\n)\n\n\n{\\displaystyle O(\\sum \\limits _{i=1}^{s}\\alpha _{i}(\\log {p}+q_{i}))}\n\n. Если множители, на которые раскладывается \n\n\n\np\n−\n1\n\n\n{\\displaystyle p-1}\n\n, достаточно маленькие, то алгоритм очень эффективен[2].\nρ-Метод Полларда имеет эвристическую оценку сложности \n\n\n\nO\n(\n\np\n\n\n1\n2\n\n\n\n)\n\n\n{\\displaystyle O(p^{\\frac {1}{2}})}\n\n[3].>>>",
            "В L-нотации вычислительная сложность данных алгоритмов оценивается как \n\n\n\n\nL\n\np\n\n\n[\nd\n,\nc\n]\n\n\n{\\displaystyle L_{p}[d,c]}\n\n арифметических операций, где \n\n\n\nc\n\n\n{\\displaystyle c}\n\n и \n\n\n\n0\n≤\nd\n<\n1\n\n\n{\\displaystyle 0\\leq d<1}\n\n — некоторые константы. Эффективность алгоритма во многом зависит от близости величин \n\n\n\nc\n\n\n{\\displaystyle c}\n\n и \n\n\n\nd\n\n\n{\\displaystyle d}\n\n к 1 и 0, соответственно.\n<<<Алгоритм Адлемана появился в 1979 году[4]. Это был первый субэкспоненциалный алгоритм дискретного логарифмирования. На практике он всё же недостаточно эффективен. В этом алгоритме \n\n\n\nd\n=\n\n\n1\n2\n\n\n\n\n{\\displaystyle d={\\frac {1}{2}}}\n\n.\nАлгоритм COS был предложен в 1986 году математиками Копперсмитом (Don Coppersmith), Одлыжко (Andrew Odlyzko) и Шреппелем (Richard Schroeppel)[5]. В этом алгоритме константа \n\n\n\nc\n=\n1\n\n\n{\\displaystyle c=1}\n\n, \n\n\n\nd\n=\n\n\n1\n2\n\n\n\n\n{\\displaystyle d={\\frac {1}{2}}}\n\n. В 1991 году с помощью этого метода было проведено логарифмирование по модулю \n\n\n\np\n≈\n\n10\n\n58\n\n\n\n\n{\\displaystyle p\\approx 10^{58}}\n\n. В 1997 году Вебер провёл дискретное логарифмирование по модулю \n\n\n\np\n≈\n\n10\n\n85\n\n\n\n\n{\\displaystyle p\\approx 10^{85}}\n\n с помощью некоторой версии данного алгоритма. Экспериментально показано, что при \n\n\n\np\n≤\n\n10\n\n90\n\n\n\n\n{\\displaystyle p\\leq 10^{90}}\n\n алгоритм COS лучше решета числового поля.\nДискретное логарифмирование при помощи решета числового поля было применено к дискретному логарифмированию позднее, чем к факторизации чисел. Первые идеи появились в 1990-х годах. Алгоритм, предложенный Д. Гордоном в 1993 году, имел эвристическую сложность \n\n\n\n\nL\n\np\n\n\n\n[\n\n\n\n\n1\n3\n\n\n\n,\n\n3\n\n3\n\n/\n\n2\n\n\n\n]\n\n\n\n{\\displaystyle L_{p}\\left[{\\tfrac {1}{3}},3^{3/2}\\right]}\n\n[6], но оказался достаточно непрактичным. Позднее было предложено множество различных улучшений данного алгоритма. Было показано, что при \n\n\n\np\n≥\n\n10\n\n100\n\n\n\n\n{\\displaystyle p\\geq 10^{100}}\n\n решето числового поля быстрее, чем COS. Современные рекорды в дискретном логарифмировании получены именно с помощью этого метода.>>>",
            "Задача рассматривается в поле GF(q), где \n\n\n\nq\n=\n\np\n\nn\n\n\n\n\n{\\displaystyle q=p^{n}}\n\n, \n\n\n\np\n\n\n{\\displaystyle p}\n\n — простое.\n<<<Алгоритм исчисления индексов (index-calculus) эффективен, если \n\n\n\np\n\n\n{\\displaystyle p}\n\n невелико. В этом случае он имеет эвристическую оценку сложности \n\n\n\n\nL\n\np\n\n\n\n[\n\n\n\n\n1\n2\n\n\n\n,\nc\n\n]\n\n\n\n{\\displaystyle L_{p}\\left[{\\tfrac {1}{2}},c\\right]}\n\n.\nАлгоритм Эль-Гамаля, появившийся в 1985 году, применим при \n\n\n\nn\n=\n2\n\n\n{\\displaystyle n=2}\n\n и имеет сложность \n\n\n\n\nL\n\np\n\n\n\n[\n\n\n\n\n1\n2\n\n\n\n,\nc\n\n]\n\n\n\n{\\displaystyle L_{p}\\left[{\\tfrac {1}{2}},c\\right]}\n\n арифметических операций.\nАлгоритм Копперсмита дискретного логарифмирования в конечном поле характеристики 2 стал первым субэкспоненциальным алгоритмом дискретного логарифмирования с константой \n\n\n\nd\n=\n\n\n1\n3\n\n\n\n\n{\\displaystyle d={\\frac {1}{3}}}\n\n в оценке сложности \n\n\n\n\nL\n\np\n\n\n[\nd\n,\nc\n]\n\n\n{\\displaystyle L_{p}[d,c]}\n\n. Данный алгоритм появился в 1984 году — до изобретения решета числового поля[8].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Дискретное_логарифмирование"
    },
    {
        "task": [
            "Похожие модели (которые также рассматривают биологический мозг как массово-параллельную вычислительную машину, т.е. рассматривают мозг как состоящий из множества независимых либо наполовину независимых агентов) также описывали:\n<<<Томас Р. Блейксли (англ.  Thomas R. Blakeslee),[11]\nМайкл С. Газзанига,[12][13]\nРоберт Э. Орнштейн (англ. Robert E. Ornstein),[14]\nЭрнест Хильгард (англ. Ernest Hilgard),[15][16]\nМитио Каку,[17]\nГеоргий Иванович Гурджиев,[18]\nНейрокластерная Модель Мозга.[19]>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Параллельные_вычислительные_системы"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Виртуальная_память"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Кодек"
    },
    {
        "task": [
            "В абсолютном большинстве конструкций излучателем служит лазер, формирующий короткие импульсы света высокой мгновенной мощности. Периодичность следования импульсов или модулирующая частота выбираются так, чтобы пауза между двумя последовательными импульсами была не меньше, чем время отклика от обнаружимых целей (которые могут физически находиться дальше, чем расчётный радиус действия прибора). Выбор длины волны зависит от функции лазера и требований к безопасности и скрытности прибора; наиболее часто применяются Nd:YAG-лазеры и длины волн (в нанометрах):\n<<<1550 нм — инфракрасное излучение, невидимое ни глазу человека, ни типичным приборам ночного видения. Глаз не способен сфокусировать эти волны на поверхности сетчатки, поэтому травматический порог для волны 1550 существенно выше, чем для более коротких волн. Однако риск повреждения глаз на деле выше, чем у излучателей видимого света — так как глаз не реагирует на ИК излучение, то не срабатывает и естественный защитный рефлекс человека\n1064 нм — ближнее инфракрасное излучение неодимовых и иттербиевых лазеров, невидимое глазу, но обнаружимое приборами ночного видения\n532 нм — зелёное излучение неодимового лазера, эффективно «пробивающее» массы воды\n355 нм — ближнее ультрафиолетовое излучение>>>",
            "Основной источник: lidar - Definition of lidar  (неопр.). Дата обращения: 2 мая 2013. Архивировано 11 мая 2013 года.<<<Laser Induced Differential Absorption Radar (ACAE)\nLaser Induced Direction and Range System (BAJR)\nLASER Infrared RADAR (IEEE)\nLASER Intensity Direction and Ranging (IEEE)\nLight Detection and Range (SAUO)\nLight Detection and Ranging\nLight Detection and Ranging Instrument (SAUO)\nLight Intensity Detection and Ranging (NOAA)>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Лидар"
    },
    {
        "task": [
            "Список служб находится в ветке Реестра Windows «HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services». Значения параметра «Start» имеют тип «REG_DWORD» и могут принимать значения:\n<<<0 — Низкоуровневые драйверы, например, драйверы дисков, которые загружаются на самом раннем этапе загрузки — загрузки ядра;\n1 — Драйверы, которые загружаются после инициализации ядра ОС;\n2 — Службы, которые должны быть загружены диспетчером управления службами (равен параметру — «Авто»);\n3 — Службы, запускаемые диспетчером управления службами только в случае получения явной инструкции на загрузку (равен параметру — «Вручную»);\n4 — Службы, которые не загружаются (равен параметру — «Отключено»).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Служба_Windows"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Периферийное_устройство"
    },
    {
        "task": [
            "Глубокое обучение характеризуется как класс алгоритмов машинного обучения, который[39]:\n<<<использует многослойную систему нелинейных фильтров для извлечения признаков с преобразованиями. Каждый последующий слой получает на входе выходные данные предыдущего слоя. Система глубокого обучения может сочетать алгоритмы обучения с учителем и без учителя, при этом анализ образца представляет собой обучение без учителя, а классификация — обучение с учителем.\nобладает несколькими слоями выявления признаков или параметров представления данных (обучение без учителя). При этом признаки организованы иерархически, признаки более высокого уровня являются производными от признаков более низкого уровня.\nявляется частью более широкой области машинного обучения изучения представлений данных.\nформирует в процессе обучения слои на нескольких уровнях представлений, которые соответствуют различным уровням абстракции; слои образуют иерархию понятий.>>>",
            "Все определения констатируют\n<<<наличие нескольких слоев нелинейной обработки\nобучение с учителем или без учителя признаков каждого слоя, формируя иерархию от низкого до высокого уровня[39].>>>",
            "В первую очередь к глубинному обучению относятся следующие методы и их вариации:\n<<<Определённые системы обучения без учителя, такие как ограниченная машина Больцмана для предварительного обучения, автокодировщик, глубокая сеть доверия, генеративно-состязательная сеть,\nОпределённые системы обучения с учителем, такие как свёрточная нейронная сеть, которая вывела на новый уровень технологии распознавания образов,\nРекуррентные нейронные сети, позволяющие обучаться на процессах во времени,\nРекурсивные нейронные сети, позволяющие включать обратную связь между элементами схемы и цепочками.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Глубокое_обучение"
    },
    {
        "task": [
            "На современном этапе (по состоянию на 2017 год) к классу нейронных процессоров могут относиться разные по устройству и специализации типы чипов, например:\n<<<Нейроморфные процессоры — построенные по кластерной асинхронной архитектуре, разработанной в Корнеллском университете (принципиально отличающейся от фон Неймановской и Гарвардской компьютерных архитектур, используемых последние 70 лет в IT-отрасли). В отличие от традиционных вычислительных архитектур, логика нейроморфных процессоров изначально узкоспециализирована для создания и разработки разных видов искусственных нейронных сетей. В устройстве используются обычные транзисторы, из которых строятся вычислительные ядра (каждое ядро, как правило, содержит планировщик заданий, собственную память типа SRAM и маршрутизатор для связи с другими ядрами), каждое из ядер эмулирует работу нескольких сотен нейронов и, таким образом, одна интегральная схема, содержащая несколько тысяч таких ядер, алгоритмически может воссоздать массив из нескольких сотен тысяч нейронов и на порядок больше синапсов. Как правило, такие процессоры применяются для алгоритмов глубокого машинного обучения[3].\nТензорные процессоры — устройства, как правило, являющиеся сопроцессорами, управляемыми центральным процессором. Тензорные процессоры оперируют тензорами - объектами при помощи которых удобно выполнять преобразование элементов одного векторного пространства в другое, и которые могут быть представлены как многомерные массивы чисел[4], обработка которых осуществляется с помощью таких программных библиотек, как, например TensorFlow и Caffe 2. В угоду производительности они, обычно, выполняют операции над числами малой разрядности (8 или 16 бит) и специализированы для быстрого выполнения таких операций, как матричное умножение и свёртка, используемых для эмуляции свёрточных нейронных сетей, которые используются для задач машинного обучения[5].\nПроцессоры машинного зрения — во многом похожи на тензорные процессоры, но они узкоспециализированы для ускорения работы алгоритмов машинного зрения, в которых используются методы свёрточных нейронных сетей (CNN) и масштабно-инвариантная трансформация признаков (SIFT). В них делается большой акцент на распараллеливание потока данных между множеством исполнительных ядер, включая использование модели блокнотной памяти[англ.] — как в многоядерных цифровых сигнальных процессорах, и они так же, как тензорные процессоры, используются для вычислений c низкой точностью, принятой при обработке изображений[6].>>>",
            "Nvidia Drive PX-series[англ.].<<<Беспилотный автомобиль — например, в этом направлении развивает свои платы Drive PX-series[англ.] компания Nvidia[7][8].\nБеспилотный летательный аппарат — например, навигационная система основанная на чипах Movidius Myriad 2[англ.] успешно управляет автономными беспилотными летательными аппаратами[9].\nДиагностика в здравоохранении.\nМашинный перевод.\nОбработка естественного языка.\nПоисковая система — NPU повышают энергоэффективность центров обработки данных, и дают возможность использовать все более сложные запросы.\nПромышленный робот — NPU позволяют расширить спектр задач, которые возможно автоматизировать, путём добавления приспособляемости к меняющимся ситуациям.\nРаспознавание по голосу — например, в мобильных телефонах использование технологии Qualcomm Zeroth[англ.][10]\nСельскохозяйственный робот — например, борьба с сорняками без применения химических средств[11].>>>",
            "16-ядерный чип Adapteva Epiphany (E16G301) на одноплатном компьютере для параллельных вычислений.<<<Процессоры машинного зрения:\nIntel Movidius Myriad 2[англ.], который является многоядерным ИИ-ускорителем, основанным на VLIW-архитектуре, с дополненными узлами, предназначенными для обработки видео[6].\nMobileye EyeQ[англ.] — это специализированный процессор, ускоряющий обработку алгоритмов машинного зрения для использования в беспилотном автомобиле[12].\nТензорные процессоры:\nGoogle TPU (англ. Tensor Processing Unit) — представлен как ускоритель для системы Google TensorFlow, которая широко применяется для свёрточных нейронных сетей. Сфокусирован на большом объёме арифметики 8-битной точности[5].\nHuawei Ascend 310 / Ascend 910 — первые два чипа оптимизированные под решения задач искусственного интеллекта из линейки Ascend компании Huawei[13].\nIntel Nervana NNP[англ.] (англ. Neural Network Processor) — это первый коммерчески доступный тензорный процессор, предназначенный для постройки сетей глубокого обучения[14], компания Facebook была партнёром в процессе его проектирования[15][16].\nQualcomm Cloud AI 100 — ускоритель искусственного интеллекта, предназначенный для использования в составе облачных платформ, поддерживающий программные библиотеки PyTorch, Glow, TensorFlow, Keras и ONNX[17].\nНейроморфные процессоры:\nIBM TrueNorth — нейроморфный процессор, построенный по принципу взаимодействия нейронов, а не традиционной арифметики. Частота импульсов представляет интенсивность сигнала. По состоянию на 2016 год среди исследователей ИИ нет консенсуса, является ли это правильным путём для продвижения[18], но некоторые результаты являются многообещающими, с продемонстрированной большой экономией энергии для задач машинного зрения[19].\nAdapteva Epiphany[англ.] — предназначен как сопроцессор, включает модель блокнотной памяти[англ.] сети на кристалле[англ.], подходит к модели программирования потоком информации, которая должна подходить для многих задач машинного обучения.\nComBox x64 Movidius PCIe Blade board - плата расширения PCI Express с максимальной плотностью VPU Intel Movidius (MyriadX) для инференса сверхточных нейронных сетей в ЦОД\nCambricon[англ.] MLU100 — карта расширения PCI Express с ИИ-процессором мощностью 64 TFLOPS с половинной точностью или 128 TOPS для вычислений INT8[20].\nCerebras Wafer Scale Engine (WSE, CS-1) — экспериментальный суперпроцессор компании Cerebras, содержит 1,2 трлн транзисторов, организованных в 400 000 ИИ-оптимизированных вычислительных ядер и 18 Гбайт локальной распределённой памяти SRAM, и всё это связано ячеистой сетью с общей производительностью 100 петабит в секунду. Чип Cerebras ― это фактически суперкомпьютер на чипе, где вычислительные ядра SLAC (Sparse Linear Algebra Cores) ― полностью программируемые и могут быть оптимизированы для работы с любыми нейронными сетями[21].\nKnuPath[англ.] — процессор компании KnuEdge[англ.], предназначен для работы в системах распознавания речи и прочих отраслях машинного обучения, он использует соединительную технологию LambdaFabric и позволяет объединять в единую систему до 512 тысяч процессоров[22].>>>",
            "Nvidia Tesla C870.<<<Nvidia Tesla — серия специализированных GPGPU-продуктов компании Nvidia[23]:\nNvidia Volta[англ.] — графические процессоры (GPU) архитектуры Volta (2017 год) компании Nvidia (такие как Volta GV100), содержат до 640 специальных ядер для тензорных вычислений[1].\nNvidia Turing[англ.] — графические процессоры архитектуры Turing (2018 год) компании Nvidia (такие как Nvidia TU104), содержат до 576 специальных ядер для тензорных вычислений[24].\nNvidia DGX-1 — специализированный сервер, состоящий из 2 центральных процессоров и 8 GPU Nvidia Volta GV100[англ.] (5120 тензорных ядер), связанных через быструю шину NVLink[25]. Специализированная архитектура памяти[англ.] у этой системы является особенно подходящей для построения сетей глубокого обучения[26][27].\nAMD Radeon Instinct[англ.] — специализированная GPGPU-плата компании AMD, предлагаемая как ускоритель для задач глубокого обучения[28][29].>>>",
            "6-ядерный SoC Apple A11 Bionic с Neural Engine<<<Cambricon-1A — NPU-блок в ARM-чипах Huawei Kirin 970, разработанный компанией Cambricon Technologies[англ.][30].\nCEVA[англ.] NeuPro — семейство лицензируемых ИИ-процессоров для глубокого обучения компании CEVA, Inc.[англ.][31].\nNeural Engine — ИИ-ускоритель внутри ARM-чипов Apple A11 Bionic и A12 Bionic SoC[32].\nPowerVR 2NX NNA (Neural Network Accelerator) — семейство лицензируемых IP-модулей для машинного обучения компании Imagination Technologies[33].>>>",
            "Научные исследования и разрабатываемые продукты[править | править код]<<<Индийский технологический институт в Мадрасе разрабатывает ускоритель на импульсных нейронах для новых систем архитектуры RISC-V, направленных на обработку больших данных на серверных системах[34].\nEyeriss[англ.] — разработка, направлена на свёрточные нейронные сети с применением блокнотной памяти и сетевой архитектуры в пределах кристалла.\nFujitsu DLU[англ.] — многоблочный и многоядерный сопроцессор компании Fujitsu использующий вычисления с низкой точностью и предназначенный для глубокого машинного обучения[35].\nIntel Loihi[англ.] — нейроморфный процессор компании Intel, который сочетает процессы обучения, тренировки и принятия решений в одном чипе, позволяя системе быть автономной и «сообразительной» без подключения к облаку. Например, при обучении с помощью базы данных MNIST (Mixed National Institute of Standards and Technology) процессор Loihi оказывается в 1 млн раз лучше, чем другие типичные спайковые нейронные сети[36].\nKalray[англ.] — показала MPPA[англ.][37] и сообщила о повышении эффективности свёрточных нейронных сетей в сравнении с GPU.\nSpiNNaker — массово-параллельная компьютерная архитектура, которая сочетает ядра традиционной ARM-архитектуры с усовершенствованной сетевой структурой, специализированной для моделирования крупной нейронной сети.\nZeroth NPU[англ.] — разработка компании Qualcomm, направленная непосредственно на привнесение возможностей распознавания речи и изображений в мобильные устройства[38].\nTPU H — тензорный процессор, над созданием которого работает[39][40] российская компания «ХайТэк». В октябре 2020 года были опубликованы результаты[41][42] тестирования архитектуры ускорителя расчета нейронных сетей TPU H, проведенного международным консорциумом MLPerf (учрежден в 2018 году Baidu, Google, Harvard University, Stanford University, University of California, Berkeley).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Нейронный_процессор"
    },
    {
        "task": [
            "Функции канального уровня<<<Получение доступа к среде передачи. Обеспечение доступа — важнейшая функция канального уровня. Она требуется всегда, за исключением случаев, когда реализована полносвязная топология (например, два компьютера, соединенных через кроссовер, или компьютер с коммутатором в полнодуплексном режиме).\nВыделение границ кадра. Эта задача также решается всегда. Среди возможных решений этой задачи — резервирование некоторой последовательности, обозначающей начало или конец кадра.\nАппаратная адресация (или адресация канального уровня). Требуется в том случае, когда кадр могут получить сразу несколько адресатов. В локальных сетях аппаратные адреса (MAC-адреса) применяются всегда.\nОбеспечение достоверности принимаемых данных. Во время передачи кадра есть вероятность, что данные исказятся. Важно это обнаружить и не пытаться обработать кадр, содержащий ошибку. Обычно на канальном уровне используются алгоритмы контрольных сумм, дающие высокую гарантию обнаружения ошибок.\nАдресация протокола верхнего уровня. В процессе декапсуляции указание формата вложенного PDU существенно упрощает обработку информации, поэтому чаще всего указывается протокол, находящийся в поле данных, за исключением тех случаев, когда в поле данных может находиться один-единственный протокол.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Канальный_уровень"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Отладчик"
    },
    {
        "task": [
            "Целью троянской программы может быть:\n<<<закачивание и скачивание файлов;\nкопирование и подача пользователю ПК ложных ссылок, ведущих на поддельные веб-сайты, чаты или другие сайты с регистрацией;\nсоздание помех работе пользователя;\nкража данных, представляющих ценность или тайну, в том числе информации для аутентификации, для несанкционированного доступа к ресурсам, выуживание деталей касательно банковских счетов, которые могут быть использованы в преступных целях;\nраспространение других вредоносных программ, чаще всего таких, как вирусы или черви;\nуничтожение данных (стирание или переписывание данных на диске, труднозамечаемые повреждения файлов) и оборудования, выведения из строя или отказа обслуживания компьютерных систем, сетей;\nсбор адресов электронной почты и использование их для рассылки спама;\nслежка за пользователем и тайное сообщение злоумышленникам о посещении конкретных сайтов;\nрегистрация нажатий клавиш с целью кражи информации такого рода как пароли и номера кредитных карточек;\nдезактивация или создание помех работе антивирусных программ и файервола;\nдля самоутверждения вирусодела, из мести или просто «повеселиться».>>>",
            "Троянские программы обычно имеют следующие расширения:\n<<<.exe, .com, .appimage (под видом игр, офисных приложений и других легальных программ, расширение может быть не видно, если в Windows отключено отображение расширений, возможны файлы с «двойным» расширением, например, image.jpg.exe. Программы после запуска могут работать скрытно);\n.js, .vbs, .jse, .vbe, .bat, .cmd, .sh (скрипты; расширение может быть не видно, иногда файлы этих форматов можно прочитать в редакторе кода);\n.html, .htm, .shtml, .shtm, .xhtml, .xht, .hta (HTML документы; могут скачивать вирусы и другие вредоносные программы из Интернета, перенаправлять на вирусные и ложные сайты; файлы .hta работают вне браузера и могут выполнять опасные действия непосредственно на компьютере);\n.pif (ярлык с возможностью выполнения вредоносных действий);\n.docm, .xlsm и т. п. (в электронных документах могут быть опасные макросы, обычно расширение заканчивается на «m»);\n.xml, .xsl, .svg, .xaml (XML-документы, аналогично HTML);\n.cab и прочие установщики элементов ActiveX (Устанавливаются скрытно, маскируясь под плагин для воспроизведения мультимедиа. Примеры: Zlob; RSPlug[англ.]; DNSChanger[англ.])\n.scr (программа, работающая зачастую скрытно);\nнекоторые другие.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Троянская_программа"
    },
    {
        "task": [
            "Основные функции программного обеспечения планировщика заданий включают в себя:[источник не указан 317 дней]\n<<<интерфейсы, которые помогают определить рабочие процессы и/или зависимости между заданиями;\nавтоматический запуск заданий на выполнение;\nинтерфейсы для отслеживания выполнения заданий;\nприоритеты и/или очереди для контроля порядка выполнения независимых заданий.>>>",
            "Большинство операционных систем, таких как Unix и Windows, предоставляют базовые возможности планирования заданий, в частности, с помощью команд at и batch, cron и планировщика заданий Windows. Веб-хостинговые услуги предоставляют возможности планирования заданий через панель управления или webcron. Многие программы, такие как системы управления базами данных (СУБД), системы резервного копирования, системы планирования ресурсов предприятия (ERP) и системы управления бизнес-процессами (BPM), также включают соответствующие возможности планирования заданий. Встроенный планировщик заданий операционной системы или программы обычно не предоставляют возможности планирования вне пределов одного экземпляра операционной системы или за пределами определенного приложения. Организации, нуждающиеся в автоматизации несвязанных задач в области информационных технологий, могут также использовать расширенные возможности планировщика заданий, такие как:\n<<<планирование в реальном времени на основе внешних, непредсказуемых событий;\nавтоматический перезапуск и восстановление в случае сбоев;\nоповещение и уведомление операционного персонала;\nгенерация отчетов о происшествиях;\nаудит для целей соответствия регулирующим требованиям.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Планировщик_задач"
    },
    {
        "task": [
            "Переменные среды Windows делятся на две категории:\n<<<Переменные среды пользователя — содержат настройки конкретного пользователя, например, указывают путь до пользовательских каталогов.\nСистемные переменные — хранят данные о некоторых каталогах операционной системы и конфигурации компьютера.>>>",
            "Обращение к некоторой переменной среды возможно таким образом: %ИМЯ_ПЕРЕМЕННОЙ%. Также возможно выделение из переменной её части (если на компьютере не отключены расширения командного процессора, по умолчанию они включены), например, печать различных частей переменной VAR с использованием командной строки Windows:\n<<<Вывод содержимого переменной — echo %VAR%.\nВывод первых четырёх символов — echo %VAR:~0,4%.\nВывод символов с третьего по шестой — echo %VAR:~2,4%\nВывод последних четырёх символов — echo %VAR:~-4%>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Переменная_среды"
    },
    {
        "task": [
            "В культуре<<<«Человекайпадоножка» — эпизод мультсериала «Южный парк», посвящённый тому, что большинство людей соглашается с пользовательским соглашением, не читая его.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Пользовательское_соглашение"
    },
    {
        "task": [
            "Есть 3 основных глобальных игрока, предлагающие широкий спектр платёжных терминалов[1]. В большинстве стран терминалы предоставляются продавцам через множество дистрибьюторов, которые поддерживают и предварительно настраивают устройства для работы с местными платежными сетями или финансовыми учреждениями.\n<<<Ingenico (Франция)\nPAX Technology (Китай)\nVeriFone (США)>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/POS-терминал"
    },
    {
        "task": [
            "Узел суперскалярного процессора, называемый диспетчером инструкций (англ. instruction dispatcher, ID), ответственен:\n<<<за чтение инструкций из памяти;\nза принятие решений о том, какие инструкции могут быть выполнены одновременно;\nза распределение инструкций между несколькими функциональными узлами процессора.>>>",
            "В суперскалярных вычислительных машинах используется ряд методов для ускорения вычислений, характерных прежде всего для них, однако такие методики могут использоваться и в других типах архитектур:\n<<<внеочередное исполнение;\nпереименование регистров;\nобъединение нескольких команд в одну.>>>",
            "Также используются общие методики увеличения производительности, применяемые и в других типах вычислительных машин:\n<<<предсказатель переходов;\nкэш;\nконвейер (используется во всех современных суперскалярах);\nодновременая многопоточность (SMT) — одновременное исполнение инструкций нескольких независимых потоков в каждом такте на одновременно работающих конвейерах суперскалярного процессора.>>>",
            "Увеличение производительности суперскалярных процессоров ограничивается следующими факторами:\n<<<степенью внутреннего параллелизма инструкций;\nсложностью поиска зависимостей между инструкциями и затратами времени на этот поиск; сложностью схемы переименования регистров и затратами времени на переименование;\nобработкой инструкций ветвления.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Суперскалярность"
    },
    {
        "task": [
            "В порядке ухудшения (увеличения длительности проверки на попадание) и улучшения (уменьшения количества промахов):\n<<<кэш прямого отображения (англ. direct mapped cache) — наилучшее время попадания и, соответственно, лучший вариант для больших кэшей;\n2-канальный множественно-ассоциативный кэш англ. 2-way set associative cache;\n2-канальный skewed ассоциативный кэш (англ. «the best tradeoff for …. caches whose sizes are in the range 4K-8K bytes» — André Seznec);\n4-канальный множественно-ассоциативный кэш (англ. 4-way set associative cache);\nполностью ассоциативный кэш, англ. fully associative cache — наилучший (самый низкий) процент промахов (miss rate) и лучший вариант при чрезвычайно высоких затратах при промахе (miss penalty).>>>",
            "кэш прямого отображения (англ. direct mapped cache) — наилучшее время попадания и, соответственно, лучший вариант для больших кэшей;\n2-канальный множественно-ассоциативный кэш англ. 2-way set associative cache;\n2-канальный skewed ассоциативный кэш (англ. «the best tradeoff for …. caches whose sizes are in the range 4K-8K bytes» — André Seznec);\n4-канальный множественно-ассоциативный кэш (англ. 4-way set associative cache);\nполностью ассоциативный кэш, англ. fully associative cache — наилучший (самый низкий) процент промахов (miss rate) и лучший вариант при чрезвычайно высоких затратах при промахе (miss penalty).<<<\n\n\nКэш прямого отображения\n\n\n\nn-канальный множественно-ассоциативный кэш\n\n\n\nПолностью ассоциативный кэш\n\n>>>",
            "Категории промахов (Three Cs)[править | править код]<<<Compulsory misses — промахи, вызванные первым упоминанием запрошенного адреса. Размеры кэшей и их ассоциативность не влияют на количество данных промахов. Предвыборка (prefetching), как программная, так и аппаратная, может помочь, так же, как и увеличение размера кэш-линии (в качестве вида аппаратной предвыборки). Такие промахи иногда называются «холодными».\nCapacity misses — промахи, вызванные исключительно конечным размером кэша, происходящие вне зависимости от степени ассоциативности или размера кэш-линии. График таких промахов относительно размера кэша может дать некоторую меру временной локальности (temporal locality) некоторого набора запросов в память. Стоит заметить, что не существует понятия полного кэша, пустого кэша или почти полного кэша, так как кэши процессора почти все время имеют кэш-линии в занятом состоянии, и, значит, практически каждое заведение новой линии потребует гашения уже занятой.\nConflict misses — промахи, вызванные конфликтом. Их можно избежать, если бы кэш не вытеснил запись ранее. Можно дополнительно разделить на промахи, вызванные отображением (конкретным значением ассоциативности) и промахи замещения, которые вызваны конкретным алгоритмом выбора записей для замещения.>>>",
            "Для дальнейшего описания важны три особенности процесса трансляции адресов:\n<<<Задержка: Физический адрес будет получен от MMU только спустя некоторое время, вплоть до нескольких тактов, после подачи на вход MMU виртуального адреса с генератора адресов.\nЭффект наложения: Несколько виртуальных адресов могут соответствовать одному физическому. В большинстве процессоров гарантируется, что все записи по физическому адресу будут совершены в порядке, заданном программой. Для выполнения этого свойства требуется проверка, что только один экземпляр копии данных с физического адреса находится в данный момент в кэше.\nЕдиница отображения: Виртуальное адресное пространство разбито на страницы — блоки памяти фиксированного размера, начинающиеся с адресов, кратных их размеру. Например, 4 ГБ адресного пространства можно разделить на 1048576 страниц по 4 кБ, для каждой из которых возможно независимое соответствие физическим страницам. В современных процессорах часто поддерживается использование одновременно нескольких размеров страниц, например, 4 кБ и 2 МБ для x86-64, а в некоторых современных AMD-процессорах ещё и 1 ГБ.>>>",
            "По отношению к виртуальной адресации кэши данных и инструкций могут быть поделены на 4 типа. Адреса в кэшах используются для двух разных целей: индексирования и тегирования.\n<<<Physically indexed, physically tagged (PIPT) — физически индексируемые и физически тегируемые. Такие кэши просты и избегают проблем с наложением (aliasing), но они медленны, так как перед обращением в кэш требуется запрос физического адреса в TLB. Этот запрос может вызвать промах в TLB и дополнительное обращение в основную память перед тем, как наличие данных будет проверено в кэше.\nVirtually indexed, virtually tagged (VIVT) — виртуально индексируемые и виртуально тегируемые. И для тегирования, и для индекса используется виртуальный адрес. Благодаря этому проверки наличия данных в кэше происходят быстрее, не требуя обращения к MMU. Однако возникает проблема наложения, когда несколько виртуальных адресов соответствуют одному и тому же физическому. В этом случае данные будут закэшированы дважды, что сильно усложняет поддержку когерентности. Другой проблемой являются омонимы, ситуации, когда один и тот же виртуальный адрес (например, в разных процессах) отображается в различные физические адреса. Становится невозможным различить такие отображения исключительно по виртуальному индексу. Возможные решения: сброс кэша при переключении между задачами (context switch), требование непересечения адресных пространств процессов, тегирование виртуальных адресов идентификатором адресного пространства (address space ID, ASID) или использование физических тегов. Также возникает проблема при изменении отображения виртуальных адресов в физические, что требует сброса кэш-линий, для которых изменилось отображение.\nVirtually indexed, physically tagged (VIPT) — виртуально индексируемые и физически тегируемые. Для индекса используется виртуальный адрес, а для тега — физический. Преимуществом над первым типом является меньшая задержка, поскольку можно искать кэш-линию одновременно с трансляцией адресов в TLB, однако сравнение тега задерживается до получения физического адреса. Преимуществом над вторым типом является обнаружение омонимов (homonyms), так как тег содержит физический адрес. Для данного типа требуется больше бит для тега, поскольку индексные биты используют иной тип адресации.\nPhysically indexed, virtually tagged — физически индексируемые и виртуально тегированные кэши считаются бесполезными и маргинальными и представляют исключительно академический интерес[5].>>>",
            "Наконец, с другой стороны иерархии памяти находится регистровый файл самого микропроцессора, который можно рассматривать как небольшой и самый быстрый кэш в системе со специальными свойствами (например, статическое планирование компилятором при распределении регистров, когда он располагает данные из ОЗУ на регистр). Подробнее см. loop nest optimization. Регистровые файлы также могут иметь иерархию: Cray-1 (в 1976 году) имел 8 адресных «A»-регистров и 8 скалярных «S»-регистров общего назначения. Также машина содержала набор из 64 адресных «B» и 64 скалярных «T» регистров, обращение к которым было дольше, но все же значительно быстрее основной ОЗУ. Эти регистры были введены по причине отсутствия в машине кэша данных (хотя кэш команд в машине имелся)\n<<<\n\n\nЗатребованные данные считываются из кэша первого (англ. L1) уровня.\n\n\n\nЗатребованные данные считываются из кэша второго (англ. L2) уровня.\n\n\n\nВ случае отсутствия затребованных данных в кэшах, производится чтение из ОЗУ.\n\n>>>",
            "Ядро использует четыре различных специализированных кэша: кэш инструкций, TLB инструкций, TLB данных и кэш данных:\n<<<Кэш инструкций состоит из 64-байтных блоков, являющихся копией основной памяти, и может подгружать до 16 байтов за такт. Каждый байт в этом кэше хранится в 10 битах, а не в 8, причём в дополнительных битах отмечены границы инструкций (т. о. кэш проводит частичное преддекодирование). Для проверки целостности данных используется лишь контроль четности, а не ECC, так как бит четности занимает меньше места, а в случае сбоя повреждённые данные можно обновить правильной версией из памяти.\nTLB инструкций содержит копии записей из таблицы страниц. На каждый запрос чтения команд требуется трансляция математических адресов в физические. Записи о трансляции бывают 4- и 8-байтными, и TLB разбит на 2 части, соответственно одна для 4 кБ отображений и другая для 2 и 4 МБ отображений (большие страницы). Такое разбиение упрощает схемы полностью ассоциативного поиска в каждой из частей. ОС и приложения могут использовать отображения различного размера для частей виртуального адресного пространства.\nTLB данных является сдвоенным, и оба буфера содержат одинаковый набор записей. Их сдвоенность позволяет производить каждый такт трансляцию для двух запросов к данным одновременно. Так же, как и TLB инструкций, этот буфер разделен между записями двух видов.\nКэш данных содержит 64-байтные копии фрагментов памяти. Он разделен на 8 банков (банок), каждый содержит по 8 килобайт данных. Кэш позволяет производить по два запроса к 8-байтовым данным каждый такт, при условии, что запросы будут обработаны различными банками. Теговые структуры в кэше продублированы, так как каждый 64-байтный блок распределен по всем 8 банкам. Если совершается 2 запроса в один такт, они работают с собственной копией теговой информации.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Кэш_процессора"
    },
    {
        "task": [
            "Методы и техники анализа, применимые к большим данным, выделенные в отчёте McKinsey[32]:\n<<<методы класса Data Mining: обучение ассоциативным правилам (англ. association rule learning), классификация (методы категоризации новых данных на основе принципов, ранее применённых к уже наличествующим данным), кластерный анализ, регрессионный анализ;\nкраудсорсинг — категоризация и обогащение данных силами широкого, неопределённого круга лиц, привлечённых на основании публичной оферты, без вступления в трудовые отношения;\nсмешение и интеграция данных (англ. data fusion and integration) — набор техник, позволяющих интегрировать разнородные данные из разнообразных источников для возможности глубинного анализа, в качестве примеров таких техник, составляющих этот класс методов приводятся цифровая обработка сигналов и обработка естественного языка (включая тональный анализ);\nмашинное обучение, включая обучение с учителем и без учителя, а также Ensemble learning[англ.] — использование моделей, построенных на базе статистического анализа или машинного обучения для получения комплексных прогнозов на основе базовых моделей (англ. constituent models, ср. со статистическим ансамблем в статистической механике);\nискусственные нейронные сети, сетевой анализ, оптимизация, в том числе генетические алгоритмы;\nраспознавание образов;\nпрогнозная аналитика;\nимитационное моделирование;\nпространственный анализ (англ. Spatial analysis) — класс методов, использующих топологическую, геометрическую и географическую информацию в данных;\nстатистический анализ, в качестве примеров методов приводятся A/B-тестирование и анализ временных рядов;\nвизуализация аналитических данных — представление информации в виде рисунков, диаграмм, с использованием интерактивных возможностей и анимации как для получения результатов, так и для использования в качестве исходных данных для дальнейшего анализа.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Большие_данные"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Векторный_процессор"
    },
    {
        "task": [
            "Все механизмы («векторы атаки») распространения червей делятся на две большие группы:\n<<<Использование уязвимостей и ошибок администрирования в программном обеспечении, установленном на компьютере. Червь Морриса использовал известные на тот момент уязвимости в программном обеспечении, а именно в почтовом сервере sendmail, сервисе finger и подбирал пароль по словарю. Такие черви способны распространяться автономно, выбирая и атакуя компьютеры в полностью автоматическом режиме.\nИспользуя средства так называемой социальной инженерии, провоцируется запуск вредоносной программы самим пользователем. Чтобы убедить пользователя в том, что файл безопасен, могут подключаться недостатки пользовательского интерфейса программы — например, червь VBS.LoveLetter использовал тот факт, что Outlook Express скрывает расширения файлов. Данный метод широко применяется в спам-рассылках, социальных сетях и т. д.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Сетевой_червь"
    },
    {
        "task": [
            "Другие области применения включают:\n<<<Поддержку создания видеоэффектов для кино и телевидения\nНаблюдение>>>",
            "В литературе описано различное множество проблем распознавания:\n<<<Распознавание: один или несколько предварительно заданных или изученных объектов или классов объектов могут быть распознаны, обычно вместе с их двухмерным положением на изображении или трехмерным положением в сцене.\nИдентификация: распознается индивидуальный экземпляр объекта. Примеры: идентификация определённого человеческого лица или отпечатка пальцев или автомобиля.\nОбнаружение: видеоданные проверяются на наличие определённого условия. Например, обнаружение возможных неправильных клеток или тканей в медицинских изображениях. Обнаружение, основанное на относительно простых и быстрых вычислениях иногда используется для нахождения небольших участков в анализируемом изображении, которые затем анализируются с помощью приемов, более требовательных к ресурсам, для получения правильной интерпретации.>>>",
            "Существует несколько специализированных задач, основанных на распознавании, например:\n<<<Поиск изображений по содержанию: нахождение всех изображений в большом наборе изображений, которые имеют определённое содержание. Содержание может быть определено различными путями, например в терминах схожести с конкретным изображением (найдите мне все изображения похожие на данное изображение), или в терминах высокоуровневых критериев поиска, вводимых как текстовые данные (найдите мне все изображения, на которых изображено много домов, которые сделаны зимой и на которых нет машин).\nОценка положения: определение положения или ориентации определённого объекта относительно камеры. Примером применения этой техники может быть содействие руке робота в извлечении объектов с ленты конвейера на линии сборки.\nОптическое распознавание знаков: распознавание символов на изображениях печатного или рукописного текста, обычно для перевода в текстовый формат, наиболее удобный для редактирования или индексации (например, ASCII).\nОптическое распознавание дорожных знаков>>>",
            "Несколько задач, связанных с оценкой движения, в которых последовательность изображений (видеоданные) обрабатываются для нахождения оценки скорости каждой точки изображения или 3D сцены. Примерами таких задач являются:\n<<<Определение трехмерного движения камеры\nСлежение, то есть следование за перемещениями объекта (например, машин или людей)>>>",
            "Реализация систем компьютерного зрения сильно зависит от области их применения, аппаратной платформы и требований по производительности. Некоторые системы являются автономными и решают специфические проблемы детектирования и измерения, тогда как другие системы составляют подсистемы более крупных систем, которые уже могут содержать подсистемы контроля механических манипуляторов (роботы), информационные базы данных (поиск похожих изображений), интерфейсы человек-машина (компьютерные игры) и т. д. Однако, существуют функции, типичные для многих систем компьютерного зрения.\n<<<Получение изображений: цифровые изображения получаются от одного или нескольких датчиков изображения, которые помимо различных типов светочувствительных камер включают датчики расстояния, радары, ультразвуковые камеры и т. д. В зависимости от типа датчика, получающиеся данные могут быть обычным 2D изображением, 3D изображением или последовательностью изображений. Значения пикселей обычно соответствуют интенсивности света в одной или нескольких спектральных полосах (цветные или изображения в оттенках серого), но могут быть связаны с различными физическими измерениями, такими как глубина, поглощение или отражение звуковых или электромагнитных волн, или ядерным магнитным резонансом.\nПредварительная обработка: перед тем, как методы компьютерного зрения могут быть применены к видеоданным с тем, чтобы извлечь определённую долю информации, необходимо обработать видеоданные, с тем чтобы они удовлетворяли некоторым условиям, в зависимости от используемого метода. Примерами являются:\nПовторная выборка с тем, чтобы убедиться, что координатная система изображения верна\nУдаление шума с тем, чтобы удалить искажения, вносимые датчиком\nУлучшение контрастности, для того, чтобы нужная информация могла быть обнаружена\nМасштабирование для лучшего различения структур на изображении\nВыделение деталей: детали изображения различного уровня сложности выделяются из видеоданных. Типичными примерами таких деталей являются:\nЛинии, границы и кромки\nЛокализованные точки интереса, такие как углы, капли или точки: более сложные детали могут относиться к структуре, форме или движению.\nДетектирование/Сегментация: на определённом этапе обработки принимается решение о том, какие точки или участки изображения являются важными для дальнейшей обработки. Примерами являются:\nВыделение определённого набора интересующих точек\nСегментация одного или нескольких участков изображения, которые содержат характерный объект\nВысокоуровневая обработка: на этом шаге входные данные обычно представляют небольшой набор данных, например набор точек или участок изображения, в котором предположительно находится определённый объект. Примерами являются:\nПроверка того, что данные удовлетворяют условиям, зависящим от метода и применения\nОценка характерных параметров, таких как положение или размер объекта\nКлассификация обнаруженного объекта по различным категориям>>>",
            "Программное обеспечение<<<OpenCV Библиотека алгоритмов компьютерного зрения с открытым исходным кодом.\nPCL Открытая библиотека для работы с трехмерными облаками точек.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Компьютерное_зрение"
    },
    {
        "task": [
            "На иллюстрации показан простой пятиуровневый конвейер в RISC-процессорах. Здесь:\n<<<IF (англ. Instruction Fetch) — получение инструкции,\nID (англ. Instruction Decode) — раскодирование инструкции,\nEX (англ. Execute) — выполнение,\nMEM (англ. Memory access) — доступ к памяти,\nWB (англ. Register write back) — запись в регистр.>>>",
            "Терминология[править | править код]<<<арифметический конвейер (arithmetic pipeline) — реализация в АЛУ поэтапного исполнения арифметических операций чаще всего над вещественными числами\nсупер-конвейер, гипер-конвейер, глубокий конвейер (super-pipeline, hyper-pipeline, deep pipeline) — вычислительный конвейер с необычно большим количеством стадий. Например, процессор Intel Pentium 4 имел 20 стадий конвейера, а в модификации Prescott получил конвейер из 31 стадии[1].\nнедозагруженный конвейер (underutilized pipeline) — конвейер, в котором в одно и то же время не все стадии конвейера выполняют какую-то операцию. Например ранние процессоры MIPS имели 6-стадийный конвейер, но в каждый момент было занято только 3 его стадии.>>>",
            "Например, простейший конвейер RISC-процессоров можно представить пятью стадиями с наборами триггеров между стадиями:\n<<<получение инструкции (англ. Instruction Fetch);\nдекодирование инструкции (англ. Instruction Decode) и чтение регистров (англ. Register fetch);\nвыполнение (англ. Execute);\nдоступ к памяти (англ. Memory access);\nзапись в регистр (англ. Register write back).>>>",
            "Преимущества:\n<<<Время цикла процессора уменьшается, таким образом увеличивая скорость обработки инструкций в большинстве случаев.\nНекоторые комбинационные логические элементы, такие, как сумматоры или умножители, могут быть ускорены путём увеличения количества логических элементов. Использование конвейера может предотвратить ненужное наращивание количества элементов.>>>",
            "Недостатки:\n<<<Бесконвейерный процессор исполняет только одну инструкцию за раз. Это предотвращает задержки веток инструкций (фактически каждая ветка задерживается), и проблемы, связанные с последовательными инструкциями, которые исполняются параллельно. Следовательно, схема такого процессора проще, и он дешевле для изготовления.\nЗадержка инструкций в бесконвейерном процессоре слегка ниже, чем в конвейерном эквиваленте. Это происходит из-за того, что в конвейерный процессор должны быть добавлены дополнительные триггеры.\nУ бесконвейерного процессора скорость обработки инструкций стабильна. Производительность конвейерного процессора предсказать намного сложнее, и она может значительно различаться в разных программах.>>>",
            "Справа изображён общий конвейер с четырьмя стадиями работы:\n<<<Получение (англ. Fetch)\nРаскодирование (англ. Decode)\nВыполнение (англ. Execute)\nЗапись результата (англ. Write-back)>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Вычислительный_конвейер"
    },
    {
        "task": [
            "В некоторых параллельных системах программирования передача данных между компонентами скрыта от программиста (например, с помощью механизма обещаний), тогда как в других она должна указываться явно. Явные взаимодействия могут быть разделены на два типа:\n<<<Взаимодействие через разделяемую память: на каждом процессоре мультипроцессорной системы запускается поток исполнения, который принадлежит одному процессу. Потоки обмениваются данными через общий для данного процесса участок памяти[2]. Количество потоков соответствует количеству процессоров. Потоки создаются либо средствами языка (например, в Java или C#, C++ (начиная с C++11), C (начиная с C11)), либо с помощью библиотек явно (например, в С/C++ с помощью PThreads), либо декларативно (например, с помощью библиотеки OpenMP), или автоматически встроенными средствами компилятора (например, High Performance Fortran). Данный вид параллельного программирования обычно требует какой-то формы захвата управления (мьютексы, семафоры, мониторы) для координации потоков между собой.\nВзаимодействие с помощью передачи сообщений: на каждом процессоре многопроцессорной системы запускается однопоточный процесс, который обменивается данными с другими процессами, работающими на других процессорах, с помощью сообщений. Процессы создаются явно, путём вызова соответствующей функции операционной системы, а обмен сообщениями — с помощью библиотеки (например, реализация протокола MPI), или с помощью средств языка (например, High Performance Fortran, Erlang или occam). Обмен сообщениями может происходить асинхронно, либо с использованием метода «рандеву», при котором отправитель блокирован до тех пор, пока его сообщение не будет доставлено. Асинхронная передача сообщений может быть надёжной (с гарантией доставки) либо ненадёжной[3].>>>",
            "У параллелизма с распределенной памятью и с передачей сообщений разные характеристики производительности. Обычно (но не всегда), накладные расходы памяти на процесс и времени на переключение задач у систем с передачей сообщений ниже, однако передача самих сообщений более накладна, чем вызовы процедур. Эти различия часто перекрываются другими факторами, влияющими на производительность.\n<<<Гибридный способ: на многопроцессорных системах с распределённой памятью (DM-MIMD), где каждый узел системы представляет собой мультипроцессор с общей памятью (SM-MIMD), можно использовать гибридный метод программирования[4]. На каждом узле системы запускается многопоточный процесс, который распределяет потоки между процессорами данного узла. Обмен данными между потоками на узле осуществляется через общую память, а обмен данными между узлами — через передачу сообщений. В этом случае количество процессов определяется количеством узлов, а количество потоков — количеством процессоров на каждом узле. Гибридный способ программирования более сложен (требуется особым образом переписывать параллельную программу), но наиболее эффективен в использовании аппаратных ресурсов каждого узла многопроцессорной системы.>>>",
            "Типичные задачи, допускающие параллельные вычисления<<<map — выполнение одной и той же функции над каждым элементом массива входных данных, с получением равного по мощности массива результатов вычисления\nreduce — выполнение одной и той же функции для добавления вклада каждого элемента входных данных в одно итоговое значение>>>",
            "Программные инструменты параллелизма<<<OpenMP — стандарт интерфейса приложений для параллельных систем с общей памятью.\nPOSIX Threads — стандарт реализации потоков (нитей) выполнения.\nWindows API — многопоточные приложения для C++.\nPVM (Parallel Virtual Machine) позволяет объединить разнородный (но связанный сетью) набор компьютеров в общий вычислительный ресурс.\nMPI (Message Passing Interface) — стандарт систем передачи сообщений между параллельно исполняемыми процессами.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Параллельные_вычисления"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Именованный_канал"
    },
    {
        "task": [
            "Поддержка аппаратным обеспечением[править | править код]<<<Виртуализация ввода-вывода впервые появилась в чипсете Q35, и на сегодняшний день поддерживается всеми материнскими платами, поддерживающими технологию Intel vPro.\nДля использования Intel Virtualization Technology необходим компьютер с процессором Intel, BIOS, монитором виртуальных машин (VMM), а для некоторых моделей - с определенным программным обеспечением с поддержкой этой технологии. Функциональные возможности, производительность и другие характеристики могут различаться в зависимости от аппаратного и программного обеспечения и могут потребовать обновления BIOS.\nПроцессоры, поддерживающие Virtualization Technology for Directed I/O: Intel Core i7-920, Intel Core i7-940, Intel Core i7-950, Intel Core i7-870, Intel Core i7-860, Intel Core i5-650, Intel Core i5-660, Intel Core i5-670, Intel Core i5-540M, Intel Core i5-520M и т. д. [1]\ni7-920 поддерживает технологию VT-x, про VT-d на оф. сайте не указано.[17]>>>",
            "Поддержка программным обеспечением[править | править код]<<<Гипервизор Xen поддерживает DMAR начиная с версии 3.3 для аппаратно-виртуализуемых доменов. Для паравиртуальных доменов отображение DMA не требуется.\nВ ближайшем будущем[когда?] заявлена поддержка технологии ПО Oracle VirtualBox.\nЯдро Linux экспериментально поддерживает DMAR начиная с версии 2.6.28, что позволяет встроенному гипервизору (kvm) давать доступ виртуальным машинам к PCI-устройствам.\nПоддержка Intel VT-d есть в Parallels Workstation 4.0 Extreme [2] и в Parallels Server 4 Bare Metal [3]>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Аппаратная_виртуализация"
    },
    {
        "task": [
            "Оборудование<<<Эмуляция — полная виртуализация (виртуализация всей платформы); например, QEMU или эмуляторы игровых консолей.>>>",
            "Операционные системы<<<Программная виртуализация\nДинамическая трансляция; при динамической (бинарной) трансляции проблемные команды гостевой операционной системы перехватываются гипервизором.\nПаравиртуализация: операционная система взаимодействует с программой гипервизора, который предоставляет ей гостевой API, вместо использования напрямую таких ресурсов, как таблица страниц памяти.\nВстроенная виртуализация\nАппаратная виртуализация — виртуализация с поддержкой специальной процессорной архитектуры. В отличие от программной виртуализации, с помощью данной техники возможно использование изолированных гостевых систем, управляемых гипервизором напрямую.\nВиртуализация на уровне операционной системы: работа нескольких экземпляров пространства пользователя в рамках одной ОС. Примерами могут быть Docker, LXC>>>",
            "Программное обеспечение<<<Виртуализация приложений (также виртуализация рабочего окружения): работа отдельных приложений в среде, отделённой от основной ОС. Эта концепция тесно связана с портативными приложениями. Примерами могут быть: Citrix XenApp, Microsoft App-V[англ.].\nВиртуализация сервисов: эмуляция поведения системных компонентов, необходимых для запуска приложения в целях отладки и тестирования (англ. Application Under Test). Вместо виртуализации компонентов целиком, эта технология виртуализует только необходимые части. Примеры: SoapUI, Parasoft Virtualize[англ.].>>>",
            "Память<<<Виртуализация памяти (англ. memory virtualization) — объединением оперативной памяти из различных ресурсов в единый массив. Реализации: Oracle Coherence[англ.], GigaSpaces XAP[англ.].\nВиртуальная память — изоляция адресного пространства приложения от всего адресного пространства. Применяется во всех современных ОС.>>>",
            "Системы хранения<<<Виртуализация хранения данных, представление набора физических носителей в виде единого физического носителя.\nБлочная виртуализация\nФайловая виртуализация\nРаспределённая файловая система — любая файловая система, которая позволяет получать доступ к файлам с нескольких устройств, с помощью компьютерной сети.\nВиртуальная файловая система — уровень абстракции поверх конкретной реализации файловой системы. Целью VFS является обеспечение единообразного доступа клиентских приложений к различным типам файловых систем.\nГипервизор хранения (англ. storage hypervisor) — программа, которая управляет виртуализацией пространства для хранения данных и может объединять различные физические пространства в единый логический массив[1].\nВиртуализация устройств хранения данных: виртуализация жёсткого (логический диск) или оптического диска (например, DAEMON Tools).>>>",
            "Базы данных<<<Виртуализация данных (англ. data virtualization) — представление данных в абстрактном виде, независимо от нижележащих систем управления и хранения данных, а также их структуры. Это подход к унификации данных из нескольких источников на одном уровне, чтобы приложения, средства отчётности и конечные пользователи могли получать доступ к данным, не нуждаясь в подробных сведениях об исходных источниках, местоположениях и структурах данных.[2]>>>",
            "Сеть<<<Виртуализация сети — процесс объединения аппаратных и программных сетевых ресурсов в единую виртуальную сеть.\nВнешняя, соединяющая множество сетей в одну виртуальную.\nВнутренняя, создающая виртуальную сеть между программными контейнерами внутри одной системы.\nВиртуальная частная сеть — обеспечение одного или нескольких сетевых соединений поверх другой сети.>>>",
            "Преимущества:\n<<<Совместное использование ресурсов несколькими гостевыми операционными системами (каталоги, принтеры и так далее).\nУдобство интерфейса для окон приложений из разных систем (перекрывающиеся окна приложений, одинаковая минимизация окон, как в хост-системе).\nПри тонкой настройке на аппаратную платформу производительность мало отличается от оригинальной операционной системы. Быстрое переключение между системами (менее одной секунды).\nПростая процедура обновления гостевой операционной системы.\nДвухсторонняя виртуализация (приложения одной системы запускаются в другой и наоборот).>>>",
            "Реализации:\n<<<BlueStacks Multi-OS (MOS)[4][5].>>>",
            "Преимущества:\n<<<Упрощение разработки программных платформ виртуализации за счет предоставления аппаратных интерфейсов управления и поддержки виртуальных гостевых систем. Это уменьшает трудоемкость и время на разработку систем виртуализации.\nВозможность увеличения быстродействия платформ виртуализации. Управление виртуальными гостевыми системами осуществляет напрямую небольшой промежуточный слой программного обеспечения, гипервизор, что дает увеличение быстродействия.\nУлучшается защищённость, появляется возможность переключения между несколькими запущенными независимыми платформами виртуализации на аппаратном уровне. Каждая из виртуальных машин может работать независимо, в своем пространстве аппаратных ресурсов, полностью изолированно друг от друга. Это позволяет устранить потери быстродействия на поддержание хостовой платформы и увеличить защищенность.\nГостевая система становится не привязана к архитектуре хостовой платформы и к реализации платформы виртуализации. Технология аппаратной виртуализации делает возможным запуск 64-битных гостевых систем на 32-битных хостовых системах (с 32-битными средами виртуализации на хостах).>>>",
            "Технологии:\n<<<Режим виртуального 8086 (устарела)\nIntel VT (VT-x, Intel Virtualization Technology for x86)\nAMD-V>>>",
            "Платформы, использующие аппаратную виртуализацию:\n<<<IBM LPAR\nVMware\nHyper-V\nXen\nKVM\nBhyve>>>",
            "Примеры применения:\n<<<Тестовые лаборатории и обучение: тестированию в виртуальных машинах удобно подвергать приложения, влияющие на настройки операционных систем, например инсталляционные приложения. За счёт простоты в развёртывании виртуальных машин, они часто используются для обучения новым продуктам и технологиям.\nРаспространение предустановленного программного обеспечения: многие разработчики программных продуктов создают готовые образы виртуальных машин с предустановленными продуктами и предоставляют их на бесплатной или коммерческой основе. Такие услуги предоставляют Vmware VMTN или Parallels PTN.>>>",
            "Достоинства:\n<<<изолированность исполнения приложений: отсутствие несовместимостей и конфликтов;\nкаждый раз в первозданном виде: не загромождается реестр, нет конфигурационных файлов — необходимо для сервера;\nменьшие ресурсозатраты по сравнению с эмуляцией всей операционной системы.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Виртуализация"
    },
    {
        "task": [
            "Волокно в каждый дом (англ. Fiber to the premises, FTTP или Fiber to the home, FTTH) — термин, используемый телекоммуникационными интернет-провайдерами для обозначения широкополосных телекоммуникационных систем, базирующихся на проведении волоконного канала и его завершения на территории конечного пользователя путём установки терминального оптического оборудования для предоставления комплекса телекоммуникационных услуг, включающего:\n<<<высокоскоростной доступ в Интернет;\nуслуги телефонной связи;\nуслуги телевизионного приёма.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Волоконно-оптическая_связь"
    },
    {
        "task": [
            "Microsoft PPP поддерживает следующие NCP:\n<<<Internet Protocol Control Protocol (IPCP) для настройки IP.\nInternetwork Packet Exchange Control Protocol (IPXCP) для настройки IPX.\nAppleTalk Control Protocol (ATCP) для настройки  AppleTalk.\nNetBIOS Frames Control Protocol (NBFCP) для настройки NetBEUI.>>>",
            "Наиболее важные особенности<<<Link Control Protocol устанавливает и завершает соединения, позволяя узлам определять настройки соединения. Также он поддерживает и байт-, и биториентированные кодировки.\nNetwork Control Protocol используется для определения настроек сетевого уровня, таких как сетевой адрес или настройки сжатия, после того, как соединение было установлено.>>>",
            "Так как в PPP входит LCP-протокол, то можно управлять следующими LCP-параметрами:\n<<<Аутентификация. RFC 1994 описывает Challenge Handshake Authentication Protocol (CHAP), который является предпочтительным для проведения аутентификации в PPP, хотя Password Authentication Protocol (PAP) иногда ещё используется. Другим вариантом для аутентификации является Extensible Authentication Protocol (EAP).\nСжатие. Эффективно увеличивает пропускную способность PPP-соединения за счёт сжатия данных в кадре. Наиболее известными алгоритмами сжатия PPP-кадров являются Stacker и Predictor.\nОбнаружение ошибок. Включает Quality-Protocol и помогает выявить петли обратной связи посредством Magic Numbers RFC 1661.\nМногоканальность. Multilink PPP (MLPPP, MPPP, MLP) предоставляет методы для распространения трафика через несколько физических каналов, имея одно логическое соединение. Этот вариант позволяет расширить пропускную способность и обеспечивает балансировку нагрузки.>>>",
            "\n\nПротокол 0xXXXX\nДанные\n\n\n1 или 2\n0 и более\n<<<Флаги протокола от 0x0XXX до 0x3XXX идентифицируют протоколы сетевого уровня. Например, популярному IP-протоколу соответствует флаг 0x0021, а Novell IPX — 0x002B.\nФлаги протокола от 0x4XXX до 0x7XXX идентифицируют протоколы с низким уровнем трафика.\nФлаги протокола от 0x8XXX до 0xBXXX идентифицируют протокол управления сетью (NCP).\nФлаги протокола от 0xCXXX до 0xEXXX идентифицируют управляющие протоколы. Например, 0xC021 обозначает, что кадр содержит данные протокола управления соединением LCP.>>>",
            "Фазы PPP по RFC 1661 указаны ниже:\n<<<Link Dead. Эта фаза наступает, когда связь нарушена либо одной из сторон указали не подключаться (например, пользователь завершил модемное соединение.)\nLink Establishment Phase. В данной фазе проводится настройка Link Control. Если настройка была успешной, управление переходит в фазу аутентификации либо в фазу Network-Layer Protocol, в зависимости от того, требуется ли аутентификация.\nAuthentication Phase. Данная фаза является необязательной. Она позволяет сторонам проверить друг друга перед установкой соединения. Если проверка успешна, управление переходит в фазу Network-Layer Protocol.\nNetwork-Layer Protocol Phase. В данной фазе вызывается NCP для желаемого протокола. Например, IPCP используется для установки IP-сервисов. Передача данных по всем успешно установленным протоколам также проходит в этой фазе. Закрытие сетевых протоколов тоже включается в данную фазу.\nLink Termination Phase. Эта фаза закрывает соединение. Она вызывается в случае ошибок аутентификации, если было настолько много ошибок контрольных сумм, что обе стороны решили закрыть соединение, если соединение неожиданно оборвалось либо если пользователь отключился. Данная фаза пытается закрыть всё настолько аккуратно, насколько возможно в данных обстоятельствах.>>>",
            "Протокол PPP определен в RFC 1661 (The Point-to-Point Protocol, июль 1994). Ряд соответствующих RFC был написан, чтобы определить, как различные сетевые протоколы, включая TCP/IP, DECnet, AppleTalk, IPX и другие, работают с PPP.\n<<<RFC 1661, Standard 51, Протокол точка-точка (PPP)\nRFC 1662, Standard 51, Использование HDLC в разработке PPP\nRFC 1994, Аутентификация в PPP посредством (CHAP)\nRFC 5072, IPv6 и PPP.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/PPP_(сетевой_протокол)"
    },
    {
        "task": [
            "Шифры могут использовать один ключ для шифрования и расшифрования или два различных ключа. По этому признаку различают:\n<<<Симметричный шифр использует один ключ для шифрования и расшифрования.\nАсимметричный шифр использует два различных ключа.>>>",
            "Шифры могут быть сконструированы так, чтобы либо шифровать сразу весь текст, либо шифровать его по мере поступления. Таким образом существуют:\n<<<Блочный шифр шифрует сразу целый блок текста, выдавая шифротекст после получения всей информации.\nПоточный шифр шифрует информацию и выдаёт шифротекст по мере поступления, таким образом имея возможность обрабатывать текст неограниченного размера, используя фиксированный объём памяти.>>>",
            "Асимметричный шифр — система шифрования и/или электронной цифровой подписи (ЭЦП), при которой открытый ключ передаётся по открытому (то есть незащищённому, доступному для наблюдения) каналу, и используется для проверки ЭЦП и для шифрования сообщения. Для генерации ЭЦП и для расшифровки сообщения используется секретный ключ.[1] Криптографические системы с открытым ключом в настоящее время широко применяются в различных сетевых протоколах, в частности, в протоколах TLS и его предшественнике SSL (лежащих в основе HTTPS), в SSH. Также используется в PGP, S/MIME.\n<<<RSA\nElgamal\nElliptic curve cryptography, ECC — (криптосистема на основе эллиптических кривых)>>>",
            "Поточные шифры[править | править код]<<<RC4\nA5\nMosquito>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Шифр"
    },
    {
        "task": [
            "Технические средства<<<Кабель (коаксиальный, витая пара, оптоволоконный, беспроводная среда)\nРазъем (к примеру: 8P8C)\nКоммутационная панель\nПлинт\nПовторитель сигналов\nМногопортовые повторители или концентраторы\nПреобразователи среды или медиаконвертеры (transceiver)\nMAU (Media Access Unit)\nСетевой адаптер (NIC) — он также задействован и на канальном уровне\nPHY>>>",
            "Такие сетевые стандарты как 100BASE-T или 1000BASE-X базируются на физическом слое.\n<<<Число 100 в 100BASE-T означает 100 Мегабит (100000000 бит), а 1000 в 1000BASE-X, соответственно, означает Гигабит.\nСлово «BASE» — это сокращение от baseband.\nАббревиатура «T» — это обозначение кабеля витая пара.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Физический_уровень"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Синхронизация_(информатика)"
    },
    {
        "task": [
            "В контексте высокоскоростных вычислений существует два показателя масштабируемости:\n<<<сильная масштабируемость — показывает, как меняется время решения задачи с увеличением количества процессоров (или вычислительных узлов) при неизменном общем объёме задачи[2];\nслабая масштабируемость — показывает, как меняется время решения задачи с увеличением количества процессоров (узлов) при неизменном объёме задачи для одного процессора (или узла).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Масштабируемость"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Интернет_вещей"
    },
    {
        "task": [
            "Типичный цикл разработки, за время жизни программы многократно повторяющийся, выглядит примерно так:\n<<<Программирование — внесение в программу новой функциональности, исправление существующих ошибок.\nТестирование (ручное или автоматизированное; программистом, тестировщиком или пользователем; «дымовое», в режиме чёрного ящика или модульное) — обнаружение факта ошибки.\nВоспроизведение ошибки — выяснение условий, при которых ошибка случае Это может оказаться непростой задачей при программировании параллельных процессов и при некоторых необычных ошибках, известных как гейзенбаги.\nОтладка — обнаружение причины ошибки.>>>",
            "Также полезными инструментами в руках программиста могут оказаться:\n<<<Профилировщики. Они позволят определить, сколько времени выполняется тот или иной участок кода. Анализ покрытия позволяет выявить неисполняемые участки кода\nAPI логгеры позволяют отследить взаимодействие программы и Windows API при помощи записи сообщений Windows в лог\nДизассемблеры позволяют посмотреть ассемблерный код исполняемого файла\nСнифферы помогут отследить сетевой трафик, генерируемый программой\nСнифферы аппаратных интерфейсов позволяют увидеть данные, которыми обмениваются система и устройство\nЛоги системы.>>>",
            "Другое направление — сделать, чтобы отладка нужна была как можно реже. Для этого применяются:\n<<<Контрактное программирование — чтобы программист подтверждал другим путём, что ему на выходе нужно именно такое поведение программы. В языках, в которых контрактного программирования нет, используется самопроверка программы в ключевых точках.\nМодульное тестирование — проверка поведения программы по частям.\nСтатический анализ кода — проверка кода на стандартные ошибки «по недосмотру».\nВысокая культура программирования, в частности, паттерны проектирования, соглашения об именовании и прозрачное поведение отдельных блоков кода — чтобы объявить себе и другим, каким образом должна вести себя та или иная функция.\nШирокое использование проверенных внешних библиотек.>>>",
            "В программном коде может быть так называемое недокументированное поведение — серьёзные ошибки, которые не проявляются при нормальном ходе выполнения программы, однако весьма опасны для безопасности всей системы в случае целенаправленной атаки. Чаще всего это результат ошибок программиста. Наиболее известные примеры — это SQL-инъекция и переполнение буфера. В данном случае задача отладки это:\n<<<Выявление недокументированного поведения системы\nУстранение небезопасного кода>>>",
            "Выделяют такие методы:\n<<<статический анализ кода. На этой фазе программа сканер ищет последовательности в исходном тексте, соответствующие небезопасным вызовам функций и т. д. Фактически идет сканирование исходного текста программы на основе специальной базы правил, которая содержит описание небезопасных образцов кода.\nфаззинг. Это процесс подачи на вход программы случайных или некорректных данных и анализ реакции программы.\nReverse engineering (Обратная инженерия). Этот случай возникает, когда независимые исследователи ищут уязвимости и недокументированные возможности программы.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Отладка_программы"
    },
    {
        "task": [
            "По плану, первым компьютером, построенным по архитектуре фон Неймана, должен был стать EDVAC (Electronic Discrete Variable Automatic Computer) — одна из первых электронных вычислительных машин. В отличие от своего предшественника ЭНИАКа, это был компьютер на двоичной, а не десятичной основе. Как и ЭНИАК, EDVAC был разработан в Институте Мура Пенсильванского университета для Лаборатории баллистических исследований (англ.) Армии США командой инженеров и учёных во главе с Джоном Преспером Экертом и Джоном Уильямом Мокли при активной помощи математика, однако до 1951 года EDVAC не был запущен из-за технических трудностей в создании надёжной компьютерной памяти и разногласий в группе разработчиков. Другие научно-исследовательские институты, ознакомившись с ЭНИАКом и проектом EDVAC, сумели решить эти проблемы гораздо раньше. Первыми компьютерами, в которых были реализованы основные особенности архитектуры фон Неймана, были:\n<<<прототип — Манчестерская малая экспериментальная машина — Манчестерский университет, Великобритания, 21 июня 1948 года;\nEDSAC — Кембриджский университет, Великобритания, 6 мая 1949 года;\nМанчестерский Марк I — Манчестерский университет, Великобритания, 1949 год;\nBINAC — США, апрель или август 1949 года;\nCSIR Mk 1 — Австралия, ноябрь 1949 года;\nEDVAC — США, август 1949 года — фактически запущен в 1952 году;\nCSIRAC — Австралия, ноябрь 1949 года;\nSEAC — США, 9 мая 1950 года;\nORDVAC — США, ноябрь 1951 года;\nIAS-машина — США, 10 июня 1952 года;\nMANIAC I — США, март 1952 года;\nAVIDAC — США, 28 января 1953 года;\nORACLE — США, конец 1953 года;\nWEIZAC — Израиль, 1955 год;\nSILLIAC — Австралия, 4 июля 1956 года.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Архитектура_фон_Неймана"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Реляционная_база_данных"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Ссылка_(программирование)"
    },
    {
        "task": [
            "Книга[2] представляет следующую структуру ЭС:\n<<<Интерфейс пользователя\nПользователь\nИнтеллектуальный редактор базы знаний\nЭксперт\nИнженер по знаниям\nРабочая (оперативная) память\nБаза знаний\nРешатель (механизм логического вывода (МЛВ))\nПодсистема объяснений>>>",
            "База знаний ЭС создаётся при помощи трёх групп людей:\n<<<эксперты той проблемной области, к которой относятся задачи, решаемые ЭС;\nинженеры по знаниям, являющиеся специалистами по разработке ИИС;\nпрограммисты, осуществляющие реализацию ЭС.>>>",
            "ЭС может функционировать в 2-х режимах.\n<<<Режим ввода знаний — в этом режиме эксперт с помощью инженера по знаниям посредством редактора базы знаний вводит известные ему сведения о предметной области в базу знаний ЭС.\nРежим консультации — пользователь ведёт диалог с ЭС, сообщая ей сведения о текущей задаче и получая рекомендации ЭС. Например, на основе сведений о физическом состоянии больного ЭС ставит диагноз в виде перечня заболеваний, наиболее вероятных при данных симптомах.>>>",
            "Классификация ЭС по решаемой задаче[править | править код]<<<Интерпретация данных\nДиагностирование\nМониторинг\nПроектирование\nПрогнозирование\nСводное планирование\nОптимизация\nОбучение\nУправление\nРемонт\nОтладка>>>",
            "Классификация ЭС по связи с реальным временем[править | править код]<<<Статические — решающие задачи в условиях не изменяющихся во времени исходных данных и знаний.\nКвазидинамические  — интерпретируют ситуацию, которая меняется с некоторым фиксированным интервалом времени.\nДинамические — решающие задачи в условиях изменяющихся во времени исходных данных и знаний.>>>",
            "Этапы разработки ЭС<<<Этап идентификации проблем — определяются задачи, которые подлежат решению, выявляются цели разработки, определяются эксперты и типы пользователей.\nЭтап извлечения знаний — проводится содержательный анализ проблемной области, выявляются используемые понятия и их взаимосвязи, определяются методы решения задач.\nЭтап структурирования знаний — выбираются ИС и определяются способы представления всех видов знаний, формализуются основные понятия, определяются способы интерпретации знаний, моделируется работа системы, оценивается адекватность целям системы зафиксированных понятий, методов решений, средств представления и манипулирования знаниями.\nЭтап формализации — осуществляется наполнение экспертом базы знаний. В связи с тем, что основой ЭС являются знания, данный этап является наиболее важным и наиболее трудоёмким этапом разработки ЭС. Процесс приобретения знаний разделяют на извлечение знаний из эксперта, организацию знаний, обеспечивающую эффективную работу системы, и представление знаний в виде, понятном ЭС. Процесс приобретения знаний осуществляется инженером по знаниям на основе анализа деятельности эксперта по решению реальных задач.\nРеализация ЭС — создаётся один или несколько прототипов ЭС, решающие требуемые задачи.\nЭтап тестирования — производится оценка выбранного способа представления знаний в ЭС в целом.>>>",
            "Наиболее известные ЭС<<<CLIPS — весьма популярная оболочка для построения ЭС (public domain)\nOpenCyc — мощная динамическая ЭС с глобальной онтологической моделью и поддержкой независимых контекстов\nWolfram|Alpha — база знаний и набор вычислительных алгоритмов, интеллектуальный «вычислительный движок знаний»\nMYCIN — наиболее известная диагностическая система, которая предназначена для диагностики и наблюдения за состоянием больного при менингите и бактериальных инфекциях.\nHASP/SIAP — интерпретирующая система, которая определяет местоположение и типы судов в Тихом океане по данным акустических систем слежения.\nАкинатор — интернет-игра. Игрок должен загадать любого персонажа, а Акинатор должен его отгадать, задавая вопросы. База знаний автоматически пополняется, поэтому программа может отгадать практически любого известного персонажа.\nIBM Watson — суперкомпьютер фирмы IBM, способный понимать вопросы, сформулированные на естественном языке, и находить на них ответы в базе данных.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Экспертная_система"
    },
    {
        "task": [
            "Основные задачи<<<Линейная фильтрация — селекция (выбор) сигнала в частотной области; синтез (создание) фильтров, согласованных с сигналами; частотное разделение каналов; цифровые преобразователи Гильберта (Lⁿ(a, b)) и дифференциаторы; корректоры характеристик каналов.\nСпектральный анализ — обработка речевых, звуковых, сейсмических, гидроакустических сигналов; распознавание образов.\nЧастотно-временной анализ — компрессия (сжатие) изображений, гидро- и радиолокация, разнообразные задачи обнаружения сигнала.\nАдаптивная фильтрация — распознавание речи, изображений, распознавание образов, подавление шумов, адаптивные антенные решётки.\nНелинейная обработка — вычисление корреляций, медианная фильтрация; синтез амплитудных, фазовых, частотных детекторов, обработка речи, векторное кодирование.\nМногоскоростная обработка — интерполяция (увеличение) и децимация (уменьшение) частоты дискретизации в многоскоростных системах телекоммуникации, аудиосистемах.\nСвёртка традиционных типов.\nСекционная свёртка.\nОбнаружение сигнала — задача обнаружения сигнала на фоне шумов и помех[3].\nРазличение сигнала — задача распознавания сигнала на фоне других сигналов, с подобными характеристиками[3].\nОценивание сигнала — задача определения характеристик сигнала (амплитуда, частота, фаза)[3]>>>",
            "Цифровая обработка сигнала в передатчике[4]\n<<<Форматирование\nКодирование источника\nШифрование\nКанальное шифрование\nУплотнение\nИмпульсная модуляция\nПолосовая модуляция\nРасширение спектра\nМножественный доступ\nПередача сигналов>>>",
            "Цифровая обработка сигнала в приёмнике[4]\n<<<Приём сигналов\nМножественный доступ\nСужение спектра\nДемодуляция и дискретизация\nДетектирование\nРазуплотнение\nКанальное декодирование\nРасшифрование\nДекодирование источника\nФорматирование>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Цифровая_обработка_сигналов"
    },
    {
        "task": [
            "\n\n\n\nT\nC\n=\nF\nC\n+\nV\nC\n=\nF\nC\n+\nv\n⋅\nQ\n\n\n{\\displaystyle TC=FC+VC=FC+v\\cdot Q}\n\n<<<\n\n\n\nT\nC\n\n\n{\\displaystyle TC}\n\n — общие затраты\n\n\n\n\nF\nC\n\n\n{\\displaystyle FC}\n\n — постоянные затраты (не зависящие от объёма производства)\n\n\n\n\nV\nC\n\n\n{\\displaystyle VC}\n\n — переменные затраты, пропорциональные объёму производства\n\n\n\n\nv\n\n\n{\\displaystyle v}\n\n — удельные или средние (на единицу продукции) переменные затраты\n\n\n\n\nQ\n\n\n{\\displaystyle Q}\n\n — объём производства.>>>",
            "\n\n\n\nC\n=\na\n+\nb\nY\n+\nε\n\n\n{\\displaystyle C=a+bY+\\varepsilon }\n\n<<<\n\n\n\nC\n\n\n{\\displaystyle C}\n\n — потребительские расходы\n\n\n\n\nY\n\n\n{\\displaystyle Y}\n\n — располагаемый доход\n\n\n\n\nb\n\n\n{\\displaystyle b}\n\n — «предельная склонность к потреблению»\n\n\n\n\na\n\n\n{\\displaystyle a}\n\n — автономное (не зависящее от дохода) потребление.>>>",
            "В классической линейной регрессии предполагается, что наряду со стандартным условием \n\n\n\nE\n(\n\nε\n\nt\n\n\n)\n=\n0\n\n\n{\\displaystyle E(\\varepsilon _{t})=0}\n\n выполнены также следующие предположения (условия Гаусса-Маркова):\n<<<Гомоскедастичность (постоянная или одинаковая дисперсия) или отсутствие гетероскедастичности случайных ошибок модели: \n\n\n\nV\n(\n\nε\n\nt\n\n\n)\n=\n\nσ\n\n2\n\n\n=\nc\no\nn\ns\nt\n\n\n{\\displaystyle V(\\varepsilon _{t})=\\sigma ^{2}=const}\n\n\nОтсутствие автокорреляции случайных ошибок: \n\n\n\n∀\ni\n,\nj\n,\n \ni\n≠\nj\n \n \nc\no\nv\n(\n\nε\n\ni\n\n\n,\n\nε\n\nj\n\n\n)\n=\n0\n\n\n{\\displaystyle \\forall i,j,~i\\not =j~~cov(\\varepsilon _{i},\\varepsilon _{j})=0}\n\n>>>",
            "Методы оценки<<<Метод наименьших квадратов\nОбобщенный метод наименьших квадратов\nМетод инструментальных переменных\nМетод максимального правдоподобия\nМетод моментов\nОбобщенный метод моментов\nКвантильная регрессия>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Линейная_регрессия"
    },
    {
        "task": [
            "PC-веб-камеры также могут использоваться в играх, использующих простые алгоритмы распознавания движений. Игры, использующие веб-камеры, бывают двух типов:\n<<<игры, которые являются отдельными программами,\nигры, которые запускаются в окне браузера при помощи технологии Flash, или какого-нибудь другого плагина.>>>",
            "Критика<<<Веб-камеры часто критикуются за то, что с помощью них можно следить за пользователем[4].>>>",
            "Программное обеспечение для работы с веб-камерами:\n<<<Skype, Ekiga — программное обеспечение для видеоконференций через Интернет между компьютерами, а также для использования телефонной связи.\nCheese и Guvcview — программы для фотографирования и видеосъёмки в операционных системах семейства Linux.\nEnable Viacam — эмуляция мыши на основе трекинга головы пользователя компьютерной мыши.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Веб-камера"
    },
    {
        "task": [
            "Основные проблемы в машинном представлении строкового типа:\n<<<строки могут иметь достаточно существенный размер (до нескольких десятков мегабайтов);\nизменяющийся со временем размер — возникают трудности с добавлением и удалением символов.>>>",
            "Преимущества[править | править код]<<<программа в каждый момент времени содержит сведения о размере строки, поэтому операции добавления символов в конец, копирования строки и собственно получения размера строки выполняются достаточно быстро;\nстрока может содержать любые данные;\nвозможно на программном уровне следить за выходом за границы строки при её обработке;\nвозможно быстрое выполнение операции вида «взятие N-ого символа с конца строки».>>>",
            "Недостатки[править | править код]<<<проблемы с хранением и обработкой символов произвольной длины;\nувеличение затрат на хранение строк — значение «длина строки» также занимает место и в случае большого количества строк маленького размера может существенно увеличить требования алгоритма к оперативной памяти;\nограничение максимального размера строки. В современных языках программирования это ограничение скорее теоретическое, так как обычно размер строки хранится в 32-битовом поле, что даёт максимальный размер строки в 4 294 967 295 байт (4 гигабайта);\nпри использовании алфавита с переменным размером символа (например, UTF-8), в размере хранится не количество символов, а именно размер строки в байтах, поэтому количество символов необходимо считать отдельно.>>>",
            "Преимущества[править | править код]<<<отсутствие дополнительной служебной информации о строке (кроме завершающего байта);\nвозможность представления строки без создания отдельного типа данных;\nотсутствие ограничения на максимальный размер строки;\nэкономное использование памяти;\nпростота получения суффикса строки;\nпростота передачи строк в функции (передаётся указатель на первый символ);>>>",
            "Недостатки[править | править код]<<<долгое выполнение операций получения длины и конкатенации строк;\nотсутствие средств контроля за выходом за пределы строки, в случае повреждения завершающего байта возможность повреждения больших областей памяти, что может привести к непредсказуемым последствиям — потере данных, краху программы и даже всей системы;\nневозможность использовать символ завершающего байта в качестве элемента строки.\nневозможность использовать некоторые кодировки с размером символа в несколько байт (например, UTF-16), так как во многих таких символах, например Ā (0x0100), один из байтов равен нулю (в то же время, кодировка UTF-8 свободна от этого недостатка).>>>",
            "Реализация в языках программирования<<<В первых языках программирования вообще не было строкового типа; программист должен был сам строить функции для работы со строками того или другого типа.\nВ Си используются нуль-терминированные строки с полным ручным контролем со стороны программиста.\nВ стандартном Паскале строка выглядит как массив из 256 байтов; первый байт хранил длину строки, в остальных хранится её тело. Таким образом, длина строки не может превышать 255 символов. В Borland Pascal 7.0 также появились строки «а-ля Си» — очевидно, из-за того, что в число поддерживаемых платформ вошла Windows.\nВ Object Pascal и C++ STL строка является «чёрным ящиком», в котором выделение/высвобождение памяти происходит автоматически — без участия программиста. При создании строки память выделяется автоматически; как только на строку не останется ни одной ссылки, память возвращается системе. Преимущество этого метода в том, что программист не задумывается над работой строк. С другой стороны, программист имеет недостаточный контроль над работой программы в критичных к скорости участках; также трудно реализуется передача таких строк в качестве параметра в DLL. Также Object Pascal автоматически следит, чтобы в конце строки был символ с кодом 0. Поэтому если функция требует на входе нуль-терминированную строку, для конвертации надо просто написать PAnsiChar(строковая_переменная) или PWideChar(строковая_переменная) (для Pascal), переменная.c_str() (для Builder/STL).\nВ C# и других языках со сборкой мусора строка является неизменяемым объектом; если строку нужно модифицировать, создаётся другой объект. Этот метод медленный и расходует немало временной памяти, но хорошо сочетается с концепцией сборки мусора. Преимущество этого метода в том, что присваивание происходит быстро и без дублирования строк. Также имеется некоторый ручной контроль над конструированием строк (в Java, например, через классы StringBuffer и StringBuilder) — это позволяет уменьшить количество выделений и высвобождений памяти и, соответственно, увеличить скорость.\nВ некоторых языках (например, Standard ML) кроме этого, есть дополнительный модуль для обеспечения ещё большей эффективности — «подстрока» (SubString). Его использование позволяет выполнять операции над строками без копирования их тел посредством манипулирования индексами начала и конца подстроки; физическое копирование происходит лишь при необходимости преобразовании подстрок в строки.>>>",
            "Простейшие операции со строками\n<<<получение символа по номеру позиции (индексу) — в большинстве языков это тривиальная операция;\nконкатенация (соединение) строк.>>>",
            "Производные операции\n<<<получение подстроки по индексам начала и конца;\nпроверка вхождения одной строки в другую (поиск подстроки в строке);\nпроверка на совпадение строк (с учётом или без учёта регистра символов);\nполучение длины строки;\nзамена подстроки в строке.>>>",
            "Операции при трактовке строк как списков\n<<<свёртка;\nотображение одного списка на другой;\nфильтрация списка по критерию.>>>",
            "Более сложные операции\n<<<нахождение минимальной надстроки, содержащей все указанные строки;\nпоиск в двух массивах строк совпадающих последовательностей (задача о плагиате).>>>",
            "Возможные задачи для строк на естественном языке\n<<<сравнение на близость указанных строк по заданному критерию;\nопределение языка и кодировки текста на основании вероятностей символов и слогов.>>>",
            "До появления стандарта Юникод в 1991 году, один символ обычно кодировался одним байтом из 8 двоичных битов или меньше — 7-битные, 6--битные. 8-битые кодировки позволяли представлять 256 возможных значений. Однако для полноценного представления символов алфавитов нескольких языков (многоязыковых документов, типографских символов — несколько видов кавычек, тире, нескольких видов пробелов и для написания текстов на иероглифических языках — китайском, японском и корейском) 256 символов недостаточно. Для решения этой проблемы применялись разные подходы:\n<<<Переключение языка управляющими кодами. Метод не стандартизирован и лишает текст самостоятельности (то есть последовательность символов без управляющего кода в начале теряет смысл); использовался в некоторых ранних русификациях ZX-Spectrum и БК.\nИспользование двух или более байт для представления каждого символа (UTF-16, UTF-32). Главным недостатком этого метода является потеря совместимости с предыдущими библиотеками для работы с текстом при представлении строки как ASCIIZ. Например, концом строки должен считаться уже не байт со значением 0, а два или четыре подряд идущих нулевых байта, в то время как одиночный байт «0» может встречаться в середине строки, что сбивает библиотеку «с толку».\nИспользование кодировки с переменным размером символа. Например, в UTF-8 часть символов представляется одним байтом, часть двумя, тремя или четырьмя. Этот метод позволяет сохранить частичную совместимость со старыми библиотеками (нет символов 0 внутри строки и поэтому 0 можно использовать как признак конца строки), но приводит к невозможности прямой адресации символа в памяти по номеру его позиции в строке.>>>",
            "Для проверки соответствия всех словоформ при лексическом (семантическом) анализе используются меры схожести лексем:\n<<<Расстояние Дамерау — Левенштейна\nРасстояние Левенштейна\nРасстояние Хэмминга\nСходство Джаро — Винклера>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Строковый_тип"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Текстовые_данные"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Кубит"
    },
    {
        "task": [
            "Окно обычно имеет прямоугольную форму, обычно с обрамлением рамкой и/или цветом фона, отличным от цвета основного экрана. При необходимости окно имеет заголовок (с пояснением функции) и органы управления. Иногда используются различные эффекты для придания ощущения объемности интерфейса, в том числе:\n<<<«тени» — затемнение под окном со сдвигом (как правило, вправо-вниз, предполагая наличие света слева-сверху). В графическом режиме тени также могут отбрасывать другие элементы интерфейса, например курсор мыши;\nсоздание иллюзии выпуклых и вдавленных структур — линий, надписей, пониженных или повышенных областей (например, кнопок), рамок и т. п., линиями повышенной и пониженной яркости и полутоновыми переходами (для имитации криволинейных поверхностей);\nполная или частичная (полу-)прозрачность окна — просвечивание сквозь «подложки» или других окон (возможно только в графическом режиме).>>>",
            "Программы с полной реализацией оконного интерфейса раздельно работают с отдельными подзадачами в разных окнах. Такая программа может одновременно открывать/работать с несколькими документами, помещая их в отдельные субокна (например, многооконный редактор с документом в каждом окне). Организацию этих субокон в подобных программах реализуют несколькими способами:\n<<<однооконный режим (SDI)\nмногооконный режим (MDI, TDI)\nпсевдомногооконный режим (PMDI)>>>",
            "Примеры ОС с оконным интерфейсом[править | править код]<<<8½ и rio для Plan 9\nGEM\nFresco/Berlin\nNEXTSTEP\nAmigaOS#Workbench в AmigaOS\nQuartz для Mac OS X\nX Window System для Unix-подобных ОС\nY Window System\nMicrosoft Windows\nMac OS\nPalm OS\nChrome OS>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Оконный_интерфейс"
    },
    {
        "task": [
            "Говорят, что тип моделирует концепцию (является моделью концепции), если он удовлетворяет её требованиям. Концепция является уточнением другой концепции, если она дополняет последнюю. Требования к концепциям содержат следующую информацию:[4]\n<<<Допустимые выражения (англ. valid expressions) — выражения языка программирования, которые должны успешно компилироваться для типов, моделирующих концепцию.\nАссоциированные типы (associated types) — вспомогательные типы, имеющие некоторое отношение к моделирующему концепцию типу.\nИнварианты (invariants) — такие характеристики типов, которые должны быть постоянно верны во время исполнения. Обычно выражаются в виде предусловий и постусловий. Невыполнение предусловия влечёт непредсказуемость соответствующей операции и может привести к ошибкам.\nГарантии сложности (complexity guarantees) — максимальное время выполнения допустимого выражения или максимальные требования к различным ресурсам в ходе выполнения этого выражения.>>>",
            "Массер и Степанов выделяют следующие этапы в решении задачи по методологии ОП:\n<<<Найти полезный и эффективный алгоритм.\nОпределить обобщённое представление (параметризовать алгоритм, минимизировав требования к обрабатываемым данным).\nОписать набор (минимальных) требований, удовлетворяя которые всё ещё можно получить эффективные алгоритмы.\nСоздать каркас на основе классифицированных требований.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Обобщённое_программирование"
    },
    {
        "task": [
            "Алгоритм шифрования.\n<<<Информация разбивается на блоки одинаковой (фиксированной) длины. Полученные блоки называются входными, так как поступают на вход алгоритма. В случае если длина входного блока меньше, чем размер, который выбранный алгоритм шифрования способен зашифровать единовременно (размер блока), то блок удлиняется каким-либо способом. Как правило, длина блока является степенью двойки, например, составляет 64 бита или 128 бит.>>>",
            "Далее будем рассматривать операции, происходящие только с одним блоком, так как в процессе шифрования с другими блоками выполняются те же самые операции.\n<<<Выбранный блок делится на два подблока одинакового размера — «левый» (\n\n\n\n\nL\n\n0\n\n\n\n\n{\\displaystyle L_{0}}\n\n) и «правый» (\n\n\n\n\nR\n\n0\n\n\n\n\n{\\displaystyle R_{0}}\n\n).\n«Правый подблок» \n\n\n\n\nR\n\n0\n\n\n\n\n{\\displaystyle R_{0}}\n\n изменяется функцией F с использованием раундового ключа \n\n\n\n\nK\n\n0\n\n\n\n\n{\\displaystyle K_{0}}\n\n:>>>",
            "\n\n\n\nx\n=\nF\n(\n\nR\n\n0\n\n\n,\n\nK\n\n0\n\n\n)\n.\n\n\n{\\displaystyle x=F(R_{0},K_{0}).}\n\n<<<Результат складывается по модулю 2 («xor») с «левым подблоком» \n\n\n\n\nL\n\n0\n\n\n\n\n{\\displaystyle L_{0}}\n\n:>>>",
            "\n\n\n\nx\n=\nx\n⊕\n\nL\n\n0\n\n\n.\n\n\n{\\displaystyle x=x\\oplus L_{0}.}\n\n<<<Результат будет использован в следующем раунде в роли «правого подблока» \n\n\n\n\nR\n\n1\n\n\n\n\n{\\displaystyle R_{1}}\n\n:>>>",
            "\n\n\n\n\nR\n\n1\n\n\n=\nx\n.\n\n\n{\\displaystyle R_{1}=x.}\n\n<<<«Правый подблок» \n\n\n\n\nR\n\n0\n\n\n\n\n{\\displaystyle R_{0}}\n\n текущего раунда (в своем не измененном на момент начала раунда виде) будет использован в следующем раунде в роли «левого подблока» \n\n\n\n\nL\n\n1\n\n\n\n\n{\\displaystyle L_{1}}\n\n:>>>",
            "\n\n\n\n\nL\n\n1\n\n\n=\n\nR\n\n0\n\n\n.\n\n\n{\\displaystyle L_{1}=R_{0}.}\n\n<<<По какому-либо математическому правилу вычисляется раундовый ключ \n\n\n\n\nK\n\n1\n\n\n\n\n{\\displaystyle K_{1}}\n\n — ключ, который будет использоваться в следующем раунде.>>>",
            "Алгоритмическое описание[править | править код]<<<Блок открытого текста делится на две равные части: \n\n\n\n(\n\nL\n\n0\n\n\n,\n \n\nR\n\n0\n\n\n)\n\n\n{\\displaystyle (L_{0},\\ R_{0})}\n\n.\nВ каждом раунде вычисляются:>>>",
            "\n\n\n\n\nL\n\ni\n\n\n \n=\n \n\nR\n\ni\n−\n1\n\n\n⊕\nf\n(\n\nL\n\ni\n−\n1\n\n\n,\n\nK\n\ni\n−\n1\n\n\n)\n;\n\n\n{\\displaystyle L_{i}\\ =\\ R_{i-1}\\oplus f(L_{i-1},K_{i-1});}\n\n\n\n\n\n\n\nR\n\ni\n\n\n \n=\n \n\nL\n\ni\n−\n1\n\n\n,\n\n\n{\\displaystyle R_{i}\\ =\\ L_{i-1},}\n\n\nгде:<<<i — номер раунда; \n\n\n\ni\n=\n1\n…\nN\n;\n\n\n{\\displaystyle i=1\\ldots N;}\n\n\nN — количество раундов в выбранном алгоритме шифрования;\n\n\n\n\nf\n\n\n{\\displaystyle f}\n\n — некоторая функция;\n\n\n\n\n\nK\n\ni\n−\n1\n\n\n\n\n{\\displaystyle K_{i-1}}\n\n — ключ i-1-го раунда (раундовый ключ).>>>",
            "Достоинства:\n<<<обратимость алгоритма независимо от используемой функции f;\nвозможность выбора сколь угодно сложной функции f.>>>",
            "Рассмотрим пример. Пусть:\n<<<X — блок данных, поступающий на вход (входной блок);\nA — некоторое инволютивное преобразование (или инволюция) — взаимно-однозначное преобразование, которое является обратным самому себе[3], то есть для каждого (∀) X справедливо выражение:>>>",
            "\n\n\n\nA\nA\nX\n=\n\nA\n\n2\n\n\nX\n=\nX\n,\n∀\nX\n;\n\n\n{\\displaystyle AAX=A^{2}X=X,\\forall X;}\n\n<<<Y — блок данных, получаемый на выходе (результат).>>>",
            "Определим два преобразования:\n<<<\n\n\n\nG\n(\nX\n,\nK\n)\n\n\n{\\displaystyle G(X,K)}\n\n — шифрование данных X с ключом K:>>>",
            "\n\n\n\nG\n(\nX\n,\nK\n)\n=\nG\n(\n(\nL\n,\nR\n)\n,\nK\n)\n=\n(\nL\n⊕\nF\n(\nK\n,\nR\n)\n,\nR\n)\n;\n\n\n{\\displaystyle G(X,K)=G((L,R),K)=(L\\oplus F(K,R),R);}\n\n<<<\n\n\n\nT\n(\nL\n,\nR\n)\n\n\n{\\displaystyle T(L,R)}\n\n — перестановка подблоков L и R:>>>",
            "Введём обозначения:\n<<<однократное применение преобразования G:>>>",
            "\n\n\n\n\n\n\nX\n~\n\n\n\n=\n(\n\n\n\nL\n~\n\n\n\n,\n\n\n\nR\n~\n\n\n\n)\n=\nG\nX\n;\n\n\n{\\displaystyle {\\tilde {X}}=({\\tilde {L}},{\\tilde {R}})=GX;}\n\n<<<двукратное применение преобразования G:>>>",
            "Рассмотрим процесс шифрования. Пусть:\n<<<X — входное значение;\n\n\n\n\n\nG\n\ni\n\n\n\n\n{\\displaystyle G_{i}}\n\n — преобразование с ключом \n\n\n\n\nK\n\ni\n\n\n\n\n{\\displaystyle K_{i}}\n\n;\n\n\n\n\n\nY\n\ni\n\n\n\n\n{\\displaystyle Y_{i}}\n\n — выходное значение, результат i-го раунда.>>>",
            "В своей работе «Криптография и компьютерная безопасность»[1] Хорст Фейстель описывает два блока преобразований (функций \n\n\n\nf\n(\n\nL\n\ni\n\n\n,\n \n\nK\n\ni\n\n\n)\n\n\n{\\displaystyle f(L_{i},\\ K_{i})}\n\n):\n<<<блок подстановок (s-блок, англ. s-box);\nблок перестановок (p-блок, англ. p-box).>>>",
            "Блок подстановок (s-блок, англ. s-box) состоит из следующих частей:\n<<<дешифратор — преобразователь n-разрядного двоичного сигнала в одноразрядный сигнал по основанию \n\n\n\n\n2\n\nn\n\n\n\n\n{\\displaystyle 2^{n}}\n\n;\nсистема коммутаторов — внутренние соединения (всего возможных соединений \n\n\n\n\n2\n\nn\n\n\n!\n\n\n{\\displaystyle 2^{n}!}\n\n);\nшифратор — преобразователь сигнала из одноразрядного \n\n\n\n\n2\n\nn\n\n\n\n\n{\\displaystyle 2^{n}}\n\n-ричного в n-разрядный двоичный.>>>",
            "Достоинства:\n<<<простота аппаратной реализации на современной электронной базе;\nпростота программной реализации в силу того, что значительная часть функций поддерживается на аппаратном уровне в современных компьютерах (например, сложение по модулю 2 («xor»), сложение по модулю \n\n\n\n\n2\n\nn\n\n\n\n\n{\\displaystyle 2^{n}}\n\n, умножение по модулю \n\n\n\n\n2\n\nn\n\n\n\n\n{\\displaystyle 2^{n}}\n\n, и т. д.);\nхорошая изученность алгоритмов, построенных на основе сетей Фейстеля[4].>>>",
            "Недостатки:\n<<<за один раунд шифруется только половина входного блока[5].>>>",
            "При большом размере блоков шифрования (128 бит и более) реализация такой конструкции Фейстеля на 32-разрядных архитектурах может вызвать затруднения, поэтому применяются модифицированные варианты этой конструкции. Обычно используются сети с четырьмя ветвями. На рисунке показаны наиболее распространённые модификации. Также существуют схемы, в которых длины половинок \n\n\n\n\nL\n\n0\n\n\n\n\n{\\displaystyle L_{0}}\n\n и \n\n\n\n\nR\n\n0\n\n\n\n\n{\\displaystyle R_{0}}\n\n не совпадают. Такие сети называются несбалансированными.\n<<<\nМодификации сети Фейстеля\n\n\nТип 1\n\n\n\nТип 2\n\n\n\nТип 3\n\n>>>",
            "Формулы для вычисления значения подблоков на i-м раунде (для раундов c 1-го по 8-й):\n<<<предварительные вычисления:>>>",
            "\n\n\n\n\nC\n\ni\n\n\n=\n(\n(\n\nX\n\ni\n−\n1\n\n\n(\n1\n)\n\n\n+\n\nK\n\ni\n\n\n(\n2\n)\n\n\n)\n⊕\n(\n\nX\n\ni\n−\n1\n\n\n(\n3\n)\n\n\n∗\n\nK\n\ni\n\n\n(\n4\n)\n\n\n)\n+\n(\n(\n\nX\n\ni\n−\n1\n\n\n(\n0\n)\n\n\n∗\n\nK\n\ni\n\n\n(\n1\n)\n\n\n)\n⊕\n(\n\nX\n\ni\n−\n1\n\n\n(\n2\n)\n\n\n+\n\nK\n\ni\n\n\n(\n3\n)\n\n\n)\n)\n∗\n\nK\n\ni\n\n\n(\n5\n)\n\n\n)\n∗\n\nK\n\ni\n\n\n(\n6\n)\n\n\n;\n\n\n{\\displaystyle C_{i}=((X_{i-1}^{(1)}+K_{i}^{(2)})\\oplus (X_{i-1}^{(3)}*K_{i}^{(4)})+((X_{i-1}^{(0)}*K_{i}^{(1)})\\oplus (X_{i-1}^{(2)}+K_{i}^{(3)}))*K_{i}^{(5)})*K_{i}^{(6)};}\n\n<<<финальные вычисления:>>>",
            "Можно заметить, что s- и p-блоки в чистом виде не используются. В качестве основных операций используются:\n<<<умножение по модулю \n\n\n\n\n2\n\n16\n\n\n+\n1\n=\n65537\n\n\n{\\displaystyle 2^{16}+1=65537}\n\n;\nсложение по модулю \n\n\n\n\n2\n\n16\n\n\n=\n65536\n\n\n{\\displaystyle 2^{16}=65536}\n\n.>>>",
            "Функция \n\n\n\nf\n(\n\nL\n\ni\n\n\n,\n\nK\n\ni\n\n\n)\n\n\n{\\displaystyle f(L_{i},K_{i})}\n\n (где:\n<<<\n\n\n\n\nL\n\ni\n\n\n\n\n{\\displaystyle L_{i}}\n\n — 32-разрядный входной блок на i-й итерации;\n\n\n\n\n\nK\n\ni\n\n\n\n\n{\\displaystyle K_{i}}\n\n — 48-разрядный ключ на данной итерации)>>>",
            "в алгоритме DES состоит из следующих операций:\n<<<расширение входного блока L до 48 разрядов (некоторые входные разряды могут повторяться);\nСложение по модулю 2 с ключом \n\n\n\n\nK\n\ni\n\n\n\n\n{\\displaystyle K_{i}}\n\n:>>>",
            "\n\n\n\n\n\n\n\nL\n\ni\n\n\n~\n\n\n\n=\n\nL\n\ni\n\n\n⊕\n\nK\n\ni\n\n\n;\n\n\n{\\displaystyle {\\tilde {L_{i}}}=L_{i}\\oplus K_{i};}\n\n<<<деление результата на 8 блоков длиной по 6 бит каждый:>>>",
            "\n\n\n\n\n\n\n\nL\n\ni\n\n\n~\n\n\n\n=\n{\n\n\n\n\n\nL\n\ni\n\n\n~\n\n\n\n\n(\n0\n)\n\n\n\n\n\n\n\nL\n\ni\n\n\n~\n\n\n\n\n(\n1\n)\n\n\n\n\n\n\n\nL\n\ni\n\n\n~\n\n\n\n\n(\n2\n)\n\n\n\n\n\n\n\nL\n\ni\n\n\n~\n\n\n\n\n(\n3\n)\n\n\n\n\n\n\n\nL\n\ni\n\n\n~\n\n\n\n\n(\n4\n)\n\n\n\n\n\n\n\nL\n\ni\n\n\n~\n\n\n\n\n(\n5\n)\n\n\n\n\n\n\n\nL\n\ni\n\n\n~\n\n\n\n\n(\n6\n)\n\n\n\n\n\n\n\nL\n\ni\n\n\n~\n\n\n\n\n(\n7\n)\n\n\n}\n;\n\n\n{\\displaystyle {\\tilde {L_{i}}}=\\{{\\tilde {L_{i}}}^{(0)}{\\tilde {L_{i}}}^{(1)}{\\tilde {L_{i}}}^{(2)}{\\tilde {L_{i}}}^{(3)}{\\tilde {L_{i}}}^{(4)}{\\tilde {L_{i}}}^{(5)}{\\tilde {L_{i}}}^{(6)}{\\tilde {L_{i}}}^{(7)}\\};}\n\n<<<полученные блоки информации \n\n\n\n\n\n\n\nL\n\ni\n\n\n(\nj\n)\n\n\n~\n\n\n\n\n\n{\\displaystyle {\\tilde {L_{i}^{(j)}}}}\n\n подаются на блоки подстановок, имеющие 6-разрядные входы и 4-разрядные выходы;\nна выходе 4-битные блоки объединяются в 32-битный, который и является результатом функции \n\n\n\nf\n(\n\nL\n\ni\n\n\n,\n\nK\n\ni\n\n\n)\n\n\n{\\displaystyle f(L_{i},K_{i})}\n\n.>>>",
            "Функция \n\n\n\nf\n(\n\nL\n\ni\n\n\n,\n\nK\n\ni\n\n\n)\n\n\n{\\displaystyle f(L_{i},K_{i})}\n\n (где \n\n\n\n\nL\n\ni\n\n\n\n\n{\\displaystyle L_{i}}\n\n и \n\n\n\n\nK\n\ni\n\n\n\n\n{\\displaystyle K_{i}}\n\n — 32-битные числа) вычисляется следующим образом:\n<<<складываются \n\n\n\n\nL\n\ni\n\n\n\n\n{\\displaystyle L_{i}}\n\n и \n\n\n\n\nK\n\ni\n\n\n\n\n{\\displaystyle K_{i}}\n\n по модулю \n\n\n\n\n2\n\n32\n\n\n\n\n{\\displaystyle 2^{32}}\n\n:>>>",
            "\n\n\n\n\n\n\n\nL\n\ni\n\n\n~\n\n\n\n=\n(\n\nL\n\ni\n\n\n+\n\nK\n\ni\n\n\n)\n \n\nmod\n\n \n\n\n\n2\n\n32\n\n\n;\n\n\n{\\displaystyle {\\tilde {L_{i}}}=(L_{i}+K_{i})\\ {\\bmod {\\ }}2^{32};}\n\n<<<результат разбивается на 8 4-битных блоков, которые подаются на вход 4-разрядных s-блоков (которые могут быть различными);\nвыходы s-блоков объединяют в 32-битное число, которое затем сдвигается циклически на 11 битов влево;\nполученный результат является выходом функции.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Сеть_Фейстеля"
    },
    {
        "task": [
            "Направления компьютерной лингвистики<<<Обработка естественного языка (англ. natural language processing). Уровни обработки и анализа текста: синтаксический, морфологический, семантический.>>>",
            "К задачам и направлениям компьютерной лингвистики относят:\n<<<Корпусную лингвистику, создание и использование электронных корпусов текстов.\nСоздание электронных словарей, тезаурусов, онтологий. Например, Lingvo. Словари используют, например, для автоматического перевода, проверки орфографии.\nАвтоматический перевод текстов. Среди русских переводчиков популярным является Промт. Среди бесплатных известен переводчик Google Translate.\nАвтоматическое извлечение фактов из текста (извлечение информации) (англ. fact extraction, text mining)\nАвтореферирование (англ. automatic text summarization). Эта функция включена, например, в Microsoft Word.\nПостроение систем управления знаниями. См. Экспертные системы.\nСоздание вопросно-ответных систем (англ.  question answering systems).>>>",
            "Корпусную лингвистику, создание и использование электронных корпусов текстов.\nСоздание электронных словарей, тезаурусов, онтологий. Например, Lingvo. Словари используют, например, для автоматического перевода, проверки орфографии.\nАвтоматический перевод текстов. Среди русских переводчиков популярным является Промт. Среди бесплатных известен переводчик Google Translate.\nАвтоматическое извлечение фактов из текста (извлечение информации) (англ. fact extraction, text mining)\nАвтореферирование (англ. automatic text summarization). Эта функция включена, например, в Microsoft Word.\nПостроение систем управления знаниями. См. Экспертные системы.\nСоздание вопросно-ответных систем (англ.  question answering systems).<<<Оптическое распознавание символов (англ. OCR). Например, с помощью программы FineReader\nАвтоматическое распознавание речи (англ. ASR).\nАвтоматический синтез речи.>>>",
            "Крупные ассоциации и конференции<<<Ассоциация по компьютерной лингвистике (ACL): подразделяется на две ветви: Европейскую и Североамериканскую[1].\nМеждународная конференция по компьютерной лингвистике «Диалог»[2].\nМеждународная конференция по компьютерной лингвистике и интеллектуальной обработке текста[англ.] (CICLing).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Компьютерная_лингвистика"
    },
    {
        "task": [
            "Первоначальное состояние шифровального ключа «Энигмы» включает следующие параметры.\n<<<Расположение роторов: выбор роторов и их расположение.\nПервоначальные позиции роторов: выбранные оператором, различные для каждого сообщения.\nНастройка колец: позиция алфавитного кольца, совпадающая с роторной схемой.\nНастройки штепселей: соединения штепселей на коммутационной панели.>>>",
            "«Энигма» внесла существенное влияние в сферу изобретения шифровальных машин вообще и роторных машин в частности[45]:\n<<<«Тайпекс» («Typex») была разработана в Великобритании по чертежам «Энигмы» — она даже содержит детали, изъятые из «Энигмы»[46].\n«GREEN» — японский клон «Энигмы», малоиспользуемая машина, содержащая четыре ротора, расположенных вертикально[45].\nВ США криптоаналитик Уильям Фридман изобрёл «M-325», шифровальную машину, подобную «Энигме» в логических операциях, хотя отличную по конструкции.\nУникальная роторная машина «Cryptograph» была изобретена в 2002 году голландским криптоаналитиком Татьяной ван Варк (нидерл. Tatjana van Vark). Она базируется на принципе работы «Энигмы», но имеет ряд существенных отличий — например, увеличенное число роторов и наличие «переключателя супершифрования». Татьяна ван Варк не раскрывает деталей устройства машины, обещая это сделать только в том случае, если кто-либо расшифрует закодированное с помощью этой машины послание[47].>>>",
            "В кино[править | править код]<<<«Энигма» — британский фильм 1982 года режиссёра Жанно Шварца о немецком диссиденте, пытающемся выкрасть из советского посольства очень необходимую американцам шифровальную машину — «Энигму».\n«Энигма» (другое название — «Код „Энигма“») — фильм 2001 года режиссёра Майкла Эптида, рассказывающий о вымышленном английском математике Томе Джерико, который занимается расшифровкой «Энигмы» во время Второй мировой войны. Действия происходят в Блетчли-парке — штабе главного шифровального подразделения Великобритании.\n«Игра в имитацию» — британо-американский фильм 2014 года, драма о британском криптографе военного времени Алане Тьюринге, который обеспечил оперативное расшифровывание кода «Энигмы» во время Второй мировой войны. Основан на реальных событиях. Фильм получил множество наград, включая «Оскар» за лучший адаптированный сценарий.\n«U-571 (фильм)» — фильм 2000 года режиссёра Джонатана Мостоу об американской военной подлодке, в котором рассказывается о мужестве военных подводников, получивших приказ захватить немецкую подводную лодку с находившейся на её борту шифровальной машиной «Энигма», но выполнить это задание и вернуться живыми оказалось совершенно непросто.>>>",
            "В литературе[править | править код]<<<«Энигма» — шпионский детектив Р. Харриса о борьбе за обладание секретом немецкой шифровальной машины «Энигма».\n«Криптономикон» — Нил Стивенсон.\n«Дождь забвения» — научно-фантастический роман Аластера Рейнольдса, в котором люди из будущего попав в параллельный мир используют «Энигму».>>>",
            "Видео<<< Как работает Энигма? (русские субтитры)>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Энигма"
    },
    {
        "task": [
            "\n\n\n\nF\n(\n\nx\n\ni\n\n\n)\n=\n\ny\n\ni\n\n\n,\n\ni\n=\n1\n,\n…\n,\nN\n.\n\n\n{\\displaystyle F(x_{i})=y_{i},\\quad i=1,\\ldots ,N.}\n\n<<<Точки \n\n\n\n\nx\n\ni\n\n\n\n\n{\\displaystyle x_{i}}\n\n называют узлами интерполяции, а их совокупность — интерполяционной сеткой.\nПары \n\n\n\n(\n\nx\n\ni\n\n\n,\n\ny\n\ni\n\n\n)\n\n\n{\\displaystyle (x_{i},y_{i})}\n\n называют точками данных или базовыми точками.\nРазность между «соседними» значениями \n\n\n\nΔ\n\nx\n\ni\n\n\n=\n\nx\n\ni\n\n\n−\n\nx\n\ni\n−\n1\n\n\n\n\n{\\displaystyle \\Delta x_{i}=x_{i}-x_{i-1}}\n\n — шагом интерполяционной сетки. Он может быть как переменным, так и постоянным.\nФункцию \n\n\n\nF\n(\nx\n)\n\n\n{\\displaystyle F(x)}\n\n — интерполирующей функцией или интерполянтом.>>>",
            "На практике чаще всего применяют интерполяцию многочленами. Это связано прежде всего с тем, что многочлены легко вычислять, легко аналитически находить их производные и множество многочленов плотно в пространстве непрерывных функций (теорема Вейерштрасса).\n<<<Линейная интерполяция\nИнтерполяционная формула Ньютона\nМетод конечных разностей\nИМН-1 и ИМН-2\nМногочлен Лагранжа (интерполяционный многочлен)\nСхема Эйткена\nСплайн-функция\nКубический сплайн>>>",
            "Обратное интерполирование (вычисление x при заданной y)[править | править код]<<<Полином Лагранжа\nОбратное интерполирование по формуле Ньютона\nОбратное интерполирование по формуле Гаусса>>>",
            "Интерполяция функции нескольких переменных[править | править код]<<<Билинейная интерполяция\nБикубическая интерполяция>>>",
            "Другие способы интерполяции[править | править код]<<<Рациональная интерполяция\nТригонометрическая интерполяция>>>",
            "Смежные концепции<<<Экстраполяция — методы нахождения точек за пределами заданного интервала (продление кривой)\nРетрополяция — методы нахождения по известным значениям переменной её неизвестных значений в начале динамического ряда.\nАппроксимация — методы построения приближённых кривых>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Интерполяция"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Компьютер_общего_назначения"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Фишинг"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Клиент_(информатика)"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Модульное_программирование"
    },
    {
        "task": [
            "Замечания:<<<Густые керамические смеси тоже применяются в качестве самоотверждаемого материала для 3D-печати крупных архитектурных моделей[5].\nБиопринтеры — экспериментальные установки, в которых печать 3D-структуры будущего объекта (органа для пересадки) производится каплями, содержащими живые клетки[6]. Далее деление, рост и модификации клеток обеспечивает окончательное формирование объекта. В 2013 году китайские учёные начали печатать уши, печень и почки — из живой ткани. Исследователи Ханчжоу Dianzi университета разработали 3D-биопринтер, названный «Regenovo». Сюй Минген, разработчик Regenovo, прогнозировал тогда, что полностью функциональные печатные органы, вероятно, будут созданы в течение ближайших десяти-двадцати лет[7][8]. В том же году исследователи из университета Хассельт в Бельгии успешно напечатал новую челюсть для 83-летней бельгийки[9]. В начале 2016 года вице-президент центра «Сколково» Кирилл Каем сообщил: «щитовидная железа, напечатанная на российском 3D-принтере…, имплантирована и успешно функционирует в организме лабораторной мыши… Они собираются печатать и другие органы, идет речь про почку, про печень. Пока все это лабораторный уровень, но это позволит и саму машину развивать»[10].>>>",
            "Также применяются различные технологии позиционирования печатающей головки:\n<<<Декартова, когда в конструкции используются три взаимно-перпендикулярные направляющие, вдоль каждой из которых двигается либо печатающая головка, либо основание модели.\nПри помощи трёх параллелограммов, когда три радиально-симметрично расположенных двигателя согласованно смещают основания трёх параллелограммов, прикреплённых к печатающей головке (см. статью Дельта-робот).\nАвтономная, когда печатающая головка размещена на собственном шасси, и эта конструкция передвигается целиком за счёт какого-либо движителя, приводящего шасси в движение[11].\n3D-принтер с вращающимся столиком — использование на одной (или нескольких) осях вращения вместо линейного передвижения.\nРучная, когда печатающая головка выполнена в виде ручки/карандаша, и пользователь сам подносит её в то место пространства, куда считает нужным добавить выделяемый из наконечника быстро затвердевающий материал. Назван такой прибор «3D-ручка», и к 3D-принтерам может быть отнесён с известной натяжкой. Существуют варианты с использованием термополимера, застывающего при охлаждении, и с использованием фотополимера, отверждаемого ультрафиолетом[12].>>>",
            "Модели сделаны при использовании 3D-ручки<<<Для быстрого прототипирования, то есть быстрого изготовления прототипов моделей и объектов для дальнейшей доводки. Уже на этапе проектирования можно кардинальным образом изменить конструкцию узла или объекта в целом. В инженерии такой подход способен существенно снизить затраты в производстве и освоении новой продукции.\nДля быстрого производства — изготовление готовых деталей из материалов, поддерживаемых 3D-принтерами. Это отличное решение для мелкосерийного производства.\nИзготовление моделей и форм для литейного производства.\nКонструкция из прозрачного материала позволяет увидеть работу механизма «изнутри», что в частности было использовано инженерами Porsche при изучении тока масла в трансмиссии автомобиля ещё при разработке.\nПроизводство различных мелочей в домашних условиях.\nПроизводство сложных, массивных, прочных и недорогих систем. Например, беспилотный самолёт Polecat[англ.] компании Lockheed, большая часть деталей которого была изготовлена методом скоростной трёхмерной печати.\nИзготовление лекарств, протезов и органов.\nДля строительства зданий и сооружений[13][14].\nДля создания компонентов оружия (Defense Distributed). Существуют эксперименты по печати оружия целиком[15].\nПроизводства корпусов экспериментальной техники (автомобили[16], телефоны, радиоэлектронное оборудование)\nПищевое производство[17].>>>",
            "Наиболее распространённые расширения файлов, применяемых в 3D-печати[40]:\n<<<OBJ — открытый формат файла, поддерживаемый большинством программ 3D-моделирования и принтеров для 3D-печати;\nSTL — используется для бесцветной и одноцветной печати[3];\nVRML (или WRL) — применяется для цветной 3D-печати, поддерживает использование текстур, совместим с программами 3D Builder и Print 3D, входящими в штатный набор программ Windows 10;\nX3G — тип файла для 3D-принтеров MakerBot;\nPLY — формат файлов, используемых в 3D-сканировании;\nFBX — формат файлов, разработанный компанией Autodesk, применяется для обмена данными между программами 3ds Max, Autodesk Maya и другими программными продуктами данной компании;\nGCODE — формат файлов, используемый многими 3D-принтерами для управления процессом печати. Файлы GCODE могут быть открыты с помощью различных программ 3D-печати, например, Simplify3D, GCode Viewer, а также с помощью текстового редактора, поскольку их содержимое представляет собой обычный текст.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/3D-принтер"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Блок_управления_памятью"
    },
    {
        "task": [
            "где \n\n\n\nf\n\n\n{\\displaystyle f}\n\n известная функция, \n\n\n\nu\n\n\n{\\displaystyle u}\n\n неизвестная функция от \n\n\n\nx\n\n\n{\\displaystyle x}\n\n. \n\n\n\n\nu\n″\n\n\n\n{\\displaystyle u''}\n\n вторая производная от \n\n\n\nu\n\n\n{\\displaystyle u}\n\n по \n\n\n\nx\n\n\n{\\displaystyle x}\n\n.\nРешение поставленной задачи методом конечных элементов разобьём на 2 этапа:\n<<<Переформулируем граничную задачу в так называемую слабую (вариационную) форму. На этом этапе вычислений почти не требуется.\nНа втором этапе разобьём слабую форму на конечные отрезки-элементы.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Метод_конечных_элементов"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Специализированная_вычислительная_машина"
    },
    {
        "task": [
            "Пример: необходимо перевести с банковского счёта номер 5 на счёт номер 7 сумму в 10 денежных единиц. Этого можно достичь, к примеру, приведённой последовательностью действий:\n<<<Прочесть баланс на счету номер 5.\nУменьшить баланс на 10 денежных единиц.\nСохранить новый баланс счёта номер 5.\nПрочесть баланс на счету номер 7.\nУвеличить баланс на 10 денежных единиц.\nСохранить новый баланс счёта номер 7.>>>",
            "Уровни описаны в порядке увеличения изолированности транзакций и, соответственно, надёжности работы с данными.\n<<<0 — Чтение незафиксированных данных (Read Uncommitted) — чтение незафиксированных изменений как своей транзакции, так и параллельных транзакций. Нет гарантии, что данные, изменённые другими транзакциями, не будут в любой момент изменены в результате их отката, поэтому такое чтение является потенциальным источником ошибок. Невозможны потерянные изменения (lost changes), возможны грязное чтение (dirty read), неповторяемое чтение и фантомы.\n1 — Чтение зафиксированных данных (Read Committed) — чтение всех изменений своей транзакции и зафиксированных изменений параллельных транзакций. Потерянные изменения и грязное чтение не допускается, возможны неповторяемое чтение и фантомы.\n2 — Повторяемое чтение (Repeatable Read, Snapshot) — чтение всех изменений своей транзакции, любые изменения, внесённые параллельными транзакциями после начала своей, недоступны. Потерянные изменения, грязное и неповторяемое чтение невозможны, возможны фантомы.\n3 — Сериализуемый (Serializable) — сериализуемые транзакции. Результат параллельного выполнения сериализуемой транзакции с другими транзакциями должен быть логически эквивалентен результату их какого-либо последовательного выполнения. Проблемы синхронизации не возникают.>>>",
            "Первые коммерческие СУБД (к примеру, IBM DB2), пользовались исключительно блокировкой доступа к данным для обеспечения свойств ACID. Но большое количество блокировок приводит к существенному уменьшению производительности. Есть два популярных семейства решений этой проблемы, которые снижают количество блокировок:\n<<<журнализация изменений (write ahead logging, WAL);\nмеханизм теневых страниц (shadow paging)[3].>>>",
            "Дальнейшее развитие технологий управления базами данных привело к появлению безблокировочных технологий. Идея контроля над параллельным доступом с помощью временных меток (timestamp-based concurrency control) была развита и привела к появлению многоверсионной архитектуры MVCC. Эти технологии не нуждаются ни в журнализации изменений, ни в теневых страницах. Архитектура, реализованная в Oracle 7.х и выше, записывает старые версии страниц в специальный сегмент отката, но они все ещё доступны для чтения. Если транзакция при чтении попадает на страницу, временная метка которой новее начала чтения, данные берутся из сегмента отката (то есть используется «старая» версия). Для поддержки такой работы ведётся журнал транзакций, но в отличие от «упреждающей журнализации», он не содержит данных. Работа с ним состоит из трёх логических шагов:\n<<<Записать намерение произвести некоторые операции\nВыполнить задание, копируя оригиналы изменяемых страниц в сегмент отката\nЗаписать, что всё сделано без ошибок>>>",
            "Журнал транзакций в сочетании с сегментом отката (область, в которой хранится копия всех изменяемых в ходе транзакции данных) гарантирует целостность данных. В случае сбоя запускается процедура восстановления, которая просматривает отдельные его записи следующим образом:\n<<<Если повреждена запись, то сбой произошёл во время проставления отметки в журнале. Значит, ничего важного не потерялось, игнорируем эту ошибку.\nЕсли все записи помечены как успешно выполненные, то сбой произошёл между транзакциями, здесь также нет потерь.\nЕсли в журнале есть незавершённая транзакция, то сбой произошёл во время записи на диск. В этом случае мы восстанавливаем старую версию данных из сегмента отката.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Транзакция_(информатика)"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Функция_(программирование)"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Одновременная_многопоточность"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Динамически_подключаемая_библиотека"
    },
    {
        "task": [
            "Еще один метод решения ЛП - использование алгоритма Зейделя:\n<<<Дана ЛП в канонической форме с \n\n\n\nd\n\n\n{\\displaystyle d}\n\n переменными и \n\n\n\nm\n\n\n{\\displaystyle m}\n\n ограничениями, составляющими множество \n\n\n\nH\n\n\n{\\displaystyle H}\n\n.\nЕсли \n\n\n\nd\n=\n1\n\n\n{\\displaystyle d=1}\n\n или \n\n\n\nm\n=\n0\n\n\n{\\displaystyle m=0}\n\n, выведи оптимальное базисное решение \n\n\n\nH\n\n\n{\\displaystyle H}\n\n.\nИначе выбери случайное ограничение \n\n\n\nh\n∈\nH\n\n\n{\\displaystyle h\\in H}\n\n и рекурсивно рассчитай оптимальное базисное решение для \n\n\n\nH\n∖\n{\nh\n}\n\n\n{\\displaystyle H\\setminus \\{h\\}}\n\n.\nЕсли оптимальное базисное решение для \n\n\n\nH\n∖\n{\nh\n}\n\n\n{\\displaystyle H\\setminus \\{h\\}}\n\n не нарушает ограничение \n\n\n\nh\n\n\n{\\displaystyle h}\n\n, верни его.\nИначе рассчитай пересечение полиэдра ЛП с гиперплоскостью \n\n\n\nh\n\n\n{\\displaystyle h}\n\n и рекурсивно реши получившуюся ЛП с \n\n\n\nd\n−\n1\n\n\n{\\displaystyle d-1}\n\n переменной.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Линейное_программирование"
    },
    {
        "task": [
            "Задача анализа главных компонент имеет, как минимум, четыре базовые версии:\n<<<аппроксимировать данные линейными многообразиями меньшей размерности;\nнайти подпространства меньшей размерности, в ортогональной проекции на которые разброс данных (то есть среднеквадратичное отклонение от среднего значения) максимален;\nнайти подпространства меньшей размерности, в ортогональной проекции на которые среднеквадратичное расстояние между точками максимально;\nдля данной многомерной случайной величины построить такое ортогональное преобразование координат, в результате которого корреляции между отдельными координатами обратятся в нуль.>>>",
            "Векторы главных компонент могут быть найдены как решения однотипных задач оптимизации:\n<<<Централизуются данные (вычитанием среднего): \n\n\n\n\nx\n\ni\n\n\n:=\n\nx\n\ni\n\n\n−\n\n\nX\n¯\n\n\n\n\n{\\displaystyle x_{i}:=x_{i}-{\\overline {X}}}\n\n. Теперь \n\n\n\n\n∑\n\ni\n=\n1\n\n\nm\n\n\n\nx\n\ni\n\n\n=\n0\n\n\n{\\displaystyle \\sum _{i=1}^{m}x_{i}=0}\n\n;\nОтыскивается первая главная компонента как решение задачи:\n\n\n\n\n\na\n\n1\n\n\n=\n\n\nargmin\n\n‖\n\na\n\n1\n\n\n‖\n=\n1\n\n\n\n\n(\n\n\n∑\n\ni\n=\n1\n\n\nm\n\n\n‖\n\nx\n\ni\n\n\n−\n\na\n\n1\n\n\n(\n\na\n\n1\n\n\n,\n\nx\n\ni\n\n\n)\n\n‖\n\n2\n\n\n\n)\n\n\n\n{\\displaystyle a_{1}={\\underset {\\Vert a_{1}\\Vert =1}{\\operatorname {argmin} }}\\left(\\sum _{i=1}^{m}\\Vert x_{i}-a_{1}(a_{1},x_{i})\\Vert ^{2}\\right)}\n\n.\nесли решение не единственно, то осуществляется выбор одного из них.\nИз данных вычитается проекция на первую главную компоненту:\n\n\n\n\n\nx\n\ni\n\n\n:=\n\nx\n\ni\n\n\n−\n\na\n\n1\n\n\n\n(\n\n\na\n\n1\n\n\n,\n\nx\n\ni\n\n\n\n)\n\n\n\n{\\displaystyle x_{i}:=x_{i}-a_{1}\\left(a_{1},x_{i}\\right)}\n\n;\nОтыскивается вторая главная компонента как решение задачи:\n\n\n\n\n\na\n\n2\n\n\n=\n\n\nargmin\n\n‖\n\na\n\n2\n\n\n‖\n=\n1\n\n\n\n\n(\n\n\n∑\n\ni\n=\n1\n\n\nm\n\n\n‖\n\nx\n\ni\n\n\n−\n\na\n\n2\n\n\n(\n\na\n\n2\n\n\n,\n\nx\n\ni\n\n\n)\n\n‖\n\n2\n\n\n\n)\n\n\n\n{\\displaystyle a_{2}={\\underset {\\Vert a_{2}\\Vert =1}{\\operatorname {argmin} }}\\left(\\sum _{i=1}^{m}\\Vert x_{i}-a_{2}(a_{2},x_{i})\\Vert ^{2}\\right)}\n\n.\nЕсли решение не единственно, то выбирается одно из них.>>>",
            "Пусть нам дан центрированный набор векторов данных \n\n\n\n\nx\n\ni\n\n\n∈\n\n\nR\n\n\nn\n\n\n\n(\ni\n=\n1\n,\n.\n.\n.\n,\nm\n)\n\n\n{\\displaystyle x_{i}\\in \\mathbb {R} ^{n}\\;(i=1,...,m)}\n\n (среднее арифметическое значение \n\n\n\n\nx\n\ni\n\n\n\n\n{\\displaystyle x_{i}}\n\n равно нулю). Задача — найти такое ортогональное преобразование в новую систему координат, для которого были бы верны следующие условия:\n<<<Выборочная дисперсия данных вдоль первой координаты максимальна (эту координату называют первой главной компонентой);\nВыборочная дисперсия данных вдоль второй координаты максимальна при условии ортогональности первой координате (вторая главная компонента);\n…\nВыборочная дисперсия данных вдоль значений \n\n\n\nk\n\n\n{\\displaystyle k}\n\n-ой координаты максимальна при условии ортогональности первым \n\n\n\nk\n−\n1\n\n\n{\\displaystyle k-1}\n\n координатам;\n…>>>",
            "В статистике при использовании метода главных компонент используют несколько специальных терминов.\n<<<Матрица данных — \n\n\n\n\nX\n\n=\n{\n\nx\n\n1\n\n\n,\n.\n.\n.\n\nx\n\nm\n\n\n\n}\n\nT\n\n\n\n\n{\\displaystyle \\mathbf {X} =\\{x_{1},...x_{m}\\}^{T}}\n\n; каждая строка — вектор предобработанных данных (центрированных и правильно нормированных), число строк — \n\n\n\nm\n\n\n{\\displaystyle m}\n\n (количество векторов данных), число столбцов — \n\n\n\nn\n\n\n{\\displaystyle n}\n\n (размерность пространства данных);\nМатрица нагрузок (англ. loadings) — \n\n\n\n\nP\n\n=\n{\n\na\n\n1\n\n\n,\n.\n.\n.\n\na\n\nk\n\n\n}\n\n\n{\\displaystyle \\mathbf {P} =\\{a_{1},...a_{k}\\}}\n\n; каждый столбец — вектор главных компонент, число строк — \n\n\n\nn\n\n\n{\\displaystyle n}\n\n (размерность пространства данных), число столбцов — \n\n\n\nk\n\n\n{\\displaystyle k}\n\n (количество векторов главных компонент, выбранных для проецирования);\nМатрица счетов (англ. scores) — \n\n\n\n\nT\n\n=\n[\n\nt\n\ni\nj\n\n\n]\n;\n\n\nt\n\ni\nj\n\n\n=\n(\n\nx\n\ni\n\n\n,\n\na\n\nj\n\n\n)\n\n\n{\\displaystyle \\mathbf {T} =[t_{ij}];\\;t_{ij}=(x_{i},a_{j})}\n\n; каждая строка — проекция вектора данных на \n\n\n\nk\n\n\n{\\displaystyle k}\n\n главных компонент; число строк — \n\n\n\nm\n\n\n{\\displaystyle m}\n\n (количество векторов данных), число столбцов — \n\n\n\nk\n\n\n{\\displaystyle k}\n\n (количество векторов главных компонент, выбранных для проецирования);\nМатрица \n\n\n\nZ\n\n\n{\\displaystyle Z}\n\n-счетов (англ. \n\n\n\nZ\n\n\n{\\displaystyle Z}\n\n-scores) — \n\n\n\n\nZ\n\n=\n[\n\nz\n\ni\nj\n\n\n]\n;\n\n\nz\n\ni\nj\n\n\n=\n\n\n\n(\n\nx\n\ni\n\n\n,\n\na\n\nj\n\n\n)\n\n\n\nλ\n\nj\n\n\n\n\n\n\n\n{\\displaystyle \\mathbf {Z} =[z_{ij}];\\;z_{ij}={\\frac {(x_{i},a_{j})}{\\sqrt {\\lambda _{j}}}}}\n\n; каждая строка — проекция вектора данных на \n\n\n\nk\n\n\n{\\displaystyle k}\n\n главных компонент, нормированная на единичную выборочную дисперсию; число строк — \n\n\n\nm\n\n\n{\\displaystyle m}\n\n (количество векторов данных), число столбцов — \n\n\n\nk\n\n\n{\\displaystyle k}\n\n (количество векторов главных компонент, выбранных для проецирования);\nМатрица ошибок (или остатков) (англ. errors или residuals) — \n\n\n\n\nE\n\n=\n\nX\n\n−\n\nT\n\n\n\nP\n\n\nT\n\n\n\n\n{\\displaystyle \\mathbf {E} =\\mathbf {X} -\\mathbf {T} \\mathbf {P} ^{T}}\n\n.\nОсновная формула: \n\n\n\n\nX\n\n=\n\nT\n\n\n\nP\n\n\nT\n\n\n+\n\nE\n\n\n\n{\\displaystyle \\mathbf {X} =\\mathbf {T} \\mathbf {P} ^{T}+\\mathbf {E} }\n\n.>>>",
            "Первым выбором в визуализации множества данных является ортогональное проецирование на плоскость первых двух главных компонент (или 3-мерное пространство первых трёх главных компонент). Плоскость проецирования является по сути плоским двумерным «экраном», расположенным таким образом, чтобы обеспечить «картинку» данных с наименьшими искажениями. Такая проекция будет оптимальна (среди всех ортогональных проекций на разные двумерные экраны) в трёх отношениях:\n<<<Минимальна сумма квадратов расстояний от точек данных до проекций на плоскость первых главных компонент, то есть экран расположен максимально близко по отношению к облаку точек.\nМинимальна сумма искажений квадратов расстояний между всеми парами точек из облака данных после проецирования точек на плоскость. (Это означает, что максимальна сумма квадратов расстояний между проекциями.)\nМинимальна сумма искажений квадратов расстояний между всеми точками данных и их «центром тяжести». (Это означает, что максимальна сумма квадратов расстояний между проекциями и их центром тяжести.)>>>",
            "В социологии метод необходим для решения первых двух основных задач[25]:\n<<<анализ данных (описание результатов опросов или других исследований, представленных в виде массивов числовых данных);\nописание социальных явлений (построение моделей явлений, в том числе и математических моделей).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Метод_главных_компонент"
    },
    {
        "task": [
            "Сетевой уровень модели OSI может быть как с установкой соединения, так и без него. Для сравнения — Межсетевой уровень (англ. internet) стека протоколов Модели DoD (Модель TCP/IP) поддерживает только протокол IP, который является протоколом без установки соединения; протоколы с установкой соединения находятся на следующих уровнях этой модели.<<<Присвоение адреса сетевому узлу>>>",
            "Каждый хост в сети должен иметь уникальный адрес, который определяет, где он находится. Этот адрес обычно назначается из иерархической системы. В Интернете адреса известны как адреса протокола IP.<<<Продвижение данных>>>",
            "Протоколы<<<IPv4/IPv6, Internet Protocol\nDVMRP, Distance Vector Multicast Routing Protocol\nICMP, Internet Control Message Protocol\nIGMP, Internet Group Management Protocol\nPIM-SM, Protocol Independent Multicast Sparse Mode\nIPsec, Internet Protocol Security\nIPX, Internetwork Packet Exchange\nRIP, Routing Information Protocol\nDDP, Datagram Delivery Protocol>>>",
            "IPv4/IPv6, Internet Protocol\nDVMRP, Distance Vector Multicast Routing Protocol\nICMP, Internet Control Message Protocol\nIGMP, Internet Group Management Protocol\nPIM-SM, Protocol Independent Multicast Sparse Mode\nIPsec, Internet Protocol Security\nIPX, Internetwork Packet Exchange\nRIP, Routing Information Protocol\nDDP, Datagram Delivery Protocol<<<>>>",
            "Источники<<<RFC 1122\nRFC 3439\nComputer Networks, Fourth Edition, Andrew S.Tanenbaum, Prentice Hall, ISBN 0130661023.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Протоколы_сетевого_уровня"
    },
    {
        "task": [
            "Одной из самых известных является методика Ross N. Williams[25]. В ней используются следующие параметры:\n<<<Название алгоритма (name);>>>",
            "Название алгоритма (name);<<<Степень порождающего контрольную сумму многочлена (width);>>>",
            "Степень порождающего контрольную сумму многочлена (width);<<<Сам производящий полином (poly). Для того, чтобы записать его в виде значения, его сначала записывают как битовую последовательность, при этом старший бит опускается — он всегда равен 1. К примеру, многочлен \n\n\n\n\nx\n\n8\n\n\n+\n\nx\n\n4\n\n\n+\n1\n\n\n{\\displaystyle x^{8}+x^{4}+1}\n\n в данной нотации будет записан числом \n\n\n\n\n00010001\n\n2\n\n\n\n\n{\\displaystyle 00010001_{2}}\n\n. Для удобства полученное двоичное представление записывают в шестнадцатеричной форме. Для нашего случая оно будет равно \n\n\n\n\n11\n\nh\n\n\n\n\n{\\displaystyle 11_{h}}\n\n или 0x11;>>>",
            "Сам производящий полином (poly). Для того, чтобы записать его в виде значения, его сначала записывают как битовую последовательность, при этом старший бит опускается — он всегда равен 1. К примеру, многочлен \n\n\n\n\nx\n\n8\n\n\n+\n\nx\n\n4\n\n\n+\n1\n\n\n{\\displaystyle x^{8}+x^{4}+1}\n\n в данной нотации будет записан числом \n\n\n\n\n00010001\n\n2\n\n\n\n\n{\\displaystyle 00010001_{2}}\n\n. Для удобства полученное двоичное представление записывают в шестнадцатеричной форме. Для нашего случая оно будет равно \n\n\n\n\n11\n\nh\n\n\n\n\n{\\displaystyle 11_{h}}\n\n или 0x11;<<<Стартовые данные (init), то есть значения регистров на момент начала вычислений;>>>",
            "Стартовые данные (init), то есть значения регистров на момент начала вычислений;<<<Флаг (RefIn), указывающий на начало и направление вычислений, для обнаружения пакетов ошибок должно соответствовать порядку передачи в канале[англ.]. Существует два варианта: False — начиная со старшего значащего бита (MSB-first) или True — с младшего (LSB-first);>>>",
            "Флаг (RefIn), указывающий на начало и направление вычислений, для обнаружения пакетов ошибок должно соответствовать порядку передачи в канале[англ.]. Существует два варианта: False — начиная со старшего значащего бита (MSB-first) или True — с младшего (LSB-first);<<<Флаг (RefOut), определяющий, инвертируется ли порядок битов регистра при входе на элемент XOR;>>>",
            "Флаг (RefOut), определяющий, инвертируется ли порядок битов регистра при входе на элемент XOR;<<<Число (XorOut), с которым складывается по модулю 2 полученный результат;>>>",
            "Число (XorOut), с которым складывается по модулю 2 полученный результат;<<<Значение CRC (check) для строки «123456789» .>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Циклический_избыточный_код"
    },
    {
        "task": [
            "Основные применения[править | править код]<<<беспроводные TDMA-сети, Wi-Fi, WiMAX;\nканальная коммутация в PDH и SONET/SDH;\nпакетная коммутация в ATM, Frame Relay, Ethernet, FDDI;\nкоммутация в телефонных сетях;\nпоследовательные шины: PCIe, USB.>>>",
            "Основные применения[править | править код]<<<сети коммутации пакетов, в том числе сети с быстрой коммутацией пакетов.>>>",
            "См. также[править | править код]<<<английская статья Statistical time division multiplexing.>>>",
            "Основные применения[править | править код]<<<городские сети передачи данных\nмагистральные сети передачи данных>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Мультиплексирование"
    },
    {
        "task": [
            "Альтернативные варианты<<<NTVDM — Свободная реализация NTVDM для 64 битных версий Windows на основе ReactOS, отличается очень простое использование: ntvdm.exe program.exe, как команда start в Windows, только для оконного текстового режима в 64-битным Windows[3]. В отличие от Windows, в ReactOS NTVDM не устанавливает процессор в 16-битный режим эмуляции, а основываясь на реализации эмулятора Softx86 и авторской библиотеке эмуляции процессора Fast486, как DOSBox полностью эмулирует компьютер[4].\nOTVDM — Свободная реализация NTVDM для 64 битных версий Windows на основе Wine, отличается очень простой установкой.[5]\nNTVDM64 — Попытка реализации с компиляцией под 64 бит из оригинального NTVDM используя обратную разработку.[6]\nNTVDM X64 — Другая реализация NTVDM для 64-х битных систем, созданная для запуска DOS-программ без потери связи с Windows.[7]>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Виртуальная_машина_DOS"
    },
    {
        "task": [
            "Примеры<<<Циклический избыточный код (в частности, CRC8, CRC16, CRC32) применяется для проверки целостности передачи данных. Программы-архиваторы включают CRC исходных данных в созданный архив для того, чтобы получающий мог удостовериться в корректности полученных данных. Такая контрольная сумма проста в реализации и обеспечивает низкую вероятность возникновения коллизий.\nMD5 и другие криптографические хеш-функции используются, например, для подтверждения целостности и подлинности передаваемых данных.\nПод названием «контрольное число» входит в состав различных кодов: банковских, налоговых, товарных и т. п.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Контрольная_сумма"
    },
    {
        "task": [
            "Данные свойства не являются независимыми:\n<<<Обратимая функция неустойчива к восстановлению второго прообраза и коллизиям.\nФункция, нестойкая к восстановлению второго прообраза, нестойка к коллизиям; обратное неверно.\nФункция устойчивая к коллизиям, устойчива к нахождению второго прообраза.\nУстойчивая к коллизиям хеш-функция не обязательно является односторонней.>>>",
            "При разработке современного российского стандарта ГОСТ Р 34.11-2012 (Стрибог) к криптографическим хеш-функциям были сформулированы следующие требования: \n<<<Стойкость к вычислению прообраза: если известно значение функции, тогда должно быть сложно найти такое сообщение, хеш-функция от которого равна известному; \nСтойкость к вычислению второго прообраза: пусть есть одно значение, и известен хеш-код этого значения. Тогда злоумышленнику должно быть сложно найти ещё одно такое значение, чтобы его хеш-функция совпадала с хеш-функцией первого значения; \nСтойкость к поиску коллизий: должно быть сложно найти два таких сообщения, которые не равны, но у них равны хеш-коды; \nСтойкость к удлинению прообраза: если злоумышленник не знает сообщение, но знает его длину и хеш-код от него, то ему должно быть сложно подобрать такое сообщение, которое, будучи дописанным к оригинальному, даст какую-нибудь известную хеш-функцию. Другими словами, не должно быть возможно злоумышленнику что-то менять путём дополнения в сообщении, получая известны выход. Это можно сформулировать по-другому: хеш-функция не должна быть хорошо «дополняема».>>>",
            "Некоторые задачи, полагающиеся неразрешимыми за полиномиальное время, которые могут быть использованы для построения таких функций:\n<<<Дискретное логарифмирование\nНахождение квадратичного вычета\nФакторизация целых чисел\nЗадача о сумме подмножеств>>>",
            "При наличии теоретических гарантий сложности, у доказательного подхода имеются и существенные недостатки:\n<<<Текущие доказуемо безопасные алгоритмы хеширования слишком вычислительно сложны для того, чтобы использоваться на практике. По сравнению с обычными хеш функциями они достаточно медленные.\nСоздание доказуемо безопасных хеш функций значительно более трудоёмко, чем классические подходы.\nСамо доказательство безопасности часто основывается на задаче, имеющей требуемую сложность в среднем или в худшем случае. Сложность в худшем случае чаще всего описывает патологические ситуации, а не типичные для этой задачи. Даже редукция к задаче со сложностью в среднем обеспечивает ограниченную защищённость, так как может быть найден алгоритм, который легко решает проблему для определённого подмножества данных задачи. Так, например, было показано, что для двух из трёх предложенных в оригинальной статье для функции Fast Syndrome-Based hash параметров существуют более оптимальные атаки, чем предложенные создателями для доказательства безопасности.[3]>>>",
            "Примеры доказуемо безопасных хеш-функции[править | править код]<<<VSH — Very Smooth Hash function — доказуемо безопасная устойчивая к коллизиям функция, опирающаяся на сложность нахождения нетривиальных квадратных корней по модулю составного числа n (что является настолько же сложным, насколько разложение n на множители).\nMuHASH\nECOH - Elliptic curve only hash[англ.] — основанная на идее эллиптических кривых, задаче о сумме подмножеств и суммировании полиномов хеш функция. Доказательство безопасности опиралось на предположение о NP-полноте лежащей в основе математической задачи, однако была найдена уязвимость для обобщённой атаки «дней рождения» Вагнера, связанной с поиском второго прообраза.[5]\nFSB — Fast Syndrome-Based hash function — может быть показано, что взломать FSB по меньшей мере настолько же трудно, насколько решить NP-полную задачу, известную как регулярное синдромное декодирование.[6]\nSWIFFT — SWIFFT основан на БПФ и доказуемо безопасен при довольно слабом предположении о сложности нахождения коротких векторов в циклической/идеальной решётке в худшем случае.[7]\nChaum, van Heijst, Pfitzmann hash function — функция, в которой нахождение коллизий так же трудоёмко, как и при нахождении дискретного логарифма в конечной группе \n\n\n\n\nF\n\n2\np\n+\n1\n\n\n\n\n{\\displaystyle F_{2p+1}}\n\n.\nKnapsack-based hash functions — семейство хеш-функций, основанное на задаче о рюкзаке.\nСуществует общий подход к построению доказуемо безопасных алгоритмов хеширования на основе любого подходящего сигма протокола[англ.]. Более быстрая версия VSH (называющаяся VSH*) может быть получена таким способом.>>>",
            "Идеальной криптографической хеш-функцияей является такая криптографическая хеш-функция, к которой можно отнести пять основных свойств:\n<<<Детерминированность. При одинаковых входных данных результат выполнения хеш-функции будет одинаковым (одно и то же сообщение всегда приводит к одному и тому же хешу);\nВысокая скорость вычисления значения хеш-функции для любого заданного сообщения;\nНевозможность сгенерировать сообщение из его хеш-значения, за исключением попыток создания всех возможных сообщений;\nНаличие лавинного эффекта. Небольшое изменение в сообщениях должно изменить хеш-значения, так широко, что новые хеш-значения не совпадают со старыми хеш-значениями;\nНевозможность найти два разных сообщения с одинаковыми хеш-значениями.>>>",
            "\n\n\n\nH\n(\n\nL\n\ni\n\n\n)\n\n\n{\\displaystyle H(L_{i})}\n\n — результат хеш-функции от транзакции \n\n\n\n\nL\n\ni\n\n\n\n\n{\\displaystyle L_{i}}\n\n\n<<<Вычисляются хеши транзакций, размещённых в блоках: H(L1), H(L2), H(L3) и так далее.\nВычисляются хеши от суммы хешей транзакций, например H(H(L1) + H(L2)). Так как дерево Меркла является бинарным, то число элементов на каждой итерации должно быть чётным. Поэтому если блок содержит нечётное количество транзакций, то последняя дублируется и складывается сама с собой: hash (H(L3) + H(L3)).\nДалее, вновь вычисляются хеши от суммы хешей. Процесс повторяется, пока не будет получен единый хеш — корень дерева Меркла. Он является криптографическим доказательством целостности блока (то есть того, что все транзакции находятся в заявленном порядке). Значение корня фиксируется в заголовке блока.>>>",
            "Помимо них, SHA—256 используется также в:\n<<<Steemit;\nPeerCoin;\nNameCoin;\nOcoin;\nZetacoin;\nEmerCoin.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Криптографическая_хеш-функция"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Cd_(команда)"
    },
    {
        "task": [
            "Во время выполнения программы могут возникать ситуации, когда состояние внешних данных, устройств ввода-вывода или компьютерной системы в целом делает дальнейшие вычисления в соответствии с базовым алгоритмом невозможными или бессмысленными. Классические примеры подобных ситуаций приведены ниже.\n<<<Целочисленное деление на ноль. Конечного результата у данной операции быть не может, поэтому ни дальнейшие вычисления, ни попытка использования результата деления не приведут к решению задачи.\nОшибка при попытке считать данные с внешнего устройства. Если данные не удаётся получить, любые дальнейшие запланированные операции с ними бессмысленны.\nИсчерпание доступной памяти. Если в какой-то момент система оказывается не в состоянии выделить достаточный для прикладной программы объём оперативной памяти, программа не сможет работать нормально.\nПоявление сигнала аварийного отключения электропитания системы. Прикладную задачу, по всей видимости, решить не удастся, в лучшем случае (при наличии какого-то резерва питания) прикладная программа может позаботиться о сохранении данных.>>>",
            "Исключительные ситуации, возникающие при работе программы, можно разделить на два основных типа: синхронные и асинхронные, принципы реакции на которые существенно различаются.\n<<<Синхронные исключения могут возникнуть только в определённых, заранее известных точках программы. Так, ошибка чтения файла или коммуникационного канала, нехватка памяти — типичные синхронные исключения, так как возникают они только в операции чтения или в операции выделения памяти соответственно.\nАсинхронные исключения могут возникать в любой момент времени и не зависят от того, какую конкретно инструкцию программы выполняет система. Типичные примеры таких исключений: аварийный отказ питания или поступление новых данных.>>>",
            "Существует два принципиально разных механизма функционирования обработчиков исключений.\n<<<Обработка с возвратом подразумевает, что обработчик исключения ликвидирует возникшую проблему и приводит программу в состояние, когда она может работать дальше по основному алгоритму. В этом случае после того, как выполнится код обработчика, управление передаётся обратно в ту точку программы, где возникла исключительная ситуация (либо на команду, вызвавшую исключение, либо на следующую за ней, как в некоторых старых диалектах языка BASIC) и выполнение программы продолжается. Обработка с возвратом типична для обработчиков асинхронных исключений (которые обычно возникают по причинам, не связанным прямо с выполняемым кодом), для обработки синхронных исключений она малопригодна.\nОбработка без возврата заключается в том, что после выполнения кода обработчика исключения управление передаётся в некоторое, заранее заданное место программы, и с него продолжается исполнение. То есть, фактически, при возникновении исключения команда, во время работы которой оно возникло, заменяется на безусловный переход к заданному оператору.>>>",
            "Позже в ряде языков, например, в Java, появились проверяемые исключения. Сущность этого механизма состоит в добавлении в язык следующих правил и ограничений:\n<<<В описании функции (или метода класса) в явном виде перечисляются все типы исключений, которые она может сгенерировать.\nФункция, вызывающая функцию или метод с объявленными исключениями, для каждого из этих исключений обязана либо содержать обработчик, либо, в свою очередь, указывать этот тип как генерируемый ею в своём описании.\nКомпилятор проверяет наличие обработчика в теле функции или записи исключения в её заголовке. Реакция на наличие неописанного и необработанного исключения может быть разной. Например, в Java, если компилятор обнаруживает возможность возникновения исключения, которое не описано в заголовке функции и не обрабатывается в ней, программа считается некорректной и не компилируется. В C++ возникновение в функции неописанного и необработанного исключения приводит к немедленному завершению программы; при этом отсутствие у функции списка объявленных исключений обозначает возможность возникновения любых исключений и стандартный порядок их обработки внешним кодом.>>>",
            "У проверяемых исключений есть и недостатки.\n<<<Они вынуждают создавать обработчики исключений, с которыми программист в принципе справиться не может, например ошибок ввода-вывода в веб-приложении. Это приводит к появлению «глупых» обработчиков, которые не делают ничего или дублируют системный обработчик критической ошибки (например, выводят стек вызова исключения) и, в итоге, только замусоривают код.\nСтановится невозможным добавление нового проверяемого исключения в метод, описанный в библиотеке, поскольку это нарушает обратную совместимость. (Это верно и для небиблиотечных методов, но в этом случае проблема менее существенна, так как весь код, в конечном итоге, доступен и может быть переработан).>>>",
            "Невозможно сделать проверяемыми вообще все исключения, так как некоторые исключительные ситуации по своей природе таковы, что их возникновение возможно в любом или почти любом месте программы, а предотвратить их программист не в состоянии. При этом бессмысленно указывать подобные исключения в описании функции, так как это пришлось бы сделать для каждой функции, не делая программу понятнее. В основном это исключения, относящиеся к одному из двух видов:\n<<<Исключения, представляющие собой серьёзные ошибки, которые, «по идее», возникать не должны, и которые в обычных условиях не следует обрабатывать программой. Такие ошибки могут возникать как во внешней относительно программы среде, так и внутри неё. Примером такой ситуации может быть ошибка среды исполнения программы на Java. Она потенциально возможна при исполнении любой команды; за редчайшими исключениями в прикладной программе не может быть осмысленного обработчика подобной ошибки — ведь если среда исполнения работает неверно, на что указывает сам факт исключения, нет никакой гарантии, что и обработчик будет исполнен правильно.\nИсключения времени выполнения, обычно связанные с ошибками программиста. Такие исключения возникают из-за логических ошибок разработчика или недостаточности проверок в коде. Например, ошибка обращения по неинициализированному (нулевому) указателю, как правило, означает, что программист либо пропустил где-то инициализацию переменной, либо при выделении динамической памяти не проверил, действительно ли память была выделена. Как первое, так и второе требует исправления кода программы, а не создания обработчиков.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Обработка_исключений"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Предотвращение_выполнения_данных"
    },
    {
        "task": [
            "При работе алгоритма каждая сторона:\n<<<генерирует случайное натуральное число a — закрытый ключ\nсовместно с удалённой стороной устанавливает открытые параметры p и g (обычно значения p и g генерируются на одной стороне и передаются другой), где\np является случайным простым числом\n(p-1)/2 также должно быть случайным простым числом (для повышения безопасности)[5]\ng является первообразным корнем по модулю p (также является простым числом)\nвычисляет открытый ключ A, используя преобразование над закрытым ключом\nA = ga mod p\nобменивается открытыми ключами с удалённой стороной\nвычисляет общий секретный ключ K, используя открытый ключ удаленной стороны B и свой закрытый ключ a\nK = Ba mod p\nК получается равным с обеих сторон, потому что:\nBa mod p = (gb mod p)a mod p = gab mod p = (ga mod p)b mod p = Ab mod p>>>",
            "Ева — криптоаналитик. Она читает пересылку Боба и Алисы, но не изменяет содержимого их сообщений[6].\n<<<s = секретный ключ. s = 2\ng = первообразный корень по модулю р. g = 5\np = открытое простое число. p = 23\na = секретный ключ Алисы. a = 6\nA = открытый ключ Алисы. A = ga mod p = 8\nb = секретный ключ Боба. b = 15\nB = открытый ключ Боба. B = gb mod p = 19>>>",
            "Все вычисления производятся по модулю p\n<<<Стороны договариваются о параметрах алгоритма p и g\nСтороны, Алиса, Боб и Кэрол генерируют свои ключи — a, b и c соответственно.\nАлиса вычисляет ga mod p и посылает его Бобу\nБоб вычисляет (ga)b mod p = gab mod p и посылает его Кэрол\nКэрол вычисляет (gab)c mod p = gabc mod p и получает тем самым общий секретный ключ\nБоб вычисляет gb mod p и посылает его Кэрол\nКэрол вычисляет (gb)c mod p = gbc mod p и посылает его Алисе\nАлиса вычисляет (gbc)a mod p = gbca mod p = gabc mod p — общий секретный ключ\nКэрол вычисляет gc mod p и посылает его Алисе\nАлиса вычисляет (gc)a mod p = gca mod p и посылает его Бобу\nБоб вычисляет (gca)b mod p = gcab mod p = gabc mod p и также получает общий секретный ключ>>>",
            "Для того чтобы данный алгоритм был эффективно применен для большой группы людей, необходимо соблюдение двух основных принципов:\n<<<Передача ключа должна начинаться с «пустого» ключа g. Весь секрет состоит в повышении текущего значения показателя каждого участника один раз;\nЛюбое промежуточное значение может быть раскрыто публично, но окончательное значение представляет собой секретный ключ, который никогда не должен быть публично раскрыт. Таким образом, каждый пользователь получает свою копию тайного ключа.>>>",
            "В этой статье литературные источники могут не соответствовать правилам Википедии. Вы можете улучшить эту статью, удалив из неё излишние и неприемлемые источники.<<<Брюс Шнайер. Прикладная криптография\nМао, В. Современная криптография: теория и практика. : Пер. с английского. М.: Издательский дом «Вильямс», 2005. — 768 с. : ил. — Парал. тит. англ. Шифрование — асимметричные методы. Глава 8 («Шифрование с открытым ключом», «Обмен ключом без обмена ключом», «Криптографическая стойкость», «Задача Диффи — Хеллмана и задача дискретного логарифмирования»)\nDieter Gollmann (2006). Computer Security Second Edition West Sussex, England: John Wiley & Sons, Ltd.\nT. Kivinen; M. Kojo, SSH Communications Security.:  More Modular Exponential (MODP) Diffie-Hellman groups for Internet Key Exchange (IKE) (англ.) (TXT). Standards Track. Инженерный совет Интернета (май 2003). — Стандартные группы открытых чисел p и g, рекомендуемые Инженерным советом Интернета (IETF). Дата обращения: 15 февраля 2016.\nThe possibility of Non-Secret digital encryption J. H. Ellis, January 1970.\nNon-Secret Encryption Using a Finite Field MJ Williamson, January 21, 1974.\nThoughts on Cheaper Non-Secret Encryption MJ Williamson, August 10, 1976.\nNew Directions in Cryptography W. Diffie and M. E. Hellman, IEEE Transactions on Information Theory, vol. IT-22, Nov. 1976, pp: 644—654.\nCryptographic apparatus and method Martin E. Hellman, Bailey W. Diffie, and Ralph C. Merkle, U.S. Patent #4,200,770, 29 April 1980\nThe History of Non-Secret Encryption[dead link] JH Ellis 1987 (28K PDF file) (HTML version[dead link])\nThe First Ten Years of Public-Key Cryptography Whitfield Diffie, Proceedings of the IEEE, vol. 76, no. 5, May 1988, pp: 560—577 (1.9MB PDF file)\nMenezes, Alfred; van Oorschot, Paul; Vanstone, Scott (1997). Handbook of Applied Cryptography Boca Raton, Florida: CRC Press. ISBN 0-8493-8523-7. (Available online)\nSingh, Simon (1999) The Code Book: the evolution of secrecy from Mary Queen of Scots to quantum cryptography New York: Doubleday ISBN 0-385-49531-5\nAn Overview of Public Key Cryptography Martin E. Hellman, IEEE Communications Magazine, May 2002, pp: 42—49. (123kB PDF file)\nDiffie-Hellman key exchange explained in 5 minutes\nOral history interview with Martin Hellman, Charles Babbage Institute, University of Minnesota. Leading cryptography scholar *Martin Hellman discusses the circumstances and fundamental insights of his invention of public key cryptography with collaborators Whitfield Diffie and Ralph Merkle at Stanford University in the mid-1970s.\nRFC 2631 — Diffie-Hellman Key Agreement Method E. Rescorla June 1999.\nSummary of ANSI X9.42: Agreement of Symmetric Keys Using Discrete Logarithm Cryptography[dead link] (64K PDF file) (Description of ANSI 9 Standards)\nDiffie-Hellman Key Exchange — A Non-Mathematician’s Explanation by Keith Palmgren\nCrypt::DH Perl module from CPAN\nHands-on Diffie-Hellman demonstration\nC implementation using GNU Multiple Precision Arithmetic Library[dead link]\nDiffie Hellman in 2 lines of Perl (using dc)\nSmart Account Management (SAcct) (using DH key exchange to derive session key)\nTalk by Martin Hellman in 2007, Google video>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Протокол_Диффи_—_Хеллмана"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Каталог_(файловая_система)"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Коммутируемый_доступ"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Нейрокомпьютерный_интерфейс"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Протоколы_прикладного_уровня"
    },
    {
        "task": [
            "Протоколы<<<DCCP (подпротокол)\nRUDP (подпротокол)\nSCTP (подпротокол)\nTCP (основной)\nUDP (основной)\nUDP Lite (подпротокол)>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Транспортный_уровень"
    },
    {
        "task": [
            "Шаблоны генерации объектов[править | править код]<<<Singleton\nFactory Method\nAbstract Factory\nPrototype>>>",
            "Шаблоны программирования гибких объектов[править | править код]<<<Composite\nDecorator\nFacade>>>",
            "Шаблоны выполнения задач[править | править код]<<<Interpreter\nStrategy\nObserver\nVisitor\nCommand>>>",
            "Основная статья: Архитектурный шаблон<<<Model-View-Controller (MVC) Модель-представление-контроллер.\nModel-View-Presenter.\nModel-View-ViewModel.\nPresentation–abstraction–control[англ.].\nNaked objects[10].\nHierarchical Model-View-Controller.\nView-Interactor-Presenter-Entity-Routing (VIPER).>>>",
            "Enterprise[править | править код]<<<Active Record — способ доступа к данным реляционных баз данных в объектно-ориентированном программировании.\nBusiness Delegate.\nComposite Entity/Составная Сущность.\nComposite View.\nDAO (Data Access Object) Объект Доступа к Данным.\nDispatcher View.\nFront Controller.\nIntercepting Filter.\nRegistry.\nService Activator.\nService Locator/Локатор Служб.\nService to Worker.\nSession Facade/Фасад Сессии.\nTransfer Object Assembler.\nTransfer Object/Объект Перемещения.\nValue List Handler/Обработчик Списка Значений.\nView Helper.\nUnit of Work.>>>",
            "Шаблоны проектирования потоковой обработки[править | править код]<<<Обработка событий по отдельности\nОбработка с использованием локального состояния\nМногоэтапная обработка/повторное разделение на разделы\nОбработка с применением внешнего справочника: соединение потока данных с таблицей\nСоединение потоков данных\nВнеочередные события\nПовторная обработка>>>",
            "Шаблоны Баз Данных[править | править код]<<<Data Mapper\nIdentity Map\nUnit of Work\nLazy Load>>>",
            "Прочие[править | править код]<<<Repository/Хранилище.>>>",
            "Также на сегодняшний день существует ряд других шаблонов.\n<<<Carrier Rider Mapper описывают предоставление доступа к хранимой информации.\nАналитические шаблоны описывают основной подход для составления требований для программного обеспечения (requirement analysis) до начала самого процесса программной разработки.\nКоммуникационные шаблоны описывают процесс общения между отдельными участниками/сотрудниками организации.\nОрганизационные шаблоны описывают организационную иерархию предприятия/фирмы\nАнтипаттерны (Anti-Design-Patterns) описывают, как не следует поступать при разработке программ, показывая характерные ошибки в дизайне и в реализации.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Шаблон_проектирования"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Echo_(команда)"
    },
    {
        "task": [
            "Интересные факты<<<Уорд Каннингем считается автором шуточного закона, названного в его честь. Закон гласит: «Лучший способ найти правильный ответ в Интернете — не задать вопрос, а разместить заведомо неправильный ответ»[2].  В своё время Стивен Макгиди озвучил Закон Каннингема и заметил, что по иронии Википедия является лучшим тому доказательством[3], хотя сам Каннингем ссылался на взаимодействия Usenet[4].\nУ Каннингема есть лицензия радиолюбителя экстра-класса, выданная Федеральной комиссией по связи США. Его позывной сигнал — Kilo Nine Oscar X-ray, K9OX[5][6][7].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Каннингем,_Уорд"
    },
    {
        "task": [
            "Беспроводная телефония отличается от дуплексной радиосвязи тем, что:\n<<<Беспроводная телефонная связь является коммутируемой: при помощи набора номера в начале разговора устанавливается канал связи с вызываемым абонентом, после того как один из абонентов положит трубку — канал разрывается.\nБеспроводные телефоны обычно имеют связь с телефонной сетью общего пользования.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Базовая_станция"
    },
    {
        "task": [
            "Первое полезное применение наномашин, если они появятся, планируется в медицинских технологиях, где они могут быть использованы для выявления и уничтожения раковых клеток. Также они могут обнаруживать токсичные химические вещества в окружающей среде и измерять уровень их концентрации.\n<<<Ранняя диагностика рака и целенаправленная доставка лекарств в раковые клетки[13][14][15]\nБиомедицинский инструментарий[16]\nХирургия[17][18]\nФармакокинетика[19]\nНаблюдение больных диабетом[20][21][22]\nПроизводство посредством молекулярной сборки нанороботами устройства из отдельных молекул по его чертежам\nВоенное применение в качестве средств наблюдения и шпионажа, а также в качестве оружия. Потенциальные возможности использования нанороботов в качестве оружия демонстрируются в некоторых фантастических произведениях («Терминатор 2: Судный день», «Терминатор: Генезис», «День, когда остановилась Земля», «Бросок кобры», «Превосходство»).\nКосмические исследования и разработки (например, зонды фон Неймана)>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Наноробот"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Императивное_программирование"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Матричный_процессор"
    },
    {
        "task": [
            "По форме записанной информации:\n<<<аналоговые[какая?];\nцифровые.>>>",
            "По возможности записи:\n<<<ЗУ, запись в которые производится только заводом-изготовителем (например, масочные микросхемы ПЗУ,CD-ROM).\nЗУ, запись в которые может осуществить пользователь с помощью отдельного устройства (например, EPROM c ультрафиолетовым стиранием, использовавшиеся в ранних микросхемах BIOS).\nЗУ, запись в которое осуществляется конечным пользователем в том же устройстве, которое его использует (например, большинство видов памяти в современных компьютерах).>>>",
            "По возможности перезаписи:\n<<<С однократной записью без возможности перезаписи (ПЗУ) (например, CD-ROM, CD-R, масочные микросхемы ПЗУ).\nПолупостоянные, перепрограммируемые ЗУ (ПППЗУ) - запоминающие устройства с возможностью многократной перезаписи, затруднённой долгим временем записи или ограниченным числом циклов записи (например, CD-RW, микросхемы EPROM).\nУстройства со свободной многократной перезаписью (например, жёсткие магнитные диски, микросхемы оперативной памяти). Между этим и предыдущим классом нет чёткой границы.>>>",
            "По назначению:\n<<<Оперативная память (ОЗУ) -память, в которой размещаются данные, над которыми непосредственно производятся операции процессора. Оперативная память может иметь несколько иерархических уровней. Примеры: SRAM, DRAM.\nВнутренние устройства для долговременного хранения информации (например, CMOS-память, жёсткие диски, SSD).\nВнешние носители, предназначенные для резервного хранения либо переноса информации от одного устройства к другому (например, дискеты, флешки).\nЗапоминающие устройства для идентификации и платежей (например, магнитные карты, метки RFID).>>>",
            "По энергозависимости:\n<<<энергонезависимые, записи в которых не стираются при снятии электропитания;\nэнергозависимые, записи в которых стираются при снятии электропитания;\nстатические, которым для хранения информации достаточно сохранения питающего напряжения;\nдинамические, в которых информация со временем разрушается (деградирует), и, кроме подачи электропитания, необходимо производить её периодическое восстановление (регенерацию).>>>",
            "По типу доступа:\n<<<С последовательным доступом (например, магнитные ленты).\nС произвольным доступом (RAM; например, оперативная память).\nС прямым доступом (например, жёсткие диски).\nС ассоциативным доступом (специальные устройства, для повышения производительности баз данных).>>>",
            "По геометрическому исполнению:\n<<<дисковые (магнитные диски, оптические, магнитооптические);\nленточные (магнитные ленты, перфоленты);\nбарабанные (магнитные барабаны);\nкарточные (магнитные карты, перфокарты, флэш-карты, и др.);\nпечатные платы (карты DRAM, картриджи).>>>",
            "По физическому принципу:\n<<<перфорационные (с отверстиями или вырезами): перфокарта, перфолента\nс магнитной записью: магнитные сердечники (пластины, стержни, кольца, биаксы), магнитные диски, магнитные ленты, магнитные карты\nоптические: CD, DVD, Blu-ray и пр.\nмагнитооптические: CD-MO\nиспользующие накопление электростатического заряда в диэлектриках (конденсаторные ЗУ, запоминающие электроннолучевые трубки);\nиспользующие эффекты в полупроводниках: EEPROM, флэш-память\nзвуковые и ультразвуковые (линии задержки);\nиспользующие сверхпроводимость (криогенные элементы);\nдругие.>>>",
            "Типы запоминающих устройств<<<Перфокарта\nПерфолента\nПамять на линиях задержки\nПамять на магнитных сердечниках\nThin film memory[англ.] (конкурент памяти на магнитных сердечниках)>>>",
            "Перфокарта\nПерфолента\nПамять на линиях задержки\nПамять на магнитных сердечниках\nThin film memory[англ.] (конкурент памяти на магнитных сердечниках)<<<Селектроновая трубка (электростатическая запоминающая трубка)\nТрубка Уильямса (запоминающая ЭЛТ)>>>",
            "Селектроновая трубка (электростатическая запоминающая трубка)\nТрубка Уильямса (запоминающая ЭЛТ)<<<Полупроводниковая:\nEPROM\nФлеш-память\nNVRAM\nRAM ОЗУ ЗУПВ\nROM ПЗУ\nVRAM\nWRAM\nFRAM\nCore rope memory[англ.] (ПЗУ)\nКэш-память>>>",
            "Основная статья: Ленточный накопитель<<<Стример\nMylar tape[англ.][источник не указан 50 дней] (см. майлар)>>>",
            "Дисковый накопитель информации (перенаправляется сюда), дисковая память (см. магнитный диск): \n<<<Магнитный барабан\nНГМД\nНЖМД (жёсткий диск, «винчестер»)>>>",
            "Магнитный барабан\nНГМД\nНЖМД (жёсткий диск, «винчестер»)<<<Магнитооптическая:\nМагнитооптический диск\nCD-MO>>>",
            "Магнитооптическая:\nМагнитооптический диск\nCD-MO<<<Оптическая:\nCD-R\nCD-ROM\nCD-RW\nDVD-RAM\nDVD-ROM\nDVD-R\nDVD+R\nDVD-RW\nHD DVD\nBlu-ray\nГолографическая память\nПамять на ЦМД, ЦМД-ЗУ>>>",
            "По количеству устойчивых (распознаваемых) состояний одного элемента памяти[источник не указан 50 дней]:\n<<<двоичные\nтроичные\nдесятичные>>>",
            "Некоторые типы запоминающих устройств оформлены как компактные, носимые человеком устройства, приспособленные для переноса информации. В частности:\n<<<Съёмный/внешний жёсткий диск:\nMobile Rack\nКонтейнеры для жёстких дисков\nZIV[англ.]\nФлеш-память>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Запоминающее_устройство"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Временная_многопоточность"
    },
    {
        "task": [
            "Некоторые медиаконтейнеры предназначены для сохранения только аудиоданных:\n<<<AIFF (формат файла IFF, широко используемый на платформе Mac OS)\nWAV (формат файла RIFF, широко используемый на платформе Microsoft Windows)\nXMF (англ. Extensible Music Format — расширяемый формат музыки)>>>",
            "Некоторые медиаконтейнеры предназначены для сохранения только статических изображений:\n<<<FITS (англ. Flexible Image Transport System — гибкая транспортная система изображения) — медиаконтейнер для статичных изображений, необработанных данных (англ. raw data) и связанных метаданных.\nTIFF (англ. Tagged Image File Format — теговый файловый формат изображений) — медиаконтейнер для статичных изображений и связанных метаданных.>>>",
            "Большинство медиаконтейнеров приспособлено для сохранения всех или почти всех типов медиаинформации, включая аудио, видео и текст. Самые популярные из них:\n<<<3gp (используется на многих мобильных телефонах, основан на стандартизированном ISO формате медиафайлов, определён спецификаций MPEG-4 Part 12)\nANIM — медиаконтейнер для цифровой анимации на линейке классических компьютеров Commodore Amiga, следует основным спецификациям IFF ILBM.\nASF (англ. Advanced Systems Format — продвинутый системный формат) — стандартный медиаконтейнер для Microsoft WMA и WMV.\nAVI (англ. Audio Video Interleave — чередование аудио и видео) — стандартный медиаконтейнер для Microsoft Windows, базируется на RIFF, один из самых распространённых.\nCDXL (другое наименование для формата ANIM) — медиаконтейнер для анимации для Amiga CDTV и Amiga CD32.\nDVR-MS (англ. Digital Video Recording — Microsoft — цифровая видеозапись — Майкрософт) — проприетарный медиаконтейнер, разработанный Microsoft и базирующийся на ASF. DVR-MS использует видео стандарта MPEG-2 и аудио стандартов MPEG-1 Layer II или Dolby Digital AC-3 (ATSC A/52).\nIFF (англ. Interchange File Format — чередующийся файловый формат) — первый платформо-независимый медиаконтейнер.\nMatroska (MKV, Матрёшка) — открытый свободный стандарт и медиаконтейнер.\nMPEG-TS (англ. MPEG-2 transport stream — транспортный поток MPEG) — медиаконтейнер для цифрового широковещательного телевидения. Стандартно содержит несколько видео- и аудиопотоков и расписание телепрограмм (Electronic Program Guide).\nMP4 (MPEG-4 Part 14) — медиаконтейнер, поддерживающий аудио и видео из группы MPEG-4.\nM4V — медиаконтейнер на базе MPEG-4 Part 14 с добавлением возможности DRM-защиты и поддержки кодека AC3\nMOV — медиаконтейнер для мультимедийного фреймворка QuickTime, разработанный Apple.\nOgg — медиаконтейнер для аудиокодека Vorbis от Xiph.org и видеокодека Theora.\nOGM (Ogg Media) медиаконтейнер для кодеков от Xiph.org, более не поддерживаемый и формально отторгнутый Xiph.org.[1]\nRealMedia — медиаконтейнер для RealVideo и RealAudio.\nMXF ( англ. Material eXchange Format — формат обмена данными) — контейнер для профессионального хранения и обработки видео- и аудиоматериалов.>>>",
            "Все различия между разными медиаконтейнерами происходят из пяти основ:\n<<<Популярность. Насколько распространён и поддерживается данный контейнер.\nРазмер файла. Показывает различие в файловом размере между двумя файлами, которые имеют одинаковый контент, но сохранены различными медиаконтейнерами.\nПоддержка расширенной функциональности кодека. Старые медиаконтейнеры, такие как AVI, не поддерживают новые особенности кодеков, такие как B-кадры, переменный битрейт аудиопотока и переменную частоту кадров видеопотока. Контейнер может быть «взломан» для добавления поддержки, но это создаёт проблемы совместимости.\nПоддержка расширенного контента. Поддерживает ли медиаконтейнер разделы, субтитры, мета-теги и пользовательские данные.\nПоддержка потокового мультимедиа.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Медиаконтейнер"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Компьютерный_терминал"
    },
    {
        "task": [
            "Математики, заложившие основы теории вычислимости<<<Курт Гёдель\nАлан Тьюринг\nСтивен Клини\nАлонзо Чёрч\nЭмиль Пост>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Теория_вычислимости"
    },
    {
        "task": [
            "Виды алгоритмов<<<генетические алгоритмы — эвристический алгоритм поиска, используемый для решения задач оптимизации и моделирования путём случайного подбора, комбинирования и вариации искомых параметров;\nгенетическое программирование — автоматическое создание или изменение программ с помощью генетических алгоритмов;\nэволюционное программирование — аналогично генетическому программированию, но структура программы постоянна, изменяются только числовые значения;\nпрограммирование экспрессии генов\nэволюционные стратегии — похожи на генетические алгоритмы, но в следующее поколение передаются только положительные мутации;\nдифференциальная эволюция\nнейроэволюция — аналогично генетическому программированию, но геномы представляют собой искусственные нейронные сети, в которых происходит эволюция весов при заданной топологии сети, или помимо эволюции весов также производится эволюция топологии;\nсистемы классификаторов;>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Эволюционные_алгоритмы"
    },
    {
        "task": [
            "Традиционным для директивных языков способом управления памятью является ручной. Его сущность в следующем:\n<<<Новый объект в динамической памяти создаётся специальной командой выделения памяти. Эта команда возвращает указатель на выделенную область памяти, который сохраняется и используется для доступа к ней.\nПока созданный объект нужен для работы, программа обращается к нему через ранее сохранённый указатель.\nКогда надобность в объекте проходит, программа сама должна его удалить, явно вызвав команду освобождения памяти и передав ей указатель на удаляемый объект.>>>",
            "Неформально можно задать следующее рекурсивное определение достижимого объекта:\n<<<определённое множество объектов считается достижимым изначально — корневые объекты, обычно в их число включают все глобальные переменные и объекты, на которые есть ссылки в стеке вызовов;\nлюбой объект, на который есть ссылка из достижимого объекта, тоже считается достижимым, за исключением ссылок, указанных программистом как слабая.>>>",
            "Простой алгоритм определения достижимых объектов, «алгоритм пометок» (Mark and Sweep), заключается в следующем:\n<<<для каждого объекта хранится бит, указывающий, достижим ли этот объект из программы или нет;\nизначально все объекты, кроме корневых, помечаются как недостижимые;\nрекурсивно просматриваются и помечаются как достижимые объекты, ещё не помеченные, и до которых можно добраться из корневых объектов по ссылкам;\nте объекты, у которых бит достижимости не был установлен, считаются недостижимыми.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Сборка_мусора"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Хост"
    },
    {
        "task": [
            "Классическими примерами систем, использующих блочную графику, являются:\n<<<Sinclair ZX80 и ZX81\nPanasonic JR-200 и Mattel Aquarius\nCommodore PET\nTRS-80 Color Computer и Dragon 32/64\nVideotex и телетекст\nMatra Alice\nPC-8001\nОдна из последних систем использующих псевдографику, были адаптеры стандарта CGA. Этот графический адаптер для IBM-PC поддерживал только четыре цвета в графическом режиме, но в текстовом режиме он отображал 16 разных цветов. Хотя ПЗУ шрифтов адаптера CGA не содержало весь набор псевдографики, все же можно было использовать текстовый псевдографический режим CGA 160 × 100, используя недокументированные приемы.>>>",
            "Примеры систем, которые использовали псевдографику:\n<<<Оригинальный IBM PC с MDA\nCommodore PET\nSinclair ZX80 и ZX81\nMattel Aquarius\nPanasonic JR-200\nSharp MZ\nMatra Alice\nCompukit UK101 (клон популярной платы Ohio Scientific) был одной из ранних систем которые использовали набор из 256 символов.\nApple II>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Псевдографика"
    },
    {
        "task": [
            "Путь \n\n\n\np\n\n\n{\\displaystyle p}\n\n называют d-разделённым (англ. d-separated), или блокированным (англ. blocked) множеством вершин \n\n\n\nZ\n\n\n{\\displaystyle Z}\n\n тогда и только тогда, когда\n<<<\n\n\n\np\n\n\n{\\displaystyle p}\n\n содержит цепь \n\n\n\ni\n→\nm\n→\nj\n\n\n{\\displaystyle i\\to m\\to j}\n\n или разветвление \n\n\n\ni\n←\nm\n→\nj\n\n\n{\\displaystyle i\\gets m\\to j}\n\n такие, что \n\n\n\nm\n\n\n{\\displaystyle m}\n\n принадлежит \n\n\n\nZ\n\n\n{\\displaystyle Z}\n\n, или\n\n\n\n\np\n\n\n{\\displaystyle p}\n\n содержит инвертированное разветвление (коллайдер) \n\n\n\ni\n→\nm\n←\nj\n\n\n{\\displaystyle i\\to m\\gets j}\n\n, такое, что \n\n\n\nm\n\n\n{\\displaystyle m}\n\n не принадлежит \n\n\n\nZ\n\n\n{\\displaystyle Z}\n\n и у вершины \n\n\n\nm\n\n\n{\\displaystyle m}\n\n нет потомков, которые принадлежат \n\n\n\nZ\n\n\n{\\displaystyle Z}\n\n.>>>",
            "Для любых трёх непересекающихся подмножеств вершин \n\n\n\n(\nX\n,\nY\n,\nZ\n)\n\n\n{\\displaystyle (X,Y,Z)}\n\n в ацикличном ориентированном графе \n\n\n\nG\n\n\n{\\displaystyle G}\n\n и для всех вероятностных распределений \n\n\n\nP\n\n\n{\\displaystyle P}\n\n справедливо:\n<<<если \n\n\n\n(\n⟨\nX\n⊥\n\n\n\n⊥\nY\n∣\nZ\n⟩\n\n)\n\nG\n\n\n\n\n{\\displaystyle (\\langle X\\perp \\!\\!\\!\\perp Y\\mid Z\\rangle )_{G}}\n\n, то \n\n\n\n(\n⟨\nX\n⊥\n\n\n\n⊥\nY\n∣\nZ\n⟩\n\n)\n\nP\n\n\n\n\n{\\displaystyle (\\langle X\\perp \\!\\!\\!\\perp Y\\mid Z\\rangle )_{P}}\n\n, если \n\n\n\nG\n\n\n{\\displaystyle G}\n\n и \n\n\n\nP\n\n\n{\\displaystyle P}\n\n марковски совместимы, и\nесли отношение условной независимости \n\n\n\n(\n⟨\nX\n⊥\n\n\n\n⊥\nY\n∣\nZ\n⟩\n\n)\n\nP\n\n\n\n\n{\\displaystyle (\\langle X\\perp \\!\\!\\!\\perp Y\\mid Z\\rangle )_{P}}\n\n выполняется для всех вероятностных распределений, Марковски-совместимых с \n\n\n\nG\n\n\n{\\displaystyle G}\n\n, то из этого следует \n\n\n\n(\n⟨\nX\n⊥\n\n\n\n⊥\nY\n∣\nZ\n⟩\n\n)\n\nG\n\n\n\n\n{\\displaystyle (\\langle X\\perp \\!\\!\\!\\perp Y\\mid Z\\rangle )_{G}}\n\n.>>>",
            "Байесовская сеть позволяет получить ответы на следующие типы вероятностных запросов[2]:\n<<<нахождение вероятности свидетельства,\nопределение априорных маргинальных вероятностей,\nопределение апостериорных маргинальных вероятностей, включая:>>>",
            "прогнозирование, или прямой вывод, — определение вероятности события при наблюдаемых причинах,\nдиагностирование, или обратный вывод (абдукция), — определение вероятности причины при наблюдаемых следствиях,\nмежпричинный (смешанный) вывод (англ. intercausal inference) или трансдукция, — определение вероятности одной из причин наступившего события при условии наступления одной или нескольких других причин этого события.<<<вычисление наиболее вероятного объяснения наблюдаемого события (англ. most probable explanation, MPE),\nвычисление апостериорного максимума (англ. maximum a-posteriori, MAP).>>>",
            "Для проведения вероятностного вывода в байесовских сетях используются следующие алгоритмы[1][3]:\n<<<Точные:\nвывод методом грубой силы путём маргинализации полного совместного распределения;\nалгоритмы устранения переменных и символьные вычисления,\nкластеризация,\nалгоритмы пропагации (передача) сообщений между узлами сети,\nПриближённые на основе метода Монте-Карло:\nалгоритмы формирования выборок с исключением,\nметод оценки выборок с учётом правдоподобия,\nалгоритм МСМС (англ. Markov chain Monte Carlo) и др.>>>",
            "Дополнительная информация<<<Association for Uncertainty in Artificial Intelligence: http://www.auai.org/ Архивная копия от 2 июня 2007 на Wayback Machine\nВведение в байесовские сети: http://www.niedermayer.ca/papers/bayesian/bayes.html Архивная копия от 21 мая 2017 на Wayback Machine\nOn-line Tutorial on Bayesian nets and probability: http://www.dcs.qmw.ac.uk/%7Enorman/BBNs/BBNs.htm Архивная копия от 4 мая 2009 на Wayback Machine\nСергей Николенко. Лекции № 8 Архивная копия от 29 декабря 2009 на Wayback Machine, № 9 Архивная копия от 1 января 2015 на Wayback Machine и № 10 Архивная копия от 1 января 2015 на Wayback Machine, посвящённые байесовским сетям доверия. Курс «Самообучающиеся системы»>>>",
            "Бесплатные и свободные программные продукты<<<OpenBayes https://github.com/abyssknight/OpenBayes-Fork (contains a patched build of OpenBayes from openbayes.org)\nRISO: http://sourceforge.net/projects/riso/ Архивная копия от 4 марта 2007 на Wayback Machine (distributed belief networks)\nBANSY3 Архивная копия от 20 июля 2011 на Wayback Machine — Freeware. From the Non Linear Dynamics Laboratory. Mathematics Department, Science School, UNAM.\nSamIam: http://reasoning.cs.ucla.edu/samiam Архивная копия от 24 апреля 2007 на Wayback Machine>>>",
            "Коммерческие программные продукты<<<AgenaRisk Bayesian network tool: http://www.agenarisk.com Архивная копия от 16 марта 2022 на Wayback Machine\nBayesFusion (GeNIe и SMILE): https://www.bayesfusion.com/ Архивная копия от 29 ноября 2018 на Wayback Machine\nBayesian network application library: http://www.norsys.com/netlibrary/index.htm Архивная копия от 11 июня 2007 на Wayback Machine\nBayesia: http://www.bayesia.com Архивная копия от 8 марта 2022 на Wayback Machine\nHugin: http://www.hugin.com Архивная копия от 30 мая 2020 на Wayback Machine\nNetica: http://www.norsys.com Архивная копия от 20 мая 2007 на Wayback Machine\nBNet: http://www.cra.com/bnet Архивная копия от 5 июля 2008 на Wayback Machine\nDezide: http://www.dezide.com Архивная копия от 8 марта 2022 на Wayback Machine\nMSBNx: a component-centric toolkit for modeling and inference with Bayesian Network (from Microsoft Research): https://www.microsoft.com/en-us/download/details.aspx?id=52299 Архивная копия от 29 ноября 2018 на Wayback Machine\nBayes Net Toolbox for Matlab: http://bnt.sourceforge.net/ Архивная копия от 10 мая 2007 на Wayback Machine\ndVelox: http://www.apara.es/en/about-apara-predictive-analytics Архивная копия от 29 ноября 2018 на Wayback Machine\nSIAM & Causeway: https://web.archive.org/web/20070221060515/http://www.inet.saic.com/>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Байесовская_сеть"
    },
    {
        "task": [
            "К прочим дополнительным возможностям, помимо вышеуказанного дополнительного ПЗУ, можно отнести:\n<<<3-канальный таймер (КР580ВИ53) в качестве звукового синтезатора, встроенный динамик.\nКлавиатурный джойстик, дублировавший клавиши внешнего подключаемого джойстика.\nРасширенная клавиатура (дополнительные клавиши по сравнению с ZX Spectrum) напоминала клавиатуру IBM PC, имела нанесенную на клавиши кириллицу.\nSECAM-кодер для подключения к антенному входу советских телевизоров.>>>",
            "У «Байта» была хорошая комплектация и документация: в комплекте «Байта» были 2 шнура, 2 кассеты или дискеты (в зависимости от модификации «Байт» или «Байт-01»), множество Руководств по эксплуатации для «Байт-01»; для «Байта» имелась книжка с описанием под названием «Знакомьтесь — компьютер Байт». Данное руководство содержало помимо стандартного описания:\n<<<полное описание встроенного Бейсика с примерами использования, в том числе использования встроенного синтезатора (сопроцессора КР580ВИ53);\nописание распределения памяти «Байта», с детальным описанием системных переменных;\nописание системы команд Z80 (ассемблер Z80).>>>",
            "Отличия модификации «Байт-01» от «Байта»[править | править код]<<<«Байт-01» рассчитан на работу с КВУ (контроллер внешних устройств) вместо магнитофона у «Байта», соответственно, в комплекте: КВУ, адаптер сопряжения с КВУ, дискеты.\nОбъём ОЗУ стал составлять 128 КБ, но использовать его так, как оно используется на 128-х ZX Spectrum, невозможно — у «Байт-01» иной принцип организации расширенной памяти. Для управления памятью в «Байт-01» служит регистр конфигурации (аппаратно расположен в адаптере «Байт-01А»).\nСовместимость. По сравнению с компьютером «Байт» плата у «Байт-01» перекомпонована. Убраны ПЗУ РТ5 и РТ7, которые отвечали за режим совместимости в «Байт». Клавиатура не изменилась. Всё ОЗУ выполнено на КР565РУ5 — обе линейки.>>>",
            "Кнопка «Совмест» стала — «Откл. звука».\n<<<При включении компьютер не выходит сразу в Бейсик, а пытается загрузить операционную систему с загрузочной дискеты. Если нужен Бейсик, то при сбросе надо держать одновременно нажатыми клавиши «ЫВА». Из сего следует, что встроенный тест памяти, который был в «Байте», убран из ПЗУ. А ещё из этого следует, что «Байт-01» можно использовать как обычный Спектрум без подключения к КВУ.\nДля работы в CP/M появился новый графический режим — 512*192 точек в строке. Переключением графических режимов занимается порт управления экраном.>>>",
            "Разъемы[править | править код]<<<«ТВ».\n«RGB» — для подключения RGB-монитора.\n«МФ» — для подключения кассетного магнитофона.\n«Сист» — для подключения внешних интерфейсов. Стандартно «байт» позволял подключать как отечественную периферию для «Байта», так и Spectrum-периферию: КВУ, специально разработанный для «байта» и содержащий несколько НГМД и НЖМД), принтер (например, МС6313 или Epson FX800, подключались непосредственно к КВУ) или Beta Disk Interface.\n«Питание».\n«Джойстик» — для подключения внешнего джойстика.>>>",
            "Внешние носители[править | править код]<<<В качестве типового устройства для считывания и записи программ к разъёму «МФ» подключался бытовой кассетный магнитофон. Носителем информации служила классическая магнитофонная кассета типа МК 60, позволявшая хранить информацию до 500 Кбайт. Длительность загрузки программ среднего объёма составляла в среднем 2-3 минуты.\nДля работы с НГМД и НЖМД использовались следующие штатные возможности.>>>",
            "В качестве типового устройства для считывания и записи программ к разъёму «МФ» подключался бытовой кассетный магнитофон. Носителем информации служила классическая магнитофонная кассета типа МК 60, позволявшая хранить информацию до 500 Кбайт. Длительность загрузки программ среднего объёма составляла в среднем 2-3 минуты.\nДля работы с НГМД и НЖМД использовались следующие штатные возможности.<<<КВУ — заводская разработка специально для «Байта-01». Соответственно, выпускалась в более поздних модификациях. Представлял собой подобие современного Midi Tower-корпуса с несколькими НГМД и НЖМД и подключался через разъем «Сист» специальным адаптером для сопряжения модификации «Байт-01» с КВУ. Внешне комбинация «Байта» с КВУ имела сходство скорее с современным IBM PC, чем со Spectrum. КВУ позволял подключать НГМД, НЖМД, параллельный и последовательный порты, локальную сеть. Был предназначен для работы в ОС CP/M.\nПериферия ZX Spectrum, подключаемая через «родные» внешние интерфейсы ZX Spectrum, такие как DISCiPLE, Beta Disk Interface, ZX Interface 1, ZX Interface 2 — см. периферия ZX Spectrum. Периферия под данными интерфейсами работала либо с помощью стандартных команд Sinclair BASIC, либо под управлением DOS-подобных систем, например TR-DOS.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Байт_(компьютер)"
    },
    {
        "task": [
            "Определения<<<Корневой узел — самый верхний узел дерева (узел 8 на примере).\nКорень — одна из вершин, по желанию наблюдателя.>>>",
            "Корневой узел — самый верхний узел дерева (узел 8 на примере).\nКорень — одна из вершин, по желанию наблюдателя.<<<Лист, листовой или терминальный узел — узел, не имеющий дочерних элементов (узлы 1, 4, 7, 13).>>>",
            "Лист, листовой или терминальный узел — узел, не имеющий дочерних элементов (узлы 1, 4, 7, 13).<<<Внутренний узел — любой узел дерева,  имеющий потомков, и таким образом, не являющийся листовым узлом (3, 6, 10, 14).>>>",
            "Дерево считается ориентированным, если в корень не заходит ни одно ребро.\n<<<Полный сцепленный ключ — идентификатор записи, который образуется путём конкатенации всех ключей экземпляров родительских записей (групп).>>>",
            "Общие операции<<<вставка нового элемента в определённую позицию;\nвставка поддерева;\nдобавление ветви дерева (называется прививкой);\nнахождение корневого элемента для любого узла;\nнахождение наименьшего общего предка двух вершин;\nперебор всех элементов дерева;\nперебор элементов ветви дерева;\nпоиск изоморфного поддерева;\nпоиск элемента;\nудаление ветви дерева (называется обрезкой);\nудаление поддерева;\nудаление элемента.>>>",
            "Общее применение<<<управление иерархией данных;\nупрощение поиска информации (см. обход дерева);\nуправление сортированными списками данных;\nсинтаксический разбор арифметических выражений (англ. parsing), оптимизация программ;\nв качестве технологии компоновки цифровых картинок для получения различных визуальных эффектов;\nформа принятия многоэтапного решения (см. деловые шахматы).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Дерево_(структура_данных)"
    },
    {
        "task": [
            "Широко распространённые платформы, использующие байт-код[9]:\n<<<Байт-код Java (стековая виртуальная машина), исполняемый различными виртуальными машинами Java[10][11]. Платформа была создана компанией Sun для языка Java, но стала использоваться и для других языков; существуют десятки высокопроизводительных реализаций JVM, использующих JIT-компиляторы.\nСуществуют варианты трансляции Java в байт-код регистровых машин, например, в виртуальной машине Dalvik (с JIT-компиляцией) или при AOT-компиляции в ART\nПлатформа Microsoft .NET использует стековый байт-код Intermediate Language (CIL, MSIL)[8], исполняемый с помощью Common Language Runtime (CLR), создана Microsoft для C# и некоторых других языков.\nСценарный язык JavaScript выполняется различными высокопроизводительными «движками», в основном, встроенными в веб-браузеры, часто с возможностью JIT-оптимизации. Многие интерпретаторы построены с применением байт-кода, однако программы на Javascript распространяются в виде исходных кодов.\nСценарный язык ActionScript транслируется в стековый байт-код, распространяется в составе swf- и pdf-файлов, и выполняется виртуальными машинами в Adobe Flash и Adobe Acrobat.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Байт-код"
    },
    {
        "task": [
            "Наиболее распространённые ядра:\n<<<Полиномиальное (однородное): \n\n\n\nk\n(\n\nx\n\n,\n\n\nx\n\n′\n\n)\n=\n(\n\nx\n\n⋅\n\n\nx\n′\n\n\n\n)\n\nd\n\n\n\n\n{\\displaystyle k(\\mathbf {x} ,\\mathbf {x} ')=(\\mathbf {x} \\cdot \\mathbf {x'} )^{d}}\n\n\nПолиномиальное (неоднородное): \n\n\n\nk\n(\n\nx\n\n,\n\n\nx\n\n′\n\n)\n=\n(\n\nx\n\n⋅\n\n\nx\n′\n\n\n+\n1\n\n)\n\nd\n\n\n\n\n{\\displaystyle k(\\mathbf {x} ,\\mathbf {x} ')=(\\mathbf {x} \\cdot \\mathbf {x'} +1)^{d}}\n\n\nРадиальная базисная функция: \n\n\n\nk\n(\n\nx\n\n,\n\n\nx\n\n′\n\n)\n=\nexp\n⁡\n(\n−\nγ\n‖\n\nx\n\n−\n\n\nx\n′\n\n\n\n‖\n\n2\n\n\n)\n\n\n{\\displaystyle k(\\mathbf {x} ,\\mathbf {x} ')=\\exp(-\\gamma \\|\\mathbf {x} -\\mathbf {x'} \\|^{2})}\n\n, для \n\n\n\nγ\n>\n0\n\n\n{\\displaystyle \\gamma >0}\n\n\nРадиальная базисная функция Гаусса: \n\n\n\nk\n(\n\nx\n\n,\n\n\nx\n\n′\n\n)\n=\nexp\n⁡\n\n(\n\n−\n\n\n\n‖\n\nx\n\n−\n\n\nx\n′\n\n\n\n‖\n\n2\n\n\n\n\n2\n\nσ\n\n2\n\n\n\n\n\n\n)\n\n\n\n{\\displaystyle k(\\mathbf {x} ,\\mathbf {x} ')=\\exp \\left(-{\\frac {\\|\\mathbf {x} -\\mathbf {x'} \\|^{2}}{2\\sigma ^{2}}}\\right)}\n\n\nСигмоид: \n\n\n\nk\n(\n\nx\n\n,\n\n\nx\n\n′\n\n)\n=\ntanh\n⁡\n(\nκ\n\nx\n\n⋅\n\n\nx\n′\n\n\n+\nc\n)\n\n\n{\\displaystyle k(\\mathbf {x} ,\\mathbf {x} ')=\\tanh(\\kappa \\mathbf {x} \\cdot \\mathbf {x'} +c)}\n\n, для почти всех \n\n\n\nκ\n>\n0\n\n\n{\\displaystyle \\kappa >0}\n\n и \n\n\n\nc\n<\n0\n\n\n{\\displaystyle c<0}\n\n>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Метод_опорных_векторов"
    },
    {
        "task": [
            "В соответствии с ГОСТ Р 51513-99, активное оборудование — это оборудование, содержащее электронные схемы, получающее питание от электрической сети или других источников питания (батарейки, аккумулятора, солнечной панели, генератора и т. д.) и выполняющее функции преобразования, усиления сигналов и иные. Это означает способность такого оборудования обрабатывать сигнал по специальным алгоритмам. В сетях происходит пакетная передача данных, каждый пакет данных содержит также техническую информацию: сведения о его источнике, цели, целостности информации и другие, позволяющие доставить пакет по назначению. Активное сетевое оборудование не только улавливает и передает сигнал, но и обрабатывает эту техническую информацию, перенаправляя и распределяя поступающие потоки в соответствии со встроенными в память устройства алгоритмами. Эта «интеллектуальная» особенность, наряду с питанием от сети, является признаком активного оборудования.\nНапример, в состав активного оборудования включаются следующие типы устройств:\n<<<сетевой адаптер — плата, которая устанавливается в компьютер и обеспечивает его подсоединение к локальной вычислительной сети (далее — ЛВС);\nкоммутатор (свитч) (многопортовый мост) — устройство с несколькими (4-32) портами, обычно используемое для объединения нескольких рабочих групп ЛВС;\nмаршрутизатор (роутер) — используется для объединения нескольких рабочих групп ЛВС, позволяет осуществлять фильтрацию сетевого трафика, разбирая сетевые (IP) адреса;\nретранслятор — используется для создания усовершенствованной беспроводной сети с большей площадью покрытия и представляет собой альтернативу проводной сети. По умолчанию устройство работает в режиме усиления сигнала и выступает в роли ретрансляционной станции, которая улавливает радиосигнал от базового маршрутизатора сети или точки доступа и передает его на ранее недоступные участки.\nмедиаконвертер — устройство, как правило, с двумя портами, обычно используемое для преобразования среды передачи данных (коаксиал-витая пара, витая пара-оптоволокно);\nсетевой трансивер — устройство, как правило, с двумя портами, обычно используемое для преобразования интерфейса передачи данных (RS232-V35, AUI-UTP).>>>",
            "сетевой адаптер — плата, которая устанавливается в компьютер и обеспечивает его подсоединение к локальной вычислительной сети (далее — ЛВС);\nкоммутатор (свитч) (многопортовый мост) — устройство с несколькими (4-32) портами, обычно используемое для объединения нескольких рабочих групп ЛВС;\nмаршрутизатор (роутер) — используется для объединения нескольких рабочих групп ЛВС, позволяет осуществлять фильтрацию сетевого трафика, разбирая сетевые (IP) адреса;\nретранслятор — используется для создания усовершенствованной беспроводной сети с большей площадью покрытия и представляет собой альтернативу проводной сети. По умолчанию устройство работает в режиме усиления сигнала и выступает в роли ретрансляционной станции, которая улавливает радиосигнал от базового маршрутизатора сети или точки доступа и передает его на ранее недоступные участки.\nмедиаконвертер — устройство, как правило, с двумя портами, обычно используемое для преобразования среды передачи данных (коаксиал-витая пара, витая пара-оптоволокно);\nсетевой трансивер — устройство, как правило, с двумя портами, обычно используемое для преобразования интерфейса передачи данных (RS232-V35, AUI-UTP).<<<\n\n\nСетевой концентратор Cisco с  поддержкой PoE\n\n>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Сетевое_оборудование"
    },
    {
        "task": [
            "Большинство сетей хранения данных использует протокол SCSI для связи между серверами и устройствами хранения данных на уровне шинной топологии. Так как протокол SCSI не предназначен для формирования сетевых пакетов, в сетях хранения данных используются низкоуровневые протоколы:\n<<<Fibre Channel Protocol (FCP), транспорт SCSI через Fibre Channel. Наиболее часто используемый на данный момент протокол. Существует в вариантах 1 Gbit/s, 2 Gbit/s, 4 Gbit/s, 8 Gbit/s, 10 Gbit/s, 16 Gbit/s, 20 Gbit/s.\niSCSI, транспорт SCSI через TCP/IP.\niSER[англ.], транспорт iSCSI через InfiniBand / RDMA.\nSRP[англ.], транспорт SCSI через InfiniBand / RDMA.\nFCoE, транспортировка FCP/SCSI поверх «чистого» Ethernet.\nFCIP и iFCP, инкапсуляция и передача FCP/SCSI в пакетах IP.\nHyperSCSI, транспорт SCSI через Ethernet.\nFICON, транспорт через Fibre Channel (используется только мейнфреймами).\nATA over Ethernet, транспорт ATA через Ethernet.>>>",
            "В случае сетевого диска (также «блочного устройства», англ. block device):\n<<<обмен данными с ним по сети осуществляется блоками подобно тому, как и с локальным SCSI- или SATA-диском;\nфайловая система, если нужна, создаётся и управляется клиентом и, как правило, используется им одним.>>>",
            "В случае сетевой файловой системы («ресурс с совместным/разделяемым доступом» — не хранит, а только передаёт данные):\n<<<обмен данными по сети происходит с применением более высокоуровневых понятий «файл» и «каталог», соответствующих объектам подлежащей «настоящей» ФС на физических дисках (либо логических поверх них в случае применения RAID, LVM);\nэта файловая система создаётся и обслуживается в рамках удалённой системы, при этом может одновременно использоваться на чтение и запись множеством клиентов.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Сеть_хранения_данных"
    },
    {
        "task": [
            "Дерево решений состоит из трёх типов узлов:\n<<<Узлы решения — обычно представлены квадратами\nВероятностные узлы — представляются в виде круга\nЗамыкающие узлы — представляются в виде треугольника>>>",
            "Деревья решений, используемые при добыче данных, бывают двух основных типов:\n<<<Дерево для классификации, когда предсказываемый результат является классом, к которому принадлежат данные;\nДерево для регрессии, когда предсказываемый результат можно рассматривать как вещественное число (например, цена на дом, или продолжительность пребывания пациента в больнице).>>>",
            "Некоторые методы позволяют построить более одного дерева решений (ансамбли деревьев решений):\n<<<Бэггинг над деревьями решений, наиболее ранний подход. Строит несколько деревьев решений, неоднократно интерполируя данные с заменой (бутстреп), и в качестве консенсусного ответа выдаёт результат голосования деревьев (их средний прогноз);[3]\nКлассификатор «Случайный лес» основан на бэггинге, однако в дополнение к нему случайным образом выбирает подмножество признаков в каждом узле, с целью сделать деревья более независимыми;\nБустинг над деревьями может быть использован для задач как регрессии, так и классификации.[4] Одна из реализаций бустинга над деревьями, алгоритм XGBoost, неоднократно использовался победителями соревнований по анализу данных.\n«Вращение леса» — деревья, в которых каждое дерево решений анализируют первым применением метода главных компонент (PCA) на случайные подмножества входных функций.[5]>>>",
            "Есть различные способы выбирать очередной признак:\n<<<Алгоритм ID3, где выбор признака происходит на основании прироста информации (англ. Gain), либо на основании критерия Джини.\nАлгоритм C4.5 (улучшенная версия ID3), где выбор признака происходит на основании нормализованного прироста информации (англ. Gain Ratio).\nАлгоритм CART и его модификации — IndCART, DB-CART.\nАвтоматический детектор взаимодействия Хи-квадрат (CHAID). Выполняет многоуровневое разделение при расчёте классификации деревьев;[6]\nMARS: расширяет деревья решений для улучшения обработки цифровых данных.>>>",
            "В отличие от остальных методов добычи данных, метод дерева принятия решений имеет несколько достоинств:\n<<<Прост в понимании и интерпретации.\nНе требует специальной подготовки данных, как например: нормализации данных, добавления фиктивных переменных, а также удаления пропущенных данных.\nСпособен работать как с категориальными, так и с интервальными переменными. (Прочие методы работают лишь с теми данными, где присутствует лишь один тип переменных. Например, метод отношений может быть применён только на номинальных переменных, а метод нейронных сетей только на переменных, измеренных по интервальной шкале.)\nИспользует модель «белого ящика», то есть если определённая ситуация наблюдается в модели, то её можно объяснить при помощи булевой логики. Примером «черного ящика» может быть искусственная нейронная сеть, так как полученные результаты сложно объяснить.\nПозволяет оценить модель при помощи статистических тестов. Это даёт возможность оценить надёжность модели.\nМетод хорошо работает даже в том случае, если были нарушены первоначальные предположения, включённые в модель.\nПозволяет работать с большим объёмом информации без специальных подготовительных процедур. Данный метод не требует специального оборудования для работы с большими базами данных.>>>",
            "Недостатки метода<<<Проблема получения оптимального дерева решений является NP-полной задачей, с точки зрения некоторых аспектов оптимальности даже для простых задач[7][8]. Таким образом, практическое применение алгоритма деревьев решений основано на эвристических алгоритмах, таких как алгоритм «жадности», где единственно оптимальное решение выбирается локально в каждом узле. Такие алгоритмы не могут обеспечить оптимальность всего дерева в целом.\nВ процессе построения дерева решений могут создаваться слишком сложные конструкции, которые недостаточно полно представляют данные. Данную проблему называют переобучением[9]. Для того, чтобы её избежать, необходимо использовать метод «регулирования глубины дерева».\nСуществуют понятия, которые сложно понять из модели, так как модель описывает их сложным путём. Данное явление может быть вызвано проблемами XOR, чётности или мультиплексарности. В этом случае мы имеем дело с непомерно большими деревьями. Существует несколько подходов решения данной проблемы, например, попытка изменить репрезентацию концепта в модели (составление новых суждений)[10], или использование алгоритмов, которые более полно описывают и репрезентируют концепт (например, метод статистических отношений, индуктивная логика программирования).\nДля данных, которые включают категориальные переменные с большим набором уровней (закрытий), больший информационный вес присваивается тем признакам, которые имеют большее количество уровней[11].>>>",
            "Предположим, что нас интересует, выиграет ли наша любимая футбольная команда следующий матч.\nМы знаем, что это зависит от ряда параметров; перечислять их все — задача безнадёжная, поэтому ограничимся основными:\n<<<выше ли находится соперник по турнирной таблице;\nдома ли играется матч;\nпропускает ли матч кто-либо из лидеров команды;\nидёт ли дождь.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Дерево_решений"
    },
    {
        "task": [
            "\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\nCommand (1)\nVersion (1)\nRouting Domain (должен быть 0) (2)\n\n\nRIP Entry (20)\n<<<Command — команда, определяет назначение датаграммы (1 — request; 2 — response)\nVersion — номер версии, в зависимости от версии, определяется формат пакета\nRouting Domain — идентификатор RIP-системы, к которой принадлежит данное сообщение; часто — номер автономной системы. Используется, когда к одному физическому каналу подключены маршрутизаторы из нескольких автономных систем, в каждой автономной системе поддерживается своя таблица маршрутов. Поскольку сообщения RIP рассылаются всем маршрутизаторам, подключенным к сети, требуется различать сообщения, относящиеся к «своей» и «чужой» автономным системам. Поле использовалось короткое время в версии протокола RIP-2. В протоколе RIP-1 и в текущей версии RIP-2 не используется.\nRIP Entry (RTE) — запись маршрутной информации RIP. RIP пакет может содержать от 1 до 25 записей RIP Entry.>>>",
            "\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\nAddress family identifier (2)\nmust be zero (2)\n\n\nIPv4 address (4)\n\n\nMust be zero (4)\n\n\nMust be zero (4)\n\n\nMetric (4)\n<<<Address family identifier (AFI) — тип адреса, обычно поддерживается только запись AF_INET, которое равно 2 (т. е. используется для протокола IP).\nMust be zero — должно быть нулём.\nIPv4 address — IP адрес места назначения (хост или сеть)\nMetric — метрика маршрута>>>",
            "\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\nAddress family identifier (2)\nRoute Tag (2)\n\n\nIPv4 address (4)\n\n\nSubnet mask (4)\n\n\nNext hop (4)\n\n\nMetric (4)\n<<<Address Family Identifier (AFI) — тип адреса, обычно поддерживается только запись AF_INET, которое равно 2 (т.е. используется для протокола IP).\nRoute Tag (RT) — тег маршрута. Предназначен для разделения «внутренних» маршрутов от «внешних», взятых, например, из другого IGP или EGP.\nIP Address — IP адрес места назначения.\nSubnet Mask — маска подсети\nNext Hop — следующий хоп. Содержит IP адрес маршрутизатора к месту назначения. Значение 0.0.0.0 — хопом к месту назначения является отправитель пакета. Необходимо, если протокол RIP не может быть запущен на всех маршрутизаторах.\nMetric — метрика маршрута.>>>",
            "Реализации<<<Berkeley routed\nZebra Архивная копия от 1 февраля 2022 на Wayback Machine\nQuagga Архивная копия от 21 апреля 2008 на Wayback Machine\nnx-routed Архивная копия от 23 ноября 2008 на Wayback Machine\nBird Архивная копия от 12 июля 2011 на Wayback Machine>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/RIP_(сетевой_протокол)"
    },
    {
        "task": [
            "Основные направления работ по бионике охватывают следующие проблемы:\n<<<изучение нервной системы человека и животных и моделирование нервных клеток (нейронов) и нервных сетей для дальнейшего совершенствования вычислительной техники и разработки новых элементов и устройств автоматики и телемеханики (нейробионика);\nисследование органов чувств и других воспринимающих систем живых организмов с целью разработки новых датчиков и систем обнаружения;\nизучение принципов ориентации, локации и навигации у различных животных для использования этих принципов в технике;\nисследование морфологических, физиологических, биохимических особенностей живых организмов для выдвижения новых технических и научных идей.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Бионика"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Реляционная_СУБД"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Обмен_сообщениями"
    },
    {
        "task": [
            "Типы входных данных[править | править код]<<<Признаковое описание — наиболее распространённый случай. Каждый объект описывается набором своих характеристик, называемых признаками. Признаки могут быть числовыми или нечисловыми.\nМатрица расстояний между объектами. Каждый объект описывается расстояниями до всех остальных объектов обучающей выборки. С этим типом входных данных работают немногие методы, в частности, метод k ближайших соседей, метод парзеновского окна, метод потенциальных функций.\nВременной ряд или сигнал представляет собой последовательность измерений во времени. Каждое измерение может представляться числом, вектором, а в общем случае — признаковым описанием исследуемого объекта в данный момент времени.\nИзображение или видеоряд.\nВстречаются и более сложные случаи, когда входные данные представляются в виде графов, текстов, результатов запросов к базе данных, и т. д. Как правило, они приводятся к первому или второму случаю путём предварительной обработки данных и извлечения признаков.>>>",
            "Типы откликов[править | править код]<<<Когда множество возможных ответов бесконечно (ответы являются действительными числами или векторами), говорят о задачах регрессии и аппроксимации ;\nКогда множество возможных ответов конечно, говорят о задачах классификации и распознавания образов;\nКогда ответы характеризуют будущие поведения процесса или явления, говорят о задачах прогнозирования.>>>",
            "Вырожденные виды систем управления подкреплением («учителей»)<<<Система подкрепления с управлением по реакции (R — управляемая система) — характеризуется тем, что информационный канал от внешней среды к системе подкрепления не функционирует. Данная система, несмотря на наличие системы управления, относится к спонтанному обучению, так как испытуемая система обучается автономно, под действием лишь своих выходных сигналов независимо от их «правильности». При таком методе обучения для управления изменением состояния памяти не требуется никакой внешней информации;\nСистема подкрепления с управлением по стимулам (S — управляемая система) — характеризуется тем, что информационный канал от испытываемой системы к системе подкрепления не функционирует. Несмотря на нефункционирующий канал от выходов испытываемой системы, относится к обучению с учителем, так как в этом случае система подкрепления (учитель) заставляет испытываемую систему вырабатывать реакции согласно определённому правилу, хотя и не принимается во внимание наличие истинных реакций испытываемой системы.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Обучение_с_учителем"
    },
    {
        "task": [
            "Существует два основных способа оценки удобства (пригодности) использования продукта[2][4]:\n<<<прямая оценка на основе анализа результативности, эффективности и удовлетворённости, достигнутых в результате эксплуатации продукта в реальных условиях: если в указанных условиях одна система более эргономична, чем другая, то оценка должна это выявлять;\nкосвенная оценка на основе анализа отдельных подхарактеристик, отражающих определённые свойства системы в установленных условиях эксплуатации.>>>",
            "Косвенная оценка рассматривается в стандарте ISO/IEC 25010, который описывает следующие подхарактеристики удобства использования[2]:\n<<<определимость пригодности (англ. appropriateness recognizability): возможность пользователя понять, подходит ли продукт или система для его потребностей, на основе первоначальных впечатлений, документации и другой предоставленной информации;\nизучаемость (англ. learnability): степень эффективности, производительности и удовлетворённости пользователя обучением использованию системы;\nуправляемость (англ. operability, controllability): обеспечение простоты управления и контроля;\nзащищённость от ошибок пользователя (англ. user error protection): степень, в которой система защищает пользователя от совершения ошибок;\nэстетика пользовательского интерфейса (англ. user interface aesthetics): степень, в которой пользовательский интерфейс удовлетворяет пользователя и доставляет ему удовольствие от процесса взаимодействия;\nдоступность (англ. accessibility): возможность использования продукта или системы широким кругом людей с самыми разными (в том числе, ограниченными) возможностями.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Юзабилити"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Копирайтинг"
    },
    {
        "task": [
            "Языки, предназначенные для простого и быстрого добавления форматирования в текстовые данные, называются облегчёнными (en:Lightweight markup language). Особенности таких языков:\n<<<Минимум функций.\nНебольшой набор поддерживаемых тегов.\nЛегки в освоении.\nИсходный текст на таком языке читается с такой же лёгкостью, как и готовый документ.>>>",
            "Применяются они там, где человеку приходится подготавливать текст в обычном текстовом редакторе (блоги, форумы, вики), либо там, где важно, чтобы пользователь с обычным текстовым редактором также мог прочитать текст. Вот несколько широко распространённых облегчённых языков разметки:\n<<<BBCode\nMarkdown\nreStructuredText\nTextile\nВики-разметка (см. Википедия:Как править статьи)\nРазличные системы автодокументирования (например, Javadoc).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Язык_разметки"
    },
    {
        "task": [
            "Существует три способа коммутации. Каждый из них — это комбинация таких параметров, как время ожидания и надёжность передачи.\n<<<С промежуточным хранением (store and forward). Коммутатор читает всю информацию в кадре, проверяет его на отсутствие ошибок, выбирает порт коммутации и после этого посылает в него кадр.\nСквозной (cut-through). Коммутатор считывает в кадре только адрес назначения и после выполняет коммутацию. Этот режим уменьшает задержки при передаче, но в нём нет метода обнаружения ошибок.\nБесфрагментный (fragment-free) или гибридный . Этот режим является модификацией сквозного режима, который частично решает проблему коллизий. В теории поврежденные кадры (обычно из-за столкновений) часто короче минимального допустимого размера кадра Ethernet, равного 64 байтам. Поэтому в этом режиме коммутатор отбрасывает кадры длиной меньше 64 байт, а все остальные после прочтения первых 64 байт в сквозном режиме передаёт дальше[источник не указан 1192 дня].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Сетевой_коммутатор"
    },
    {
        "task": [
            "В первую очередь отметим, что для линейных моделей МНК-оценки являются линейными оценками, как это следует из вышеприведённой формулы. Для несмещённости МНК-оценок необходимо и достаточно выполнения важнейшего условия регрессионного анализа: условное по факторам математическое ожидание случайной ошибки должно быть равно нулю. Данное условие, в частности, выполнено, если\n<<<математическое ожидание случайных ошибок равно нулю и\nфакторы и случайные ошибки — независимые случайные величины.>>>",
            "Для того, чтобы кроме состоятельности и несмещённости, оценки (обычного) МНК были ещё и эффективными (наилучшими в классе линейных несмещённых оценок), необходимо выполнение дополнительных свойств случайной ошибки:\n<<<Постоянная (одинаковая) дисперсия случайных ошибок во всех наблюдениях (отсутствие гетероскедастичности): \n\n\n\nV\n(\n\nε\n\nt\n\n\n)\n=\n\nσ\n\n2\n\n\n=\nc\no\nn\ns\nt\n\n\n{\\displaystyle V(\\varepsilon _{t})=\\sigma ^{2}=const}\n\n.>>>",
            "Постоянная (одинаковая) дисперсия случайных ошибок во всех наблюдениях (отсутствие гетероскедастичности): \n\n\n\nV\n(\n\nε\n\nt\n\n\n)\n=\n\nσ\n\n2\n\n\n=\nc\no\nn\ns\nt\n\n\n{\\displaystyle V(\\varepsilon _{t})=\\sigma ^{2}=const}\n\n.<<<Отсутствие корреляции (автокорреляции) случайных ошибок в разных наблюдениях между собой \n\n\n\nc\no\nv\n(\n\nε\n\ni\n\n\n,\n\nε\n\nj\n\n\n)\n=\n0\n\n∀\n1\n≤\ni\n<\nj\n≤\nn\n\n\n{\\displaystyle cov(\\varepsilon _{i},\\varepsilon _{j})=0\\quad \\forall 1\\leq i<j\\leq n}\n\n.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Метод_наименьших_квадратов"
    },
    {
        "task": [
            "Основные понятия АОП:\n<<<Аспект (англ. aspect) — модуль или класс, реализующий сквозную функциональность. Аспект изменяет поведение остального кода, применяя совет в точках соединения, определённых некоторым срезом.\nСовет (англ. advice) — средство оформления кода, которое должно быть вызвано из точки соединения. Совет может быть выполнен до, после или вместо точки соединения.\nТочка соединения (англ. join point) — точка в выполняемой программе, где следует применить совет. Многие реализации АОП позволяют использовать вызовы методов и обращения к полям объекта в качестве точек соединения.\nСрез (англ. pointcut) — набор точек соединения. Срез определяет, подходит ли данная точка соединения к данному совету. Самые удобные реализации АОП используют для определения срезов синтаксис основного языка (например, в AspectJ применяются Java-сигнатуры) и допускают их повторное использование с помощью переименования и комбинирования.\nВнедрение (англ. introduction, введение) — изменение структуры класса и/или изменение иерархии наследования для добавления функциональности аспекта в инородный код. Обычно реализуется с помощью некоторого метаобъектного протокола (англ. metaobject protocol, MOP).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Аспектно-ориентированное_программирование"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Процедурное_программирование"
    },
    {
        "task": [
            "Компактные корпуса и встроенные системы[править | править код]<<<ITX\nCFF (Сompact Form Factor)\nLFF (Low Profile Form Factor)\nSFF (Small Form Factor)\nTFF (Thin Form Factor)\nFlexATX\nMini PCI\nATX>>>",
            "Устаревшие[править | править код]<<<Baby-AT;\nMini-ATX;\nполноразмерная плата AT;\nLPX;\nВ СССР выпускались одноплатные микроЭВМ на базе платы размером 220 × 233 мм (типа Е2) с тремя разъёмами типа СНП-59-96. Разъёмы X1, X2 обеспечивали интерфейс И-41, функции разъёма X3 (не имел выхода на системную шину и обычно использовался для связи со внешними устройствами или другими микроЭВМ) определял пользователь[2].>>>",
            "Современные[править | править код]<<<АТХ;\nmicroATX;\nFlex-АТХ;\nNLX;\nWTX,\nCEB>>>",
            "Традиционные настольные[править | править код]<<<AT\nATX\nMini-ITX\nBTX\nCEB\nDTX>>>",
            "Внедряемые[править | править код]<<<Mini-ITX;\nNano-ITX;\nPico-ITX;\nBTX;\nMicroBTX;\nPicoBTX>>>",
            "Несмотря на похожий конструктив накопители M.2 SATA нельзя установить вместо M.2 NVMe и M.2 NVMe нельзя установить вместо M.2 SATA, они несовместимы друг с другом. Внешне их можно различить по количеству вырезов на контактах платы накопителя и соответствующих ключевых вставок на ответном разъёме: у M.2 SATA их два, а у M.2 NVMe — один.\n<<<\n\n\n2,5\" SATA и mSATA накопители\n\n\n\nmSATA и M.2 SATA накопители\n\n\n\nmSATA и M.2 NVMe накопители\n\n\n\nM.2 SATA слева, M.2 NVMe справа\n\n\n\nРазъём и крепёж M.2 NVMe накопителя на материнской плате компьютера\n\n\n\nM.2 NVMe накопитель на материнской плате компьютера\n\n>>>",
            "Корпуса сотовых телефонов<<<Моноблок (классический)\nРаскладушка («книжка», «лягушка»)\nПсевдораскладушка (моноблок с откидной крышкой, которая только прикрывает клавиатуру, без какой-либо функциональности)\nСлайдер («сдвижка»), боковой слайдер\nРотатор (с поворотным механизмом)\nБраслет (носится на запястье)\nСтационарный\nВозимый (автомобильный)>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Форм-фактор_(техника)"
    },
    {
        "task": [
            "Кроме классического метода обучения перцептрона — метода коррекции ошибки, который можно отнести к обучению с учителем, Розенблатт также ввёл понятие об обучении без учителя, предложив несколько способов обучения:\n<<<Альфа-системой подкрепления называется система подкрепления, при которой веса всех активных связей \n\n\n\n\nc\n\ni\nj\n\n\n\n\n{\\displaystyle c_{ij}}\n\n, которые ведут к элементу \n\n\n\n\nu\n\nj\n\n\n\n\n{\\displaystyle u_{j}}\n\n, изменяются на одинаковую величину r, а веса неактивных связей за это время не изменяются.\nГамма-системой подкрепления называется такое правило изменения весовых коэффициентов некоторого элемента, при котором веса всех активных связей сначала изменяются на равную величину, а затем из их всех весов связей вычитается другая величина, равная полному изменению весов всех активных связей, делённому на число всех связей. Эта система обладает свойством консервативности относительно весов, так как у неё полная сумма весов всех связей не может ни возрастать, ни убывать.>>>",
            "Реализации<<<BURLAP (Brown-UMBC Reinforcement Learning and Planning) — библиотека одно- и многоагентных алгоритмов планирования и обучения с подкреплением, язык Java, лицензия LGPL\nMMLF (Maja Machine Learning Framework) — библиотека алгоритмов обучения с подкреплением и набор тестовых сред для их проверки, язык Python, лицензия GPL\nOpenAI Gym — платформа для разработки и сравнения алгоритмов обучения с подкреплением от OpenAI, язык Python, лицензия MIT\nPyBrain — библиотека алгоритмов машинного обучения, язык Python, лицензия BSD\nRLPy — библиотека для проведения экспериментов по обучению с подкреплением, язык Python, 3-х пунктовая лицензия BSD\nTeachingbox — инструментарий для разработки алгоритмов обучения с подкреплением, язык Java, лицензия GPL>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Обучение_с_подкреплением"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Цифровые_технологии"
    },
    {
        "task": [
            "Микроядра предоставляют лишь небольшой набор низкоуровневых примитивов/механизмов/сервисов для:\n<<<управления физической и виртуальной памятью компьютера (выделение памяти процессам, обеспечение её изоляции/защиты);\nуправления процессорным временем (сервисы для работы с потоками (нитями) процессов (см. планировщик потоков (англ. scheduling));\nуправления доступом к устройствам ввода-вывода (открытие/закрытие доступа к портам ввода-вывода и MMIO-памяти устройств);\nкоммуникации и синхронизации процессов (англ. inter process communications, IPC) (управляемое и контролируемое нарушение изоляции памяти процесса для организации обмена данными).>>>",
            "Остальные примитивы/функции/компоненты/сервисы/модули, например:\n<<<драйверы устройств;\nреализации файловых систем;\nстеки TCP/IP, USB и др.>>>",
            "Преимущества ОС, построенной на микроядре, по сравнению с ОС, построенной на монолитном ядре:\n<<<простота реализации (ядро и компоненты реализуют чётко определённую функциональность, поэтому размер их кода невелик);\nпростота отладки (компоненты — обычные процессы, поэтому могут отлаживаться с помощью инструментов, созданных для отладки процессов);\nгарантированная безопасность (код небольшого размера можно проверить на корректность вручную или автоматически — с помощью математических рассуждений);\nнадёжность (в ОС с микроядерной архитектурой ошибка в одном из компонентов приведёт к завершению процесса компонента; в ОС с монолитным ядром отказ компонента приведёт к отказу ОС);\nмодульность (в микроядерной ОС большее число компонентов может быть запущено и остановлено по необходимости; например, для исправления ошибки можно внести изменения в код компонента, скомпилировать новый компонент, остановить старый и запустить новый).>>>",
            "Недостатки ОС, построенной на микроядре, по сравнению с ОС, построенной на монолитном ядре:\n<<<более низкая производительность (из-за накладных расходов на IPC).>>>",
            "Первое поколение[править | править код]<<<Микроядро Mach от университета Карнеги — Меллон (CMU).\nМикроядро ОС ChorusOS от института INRIA.>>>",
            "Второе поколение[править | править код]<<<Микроядро из ОС Minix от Эндрю Таненбаума (свободный университет Амстердама).\nL3 от Йохена Лидтке.\nL4/x86 от Йохена Лидтке.>>>",
            "Третье поколение[править | править код]<<<seL4 от фирмы NICTA[англ.].\nCoyotos (англ.) от фирмы «The EROS Group, LLC».\nNOVA[1].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Микроядро"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Проектирование_программного_обеспечения"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Цифровой_сигнал"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Симметричная_многопроцессорность"
    },
    {
        "task": [
            "Список примеров в этой статье не основывается на авторитетных источниках, посвящённых непосредственно предмету статьи. Добавьте ссылки на источники, предметом рассмотрения которых является тема настоящей статьи (или раздела) в целом, а не отдельные элементы списка. В противном случае список примеров может быть удалён.<<<NTLDR — загрузчик ядра Windows NT/2000/XP.\nWindows Boot Manager (bootmgr, winload.exe) — загрузчик ядра Windows Vista, Windows 7, Windows 8 и Windows 10.\nLILO (LInux LOader) — загрузчик, в основном применяемый для загрузки ядра Linux.\nGRUB (Grand Unified Bootloader Архивная копия от 26 ноября 2007 на Wayback Machine) — применяется для загрузки ядра Linux и Hurd (StartUp Manager).\nOS/2 BootManager — загрузчик ядра OS/2.\nRedBoot — загрузчик для встраиваемых систем. Домашняя страница RedBoot Архивная копия от 6 декабря 2008 на Wayback Machine.\nSILO (SPARC Improved bootLOader) — загрузчик Linux и Solaris для машин с архитектурой SPARC. Домашняя страница SILO Архивная копия от 20 марта 2008 на Wayback Machine.\nLoadlin — загружает Linux из-под DOS или Windows. Домашняя страница Loadlin Архивная копия от 27 мая 2009 на Wayback Machine.\nSyslinux — загружает Linux из-под DOS или Windows.\nYaboot — загрузчик Linux на PowerPC.\nBootX — загрузчик Mac OS X.\nbootman — загрузчик BeOS.\nBootManager — загрузчик Haiku.\nDas U-Boot — универсальный загрузчик, применяется в основном во встраиваемых (embedded) системах.\nPlop Boot Manager — универсальный загрузчик, запускается с помощью собственных загрузчиков Windows и Linux, а также со съемных носителей. Домашняя страница Plop Boot Manager Архивная копия от 23 апреля 2011 на Wayback Machine.\nSyMon — мультизагрузчик;код на Ассемблере.Формируя MBR,комбинацией из 36 партиций,имеет 20 вариантов загрузки.Диск 502Гб; 2Тб(3.23.02b)Домашняя страница SyMon.\nAcronis OS Selector — коммерческая графическая утилита прилагаемая к Acronis Disk Director, поддерживает Windows и Linux, появляется перед каждой загрузкой системы, умеет копировать системы [1] Архивная копия от 16 марта 2010 на Wayback Machine.\nuMon — загрузчик для встраиваемых систем.\nbarebox — загрузчик для встраиваемых систем.\nParagon Boot Manager — универсальный загрузчик, распространяется с дистрибутивом Paragon Partition Manager.\nXorBoot — универсальный загрузчик.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Загрузчик_операционной_системы"
    },
    {
        "task": [
            "Обычно архив содержит 3 файла в нижеприведенной последовательности:\n<<<debian-binary — текстовый файл, содержащий версию формата deb-пакета (современный формат — версия 2.0);\ncontrol.tar — tar-архив, содержащий информацию и скрипты установки пакета, может быть сжат с помощью gzip или xz, тип архива отображается в имени файла (к примеру control.tar.gz).\ndata.tar — tar-архив, содержащий дерево устанавливаемых файлов пакета, может быть сжат с помощью gzip, bzip2, lzma или xz, тип архива отображается в имени файла (к примеру data.tar.gz).>>>",
            "Архив control.tar содержит информацию о поставляемом в данном пакете программном обеспечении:\n<<<control — содержит краткую информацию о пакете программного обеспечения: наименование, версия, описание, целевая архитектура, зависимости от других пакетов и так далее;\nmd5sums — cодержит MD5-суммы всех устанавливаемых файлов;\nconffiles — список файлов пакета, являющихся конфигурационными, при обновлении файлы из этого списка не перезаписываются новыми, если это не указано отдельно;\npreinst, postinst, prerm, postrm — необязательные сценарии оболочки, выполняемые соответственно до и после установки или удаления пакета;\nconfig — сценарий для debconf — механизма конфигурации;\nshlibs — список разделяемых библиотек пакета.>>>",
            "deb http://ftp.debian.org/debian squeeze main contrib non-free\n<<<deb — указание типа репозитория\nhttp://ftp.**** — URI корня репозитория. Может использоваться http:// ftp:// file:// и некоторые другие схемы.\nsqueeze — distribution part. Версия операционной системы.\nmain contrib *** *** — component — Компоненты операционной системы (в основном различающиеся свободой).>>>",
            "Репозиторий, размещенный в сетевых хранилищах, обычно объединяет несколько distribution part с общим хранением пакетов. структура обычно такова.\n<<</pool/ — структуированное по имени хранилище скомпилированных пакетов и исходных текстов программ.\n/dists/ — списки пакетов, входящие в определённый distribution part.>>>",
            "Структура имени пакетов такова: имя-дополнение-версия_архитектура.deb\n<<<Имя пакета;\nЕсли данный пакет содержит:\nзаголовочные и другие файлы для разработчиков → «-dev»;\nотладочную информацию → «-dbg»;\nфайлы документации → «-doc»;\nисполняемые файлы (обычно идущие с библиотеками) → «-bin»;\n«-» и версия пакета\nПосле основной версии может стоять номер ревизии пакета в виде «-1», «-2»…\nЕсли изменения касаются только соответствия критериям Debian по определению свободного ПО, то «.dfsg-1», «.dfsg-2»…\nДля обновлений безопасности внутри стабильной ветки Debian добавляется «etch2», «lenny1»…\nЕсли пакет загружен в репозиторий не одним из основных мейнтейнеров (англ. NMU-upload), то добавляется «+1», «+2»…\n«_» и архитектура: «_i386», «_amd64», «_all»…>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Deb_(формат_файлов)"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Макрокоманда"
    },
    {
        "task": [
            "Но \n\n\n\n\n\n\n\n\n\n\n\n∂\nE\n\n\n\n\n\n\n\n\n\n∂\n\nS\n\nk\n\n\n\n\n\n\n\n\n\n{\\displaystyle {\\cfrac {\\partial E}{\\partial S_{k}}}}\n\n — это в точности аналогичная поправка, но вычисленная для узла следующего уровня. Будем обозначать её через \n\n\n\n\nδ\n\nk\n\n\n\n\n{\\displaystyle \\delta _{k}}\n\n — от \n\n\n\n\nΔ\n\nk\n\n\n\n\n{\\displaystyle \\Delta _{k}}\n\n она отличается отсутствием множителя \n\n\n\n(\n−\nη\n\nx\n\ni\n,\nj\n\n\n)\n\n\n{\\displaystyle (-\\eta x_{i,j})}\n\n. Поскольку мы научились вычислять поправку для узлов последнего уровня и выражать поправку для узла более низкого уровня через поправки более высокого, можно уже писать алгоритм. Именно из-за этой особенности вычисления\nпоправок алгоритм называется алгоритмом обратного распространения ошибки (backpropagation). Краткое резюме проделанной работы:\n<<<для узла последнего уровня>>>",
            "\n\n\n\n\nδ\n\nj\n\n\n=\n−\n2\nα\n\no\n\nj\n\n\n(\n1\n−\n\no\n\nj\n\n\n)\n(\n\nt\n\nj\n\n\n−\n\no\n\nj\n\n\n)\n\n\n{\\displaystyle \\delta _{j}=-2\\alpha o_{j}(1-o_{j})(t_{j}-o_{j})}\n\n\n<<<для внутреннего узла сети>>>",
            "\n\n\n\n\nδ\n\nj\n\n\n=\n2\nα\n\no\n\nj\n\n\n(\n1\n−\n\no\n\nj\n\n\n)\n\n\n\n∑\n\nk\n∈\n\nC\nh\ni\nl\nd\nr\ne\nn\n\n(\nj\n)\n\n\n\n\n\nδ\n\nk\n\n\n\nw\n\nj\n,\nk\n\n\n\n\n{\\displaystyle \\delta _{j}=2\\alpha o_{j}(1-o_{j})\\!\\!\\sum _{k\\in \\mathrm {Children} (j)}\\!\\!\\delta _{k}w_{j,k}}\n\n\n<<<для всех узлов>>>",
            "Алгоритм:\nBackPropagation \n\n\n\n(\nη\n,\nα\n,\n{\n\nx\n\ni\n\n\nd\n\n\n,\n\nt\n\nd\n\n\n\n}\n\ni\n=\n1\n,\nd\n=\n1\n\n\nn\n,\nm\n\n\n,\n\n\nsteps\n\n\n)\n\n\n{\\displaystyle (\\eta ,\\alpha ,\\{x_{i}^{d},t^{d}\\}_{i=1,d=1}^{n,m},{\\textrm {steps}})}\n\n\n<<<Инициализировать \n\n\n\n{\n\nw\n\ni\nj\n\n\n\n}\n\ni\n,\nj\n\n\n\n\n{\\displaystyle \\{w_{ij}\\}_{i,j}}\n\n маленькими случайными значениями, \n\n\n\n{\nΔ\n\nw\n\ni\nj\n\n\n\n}\n\ni\n,\nj\n\n\n=\n0\n\n\n{\\displaystyle \\{\\Delta w_{ij}\\}_{i,j}=0}\n\n\nПовторить NUMBER_OF_STEPS раз:\n.Для всех d от 1 до m:\nПодать \n\n\n\n{\n\nx\n\ni\n\n\nd\n\n\n}\n\n\n{\\displaystyle \\{x_{i}^{d}\\}}\n\n на вход сети и подсчитать выходы \n\n\n\n\no\n\ni\n\n\n\n\n{\\displaystyle o_{i}}\n\n каждого узла.\nДля всех \n\n\n\nk\n∈\nO\nu\nt\np\nu\nt\ns\n\n\n{\\displaystyle k\\in Outputs}\n\n\n\n\n\n\n\nδ\n\nk\n\n\n=\n−\n\no\n\nk\n\n\n(\n1\n−\n\no\n\nk\n\n\n)\n(\n\nt\n\nk\n\n\n−\n\no\n\nk\n\n\n)\n\n\n{\\displaystyle \\delta _{k}=-o_{k}(1-o_{k})(t_{k}-o_{k})}\n\n.\nДля каждого уровня l, начиная с предпоследнего:\nДля каждого узла j уровня l вычислить\n\n\n\n\n\nδ\n\nj\n\n\n=\n\no\n\nj\n\n\n(\n1\n−\n\no\n\nj\n\n\n)\n\n∑\n\nk\n∈\nC\nh\ni\nl\nd\nr\ne\nn\n(\nj\n)\n\n\n\nδ\n\nk\n\n\n\nw\n\nj\n,\nk\n\n\n\n\n{\\displaystyle \\delta _{j}=o_{j}(1-o_{j})\\sum _{k\\in Children(j)}\\delta _{k}w_{j,k}}\n\n.\nДля каждого ребра сети {i, j}\n\n\n\n\nΔ\n\nw\n\ni\n,\nj\n\n\n(\nn\n)\n=\nα\nΔ\n\nw\n\ni\n,\nj\n\n\n(\nn\n−\n1\n)\n+\n(\n1\n−\nα\n)\nη\n\nδ\n\nj\n\n\n\no\n\ni\n\n\n\n\n{\\displaystyle \\Delta w_{i,j}(n)=\\alpha \\Delta w_{i,j}(n-1)+(1-\\alpha )\\eta \\delta _{j}o_{i}}\n\n.\n\n\n\n\n\nw\n\ni\n,\nj\n\n\n(\nn\n)\n=\n\nw\n\ni\n,\nj\n\n\n(\nn\n−\n1\n)\n−\nΔ\n\nw\n\ni\n,\nj\n\n\n(\nn\n)\n\n\n{\\displaystyle w_{i,j}(n)=w_{i,j}(n-1)-\\Delta w_{i,j}(n)}\n\n.\nВыдать значения \n\n\n\n\nw\n\ni\nj\n\n\n\n\n{\\displaystyle w_{ij}}\n\n.>>>",
            "Пример реализации[править | править код]<<<Статья «A Step by Step Backpropagation Example» от Matt Mazur\nКод по статье (реализация нейросети)\nОбсуждение примера реализации>>>",
            "Существует два режима реализации метода обратного распространения ошибки：\n<<<Стохастического (stochastic) градиентного спуска\nПакетного (batch) градиентного спуска>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Метод_обратного_распространения_ошибки"
    },
    {
        "task": [
            "Основные идеи:\n<<<люди и взаимодействие важнее процессов и инструментов;\nработающий продукт важнее исчерпывающей документации;\nсотрудничество с заказчиком важнее согласования условий контракта;\nготовность к изменениям важнее следования первоначальному плану.>>>",
            "Основополагающие принципы Agile Manifesto[5][6]:\n<<<наивысшим приоритетом признается удовлетворение заказчика за счёт ранней и бесперебойной поставки ценного программного обеспечения;\nизменение требований приветствуется даже в конце разработки (это может повысить конкурентоспособность полученного продукта);\nчастая поставка работающего программного обеспечения (каждые пару недель или пару месяцев с предпочтением меньшего периода);\nобщение представителей бизнеса с разработчиками должно быть ежедневным на протяжении всего проекта;\nпроекты следует строить вокруг заинтересованных людей, которых следует обеспечить нужными условиями работы, поддержкой и доверием;\nсамый эффективный метод обмена информацией в команде — личная встреча;\nработающее программное обеспечение — лучший измеритель прогресса;\nспонсоры, разработчики и пользователи должны иметь возможность поддерживать постоянный темп на неопределённый срок;\nпостоянное внимание к техническому совершенству и хорошему проектированию увеличивают гибкость;\nпростота, как искусство не делать лишней работы, очень важна;\nлучшие требования, архитектура и проектные решения получаются у самоорганизующихся команд;\nкоманда регулярно обдумывает способы повышения своей эффективности и соответственно корректирует рабочий процесс.>>>",
            "Существуют методологии, которые придерживаются ценностей и принципов заявленных в Agile Manifesto, некоторые из них:\n<<<Agile Modeling[англ.] — набор понятий, принципов и приёмов (практик), позволяющих быстро и просто выполнять моделирование и документирование в проектах разработки программного обеспечения. Не включает в себя детальную инструкцию по проектированию, не содержит описаний, как строить диаграммы на UML. Основная цель: эффективное моделирование и документирование; но не охватывает программирование и тестирование, не включает вопросы управления проектом, развёртывания и сопровождения системы. Однако включает в себя проверку модели кодом[7].\nAgile Unified Process (AUP) упрощенная версия IBM Rational Unified Process (RUP), разработанная Скоттом Амблером, которая описывает простое и понятное приближение (модель) для создания программного обеспечения для бизнес-приложений.\nAgile Data Method[англ.] — группа итеративных методов разработки программного обеспечения, в которых требования и решения достигаются в рамках сотрудничества разных кросс-функциональных команд.\nDSDM основан на концепции быстрой разработки приложений (Rapid Application Development, RAD). Представляет собой итеративный и инкрементный подход, который придаёт особое значение продолжительному участию в процессе пользователя/потребителя.\nEssential Unified Process[англ.] (EssUP).\nЭкстремальное программирование (англ. Extreme programming, XP).\nFeature driven development (FDD) — функционально-ориентированная разработка. Используемое в FDD понятие функции или свойства (англ. feature) системы достаточно близко к понятию прецедента использования, используемому в RUP, существенное отличие — это дополнительное ограничение: «каждая функция должна допускать реализацию не более, чем за две недели». То есть если сценарий использования достаточно мал, его можно считать функцией. Если же велик, то его надо разбить на несколько относительно независимых функций.\nGetting Real — итеративный подход без функциональных спецификаций, использующийся для веб-приложений. В данном методе сперва разрабатывается интерфейс программы, а потом её функциональная часть.\nOpenUP — это итеративно-инкрементальный метод разработки программного обеспечения. Позиционируется как лёгкий и гибкий вариант RUP. OpenUP делит жизненный цикл проекта на четыре фазы: начальная фаза, фазы уточнения, конструирования и передачи. Жизненный цикл проекта обеспечивает предоставление заинтересованным лицам и членам коллектива точек ознакомления и принятия решений на протяжении всего проекта. Это позволяет эффективно контролировать ситуацию и вовремя принимать решения о приемлемости результатов. План проекта определяет жизненный цикл, а конечным результатом является окончательное приложение.\nScrum устанавливает правила управления процессом разработки и позволяет использовать уже существующие практики кодирования, корректируя требования или внося тактические изменения. Использование этой методологии дает возможность выявлять и устранять отклонения от желаемого результата на более ранних этапах разработки программного продукта.\nБережливая разработка программного обеспечения (англ. lean software development) использует подходы из концепции бережливого производства.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Гибкая_методология_разработки"
    },
    {
        "task": [
            "Известные кодеки<<<H.264 (AVC) — проприетарный кодек.\nH.265 (HEVC) — проприетарный кодек.\nH.266 (VVC) — проприетарный кодек.\nVP8 — свободный видеокодек, разработанный Google\nVP9 — свободный видеокодек, разработанный Google\nAV1\nTheora — свободный видеокодек, разработанный Фондом Xiph.Org.\nDaala — свободный формат сжатия видео и референсный видеокодек, разрабатываемые в Xiph.Org\nDivX — проприетарный кодек.\nXvid — свободная альтернатива DivX.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Видеокодек"
    },
    {
        "task": [
            "Примеры использования<<<k-means — алгоритм кластеризации, построенный на идее EM-алгоритма\nМетод упругих карт для нелинейного сокращения размерности данных\nАлгоритм Баума-Велша — алгоритм для оценки параметров скрытых марковских моделей>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/EM-алгоритм"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Сканер_изображений"
    },
    {
        "task": [
            "Среди современных частных трактовок наиболее употребляемые толкования термина middleware:\n<<<слой для взаимодействия между клиентскими частями программного обеспечения и базами данных[6],\nпрограммное обеспечение для взаимодействия системного и прикладного программного обеспечения[7],\nпрограммная прослойка между операционными системами и прикладным программным обеспечением[8],\nпрограммное обеспечение для взаимодействия прикладного программного обеспечения с сетью, обеспечивающее унификацию взаимодействия между программами в условиях неоднородности вычислительных платформ[9],\nпрограммное обеспечение для взаимодействия различных компонентов программ и баз данных[10].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Связующее_программное_обеспечение"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Межпроцессное_взаимодействие"
    },
    {
        "task": [
            "RAD-технология не является универсальной, её целесообразно применять лишь если проект отвечает всем или некоторым из условий:\n<<<Сжатые сроки. Требуется максимально быстро создать систему, отвечающую требованиям сегодняшнего дня. Увеличение сроков создаёт высокую вероятность настолько значительного изменения фундаментальных положений, регламентирующих автоматизируемую деятельность, что система морально устареет ещё до завершения проектирования.\nНечётко определённые и/или изменяющиеся по ходу разработки требования. Заказчик весьма приблизительно представляет себе работу будущего программного продукта и не может четко сформулировать все требования к ПО. Требования могут быть вообще не определены к началу проекта либо могут изменяться по ходу его выполнения.\nОграниченный бюджет при готовности участия заказчика в разработке. У заказчика нет средств на оплату работы большой команды проектировщиков и разработчиков в течение длительного времени, но имеется готовность выделить специалистов для постоянного непосредственного участия в разработке и оценки её текущего состояния.\nНебольшие объёмы либо возможность разбиения проекта на функциональные компоненты. Если предполагаемая система велика, необходимо, чтобы её можно было разбить на небольшие части, каждая из которых обладает четкой функциональностью и минимально зависит от других. Они могут выпускаться последовательно или параллельно (в последнем случае привлекается несколько RAD-групп).\nГрафический интерфейс пользователя — важнейший или один из важнейших компонентов системы. Именно в создании интерфейса RAD-технология даёт наибольшие преимущества, так как интерфейс демонстрируется непосредственно на прототипе, причём достаточно скоро после начала проекта. Возможно даже прямо привлечь представителя заказчика к проектированию интерфейса в визуальном редакторе. Этот подход позволяет избежать типичной ситуации, когда интерфейс, описанный пользователем в требованиях (как правило, без учёта технологических ограничений) ведёт себя на практике совсем не так, как рассчитывал пользователь, хотя формально система полностью соответствует документированным требованиям.\nНизкая вычислительная сложность. Обработка данных в проекте сводится к комбинированию типовых операций, все или большинство из которых уже реализованы в виде доступных библиотек. Оригинальных алгоритмов обработки данных либо вообще не требуется, либо они достаточно просты и могут быть реализованы быстро и без особых затруднений.>>>",
            "Принципы RAD технологии направлены на обеспечение трёх основных её преимуществ — высокой скорости разработки, низкой стоимости и высокого качества. Достигнуть высокого качества программного продукта весьма непросто и одна из главных причин возникающих трудностей заключается в том, что разработчик и заказчик видят предмет разработки (ПО) по-разному.\n<<<Инструментарий должен быть нацелен на минимизацию времени разработки.\nСоздание прототипа для уточнения требований заказчика.\nЦикличность разработки: каждая новая версия продукта основывается на оценке результата работы предыдущей версии заказчиком.\nМинимизация времени разработки версии, за счёт переноса уже готовых модулей и добавления функциональности в новую версию.\nКоманда разработчиков должна тесно сотрудничать, каждый участник должен быть готов выполнять несколько обязанностей.\nУправление проектом должно минимизировать длительность цикла разработки.>>>",
            "Фазы разработки<<<Планирование — совокупность требований, полученных при системном планировании и анализе процедуры разработки жизненного цикла (SDLC). На этом этапе пользователи, менеджеры и IT-специалисты обсуждают задачи проекта, его объём, системные требования, а также сложности, которые могут возникнуть при разработке. Фаза завершается согласованием ключевых моментов с RAD-группой и получением от руководителей проекта разрешения на продолжение.Модель быстрой разработки приложений (RAD)\nПользовательское проектирование — на протяжении данного этапа пользователи, взаимодействуя с системными аналитиками, разрабатывают модели и прототипы, которые включают в себя все необходимые системные функции. Для перевода пользовательских прототипов в рабочие модели RAD-группа обычно использует технику объединенной разработки приложений (JAD) и CASE-инструменты. Пользовательское проектирование оказывается длительным интерактивным процессом, который позволяет пользователям понять, изменить и в конечном счёте выбрать рабочую модель, отвечающую их требованиям.\nКонструирование — этап, в котором основная задача заключается в разработке программ и приложений. Аналогична стадии «реализация» в SDLC. В RAD, однако, пользователи продолжают принимать участие и по-прежнему могут предлагать изменения или улучшения в виде разработанных ими докладов. В их задачи входит программирование и разработка приложений, написание кода, интеграция модулей и системное тестирование.\nПереключение — включает в себя операции по конверсии данных, тестирование, переход на новую систему и тренировку пользователей. По своим задачам напоминает финальную стадию SDLC. Сравнивая с традиционными методами разработки ПО, весь процесс оказывается сжатым по времени. Как результат, новая система оказывается быстрее построенной, доставленной до заказчика и установленной на рабочих местах.>>>",
            "Технология быстрой разработки приложений (RAD) позволяет обеспечить:\n<<<быстроту продвижения программного продукта на рынок;\nинтерфейс, устраивающий пользователя;\nлёгкую адаптируемость проекта к изменяющимся требованиям;\nпростоту развития функциональности системы.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/RAD_(программирование)"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Рабочий_стол"
    },
    {
        "task": [
            "Если целевая задача при переключении контекста использует отличный от предыдущего контекст памяти (каталог страниц и таблицы страницы), происходит очистка TLB, таким образом при последующих обращениях в память снижается производительность процессора (необходима подгрузка записей таблицы страниц в пустой TLB). Существует несколько стратегий борьбы с очисткой:\n<<<сохранение TLB в оперативной памяти;\nспецификация принадлежности записи TLB к определённому адресному пространству.>>>",
            "Типичные характеристики для процессоров в 2009 году[1]:\n<<<Размер: 12 бит — 4096 записей;\nВремя запроса данных, хранящихся в TLB (Hit time): 0,5 — 1 такт;\nВремя при «промахе» (Miss penalty): 10 — 100 тактов;\nИнтенсивность промахов: 0,01 — 1 %.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Буфер_ассоциативной_трансляции"
    },
    {
        "task": [
            "Практически любой взлом сводится к использованию одного из следующих способов:\n<<<Ввод серийного номера (регистрационного кода) (жарг. серийник) (англ. serial number, S/n) — взлом программы посредством введения правильного регистрационного ключа (или фразы), полученного нелегальным способом. Ключ может генерироваться на основе какой-либо информации (имени владельца ПО, характеристик аппаратной части компьютера, и т. п.), либо иметь фиксированное значение. Для генерации регистрационного ключа используется тот же алгоритм, что и в программе.\nПримечание1: Регистрационный код может распространяться в ключевом файле (файле лицензии) (англ. keyfile), который обычно помещается в каталог с установленной программой.\nПримечание2: Для массового взлома, зачастую, создаётся (и в дальнейшем используется) генератор ключей (жарг. кейген) (англ. keygen сокр. от key generator) — программа для генерации регистрационных ключей (см. выше). Данный вид взлома наиболее востребован (особенно, когда программа часто обновляется или рег. ключ генерируется на основе какой-то информации (см. выше)) и поэтому наиболее ценится. Как правило, требует бо́льшей квалификации взломщика по сравнению с другими видами взлома, но не всегда.\nИспользование загрузчика (жарг. лоадер) (англ. loader) — способ обходить некоторые виды защиты ПО, заключающиеся в использовании внешних (навесных) систем защиты. Состоит в изменении определённых фрагментов программы в оперативной памяти сразу после её загрузки в эту память, но перед её запуском (то есть перед выполнением кода в точке входа).\nПрименение (бинарного) патча (часто жарг. крэк или кряк от англ. crack) (англ. byte patch) — способ, похожий на «загрузчик», но модификация производится статически в файлах программы. Как правило, это один из самых простых и быстрых способов взлома ПО.[2]\nИспользование взломанной версии файла(ов) (англ. cracked) — способ заключается в подмене оригинальных файлов программы файлами, которые уже взломаны.\nИспользование эмулятора ключа (англ. key emulator) — способ используется для обмана защит, построенных на использовании в качестве защиты электронного ключа (как правило, подключаемого к LPT или USB порту компьютера). Заключается в снятии дампа внутренней памяти ключа. Файл с содержимым этой памяти подаётся на вход специальной программе — эмулятору, которая подключает свой драйвер-фильтр в стек драйверов и обманывает защищённую программу, эмулируя работу с аппаратным ключом. В случаях наличия в программе обращений к ключу для аппаратного шифрования участка памяти этот метод используется в связке с методом Бинарный патч.\nПодмена официального сайта программ и/или соответствующее изменение настроек с целью обойти проверку ключа, если она была вынесена разработчиками на какой-либо интернет-ресурс (В абсолютном большинстве случаев — для предотвращения взлома, реже — для учёта и ведения статистики, сбора сведений). Чаще всего осуществляется на примитивном уровне путём модифицирования файла hosts и запуска различных эмуляторов, иногда — использование различных программ (Денвер) или использование реально существующего веб-ресурса.\nЗапрет доступа программы к интернету (жарг. заофлайнивание) заключается в комплексе действий, направленных на осуществление принудительного запрета доступа программы к интернету. Выполняется в тех случаях, когда программа требует активации лицензионного ключа через интернет (как правило, официальный сайт разработчика), либо в случаях, когда программа связывается с сервером разработчика для обмена данными или обновления. Как правило, модифицируется локальный DNS-файл компьютера (/etc/hosts или его аналог), чтобы \"обнулить\" доступ к конкретному серверу разработчика или устанавливается специальная утилита, которая блокирует доступ программы в сеть интернет (более громоздкое решение), более радикальный способ - физическое отключение от Интернета. Это действие, обычно, производится после введения ключа, сгенерированного кейгеном.\nСкачивание из интернета или с другого компьютера уже взломанной или купленной игры. Перекачивание лицензионной копии игры с компьютера друга взломом не является, но суть та же.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Взлом_программного_обеспечения"
    },
    {
        "task": [
            "Для аналоговых сигналов обработка может включать усиление и фильтрацию, модуляцию и демодуляцию. Для цифровых сигналов также осуществляется сжатие, обнаружение и исправление ошибок и пр.\n<<<Аналоговая обработка сигналов — для неоцифрованных сигналов, таких как радио-, телефонные или телевизионные сигналы.Цифровая обработка сигналов — для оцифрованных сигналов. Обработка осуществляется с помощью цифровых схем, в том числе с помощью программных решений.\nСтатистическая обработка сигналов — включает анализ и получение информации из сигналов, основываясь на их статистических свойствах.\nОбработка звука — для электрических сигналов, представляющих звук, например, музыку.\nРаспознавание речи — для обработки и интерпретации речи.\nОбработка изображений — в цифровых камерах, компьютерах и подобных системах.\nОбработка видео — для обработки движущихся изображений.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Обработка_сигналов"
    },
    {
        "task": [
            "Выделение на одном жёстком диске нескольких разделов даёт следующие преимущества:\n<<<на одном физическом жёстком диске можно хранить информацию в разных файловых системах, или в одинаковых файловых системах, но с разным размером кластера (например, выгодно хранить файлы большого размера, видео — отдельно от маленьких, и задавать больший размер кластера для хранилища больших файлов);\nманипуляции с одним разделом не сказываются на других разделах;\nкак следствие, можно отделить информацию пользователя от файлов операционной системы, и тогда:\nобраз раздела с ОС, применяемый, например, для резервного копирования перед внесением существенных изменений в конфигурацию ОС, будет иметь меньший размер по сравнению с образом всего диска, а восстановление системы из образа не затронет данные пользователя, которые могли измениться с момента последнего снятия образа;\nпри переустановке ОС «начисто» (с полным уничтожением предыдущей установки) не потребуется дополнительного запоминающего устройства для временного хранения пользовательских данных — последние останутся незатронутыми;\nна одном жёстком диске можно установить несколько операционных систем;\nуменьшение влияния фрагментации на скорость дисковых операций:\nпри меньшем размере раздела фрагменты каждого файла распределяются на меньшем физическом пространстве, то есть фрагменты файла находятся физически ближе друг к другу, что сокращает время на позиционирование головки диска при обращении к файлу;\nна разделе размещается меньшее количество файлов, что приводит[источник не указан 4209 дней] к меньшей фрагментации.>>>",
            "Коммерческие[править | править код]<<<Acronis Disk Director\nParagon Partition Manager\nEaseUS Partition Master>>>",
            "Условно-бесплатные[править | править код]<<<AOMEI Partition Assistant[англ.]\nMiniTool Partition Wizard[англ.]>>>",
            "Бесплатные[править | править код]<<<GParted>>>",
            "Встроенные в ОС[править | править код]<<<«Управление дисками» и diskpart — входит в комплект операционной системы Windows\n«Дисковая утилита» — входит в комплект операционной системы macOS\nfdisk — входит в комплект операционной системы MS-DOS>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Раздел_диска"
    },
    {
        "task": [
            "Описание ООП-интерфейса, если отвлечься от деталей синтаксиса конкретных языков, состоит из двух частей: имени и методов интерфейса.\n<<<Имя интерфейса строится по тем же правилам, что и другие идентификаторы используемого языка программирования. Разные языки и среды разработки имеют различные соглашения по оформлению кода, в соответствии с которыми имена интерфейсов могут формироваться по некоторым правилам, которые помогают отличать имя интерфейса от имён других элементов программы. Например, в технологии COM и во всех поддерживающих её языках действует соглашение, следуя которому, имя интерфейса строится по шаблону «I<Имя>», то есть состоит из написанного с заглавной буквы осмысленного имени, которому предшествует заглавная латинская буква I (IUnknown, IDispatch, IStringList и т. п.).\nМетоды интерфейса. В описании интерфейса определяются имена и сигнатуры входящих в него методов, то есть процедур или функций класса.>>>",
            "Использование интерфейсов возможно двумя способами:\n<<<Класс может реализовывать интерфейс. Реализация интерфейса заключается в том, что в описании класса данный интерфейс указывается как реализуемый, а в коде класса обязательно определяются все методы, которые описаны в интерфейсе, в полном соответствии с сигнатурами из описания этого интерфейса. То есть, если класс реализует интерфейс, для любого экземпляра этого класса существуют и могут быть вызваны все описанные в интерфейсе методы. Один класс может реализовать несколько интерфейсов одновременно.\nВозможно объявление переменных и параметров методов как имеющих тип «интерфейс». В такую переменную или параметр может быть записан экземпляр любого класса, реализующего интерфейс. Если интерфейс объявлен как тип возвращаемого значения функции, это означает, что функция возвращает объект класса, реализующего данный интерфейс.>>>",
            "«Чистый» интерфейс содержит только названия функций, которые будут определены где-то в классе-потомке, без тел. Однако для удобства программиста языки программирования и требования к коду могут допускать в интерфейсах определённые виды данных и функций.\n<<<Функции-утилиты. Пример: для абстрактного потока данных функция writeIntelWord(unsigned short) переводит число в порядок байтов «младший первым», а затем пишет два байта, вызвав интерфейсную функцию write.\nЭталонные реализации, в целом рабочие, но непригодные/неоптимальные для определённых потомков. Пример: для абстрактного потока данных функция remainder() возвращает size() - pos(). Она работает, например, для дискового файла или буфера памяти, и отлично документирует, что должна делать. Но существуют потоки, которые не имеют длины, но имеют остаток (например, забуферизированный ввод из порта).\nВ языке Си++ интерфейсу, как и любому виртуальному классу, поощряется иметь пустой виртуальный деструктор.\nСтатические (общие для всех экземпляров) данные, особенно неизменяемые.>>>",
            "В любом случае интерфейс не может содержать:\n<<<любые нестатические данные, кроме технических (указатель на таблицу виртуальных методов и т.д.);\nконструктор сверх того, чтобы эти технические данные инициализировать;\nнезаконченные функции, неспособные работать «как написано» ни в одном потомке и требующие доработки;\nprivate-функции, к которым потомки обращаться не могут.>>>",
            "На уровне исполнения классическая схема множественного наследования вызывает дополнительный ряд неудобств:\n<<<если объект может параллельно наследовать n классов, существует n независимых способов к нему обращаться, а значит должно существовать (n — 1) дополнительных указателей на него; с точки зрения автоматического управления памятью это будет означать, что возникают ссылки, указывающие в середину объекта;\nподдержка виртуальных вызовов подразумевает, что в объекте хранится ссылка на его виртуальную таблицу, а в случае множественного наследования n ссылок; активное использовании множественного наследования сильно увеличит объём памяти, занимаемый каждым объектом (экземпляром).>>>",
            "Тем не менее, одна коллизия при множественном наследовании интерфейсов и при реализации нескольких интерфейсов одним классом всё-таки возможна. Она возникает, когда в двух или более интерфейсах, наследуемых новым интерфейсом или реализуемых классом, имеются методы с одинаковыми сигнатурами. Разработчики языков программирования вынуждены выбирать для таких случаев те или иные способы разрешения противоречий. Вариантов здесь несколько: запрет на реализацию, явное указание конкретного и реализация базового интерфейса или класса.\n<<<Запрет. В одном классе просто запрещается реализовывать несколько интерфейсов, имеющих методы с одинаковыми сигнатурами. Если для какого-то класса требуется комбинация несовместимых интерфейсов, программист должен выбрать другой путь решения проблемы, например, выделить несколько классов, каждый из которых реализует один из необходимых интерфейсов, и использовать их экземпляры совместно.\nЯвное разрешение неоднозначности. В случае обнаружения компилятором коллизии от программиста требуется явно указать, метод какого из интерфейсов он реализует и вызывает. То есть одноимённые методы реализуются раздельно, а при вызове указывается, какой из них вызывается. При вызове одноимённых методов через переменную типа «интерфейс» неоднозначность не возникает, если использованный в качестве типа переменной интерфейс имеет только один метод с заданным именем. Вариантом этого решения является явное переименование для совпадающих по именам наследуемых или реализуемых методов, за счёт чего в пределах реализующего класса нет одноимённых методов, но при обращении через интерфейс всегда вызывается нужная реализация.\nОбщая реализация одноимённых методов. Если наследуется или реализуется несколько методов с одной и той же сигнатурой, то они объединяются в интерфейсе-наследнике, а в классе-реализаторе получают одну общую реализацию. Это хорошо подходит для случаев, когда одноимённые методы разных интерфейсов идентичны по предполагаемой функциональности, но может вызвать нежелательные эффекты, если поведение этих методов должно различаться.>>>",
            "Реализация интерфейсов во многом определяется исходными возможностями языка и целью, с которой интерфейсы введены в него. Очень показательны особенности использования интерфейсов в языках Java, Object Pascal системы Delphi и C++, поскольку они демонстрируют три принципиально разные ситуации: изначальная ориентация языка на использование концепции интерфейсов, их применение для совместимости и их эмуляция классами.\n<<<В Java интерфейсы изначально входят в язык, являясь неотъемлемой его частью.\nВ объектной подсистеме языка Object Pascal никаких интерфейсов не было, их поддержка была введена в Delphi 2 для обеспечения написания и использования COM-компонентов. Соответственно, механизм интерфейсов Delphi ориентирован, в первую очередь, на использование технологии COM.\nВ C++ интерфейсов, строго говоря, нет вообще. Механизм, аналогичный интерфейсам (и исторически предшествующий им) реализуется другими средствами чрезвычайно мощной объектной подсистемы этого языка.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Интерфейс_(объектно-ориентированное_программирование)"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Динамическая_типизация"
    },
    {
        "task": [
            "Абстракция потока особенно важна в языке программирования Си, где он представляет собой источник ввода и/или вывода данных, обычно байтов, связанный с файлом, устройством, либо другим процессом. Работа с потоками перенесена во многие другие языки:\n<<<C++: iostream из стандартной библиотеки C++.\nЯзыки платформы .NET Framework (например, C#): Base Class Library, пространство имен System.IO.\nВ языках платформы Java потоки данных реализованы в пакете java.io.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Поток_данных"
    },
    {
        "task": [
            "В информатике линейный список обычно определяется как абстрактный тип данных (АТД), формализующий понятие упорядоченной коллекции данных. На практике линейные списки обычно реализуются при помощи массивов и связных списков. Иногда термин «список» неформально используется также как синоним понятия «связный список». К примеру, АТД нетипизированного изменяемого списка может быть определён как набор из конструктора и основных операций:\n<<<Операция, проверяющая список на пустоту.\nТри операции добавления объекта в список (в начало, конец или внутрь после любого (n-го) элемента списка);\nОперация, вычисляющая первый (головной) элемент списка;\nОперация доступа к списку, состоящему из всех элементов исходного списка, кроме первого.>>>",
            "Характеристики[править | править код]<<<Длина списка. Количество элементов в списке.\nСписки могут быть типизированными или нетипизированными. Если список типизирован, то тип его элементов задан, и все его элементы должны иметь типы, совместимые с заданным типом элементов списка. Чаще списки типизированы.\nСписок может быть сортированным или несортированным.\nВ зависимости от реализации может быть возможен произвольный доступ к элементам списка.>>>",
            "Преимущества<<<эффективное (за константное время) добавление и удаление элементов\nразмер ограничен только объёмом памяти компьютера и разрядностью указателей\nдинамическое добавление и удаление элементов>>>",
            "Недостатки связных списков вытекают из их главного свойства — последовательного доступа к данным:\n<<<сложность прямого доступа к элементу, а именно определения физического адреса по его индексу (порядковому номеру) в списке\nна поля-указатели (указатели на следующий и предыдущий элемент) расходуется дополнительная память (в массивах, например, указатели не нужны)\nнекоторые операции со списками медленнее, чем с массивами, так как к произвольному элементу списка можно обратиться, только пройдя все предшествующие ему элементы\nсоседние элементы списка могут быть распределены в памяти нелокально, что снизит эффективность кэширования данных в процессоре\nнад связными списками, по сравнению с массивами, гораздо труднее (хоть и возможно) производить параллельные векторные операции, такие, как вычисление суммы: накладные расходы на перебор элементов снижают эффективность распараллеливания>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Связный_список"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Шина_адреса"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Модуль_ядра"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Шина_данных"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Исполняемый_файл"
    },
    {
        "task": [
            "Как правило, для большинства задач используется целочисленный тип, называемый также native int (или просто int), с разрядностью, равной разрядности машинного слова процессора, на котором исполняется программа (или режима работы процессора если он может работать с машинными словами разной длины). При необходимости могут использоваться целые числа как меньшей (например, при необходимости экономить память), так и бо́льшей (при использовании длинной арифметики) разрядности. Другая возможная причина использования целых отличной от родной длины — обеспечение переносимости данных. Наиболее распространённые разновидности целого:\n<<<однобайтное целое (англ. tiny int) — 8 бит, -128 ÷ 127;\nкороткое целое (англ. short int) — 16 бит, −32 768 ÷ 32 767;\nдлинное целое (англ. long int, также int32) — 32 бита, −2 147 483 648 (−231) ÷ 2 147 483 647 (231−1);\nдвойное длинное целое (англ. long long int, также large int, big int, int64) — 64 бита, -9 223 372 036 854 775 808 (−263) ÷ 9 223 372 036 854 775 807 (263−1);>>>",
            "К целочисленным значениям применимы в первую очередь арифметические операции.\nНиже приведены самые часто используемые (в скобках указаны их обозначения в различных языках программирования и им аналогичным средствах).\n<<<Сравнение (англ. comparison). Здесь применимы соотношения «равно» («=»; «==»; «eq»), «не равно» («!=»; «<>»; «ne»), «больше» («>»; «gt»), «больше или равно» («>=»; «ge»), «меньше» («<»; «lt») и «меньше или равно» («<=»; «le»).\nИнкремент (англ. increment; «++») и декремент (англ. decrement; «--») — арифметическое увеличение или уменьшение числа на единицу. Выделено в отдельные операции из-за частого использования с переменными-счётчиками в программировании.\nСложение (англ. addition; «+») и вычитание (англ. subtraction; «-»).\nУмножение (англ. multiplication; «*»).\nДеление (англ. division; «/»; «\\») и получение остатка от деления (англ. modulo; «%»). Некоторые процессоры (например, архитектуры x86) позволяют производить обе эти операции за одну инструкцию.\nИнверсия знака (англ. negation) и получение абсолютного значения (англ. absolute).\nПолучение знака. Результатом такой операции обычно является 1 для положительных значений, −1 — для отрицательных и 0 — для нуля.\nВозведение в степень («^»).>>>",
            "В памяти компьютера для хранения целых чисел обычно отводятся ячейки фиксированного объёма.\nИз-за этого операции увеличения и уменьшения значений могут приводить к переполнению, что оборачивается искажением результата.\nНекоторые языки программирования позволяют производить вызов исключения в таких случаях.\nКроме этого, можно определять поведение при переполнении:\n<<<Циклическая операция (обычно происходит по умолчанию). Например, если сделать инкремент 8-битного беззнакового значения 255, то получится 0.\nОперация с насыщением. Если будет достигнут предел, то конечным значением будет это предельное. Например, если к 8-битному беззнаковому числу 250 прибавить 10, то получится 255. Сложение, вычитание и умножение с насыщением обычно применяется при работе с цветом.>>>",
            "Помимо математических, к целым числам применимы битовые операции, которые основаны на особенностях позиционного двоичного кодирования.\nОбычно они выполняются значительно быстрее арифметических операций и поэтому их используют как более оптимальные аналоги.\n<<<Битовый сдвиг влево с дополнением нулями аналогичен умножению числа на степень двойки (количество бит сдвига соответствует степени двойки).\nБитовый сдвиг вправо аналогичен делению на степень двойки (количество бит сдвига соответствует степени двойки). Некоторые языки программирования и процессоры поддерживают арифметический сдвиг, который позволяет сохранять знак у целых со знаком (сохраняется значение старшего бита).\nУ целых со знаком знак можно узнать по старшему биту (у отрицательных он установлен).\nЧтение и установка младшего бита позволяет управлять чётностью (у нечётных чисел он установлен).\nПобитовое «И» над определённым количеством младших бит позволяет узнать остаток от деления на степень двойки (степень соответствует количеству бит).\nПобитовое «ИЛИ» над определённым количеством младших бит и последующий инкремент округляет число на значение, равное степени двойки (степень соответствует количеству бит) — используется для выравнивания адресов и размеров на определённое значение.>>>",
            "Ниже перечислены некоторые из представлений чисел строкой.\n<<<Десятичное число (англ. decimal). При получении строки обычно можно задать разделители разрядов, количество знаков (добавляются лидирующие нули, если их меньше) и обязательное указание знака числа.\nЧисло в системе счисления, которое является степенью двойки. Самые частые: двоичное (binary англ. binary), восьмеричное (англ. octal) и шестнадцатеричное (англ. hexadecimal). При получении строки обычно можно задать разделители групп цифр и минимальное количество цифр (производится дополнение нулями, если их меньше). Так как эти представления чаще всего используются в программировании, то здесь обычно доступны соответствующие опции. Например, указание префикса и постфикса для получения значения в соответствии с синтаксисом языка. Для 16-ричных актуально указание регистра символов, а также обязательное добавление нуля, если первая цифра представлена буквой (чтобы число не определялось как строковый идентификатор).\nРимское число (англ. roman number).\nСловесное представление (в том числе сумма прописью) — число представляется словами на указанном натуральном языке.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Целое_(тип_данных)"
    },
    {
        "task": [
            "Алгоритм[править | править код]<<<Задается начальное приближение \n\n\n\n\nx\n\n0\n\n\n\n\n{\\displaystyle x_{0}}\n\n.\nПока не выполнено условие остановки, в качестве которого следует взять \n\n\n\n\n|\n\n\n\n\nx\n\nn\n+\n1\n\n\n−\n\nx\n\nn\n\n\n\n\n1\n−\n\n\n\n\nx\n\nn\n+\n1\n\n\n−\n\nx\n\nn\n\n\n\n\n\nx\n\nn\n\n\n−\n\nx\n\nn\n−\n1\n\n\n\n\n\n\n\n\n|\n\n<\nε\n\n\n{\\displaystyle \\left\\vert {\\frac {x_{n+1}-x_{n}}{1-{\\frac {x_{n+1}-x_{n}}{x_{n}-x_{n-1}}}}}\\right\\vert <\\varepsilon }\n\n, где \n\n\n\nε\n\n\n{\\displaystyle \\varepsilon }\n\n выполняет роль абсолютной погрешности (так как метод Ньютона является частным случаем метода простой итерации[1]), вычисляют новое приближение: \n\n\n\n\nx\n\nn\n+\n1\n\n\n=\n\nx\n\nn\n\n\n−\n\n\n\nf\n(\n\nx\n\nn\n\n\n)\n\n\n\nf\n′\n\n(\n\nx\n\nn\n\n\n)\n\n\n\n\n\n{\\displaystyle x_{n+1}=x_{n}-{\\frac {f(x_{n})}{f'(x_{n})}}}\n\n.>>>",
            "Контрпримеры[править | править код]<<<Если начальное приближение недостаточно близко к решению, то метод может не сойтись.>>>",
            "График производной функции \n\n\n\n\n\nf\n(\nx\n)\n=\nx\n+\n\nx\n\n2\n\n\nsin\n⁡\n(\n2\n\n/\n\nx\n)\n\n\n\n\n{\\displaystyle \\scriptstyle {f(x)=x+x^{2}\\sin(2/x)}}\n\n при приближении \n\n\n\n\n\nx\n\n\n\n\n{\\displaystyle \\scriptstyle {x}}\n\n к нулю справа.<<<Если производная не непрерывна в точке корня, то метод может расходиться в любой окрестности корня.>>>",
            "Таким образом \n\n\n\nf\n(\nx\n)\n\n/\n\n\nf\n′\n\n(\nx\n)\n\n\n{\\displaystyle f(x)/f'(x)}\n\n не ограничено вблизи корня, и метод будет расходиться, хотя функция всюду дифференцируема, её производная не равна нулю в корне, \n\n\n\nf\n\n\n{\\displaystyle f}\n\n бесконечно дифференцируема везде, кроме как в корне, а её производная ограничена в окрестности корня.\n<<<Если не существует вторая производная в точке корня, то скорость сходимости метода может быть заметно снижена.>>>",
            "Скорость сходимости полученной последовательности составляет приблизительно 4/3. Это существенно меньше, нежели 2, необходимое для квадратичной сходимости, поэтому в данном случае можно говорить лишь о линейной сходимости, хотя функция всюду непрерывно дифференцируема, производная в корне не равна нулю, и \n\n\n\nf\n\n\n{\\displaystyle f}\n\n бесконечно дифференцируема везде, кроме как в корне.\n<<<Если производная в точке корня равна нулю, то скорость сходимости не будет квадратичной, а сам метод может преждевременно прекратить поиск, и дать неверное для заданной точности приближение.>>>",
            "Если существуют такие константы \n\n\n\nA\n,\n\nB\n,\n\nC\n\n\n{\\displaystyle A,\\;B,\\;C}\n\n, что:\n<<<\n\n\n\n\n\n1\n\n\n|\n\n\nf\n′\n\n(\nx\n)\n\n|\n\n\n\n\n<\nA\n\n\n{\\displaystyle {\\frac {1}{|f'(x)|}}<A}\n\n на \n\n\n\n[\na\n,\n\nb\n]\n\n\n{\\displaystyle [a,\\;b]}\n\n, то есть \n\n\n\n\nf\n′\n\n(\nx\n)\n\n\n{\\displaystyle f'(x)}\n\n существует и не равна нулю;\n\n\n\n\n\n|\n\n\n\nf\n(\nx\n)\n\n\n\nf\n′\n\n(\nx\n)\n\n\n\n|\n\n<\nB\n\n\n{\\displaystyle \\left|{\\frac {f(x)}{f'(x)}}\\right|<B}\n\n на \n\n\n\n[\na\n,\n\nb\n]\n\n\n{\\displaystyle [a,\\;b]}\n\n, то есть \n\n\n\nf\n(\nx\n)\n\n\n{\\displaystyle f(x)}\n\n ограничена;\n\n\n\n\n∃\n\nf\n″\n\n(\nx\n)\n\n\n{\\displaystyle \\exists f''(x)}\n\n на \n\n\n\n[\na\n,\n\nb\n]\n\n\n{\\displaystyle [a,\\;b]}\n\n, и \n\n\n\n\n|\n\n\nf\n″\n\n(\nx\n)\n\n|\n\n⩽\nC\n⩽\n\n\n1\n\n2\nA\nB\n\n\n\n\n\n{\\displaystyle |f''(x)|\\leqslant C\\leqslant {\\frac {1}{2AB}}}\n\n;>>>",
            "Причём длина рассматриваемого отрезка \n\n\n\n\n|\n\na\n−\nb\n\n|\n\n<\n\n\n1\n\nA\nB\n\n\n\n\n(\n\n1\n−\n\n\n1\n−\n2\nA\nB\nC\n\n\n\n)\n\n\n\n{\\displaystyle |a-b|<{\\frac {1}{AB}}\\left(1-{\\sqrt {1-2ABC}}\\right)}\n\n. Тогда справедливы следующие утверждения:\n<<<на \n\n\n\n[\na\n,\n\nb\n]\n\n\n{\\displaystyle [a,\\;b]}\n\n существует корень \n\n\n\n\nx\n\n∗\n\n\n\n\n{\\displaystyle x^{*}}\n\n уравнения \n\n\n\nf\n(\nx\n)\n=\n0\n:\n∃\n\nx\n\n∗\n\n\n∈\n[\na\n,\n\nb\n]\n:\nf\n(\n\nx\n\n∗\n\n\n)\n=\n0\n\n\n{\\displaystyle f(x)=0\\colon \\exists x^{*}\\in [a,\\;b]\\colon f(x^{*})=0}\n\n;\nесли \n\n\n\n\nx\n\n0\n\n\n=\n\n\n\na\n+\nb\n\n2\n\n\n\n\n{\\displaystyle x_{0}={\\frac {a+b}{2}}}\n\n, то итерационная последовательность сходится к этому корню: \n\n\n\n\n{\n\n\nx\n\nn\n+\n1\n\n\n=\n\nx\n\nn\n\n\n−\n\n\n\nf\n(\n\nx\n\nn\n\n\n)\n\n\n\nf\n′\n\n(\n\nx\n\nn\n\n\n)\n\n\n\n\n}\n\n→\n\nx\n\n∗\n\n\n\n\n{\\displaystyle \\left\\{x_{n+1}=x_{n}-{\\frac {f(x_{n})}{f'(x_{n})}}\\right\\}\\to x^{*}}\n\n;\nпогрешность может быть оценена по формуле \n\n\n\n\n|\n\n\nx\n\n∗\n\n\n−\n\nx\n\nn\n\n\n\n|\n\n⩽\n\n\nB\n\n2\n\nn\n−\n1\n\n\n\n\n(\n2\nA\nB\nC\n\n)\n\n\n2\n\nn\n−\n1\n\n\n\n\n\n\n{\\displaystyle |x^{*}-x_{n}|\\leqslant {\\frac {B}{2^{n-1}}}(2ABC)^{2^{n-1}}}\n\n.>>>",
            "Тогда ограничения на исходную функцию \n\n\n\nf\n(\nx\n)\n\n\n{\\displaystyle f(x)}\n\n будут выглядеть так:\n<<<функция должна быть ограничена;\nфункция должна быть гладкой, дважды дифференцируемой;\nеё первая производная \n\n\n\n\nf\n′\n\n(\nx\n)\n\n\n{\\displaystyle f'(x)}\n\n равномерно отделена от нуля;\nеё вторая производная \n\n\n\n\nf\n″\n\n(\nx\n)\n\n\n{\\displaystyle f''(x)}\n\n должна быть равномерно ограничена.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Метод_Ньютона"
    },
    {
        "task": [
            "На уровне представления реализованы следующие функции:\n<<<преобразование данных, такое как изменение порядка битов, замена CR («возврат каретки») на CR+LF или преобразование целого числа в число с плавающей запятой;[1]\nперевод символов, например, из кодировки ASCII в EBCDIC;[1]\nсжатие данных для увеличения пропускной способности канала;[1]\nшифрование и расшифрование.[1] Одно из применений шифрования — передача пароля принимающему компьютеру.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Представительский_уровень"
    },
    {
        "task": [
            "Службы<<<Права доступа\nВозобновление сеанса (установление контрольных точек и восстановление)>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Сеансовый_уровень"
    },
    {
        "task": [
            "Существуют две точки зрения на границы применимости термина «сопровождение ПО»:\n<<<Сопровождение автоматизированных информационных систем не выделяется из сопровождения любого другого ПО.\nСопровождение ПО не включает сопровождение автоматизированных информационных систем (АИС), так как сопровождение последних имеет существенные отличия.>>>",
            "Имеются две разных точки зрения на границы применимости терминов «сопровождение ПО» и «поддержка ПО».\n<<<Эти два термина — синонимы.\nЭто два разных термина. Сопровождение ПО осуществляется сопроводителем. Сопроводителем может быть внешняя организация или же сама та организация (её отдел, отдельный сотрудник), которая использует ПО в своей работе. Поддержка осуществляется исключительно сотрудниками отдела той организации, которая использует ПО в своей работе (эта организация называется «заказчик» ISO/IEC 14764:99). Это менее квалифицированные специалисты, чем сопроводители, а потому они не выполняют полностью тех работ, которые предусмотрены ISO/IEC 14764:99. Например, сотрудники отдела поддержки не выполняют работы по обнаружению и корректировке скрытых ошибок для предотвращения явного проявления этих ошибок.>>>",
            "Сопровождаемость программного обеспечения — характеристики программного продукта, позволяющие минимизировать усилия по внесению в него изменений:\n<<<для устранения ошибок;\nдля модификации в соответствии с изменяющимися потребностями пользователей.>>>",
            "Принято выделять несколько линий сопровождения (структура приведена на примере внешнего сопровождения ПО):\n<<<0 линия (call-center, информационный центр, горячая линия) — обработка телефонных обращений от клиентов, передача обращений техническим специалистам (1-я линия сопровождения)\n1 линия (инженер по сопровождению, инженер технической поддержки, support engineer) — консультация/настройка/устранение ошибок в работе ПО/наполнение базы знаний, составление мануалов\n2 линия (инженер по сопровождению, инженер технической поддержки, support engineer) — функциональное сопровождение/проектная деятельность на этапе запуска ПО на машинах заказчика\n3 линия (инженер по сопровождению, инженер технической поддержки, support engineer) — системное сопровождение/проектная деятельность на этапе запуска ПО на оборудовании заказчика>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Сопровождение_программного_обеспечения"
    },
    {
        "task": [
            "Наиболее распространены следующие приборы:\n<<<магнитный компас — прибор, позволяющий по магнитному полю Земли определить приблизительное направление на магнитные полюса планеты;\nгирокомпас — гироскопический прибор, позволяющий определить курс относительно меридиана, на который он настроен;\nрадиокомпас — радиопеленгатор, позволяющий определить курс на широковещательную или специальную приводную радиостанцию;\nрадиолокатор (радар, радиолокационная станция, РЛС) — радиоприёмопередатчик, позволяющий обнаруживать другие объекты, имеющие свойство отражать радиоволны (элементы рельефа, грозовые очаги, летательные аппараты и др.);\nгидролокатор (сонар) — прибор, схожий по принципу действия с радаром, но использующий вместо электромагнитного акустическое излучение и предназначенный для обнаружения подводных объектов;\nдоплеровский измеритель — прибор, работающий на эффекте Доплера и позволяющий определить скорость и направление движения движущихся объектов;\nвысотомер и глубиномер — схожие по принципу действия приборы, соответственно барометр и манометр, по давлению забортной среды позволяющие определить высоту полёта или глубину погружения;\nрадиодальномер и радиовысотомер — специализированные РЛС, измеряющие расстояние до определённого объекта, например, самолётный радиовысотомер (РВ) — вертикальное расстояние до поверхности планеты (истинную высоту).>>>",
            "Пульт приёмника А-723 РСДН-20, стоящего на Ту-154Б-2<<<Радионавига́ция — основана на взаимодействии двух или более специализированных радиоприборов (одностороннем — в случае, например, спутниковой навигации, РСДН либо работы с VOR — или двустороннем):\nрадиосистема ближней навигации (VOR/DME, РСБН) — измеряет азимут и дальность относительно маяка. Азимут вычисляется по задержке между приёмом двух сигналов (вращающейся и ненаправленной антенн), вычисление дальности требует двустороннего взаимодействия между бортом и маяком — работает за счёт измерения времени между отправкой сигнала на маяк и приёмом ответа;\nрадиосистема дальней навигации (РСДН) — её маяки передают сигнал в длинных (системы LORAN, «Чайка») либо сверхдлинных (Omega, РСДН-20) волнах, которые за счёт свойственной им дифракции огибают Землю и достигают приёмника. Приёмник по сдвигу фаз сигналов определяет своё местоположение;\nспутниковая система навигации — работает на измерении расстояния от специальных спутников до объекта и геометрическом вычислении положения объекта;\nИнерциальная навигация>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Навигационная_система"
    },
    {
        "task": [
            "Существует несколько видов трансляторов[2].\n<<<Диалоговый транслятор — транслятор, обеспечивающий использование языка программирования в режиме разделения времени.\nСинтаксически-ориентированный (синтаксически-управляемый) транслятор — транслятор, получающий на вход описание синтаксиса и семантики языка, текст на описанном языке и выполняющий трансляцию в соответствии с заданным описанием.\nОднопроходной транслятор — транслятор, преобразующий исходный код при его однократном последовательном чтении (за один проход).\nМногопроходной транслятор — транслятор, преобразующий исходный код после его нескольких чтений (за несколько проходов).\nОптимизирующий транслятор — транслятор, выполняющий оптимизацию создаваемого кода. См. оптимизирующий компилятор.\nТестовый транслятор — транслятор, получающий на вход исходный код и выдающий на выходе изменённый исходный код. Запускается перед основным транслятором для добавления в исходный код отладочных процедур. Например, транслятор с языка ассемблера может выполнять замену макрокоманд на код.\nОбратный транслятор — транслятор, выполняющий преобразование машинного кода в текст на каком-либо языке программирования. См. дизассемблер, декомпилятор.>>>",
            "Цель трансляции — преобразование текста с одного языка на язык, понятный адресату. При трансляции компьютерной программы адресатом может быть:\n<<<устройство — процессор (трансляция называется компиляцией);\nпрограмма — интерпретатор (трансляция называется интерпретацией).>>>",
            "Виды трансляции:\n<<<компиляция;\nв исполняемый код\nв машинный код\nв байт-код\nтранспиляция;\nинтерпретация;\nдинамическая компиляция.>>>",
            "Процесс компиляции, как правило, состоит из нескольких этапов:\n<<<лексический анализ;\nсинтаксический анализ;\nсемантический анализ;\nсоздание на основе результатов анализов промежуточного кода;\nоптимизация промежуточного кода;\nсоздание объектного кода, в данном случае машинного.>>>",
            "Программа может использовать сервисы, предоставляемые операционной системой, и сторонние библиотеки (например, библиотеки для работы с файлами и библиотеки для создания графического интерфейса). Для добавления в объектный файл машинного кода из других объектных файлов (кода статических библиотек) и информации о динамических библиотеках выполняется связывание (англ. link) или компоновка. Связывание  или компоновка выполняется редактором связей или компоновщиком. Компоновщик может быть отдельной программой или частью компилятора. Компоновщик создаёт исполняемый файл. Исполняемый файл (программа) запускается следующим образом:\n<<<по запросу пользователя в ядре операционной системы создаётся объект «процесс»;\nзагрузчик программ операционной системы выполняет следующие действия:\nчитает исполняемый файл;\nзагружает его в память;\nзагружает в память динамические библиотеки;\nвыполняет связывание машинного кода программы с динамическими библиотеками (динамическое связывание);\nпередаёт управление программе.>>>",
            "Достоинства компиляции:\n<<<компиляция программы выполняется один раз;\nналичие компилятора на устройстве, для которого компилируется программа, не требуется.>>>",
            "Недостатки компиляции:\n<<<компиляция — медленный процесс;\nпри внесении изменений в исходный код, требуется повторная компиляция.>>>",
            "Интерпретатор может работать двумя способами:\n<<<читать код и исполнять его сразу (чистая интерпретация[6]);\nчитать код, создавать в памяти промежуточное представление кода (байт-код или p-код), выполнять промежуточное представление кода (смешанная реализация[6]).>>>",
            "Этапы работы интерпретатора:\n<<<лексический анализ;\nсинтаксический анализ;\nсемантический анализ;\nсоздание промежуточного представления кода (при чистой интерпретации не выполняется);\nисполнение.>>>",
            "Достоинства интерпретаторов по сравнению с компиляторами:\n<<<возможность работы в интерактивном режиме;\nотсутствие необходимости перекомпиляции исходного кода после внесения изменений и при переносе кода на другую платформу.>>>",
            "Недостатки интерпретаторов по сравнению с компиляторами:\n<<<низкая производительность (машинный код исполняется процессором, а интерпретируемый код — интерпретатором; машинный код самого интерпретатора исполняется процессором);\nнеобходимость наличия интерпретатора на устройстве, на котором планируется интерпретация программы;\nобнаружение ошибок синтаксиса на этапе выполнения (актуально для чистых интерпретаторов).>>>",
            "Сравнение чистого интерпретатора и интерпретатора, создающего байт-код:\n<<<чистый интерпретатор проще в реализации, так как для него не нужно писать код транслятора;\nинтерпретатор, создающий байт-код, может выполнять его оптимизацию и добиваться большей производительности, чем чистый интерпретатор;\nинтерпретатор, создающий байт-код, потребляет больше ресурсов системы (трансляция в байт-код занимает процессорное время; байт-код занимает место в памяти).>>>",
            "Достоинства динамической компиляции по сравнению с компиляцией:\n<<<скорость работы динамически компилируемых программ близка к скорости работы компилируемых программ;\nотсутствие необходимости перекомпиляции программы при переносе на другую платформу.>>>",
            "Недостатки динамической компиляции по сравнению с компиляцией и чистой интерпретацией:\n<<<бо́льшая сложность реализации;\nбо́льшие требования к ресурсам.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Транслятор"
    },
    {
        "task": [
            "В дальнейшем классификацию уточнил Лука Карделли[англ.][10], выделив четыре разновидности полиморфизма:\n<<<универсальный\nпараметрический\nвключения (или подтипов[англ.])[⇨]\nad-hoc\nперегрузка\nприведение типов>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Полиморфизм_(информатика)"
    },
    {
        "task": [
            "Обозначения переменных и функций:\n<<<\n\n\n\n\nx\n\nt\n\n\n\n\n{\\displaystyle x_{t}}\n\n: вектор входного слоя\n\n\n\n\n\nh\n\nt\n\n\n\n\n{\\displaystyle h_{t}}\n\n:  вектор скрытого слоя\n\n\n\n\n\ny\n\nt\n\n\n\n\n{\\displaystyle y_{t}}\n\n:  вектор выходного слоя\n\n\n\n\nW\n\n\n{\\displaystyle W}\n\n, \n\n\n\nU\n\n\n{\\displaystyle U}\n\n и \n\n\n\nb\n\n\n{\\displaystyle b}\n\n: Матрицы весов соединений и вектор параметров\n\n\n\n\n\nσ\n\nh\n\n\n\n\n{\\displaystyle \\sigma _{h}}\n\n и \n\n\n\n\nσ\n\ny\n\n\n\n\n{\\displaystyle \\sigma _{y}}\n\n: Функция активации>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Рекуррентная_нейронная_сеть"
    },
    {
        "task": [
            "Данный алгоритм при кодировании (сжатии) сообщения динамически создаёт словарь фраз: определённым последовательностям символов (фразам) ставятся в соответствие группы битов (коды) фиксированной длины (например, 12-битные, как предлагается в исходной статье Велча[1]). Словарь инициализируется всеми 1-символьными фразами (в случае 8-битных символов — это 256 фраз). По мере кодирования алгоритм просматривает текст символ за символом слева направо. При чтении алгоритмом очередного символа в данной позиции находится строка W максимальной длины, совпадающая с какой-то фразой из словаря. Затем код этой фразы подаётся на выход, а строка WK, где K — это символ, следующий за W во входном сообщении, вносится в словарь в качестве новой фразы и ей присваивается какой-то код (так как W выбрана жадно, WK ещё не содержится в словаре). Символ K используется в качестве начала следующей фразы. Более формально данный алгоритм можно описать следующей последовательностью шагов:\n<<<Инициализация словаря всеми возможными односимвольными фразами. Инициализация входной фразы W первым символом сообщения.\nЕсли КОНЕЦ_СООБЩЕНИЯ, то выдать код для W и завершить алгоритм.\nСчитать очередной символ K из кодируемого сообщения.\nЕсли фраза WK уже есть в словаре, то присвоить входной фразе W значение WK и перейти к Шагу 2.\nИначе выдать код W, добавить WK в словарь, присвоить входной фразе W значение K и перейти к Шагу 2.>>>",
            "Так как коды в алгоритме LZW имеют фиксированную длину, размер словаря ограничен (при использовании кодов нефиксированной длины размер словаря ограничен объёмом доступной памяти). Возникает вопрос: что делать в случае переполнения словаря? Используют несколько стратегий:\n<<<Самый очевидный вариант — просто использовать построенный словарь без дальнейших модификаций.[1] Ясно, что часто это плохая стратегия.\nАвторы некогда популярной утилиты compress[англ.] просто используют построенный словарь, пока степень сжатия остаётся приемлемой, а затем очищают его в случае ухудшения качества сжатия. Такая модификация LZW называется LZC (Lempel-Ziv-Compress, см. ниже).[6]\nП. Тисчер предложил перед вставкой в переполненный словарь новой фразы на очередном шаге алгоритма удалять из словаря фразу, которая дольше всего не использовалась (LRU, Least Recently Used). Такая модификация иногда называется LZT (Lempel-Ziv-Tischer, см. ниже).[7]>>>",
            "Модификации<<<LZC (1985, Thomas S. W., McKie J., Davies S., Turkowski K., Woods J. A. и Orost J. W.)[6] — одна из наиболее известных практических реализаций LZW, представленная в утилите compress[англ.] (Lempel-Ziv-Compress). LZC использует от 9 до 16 битов для кодов фраз (число битов растёт с ростом размера словаря, см. раздел о реализации); когда словарь переполняется, LZC просто продолжает его использование без дальнейшей модификации, но при этом алгоритм следит за степенью сжатия данных и, когда сжатие с текущим словарём становится неприемлемо плохим, LZC очищает словарь и продолжает работу. LZC сжимает хуже, чем LZW, но зато скорость сжатия выше.\nLZT (1985, Tischer P.)[7] — другой известный вариант LZW. При переполнении словаря LZT продолжает работу, но каждый раз перед вставкой новой фразы в словарь, он удаляет фразу, которая соответствует дольше всего не используемому листу в префиксном дереве, содержащем все фразы. В реализации LZT все листья помещаются в связный список, и каждый раз после использования в ходе сжатия листья перемещаются в голову списка; таким образом, листья, которые не использовались дольше всего, находятся в хвосте списка (дальнейшие детали очевидны).\nLZMW (1985, Виктор Миллер и Марк Вегман[англ.])[18] — находит во входном потоке самую длинную строку, которая уже имеется в словаре (обозначим её W), выдаёт на выход код W, а затем добавляет в словарь строку VW, где V — это строка из словаря, код которой был выдан на предыдущем шаге (изначально V является пустой строкой). Таким образом, строки в словаре растут быстрее, чем в исходном варианте LZW, и на практике часто удаётся получить лучшее качество сжатия. Миллер и Вегман также предложили в случае недостатка памяти удалять из словаря фразы, которые редко используются, так же как это делается в LZT.\nLZAP (1988, Джеймс Сторер)[19] — модификация LZMW, отличающаяся тем, что на каждом шаге в словарь добавляется не только строка VW, но и строки VW1, VW2, …, VW|W|-1, где Wi — это префикс W длины i. («AP» в «LZAP» означает «all prefixes», то есть «все префиксы».) Например, если V = wiki и W = pedia — то есть на предыдущем шаге алгоритм нашёл в словаре строку wiki, а на данном нашёл pedia — то алгоритм добавит в словарь строку wikipedia, как сделал бы LZMW, но также добавит строки wikip, wikipe, wikiped, wikipedi. Алгоритм LZAP проще для реализации, чем LZMW, но в то же время он сохраняет большинство преимуществ LZMW за исключением того, что коды словарных строк занимают больше места, потому что словарь более раздут.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Алгоритм_Лемпеля_—_Зива_—_Велча"
    },
    {
        "task": [
            "Типы компьютерных языков<<<Язык программирования\nСценарный язык\nПредметно-ориентированный язык программирования\nПсевдоестественный язык\nИнформационный язык\nЯзык описания данных\nЯзык разметки (обычно используются для создания документов)\nЯзык спецификаций (например: Каскадные таблицы стилей)\nЯзык описания аппаратуры (Verilog, VHDL и др.)\nПротокол обмена (например: сетевой протокол)>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Компьютерный_язык"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Многопроцессорность"
    },
    {
        "task": [
            "Результат кластеризации методом k-средних для ирисов Фишера и реальные виды ирисов, визуализированные с помощью ELKI[англ.]. Центры кластеров отмечены с помощью крупных, полупрозрачных маркеров.<<<Не гарантируется достижение глобального минимума суммарного квадратичного отклонения V, а только одного из локальных минимумов.\nРезультат зависит от выбора исходных центров кластеров, их оптимальный выбор неизвестен.\nЧисло кластеров надо знать заранее.>>>",
            "Демонстрация и визуализация<<<Дж. Ту, Р. Гонсалес «Принципы распознавания образов», Издательство «Мир», Москва 1978, стр. 109—112 (описание алгоритма с численным примером).\nK-means and K-medoids (апплет, демонстрирующий работу алгоритма и позволяющий исследовать и сравнивать два метода), Е. Миркес и University of Leicester\nИнтерактивный апплет, демонстрирующий работу алгоритма>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Метод_k-средних"
    },
    {
        "task": [
            "Об абсолютной стойкости (или теоретической стойкости) говорят в случае, если криптосистема не может быть раскрыта ни теоретически, ни практически даже при наличии у атакующего бесконечно больших вычислительных ресурсов. Доказательство существования абсолютно стойких алгоритмов шифрования было выполнено Клодом Шенноном и опубликовано в работе «Теория связи в секретных системах»[1]. Там же определены требования к такого рода системам:\n<<<ключ генерируется для каждого сообщения (каждый ключ используется только один раз)\nключ статистически надёжен (то есть вероятности появления каждого из возможных символов равны, символы в ключевой последовательности независимы и случайны)\nдлина ключа равна или больше длины сообщения\nисходный (открытый) текст обладает некоторой избыточностью (что является критерием оценки правильности расшифровки)>>>",
            "Практическая стойкость таких систем базируется на теории сложности и оценивается исключительно в расчёте на определённый момент времени и последовательно c двух позиций:\n<<<вычислительная сложность полного перебора;\nизвестные на данный момент слабости (уязвимости) и их влияние на вычислительную сложность.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Криптографическая_стойкость"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Файловый_менеджер"
    },
    {
        "task": [
            "В настоящее время известны следующие стандартные реализации алгоритма A3:\n<<<COMP128\nCOMP128-2\nCOMP128-3\nMILENAGE>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/A3_(шифр)"
    },
    {
        "task": [
            "BIOS (до MBR)[править | править код]<<<BIOS проводит начальную инициализацию оборудования (POST).\nBIOS определяет, с какого устройства производить дальнейшую загрузку: дискета, флеш-накопитель, жёсткий диск и т. д. (выбор устройства зависит от версии и от настроек BIOS)>>>",
            "[в данном описании рассматривается только случай загрузки с жёсткого диска].<<<BIOS считывает один сектор (512 байт), то есть непосредственно MBR, который находится по адресу: «цилиндр 0, головка 0, сектор 1»[1], и помещает его в область памяти по физическому адресу 0x7C00.\nBIOS проверяет, что этот сектор оканчивается сигнатурой 0АА55h (байты 55h,0AAh).>>>",
            "[если это не так, то управление возвращается обратно в BIOS].<<<BIOS передаёт управление по физическому адресу 0x7C00 (то есть сектору MBR), предварительно записав в регистр DL номер диска, с которого этот сектор считан. Для первого жёсткого диска это значение будет равно 80h (128 в десятичной системе), для дисковода A: равно 0. Кроме того, Plug-n-Play BIOS может записать в регистры ES:DI указатель на структуру «$PnP».>>>",
            "Выбор загрузочного раздела и проверка целостности MBR:\n<<<MBR копирует себя на другой адрес, чтобы освободить место для загрузчика ОС (к примеру, MBR фирмы Microsoft копирует себя на адрес 0000:0600).\nMBR просматривает по очереди все записи о разделах и ищет первую запись об «активном» («загрузочном») разделе (то есть ищет раздел, отмеченный как 80h).\nВ случае успеха (раздел, помеченный как 80h — найден) MBR запоминает номер этого раздела. Если просмотрены все 4 записи и не найден раздел, помеченный как 80h, то вызывается INT 18h (отображается сообщение об ошибке посредством вызова BIOS программного прерывания 18h). Это возвращает управление обратно в BIOS, что может приводить либо к загрузке BASIC, либо к повторной попытке загрузить систему с диска, либо к перезагрузке компьютера — в зависимости от версии и реализации BIOS.\nMBR просматривает все оставшиеся записи и проверяет, что это единственный активный раздел (что больше разделов, помеченных 80h, на данном физическом диске не существует). Если находятся другие разделы, помеченные 80h (и/или хотя бы один раздел содержит неправильную метку), то MBR выводит сообщение об ошибке (обычно это что-то типа «Invalid partition table»), после чего система зависает в бесконечном цикле, из которого можно выйти только перезагрузкой компьютера. На этом заканчивается проверка MBR и начинается подготовка к загрузке ОС.\nMBR считывает первый сектор логического диска (VBR — Volume Boot Record, или Volume Boot Sector), помеченного как «загрузочный» (80h), и помещает этот сектор по физическому адресу 0x7C00.\nMBR проверяет, что данный сектор заканчивается сигнатурой 55AAh. Если этой сигнатуры в этом месте нет, то выводится сообщение «Missing operating system» и компьютер подвисает, требуется перезагрузка.\nMBR передаёт управление загрузочному сектору выбранного раздела диска.>>>",
            "Примеры:\n<<<Загрузчик Windows поступает первым способом: он передаёт управление второму загрузчику NTLDR, который находится в начале активного Windows-раздела. Далее второй загрузчик обеспечивает поддержку файловой системы и запускает необходимые для дальнейшей загрузки ОС файлы.\nЗагрузчик GRUB (нашедший популярность в Linux-дистрибутивах) использует второй способ: он передаёт управление второму загрузчику, который расположен в группе секторов № 1-№ 62. Второй загрузчик ищет корневой Linux-раздел, а на этом разделе ищет файлы конфигурации GRUB (и модули GRUB) для отображения GRUB-меню. При выборе какого-либо пункта в GRUB-меню GRUB действует согласно файлу конфигурации для этого пункта (например, в случае с дистрибутивами Linux в ОЗУ копируется Linux-ядро с initrd и управление передаётся ядру). Копия первого загрузчика GRUB (446 байт из нулевого сектора диска) находится в файле boot.img, а копия второго загрузчика GRUB (группа секторов № 1 — № 62) находится в файле core.img (собирается при установке GRUB с учётом файловой системы корневого раздела и других факторов).>>>",
            "Признак активности раздела показывает, возможно ли загрузить операционную систему с данного раздела. Для стандартных загрузчиков может принимать такие значения:\n<<<8016 — раздел активен;\n0016 — раздел неактивен;\nдругие значения запрещены.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Главная_загрузочная_запись"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Символьный_тип"
    },
    {
        "task": [
            "Работа с ISO-образами<<<В операционных системах Windows начиная с Windows 7 появилась возможность записать образ диска на оптический диск, а в Windows 8 его можно монтировать и работать так же, как с физическим диском.\nВ MacOS средствами операционной системы можно монтировать и работать с этим образом точно так же, как с физическим компакт-диском.\nВ GNU/Linux можно монтировать этот образ точно так же, как физический компакт-диск, но с другими опциями:>>>",
            "mount /dir/image.iso -o loop /mnt/cdrom\n<<<Во FreeBSD доступ к образу можно получить после выполнения следующих команд:>>>",
            "mdconfig -a -t vnode -u0 -f filename.iso\nmount -t cd9660 /dev/md0 /mnt\n<<<Также, существуют программы, которые на основе файла-образа создают в системе виртуальный привод CD-ROM. Например, UltraISO, Alcohol 120%, DAEMON Tools.\nДля Windows есть программа ImDisk Virtual Disk Driver, которая интегрируется в контекстное меню проводника и подключает ISO — образ как виртуальный диск на первую свободную букву диска в системе.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/ISO-образ"
    },
    {
        "task": [
            "Преимущества снижения размерности<<<Оно уменьшает требуемое время и память.\nУдаление мультиколлинеарности улучшает скорость модели машинного обучения.\nПроще представить данные визуально, если свести к очень низким размерностям, таким как 2D или 3D.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Снижение_размерности"
    },
    {
        "task": [
            "Часто наследование отождествляют с полиморфизмом подтипов (англ. subtyping): \n<<<Концептуально, полиморфизм подтипов устанавливает отношение: «является» (англ. is-a relationship), — тем самым имитируя семантическое отношение наследования;\nВ свою очередь наследование в большей степени относится к повторному использованию кода, то есть определяет синтаксическое отношение.>>>",
            "В C++ существует три типа наследования: public, protected, private. Спецификаторы доступа членов базового класса меняются в потомках следующим образом:\n<<<Если класс объявлен как базовый для другого класса со спецификатором доступа …\n… public:\npublic-члены базового класса — доступны как public-члены производного класса;\nprotected-члены базового класса — доступны как protected-члены производного класса;\n… protected:\npublic- и protected-члены базового класса — доступны как protected-члены производного класса;\n… private:\npublic- и protected-члены базового класса — доступны как private-члены производного класса.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Наследование_(программирование)"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Высокоуровневый_язык_программирования"
    },
    {
        "task": [
            "Статические методы предсказания ветвлений являются наиболее простыми. Суть этих методов состоит в том, что различные типы переходов:\n<<<либо выполняются всегда;\nлибо не выполняются никогда.>>>",
            "Пример тривиального статического предсказания, реализованного в первых процессорах архитектур SPARC и MIPS.\n<<<В конвейер всегда загружаются инструкции, расположенные после инструкции условного перехода. if(условие) {<предсказанный переход>} else {...}>>>",
            "Пример статического предсказания,\nреализованного в современных процессорах.\n<<<Если инструкция перехода выполняет переход назад (на младшие адреса), в конвейер загружаются инструкции, расположенные по адресу перехода. do {<предсказанный переход>} while(условие); ...\nЕсли инструкция перехода выполняет переход вперёд (на старшие адреса), в конвейер загружаются инструкции, расположенные после инструкции перехода. if(условие) {<предсказанный переход>} else {...}>>>",
            "Анализируется таблица истории переходов. Таблица содержит:\n<<<младшие значимые биты адреса инструкции;\nсоответствующую им вероятность условного перехода:\n«скорее всего, будет выполнен»;\n«возможно, будет выполнен»;\n«возможно, не будет выполнен»;\n«скорее всего, не будет выполнен».>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Предсказатель_переходов"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Пользовательское_пространство"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Обратная_совместимость"
    },
    {
        "task": [
            "Пример применения<<<Используется в сочетании с PPTP для создания виртуальных частных сетей.\nПрименяется в технологии WDS для координации действий точек доступа и контроллера WDS.\nИспользуется в технологиях мобильного IP>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/GRE_(протокол)"
    },
    {
        "task": [
            "Применяемые в компьютерах дисководы используют в качестве съёмных носителей информации:\n<<<магнитные дискеты, к которым относятся:>>>",
            "Zip- и Jaz-дисководы, использующие Zip- и Jaz-дискеты соответственно[8].<<<оптические диски: компакт-диск и его развитие — GD-ROM, DVD, HD DVD, причём как предназначенные только для чтения (CD-ROM, DVD-ROM и т. п.), так и для Внешний дисковод для дискет размером 3½\", подключаемый к компьютеру по USBчтения и записи, одно-и многократной (+R, -R, +RW, -RW и т. п.);\nмагнитооптические диски: MO размером 5.25 или 3.5 дюйма, упакованные в картридж.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Дисковод"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Программно-аппаратный_комплекс"
    },
    {
        "task": [
            "Адресное пространство[править | править код]<<<Простая (англ. flat addressing) — указание объекта с помощью идентификатора или числа, не имеющего внутренней структуры.\nРасширенная (англ. extended addressing) — доступ к запоминающему устройству с адресным пространством, бо́льшим диапазоном адресов, предусмотренного форматом команды.\nВиртуальная (англ. virtual addressing) — принцип, при котором каждая программа рассматривается как ограниченное непрерывное поле логической памяти, а адреса этого поля — как виртуальные адреса.\nАссоциативная (англ. associative addressing) — точное местоположение данных не указывается, а задаётся значение определённого поля данных, идентифицирующее эти данные (см.: Ассоциативная память).>>>",
            "Исполнение программ[править | править код]<<<Статическая (англ. static addressing) — соответствие между виртуальными и физическими адресами устанавливается до начала и не меняется в ходе выполнения программы.\nДинамическая (англ. dynamic addressing) — преобразование виртуальных адресов в физические осуществляется в процессе выполнения программы. Программа при этом не зависит от места размещения в физической памяти и может перемещаться в ней в процессе выполнения.>>>",
            "Кодирование адресов[править | править код]<<<Явная (англ. explicit addressing) — адресация путём явного задания адресов в программе.\nНеявная (англ. implied addressing) — один или несколько операндов или адресов операндов находятся в фиксированных для данной команды регистрах или ячейках памяти и не требуют явного указания в команде.\nАбсолютная (англ. absolute addressing) — адресная часть команды содержит абсолютный адрес.\nСимволическая (англ. symbolic addressing) — адресная часть команды содержит символический адрес.>>>",
            "Вычисление адресов[править | править код]<<<Непосредственная, прямая (англ. immediate (direct) addressing) — адресная часть команды содержит непосредственный (прямой) адрес; адресация путём указания прямых адресов.\nКосвенная (англ. indirect addressing) — адресная часть команды содержит косвенный адрес; адресация посредством косвенных адресов.\nРегистровая (англ. register addressing) — задание адресов операндов в регистрах.\nБазисная (англ. basic addressing) — вычисление адресов в машинных командах относительно содержимого регистра, указанного в качестве базового.\nБазовая (англ. base-displacement addressing) — схема вычисления исполнительного адреса, при которой этот адрес является суммой базового адреса и смещения.\nОтносительная (англ. relative addressing) — адресная часть команды содержит относительный адрес.\nИндексная (англ. indexed addressing) — формирование исполнительного адреса осуществляется путём добавления к базовому адресу содержимого индексного регистра.\nАвтодекрементная, автоинкрементная (англ. autodecremental, autoincremental addressing) — содержимое регистра индекса изменяется (уменьшается или увеличивается) на некоторое число.\nПостдекрементная, предекрементная, постинкрементная, преинкрементная — автодекрементные и автоинкрементные адресации, при которых уменьшение/увеличение происходит после/до выборки операнда.\nСтековая (англ. stack addressing) — адресация посредством регистра — указателя стека.\nСамоопределяющаяся (англ. self-relative addressing) — адресная часть команды содержит самоопределяющийся адрес.\nАдресация относительно счётчика команд (англ. program counter relative addressing) — адреса в команде указываются в виде разности исполнительных адресов и адреса исполняемой команды. Такой способ адресации не требует настройки (см. также: Позиционно-независимый код).>>>",
            "В адресном поле командного слова содержатся только младшие разряды адресуемой ячейки. Дополнительный указательный регистр.\n<<<Адресация с регистром страницы является примером сокращённой адресации. При этом вся память разбивается на блоки-страницы. Размер страницы диктуется длиной адресного поля.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Адресация_памяти"
    },
    {
        "task": [
            "Алгоритмы сжатия без потерь[править | править код]<<<RLE — используется в форматах PCX — в качестве основного метода и в форматах BMP, TGA, TIFF в качестве одного из доступных.\nLZW — используется в формате GIF\nDeflate — используется в формате PNG>>>",
            "Алгоритмы сжатия с потерями[править | править код]<<<Наиболее популярным примером формата изображения, где используется сжатие с потерями, является JPEG\nНа мобильных платформах применяется перевод изображения в палитровый формат.\nJPEG 2000\nАлгоритм фрактального сжатия\nDXTC — компрессия текстур, реализованная в графическом API DirectX и поддерживаемая на аппаратном уровне современными видеокартами.\nДифференциальное сжатие — сжатие основано на формировании граничных условий и выбора дифференциальных уравнений, решение выбранных дифференциальных уравнений, с вычисленными при сжатии граничными условиями, позволяет восстановить исходное изображение.[1][значимость факта?]>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Сжатие_изображений"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Движение_свободного_программного_обеспечения"
    },
    {
        "task": [
            "В настоящее время выделяют три основных типа грид-систем:\n<<<Добровольные гриды — гриды на основе использования добровольно предоставляемого свободного ресурса персональных компьютеров;\nНаучные гриды — хорошо распараллеливаемые приложения программируются специальным образом (например, с использованием Globus Toolkit);\nГриды на основе выделения вычислительных ресурсов по требованию (коммерческий грид, англ. enterprise grid) — обычные коммерческие приложения работают на виртуальном компьютере, который, в свою очередь, состоит из нескольких физических компьютеров, объединённых с помощью грид-технологий.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Грид"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Троттлинг"
    },
    {
        "task": [
            "Некоторые способы применения goto могут создавать проблемы с логикой исполнения программы:\n<<<Если некоторая переменная инициализируется (получает значение) в одном месте и потом используется далее, то переход в точку после инициализации, но до использования, приведёт к тому, что будет выбрано значение, которое находилось в памяти, выделенной под переменную, до момента выделения (и которое, как правило, является произвольным и случайным).\nПередача управления внутрь тела цикла приводит к пропуску кода инициализации цикла или первоначальной проверки условия.\nАналогично, передача управления внутрь процедуры или функции приводит к пропуску её начальной части, в которой производится инициализация (выделение памяти под локальные переменные).>>>",
            "Принцип 2. Любая программа строится из трёх базовых управляющих конструкций: последовательность, ветвление, цикл.\n<<<Последовательность — однократное выполнение операций в том порядке, в котором они записаны в тексте программы.\nБертран Мейер поясняет: «Последовательное соединение: используйте выход одного элемента как вход к другому, подобно тому, как электронщики соединяют выход сопротивления со входом конденсатора»[17].\nВетвление — однократное выполнение одной из двух или более операций, в зависимости от выполнения заданного условия.\nЦикл — многократное исполнение одной и той же операции до тех пор, пока выполняется заданное условие (условие продолжения цикла).>>>",
            "Принцип 4. Повторяющиеся фрагменты программы можно оформить в виде подпрограмм (процедур и функций). Таким же образом (в виде подпрограмм) можно оформить логически целостные фрагменты программы, даже если они не повторяются.\n<<<В этом случае в тексте основной программы, вместо помещённого в подпрограмму фрагмента, вставляется инструкция «Вызов подпрограммы». При выполнении такой инструкции работает вызванная подпрограмма. После этого продолжается исполнение основной программы, начиная с инструкции, следующей за командой «Вызов подпрограммы».\nБертран Мейер поясняет: «Преобразуйте элемент, возможно, с внутренними элементами, в подпрограмму, характеризуемую одним входом и одним выходом в потоке управления»[17].>>>",
            "Следование принципам структурного программирования сделало тексты программ, даже довольно крупных, нормально читаемыми. Серьёзно облегчилось понимание программ, появилась возможность разработки программ в нормальном промышленном режиме, когда программу может без особых затруднений понять не только её автор, но и другие программисты. Это позволило разрабатывать достаточно крупные для того времени программные комплексы силами коллективов разработчиков, и сопровождать эти комплексы в течение многих лет, даже в условиях неизбежных изменений в составе персонала.\n<<<Структурное программирование позволяет значительно сократить число вариантов построения программы по одной и той же спецификации, что значительно снижает сложность программы и, что ещё важнее, облегчает понимание её другими разработчиками.\nВ структурированных программах логически связанные операторы находятся визуально ближе, а слабо связанные — дальше, что позволяет обходиться без блок-схем и других графических форм изображения алгоритмов (по сути, сама программа является собственной блок-схемой).\nСильно упрощается процесс тестирования и отладки структурированных программ.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Структурное_программирование"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Демультиплексор"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Автокодировщик"
    },
    {
        "task": [
            "Типичными конструкторами для построения составных концептов являются:\n<<<пересечение (или конъюнкция) концептов, обозначается как \n\n\n\nC\n⊓\nD\n\n\n{\\displaystyle C\\sqcap D}\n\n;\nобъединение (или дизъюнкция) концептов, обозначается как \n\n\n\nC\n⊔\nD\n\n\n{\\displaystyle C\\sqcup D}\n\n;\nдополнение (или отрицание) концепта, обозначается как \n\n\n\n¬\nC\n\n\n{\\displaystyle \\neg C}\n\n;\nограничение на значения роли (или ограничение квантором всеобщности), обозначается как \n\n\n\n∀\nR\n.\nC\n\n\n{\\displaystyle \\forall R.C}\n\n;\nэкзистенциальное ограничение (или ограничение квантором существования), обозначается как \n\n\n\n∃\nR\n.\nC\n\n\n{\\displaystyle \\exists R.C}\n\n;\nчисленные ограничения на значения роли, например: \n\n\n\n(\n\n≤\n\nn\n\nR\n)\n\n\n{\\displaystyle ({\\leq }n\\,R)}\n\n, \n\n\n\n(\n\n≥\n\nn\n\nR\n.\nC\n)\n\n\n{\\displaystyle ({\\geq }n\\,R.C)}\n\n, и другие.>>>",
            "Дескрипционная логика \n\n\n\n\n\nA\nL\nC\n\n\n\n\n{\\displaystyle {\\mathcal {ALC}}}\n\n (от англ. attributive language with complement) разработана в 1991 году[5] и является одной из базовых систем, на основе которой строятся многие другие дескрипционные логики. Пусть заданы непустые конечные множества атомарных концептов и атомарных ролей. Тогда следующее является индуктивным определением составных концептов логики \n\n\n\n\n\nA\nL\nC\n\n\n\n\n{\\displaystyle {\\mathcal {ALC}}}\n\n (концепты):\n<<<всякий атомарный концепт является концептом;\nвыражения \n\n\n\n⊤\n\n\n{\\displaystyle \\top }\n\n и \n\n\n\n⊥\n\n\n{\\displaystyle \\bot }\n\n являются концептами;\nесли \n\n\n\nC\n\n\n{\\displaystyle C}\n\n есть концепт, то его дополнение \n\n\n\n¬\nC\n\n\n{\\displaystyle \\neg C}\n\n является концептом;\nесли \n\n\n\nC\n\n\n{\\displaystyle C}\n\n и \n\n\n\nD\n\n\n{\\displaystyle D}\n\n есть концепты, то их пересечение \n\n\n\nC\n⊓\nD\n\n\n{\\displaystyle C\\sqcap D}\n\n и объединение \n\n\n\nC\n⊔\nD\n\n\n{\\displaystyle C\\sqcup D}\n\n являются концептами;\nесли \n\n\n\nC\n\n\n{\\displaystyle C}\n\n есть концепт, а \n\n\n\nR\n\n\n{\\displaystyle R}\n\n есть роль, то выражения \n\n\n\n∀\nR\n.\nC\n\n\n{\\displaystyle \\forall R.C}\n\n и \n\n\n\n∃\nR\n.\nC\n\n\n{\\displaystyle \\exists R.C}\n\n являются концептами.>>>",
            "Например, для ALC интерпретирующая функция распространяется на составные концепты логики \n\n\n\n\n\nA\nL\nC\n\n\n\n\n{\\displaystyle {\\mathcal {ALC}}}\n\n по следующим правилам:\n<<<\n\n\n\n⊤\n\n\n{\\displaystyle \\top }\n\n интерпретируется как весь домен: \n\n\n\n\n⊤\n\n\nI\n\n\n\n=\n\nΔ\n\n\nI\n\n\n\n\n\n{\\displaystyle \\top ^{\\mathcal {I}}=\\Delta ^{\\mathcal {I}}}\n\n\n\n\n\n\n⊥\n\n\n{\\displaystyle \\bot }\n\n интерпретируется как пустое множество: \n\n\n\n\n⊥\n\n\nI\n\n\n\n=\n∅\n\n\n{\\displaystyle \\bot ^{\\mathcal {I}}=\\varnothing }\n\n\nдополнение концепта интерпретируется как дополнение множества: \n\n\n\n(\n¬\nC\n\n)\n\n\nI\n\n\n\n=\n\nΔ\n\n\nI\n\n\n\n∖\n\nC\n\n\nI\n\n\n\n\n\n{\\displaystyle (\\neg C)^{\\mathcal {I}}=\\Delta ^{\\mathcal {I}}\\setminus C^{\\mathcal {I}}}\n\n\nпересечение концептов интерпретируется как пересечение множеств: \n\n\n\n(\nC\n⊓\nD\n\n)\n\n\nI\n\n\n\n=\n\nC\n\n\nI\n\n\n\n∩\n\nD\n\n\nI\n\n\n\n\n\n{\\displaystyle (C\\sqcap D)^{\\mathcal {I}}=C^{\\mathcal {I}}\\cap D^{\\mathcal {I}}}\n\n\nобъединение концептов интерпретируется как объединение множеств: \n\n\n\n(\nC\n⊔\nD\n\n)\n\n\nI\n\n\n\n=\n\nC\n\n\nI\n\n\n\n∪\n\nD\n\n\nI\n\n\n\n\n\n{\\displaystyle (C\\sqcup D)^{\\mathcal {I}}=C^{\\mathcal {I}}\\cup D^{\\mathcal {I}}}\n\n\nвыражение \n\n\n\n∀\nR\n.\nC\n\n\n{\\displaystyle \\forall R.C}\n\n интерпретируется как множество тех объектов, у которых все \n\n\n\nR\n\n\n{\\displaystyle R}\n\n-последователи принадлежат интерпретации концепта \n\n\n\nC\n\n\n{\\displaystyle C}\n\n. Формально:>>>",
            "\n\n\n\n(\n∀\nR\n.\nC\n\n)\n\n\nI\n\n\n\n=\n{\n\ne\n∈\n\nΔ\n\n\nI\n\n\n\n∣\n∀\nd\n∈\n\nΔ\n\n\nI\n\n\n\n:\n \n(\ne\n,\nd\n)\n∈\n\nR\n\n\nI\n\n\n\n⇒\nd\n∈\n\nC\n\n\nI\n\n\n\n\n}\n\n\n{\\displaystyle (\\forall R.C)^{\\mathcal {I}}=\\{\\,e\\in \\Delta ^{\\mathcal {I}}\\mid \\forall d\\in \\Delta ^{\\mathcal {I}}:\\ (e,d)\\in R^{\\mathcal {I}}\\Rightarrow d\\in C^{\\mathcal {I}}\\,\\}}\n\n<<<выражение \n\n\n\n∃\nR\n.\nC\n\n\n{\\displaystyle \\exists R.C}\n\n интерпретируется как множество тех объектов, у которых имеется \n\n\n\nR\n\n\n{\\displaystyle R}\n\n-последователь, принадлежащий интерпретации концепта \n\n\n\nC\n\n\n{\\displaystyle C}\n\n. Формально:>>>",
            "В 1991 году[6] было замечено, что логика \n\n\n\n\n\nA\nL\nC\n\n\n\n\n{\\displaystyle {\\mathcal {ALC}}}\n\n есть не что иное, как записанная в других обозначениях модальная логика \n\n\n\n\n\nK\n\n\nn\n\n\n\n\n{\\displaystyle \\mathbf {K} _{n}}\n\n, имеющая \n\n\n\nn\n\n\n{\\displaystyle n}\n\n независимых модальностей. А именно, если в \n\n\n\n\n\nA\nL\nC\n\n\n\n\n{\\displaystyle {\\mathcal {ALC}}}\n\n имеются атомарные концепты \n\n\n\n\nA\n\n1\n\n\n,\n…\n,\n\nA\n\nm\n\n\n\n\n{\\displaystyle A_{1},\\ldots ,A_{m}}\n\n и атомарные роли \n\n\n\n\nR\n\n1\n\n\n,\n…\n,\n\nR\n\nn\n\n\n\n\n{\\displaystyle R_{1},\\ldots ,R_{n}}\n\n, то соответствие между логиками осуществляется следующим образом:\n<<<атомарные концепты \n\n\n\n\nA\n\ni\n\n\n\n\n{\\displaystyle A_{i}}\n\n переходят в пропозициональные переменные \n\n\n\n\np\n\ni\n\n\n\n\n{\\displaystyle p_{i}}\n\n модальной логики;\nпересечение \n\n\n\n⊓\n\n\n{\\displaystyle \\sqcap }\n\n, объединение \n\n\n\n⊔\n\n\n{\\displaystyle \\sqcup }\n\n и дополнение \n\n\n\n¬\n\n\n{\\displaystyle \\neg }\n\n концептов переходит в булевы связки конъюнкцию \n\n\n\n∧\n\n\n{\\displaystyle \\land }\n\n, дизъюнкцию \n\n\n\n∨\n\n\n{\\displaystyle \\lor }\n\n и отрицание \n\n\n\n¬\n\n\n{\\displaystyle \\neg }\n\n;\nвыражение \n\n\n\n∀\n\nR\n\nj\n\n\n\n\n{\\displaystyle \\forall R_{j}}\n\n переходит в \n\n\n\n\n◻\n\nj\n\n\n\n\n{\\displaystyle \\Box _{j}}\n\n, а выражение \n\n\n\n∃\n\nR\n\nj\n\n\n\n\n{\\displaystyle \\exists R_{j}}\n\n переходит в \n\n\n\n\n◊\n\nj\n\n\n\n\n{\\displaystyle \\Diamond _{j}}\n\n.>>>",
            "Многие дескрипционные логики, включая \n\n\n\n\n\nA\nL\nC\n\n\n\n\n{\\displaystyle {\\mathcal {ALC}}}\n\n, можно рассматривать как фрагменты логики предикатов при «естественном» переводе концептов в предикатные формулы. Если в \n\n\n\n\n\nA\nL\nC\n\n\n\n\n{\\displaystyle {\\mathcal {ALC}}}\n\n имеются атомарные концепты \n\n\n\n\nA\n\n1\n\n\n,\n…\n,\n\nA\n\nm\n\n\n\n\n{\\displaystyle A_{1},\\ldots ,A_{m}}\n\n и атомарные роли \n\n\n\n\nR\n\n1\n\n\n,\n…\n,\n\nR\n\nn\n\n\n\n\n{\\displaystyle R_{1},\\ldots ,R_{n}}\n\n, то для перевода вводятся одноместные предикатные символы \n\n\n\n\nP\n\n1\n\n\n,\n…\n,\n\nP\n\nm\n\n\n\n\n{\\displaystyle P_{1},\\ldots ,P_{m}}\n\n и двуместные предикатные символы \n\n\n\n\nS\n\n1\n\n\n,\n…\n,\n\nS\n\nn\n\n\n\n\n{\\displaystyle S_{1},\\ldots ,S_{n}}\n\n, а сам перевод задается индуктивно следующим образом:\n<<<атомарные концепты \n\n\n\n\nA\n\ni\n\n\n\n\n{\\displaystyle A_{i}}\n\n переходят в формулы \n\n\n\n\nP\n\ni\n\n\n(\nx\n)\n\n\n{\\displaystyle P_{i}(x)}\n\n;\nпересечение \n\n\n\n⊓\n\n\n{\\displaystyle \\sqcap }\n\n, объединение \n\n\n\n⊔\n\n\n{\\displaystyle \\sqcup }\n\n и дополнение \n\n\n\n¬\n\n\n{\\displaystyle \\neg }\n\n концептов переходит в булевы связки конъюнкцию \n\n\n\n∧\n\n\n{\\displaystyle \\land }\n\n, дизъюнкцию \n\n\n\n∨\n\n\n{\\displaystyle \\lor }\n\n и отрицание \n\n\n\n¬\n\n\n{\\displaystyle \\neg }\n\n;\nвыражение \n\n\n\n∀\n\nR\n\nj\n\n\n.\nC\n\n\n{\\displaystyle \\forall R_{j}.C}\n\n переходит в \n\n\n\n∀\ny\n(\n\nS\n\nj\n\n\n(\nx\n,\ny\n)\n⇒\n\nC\n′\n\n(\ny\n)\n)\n\n\n{\\displaystyle \\forall y(S_{j}(x,y)\\Rightarrow C'(y))}\n\n;\nвыражение \n\n\n\n∃\n\nR\n\nj\n\n\n.\nC\n\n\n{\\displaystyle \\exists R_{j}.C}\n\n переходит в \n\n\n\n∃\ny\n(\n\nS\n\nj\n\n\n(\nx\n,\ny\n)\n∧\n\nC\n′\n\n(\ny\n)\n)\n\n\n{\\displaystyle \\exists y(S_{j}(x,y)\\land C'(y))}\n\n.>>>",
            "В соответствии с этим делением, записываемые с помощью языка дескрипционных логик знания подразделяются на:\n<<<набор терминологических аксиом или \n\n\n\nT\nB\no\nx\n\n\nT\n\n\n\n\n{\\displaystyle TBox{\\mathcal {T}}}\n\n и\nнабор утверждений об объектах или \n\n\n\nA\nB\no\nx\n\n\nA\n\n\n\n\n{\\displaystyle ABox{\\mathcal {A}}}\n\n.>>>",
            "С этой целью, помимо атомарных концептов и атомарных ролей, то есть имен для классов и отношений, вводится также конечное множество имён для объектов. Утверждения об объектах бывают двух видов:\n<<<утверждение о принадлежности объекта \n\n\n\na\n\n\n{\\displaystyle a}\n\n концепту \n\n\n\nC\n\n\n{\\displaystyle C}\n\n — записывается как \n\n\n\nC\n(\na\n)\n\n\n{\\displaystyle C(a)}\n\n или \n\n\n\na\n:\nC\n\n\n{\\displaystyle a\\colon C}\n\n;\nутверждение о связи двух объектов \n\n\n\na\n\n\n{\\displaystyle a}\n\n и \n\n\n\nb\n\n\n{\\displaystyle b}\n\n ролью \n\n\n\nR\n\n\n{\\displaystyle R}\n\n — записывается как \n\n\n\nR\n(\na\n,\nb\n)\n\n\n{\\displaystyle R(a,b)}\n\n или \n\n\n\n(\na\n,\nb\n)\n:\nR\n\n\n{\\displaystyle (a,b)\\colon R}\n\n или \n\n\n\na\n\nR\n\nb\n\n\n{\\displaystyle a\\,R\\,b}\n\n.>>>",
            "Некоторые определения логического анализа:\n<<<концепт \n\n\n\nC\n\n\n{\\displaystyle C}\n\n данной логики выполняется в интерпретации \n\n\n\n\n\nI\n\n\n\n\n{\\displaystyle {\\mathcal {I}}}\n\n, если \n\n\n\n\nC\n\n\nI\n\n\n\n≠\n∅\n\n\n{\\displaystyle C^{\\mathcal {I}}\\neq \\varnothing }\n\n;\nконцепт \n\n\n\nC\n\n\n{\\displaystyle C}\n\n называется выполнимым, если существует интерпретация, в которой он выполняется;\nконцепт \n\n\n\nC\n\n\n{\\displaystyle C}\n\n вложен в концепт \n\n\n\nD\n\n\n{\\displaystyle D}\n\n (или содержится в нём; англ. is subsumed by), если в любой интерпретации \n\n\n\n\n\nI\n\n\n\n\n{\\displaystyle {\\mathcal {I}}}\n\n выполняется \n\n\n\n\nC\n\n\nI\n\n\n\n⊆\n\nD\n\n\nI\n\n\n\n\n\n{\\displaystyle C^{\\mathcal {I}}\\subseteq D^{\\mathcal {I}}}\n\n.>>>",
            "Когда задан не только TBox \n\n\n\n\n\nT\n\n\n\n\n{\\displaystyle {\\mathcal {T}}}\n\n, но и ABox \n\n\n\n\n\nA\n\n\n\n\n{\\displaystyle {\\mathcal {A}}}\n\n, а значит имеется база знаний \n\n\n\n\n\nK\n\n\n=\n\n\nT\n\n\n∪\n\n\nA\n\n\n\n\n{\\displaystyle {\\mathcal {K}}={\\mathcal {T}}\\cup {\\mathcal {A}}}\n\n, то возникает ещё одно понятие:\n<<<объект \n\n\n\na\n\n\n{\\displaystyle a}\n\n является экземпляром концепта \n\n\n\nC\n\n\n{\\displaystyle C}\n\n относительно базы знаний \n\n\n\n\n\nK\n\n\n\n\n{\\displaystyle {\\mathcal {K}}}\n\n, если в любой модели \n\n\n\n\n\nI\n\n\n\n\n{\\displaystyle {\\mathcal {I}}}\n\n базы знаний \n\n\n\n\n\nK\n\n\n\n\n{\\displaystyle {\\mathcal {K}}}\n\n имеет место \n\n\n\n\na\n\n\nI\n\n\n\n∈\n\nC\n\n\nI\n\n\n\n\n\n{\\displaystyle a^{\\mathcal {I}}\\in C^{\\mathcal {I}}}\n\n.>>>",
            "Следующие понятия формализуют ключевые алгоритмические проблемы, связанные с конкретной дескрипционной логикой:\n<<<выполнимость концепта: является ли заданный концепт выполнимым относительно заданного TBox?\nвложенность концептов: верно ли, что один заданный концепт вложен в другой относительно заданного TBox?\nсовместимость TBox: имеет ли заданный TBox хотя бы одну модель?\nсовместимость базы знаний: имеет ли заданная пара (TBox, ABox) хотя бы одну модель?>>>",
            "В логиках, содержащих \n\n\n\n\n\nA\nL\nC\n\n\n\n\n{\\displaystyle {\\mathcal {ALC}}}\n\n, проблема вложенности концептов сводится к выполнимости концепта.[4] Важное практическое значение имеют нестандартные алгоритмические проблемы, в частности:\n<<<классификация терминологии: для данной терминологии (то есть TBox) построить таксономию или иерархию концептов, то есть упорядочить все атомарные концепты по отношению вложения (отн. данного TBox) и выдать соответствующее частично упорядоченное множество;\nизвлечение экземпляров концепта: найти все экземпляры заданного концепта относительно заданной базы знаний;\nнаиболее узкий концепт для объекта: найти наименьший (по вложению) концепт, экземпляром которого является заданный объект относительно заданной базы знаний;\nответ на запрос к базе знаний: выдать все наборы объектов, которые удовлетворяют заданному запросу относительно заданной базы знаний. В настоящее время глубоко изучены так называемые конъюнктивные запросы к базам знаний дескрипционных логик (а также их дизъюнкции), которые похожи на аналогичные запросы из области баз данных; в случае же запросов более общего вида проблема быстро приобретает высокую вычислительную сложность или даже становится неразрешимой[10][11].>>>",
            "Фундаментальными характеристиками той или иной дескрипционной логики являются следующие:\n<<<разрешимость: обычно рассматривают разрешимость проблем выполнимости концепта (относительно TBox), совместимости базы знаний, ответа на конъюнктивные запросы;\nвычислительная сложность: изучается вычислительная сложность указанных выше алгоритмических проблем относительно размера входных данных (концепта, TBox, ABox). Отдельно выделяют сложность проблемы выполнимости концепта при фиксированном TBox, сложность проблемы выполнимости базы знаний или проблемы ответа на запросы при фиксированном TBox и меняющемся ABox (так называемая сложность по данным, англ. data complexity);\nсвойство конечности моделей[англ.] (полнота относительно конечных моделей): исследуется вопрос, всегда ли верно, что если концепт выполним (относительно TBox), то он выполним и на некоторой конечной модели (данного TBox); из наличия данного свойства у конкретной логики обычно следует, что для неё более просто строится разрешающая процедура, например, табло-алгоритм;\nсвойство древовидности моделей (полнота относительно древовидных моделей, англ. tree model property): аналогичный вопрос, но не о конечных, а о «древовидных» моделях, при этом древовидными здесь могут считаться структуры, слегка отличающиеся от традиционного понятия дерева; например, могут допускаться петли (ребра, ведущие из вершины в эту же вершину), мультирёбра (несколько ребер различных «типов», ведущих из одной вершины в другую), транзитивные деревья (структуры, являющиеся транзитивным замыканием обычных деревьев), а также их комбинации; у логик, обладающих данным свойством, обычно более низкая вычислительная сложность, в частности, более просто строится разрешающий табло-алгоритм.>>>",
            "Официальной рекомендацией W3C от 10 февраля 2004 года является версия языка OWL 1.0. Данная спецификация языка OWL подразделяется на следующие варианты:\n<<<OWL-Lite — соответствует дескрипционной логике \n\n\n\n\n\nS\nH\nI\nF\n\n\n(\nD\n)\n\n\n{\\displaystyle {\\mathcal {SHIF}}(D)}\n\n;\nOWL-DL — соответствует дескрипционной логике \n\n\n\n\n\nS\nH\nO\nI\nN\n\n\n(\nD\n)\n\n\n{\\displaystyle {\\mathcal {SHOIN}}(D)}\n\n;\nOWL-Full — не соответствует какой-либо дескрипционной логике, более того, является неразрешимым.>>>",
            "Имеется множество программных систем (машин вывода), позволяющих совершать логический анализ в дескрипционных логиках (проверять онтологию на непротиворечивость, строить таксономии, проверять выполнимость и вложенность концептов, делать запросы к базам знаний и др.). Подобные системы различаются по поддерживаемым ими дескрипционным логикам, по типу реализованной в них разрешающей процедуры (например, табло-алгоритм, резолюция и т. п.), по поддерживаемым форматам данных, языку программирования, на котором они реализованы, и другим параметрам. Некоторые известные можно системы[15]:\n<<<CEL — поддерживает логику \n\n\n\n\n\nE\nL\n\n\n+\n\n\n{\\displaystyle {\\mathcal {EL}}+}\n\n, имеющую полиномиальную сложность, написана на Лиспе[16];\nFaCT++ — поддерживает логику \n\n\n\ns\n\n\nR\nO\nI\nQ\n\n\n(\nD\n)\n\n\n{\\displaystyle s{\\mathcal {ROIQ}}(D)}\n\n, а также OWL 2.0, реализует табло-алгоритм, написана на C++[17];\nKaon2 — поддерживает логику \n\n\n\n\n\nS\nH\nI\nQ\n\n\n\n\n{\\displaystyle {\\mathcal {SHIQ}}}\n\n, расширенную специальными правилами вывода, реализует алгоритм, основанный на резолюции, написан на Java[18];\nPellet — поддерживает логику \n\n\n\ns\n\n\nR\nO\nI\nQ\n\n\n(\nD\n)\n\n\n{\\displaystyle s{\\mathcal {ROIQ}}(D)}\n\n, а также OWL 1.1, реализует табло-алгоритм, написан на Java[19];\nRacerPro — поддерживает логику \n\n\n\n\n\nS\nH\nI\nQ\n\n\n(\nD\n)\n\n\n{\\displaystyle {\\mathcal {SHIQ}}(D)}\n\n, реализует табло-алгоритм, написана на Лиспе[20].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Дескрипционная_логика"
    },
    {
        "task": [
            "Процесс программы, желающей обмениваться данными по сети, может (например, при создании socket):\n<<<запросить у ОС в своё распоряжение порт с определённым номером. ОС может либо предоставить порт с этим номером, либо отказать программе (например, в случае, когда порт с этим номером уже отдан в распоряжение другому процессу);\nзапросить у ОС в своё распоряжение свободный порт с любым номером. ОС в этом случае  сама выберет свободный порт, ещё не занятый никаким процессом, и предоставит его в распоряжение запрашивающей программе.>>>",
            "Обмен данными по сети ведётся между двумя процессами по определённому протоколу. Для установки соединения необходимы:\n<<<номер протокола;\nдва IP-адреса (адрес хоста-отправителя и адрес хоста-получателя для построения маршрута между ними);>>>",
            "номер протокола;\nдва IP-адреса (адрес хоста-отправителя и адрес хоста-получателя для построения маршрута между ними);<<<два номера порта (порт процесса-отправителя и порт получателя).>>>",
            "При соединении по протоколу TCP порт процесса-отправителя используется:\n<<<операционной системой хоста-получателя для отправки пакета-подтверждения о получении данных;\nпроцессом-получателем для отправки пакета-ответа.>>>",
            "При соединении по протоколу SCTP в рамках ассоциации может использоваться:\n<<<несколько портов процесса-отправителя (источника)\nнесколько портов процесса-получателя.>>>",
            "На сервере запущены процессы программ, реализующих следующие протоколы:\n<<<SMTP — протокол для передачи почты от клиента к серверу и между серверами;\nPOP, IMAP — протоколы, используемые клиентами для получения почты с сервера.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Порт_(компьютерные_сети)"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Аккумулятор_(регистр_процессора)"
    },
    {
        "task": [
            "Многие системы управления версиями предоставляют ряд других возможностей:\n<<<Позволяют создавать разные варианты одного документа, т. н. ветки, с общей историей изменений до точки ветвления и с разными — после неё.\nДают возможность узнать, кто и когда добавил или изменил конкретный набор строк в файле.\nВедут журнал изменений, в который пользователи могут записывать пояснения о том, что и почему они изменили в данной версии.\nКонтролируют права доступа пользователей, разрешая или запрещая чтение или изменение данных, в зависимости от того, кто запрашивает это действие.>>>",
            "Три вида операций, выполняемых в системе управления версиями, могут приводить к необходимости объединения изменений. Это:\n<<<Обновление рабочей копии (изменения, сделанные в основной версии, сливаются с локальными).\nФиксация изменений (локальные изменения сливаются с изменениями, уже зафиксированными в основной версии).\nСлияние ветвей (изменения, сделанные в одной ветви разработки, сливаются с изменениями, сделанными в другой).>>>",
            "Во всех случаях ситуация принципиально одинакова и имеет следующие характерные черты:\n<<<Ранее была сделана копия дерева файлов и каталогов репозитория или его части.\nВпоследствии и в оригинальное дерево, и в копию были независимо внесены некоторые изменения.\nТребуется объединить изменения в оригинале и копии таким образом, чтобы не нарушить логическую связность проекта и не потерять данные.>>>",
            "Совершенно очевидно, что при невыполнении условия (2) (то есть если изменения были внесены только в оригинал или только в копию) объединение элементарно — достаточно скопировать изменённую часть туда, где изменений не было. В противном случае слияние изменений превращается в нетривиальную задачу, во многих случаях требующую вмешательства разработчика. В целом механизм автоматического слияния изменений работает, основываясь на следующих принципах:\n<<<Изменения могут состоять в модификации содержимого файла, создании нового файла или каталога, удалении или переименовании ранее существовавшего файла или каталога в проекте.\nЕсли два изменения относятся к разным и не связанным между собой файлам и/или каталогам, они всегда могут быть объединены автоматически. Их объединение состоит в том, что изменения, сделанные в каждой версии проекта, копируются в объединяемую версию.\nСоздание, удаление и переименование файлов в каталогах проекта могут быть объединены автоматически, если только они не конфликтуют между собой. В этом случае изменения, сделанные в каждой версии проекта, копируются в объединяемую версию. Конфликтующими обычно являются:\nУдаление и изменение одного и того же файла или каталога.\nУдаление и переименование одного и того же файла или каталога (в случае, если система поддерживает операцию переименования).\nСоздание в разных версиях файла с одним и тем же именем и разным содержимым.\nИзменения в пределах одного текстового файла, сделанные в разных версиях, могут быть объединены, если они находятся в разных местах этого файла и не пересекаются. В этом случае в объединённую версию вносятся все сделанные изменения.\nИзменения в пределах одного файла, если он не является текстовым, всегда являются конфликтующими и не могут быть объединены автоматически.>>>",
            "Механизм блокировки позволяет одному из разработчиков захватить в монопольное использование файл или группу файлов для внесения в них изменений. На то время, пока файл заблокирован, он остаётся доступным всем остальным разработчикам только на чтение, и любая попытка внести в него изменения отвергается сервером. Технически блокировка может быть организована по-разному. Типичным для современных систем является следующий механизм.\n<<<Файлы, для работы с которыми требуется блокировка, помечаются специальным флагом «блокируемый». Такая пометка может ставиться автоматически при добавлении файла в проект, обычно для этого предварительно создаётся список масок имён файлов, которые при добавлении должны становиться блокируемыми.\nЕсли файл помечен как блокируемый, то при извлечении рабочей копии с сервера он получает в локальной файловой системе атрибут «только для чтения», что препятствует его случайному редактированию.\nРазработчик, желающий изменить файл, вызывает специальную команду блокировки (lock) с указанием имени этого файла. В результате работы этой команды происходит следующее:\nсервер проверяет, не заблокирован ли уже файл другим разработчиком; если это так, то команда блокировки завершается с ошибкой «файл заблокирован другим пользователем» и разработчик, вызывавший её, должен ожидать, пока другой пользователь не снимет свою блокировку;\nфайл на сервере помечается как «заблокированный», с сохранением идентификатора заблокировавшего его разработчика и времени блокировки;\nесли блокировка на сервере прошла удачно, на локальной файловой системе с файла рабочей копии снимается атрибут «только для чтения», что позволяет начать его редактировать[2].\nРазработчик работает с заблокированным файлом. Если в процессе работы выясняется, что файл изменять не нужно, он может вызвать команду снятия блокировки (unlock, release lock). Все изменения файла будут отменены, локальный файл вернётся в состояние «только для чтения», с файла на сервере будет снят атрибут «заблокирован» и другие разработчики получат возможность изменять этот файл.\nПо завершении работы с блокируемым файлом разработчик фиксирует изменения. Обычно блокировка при этом снимается автоматически, хотя в некоторых системах блокировку требуется снимать вручную после фиксации, либо указывать в команде фиксации изменений соответствующий параметр. Так или иначе, при этом файл после изменений теряет флаг «заблокирован» и может быть изменён другими разработчиками.>>>",
            "Массовое использование блокировок, когда все или большинство файлов в проекте являются блокируемыми и для любых изменений необходимо заблокировать соответствующий набор файлов, называется ещё стратегией «блокированного извлечения».[3] Ранние системы управления версиями поддерживали исключительно эту стратегию, предотвращая таким способом появление конфликтов на корню. В современных VCS предпочтительным является использование неблокирующих извлечений, блокировки же считаются скорее неизбежным злом, которое нужно по возможности ограничивать. Недостатки использования блокировок очевидны:\n<<<Блокировки просто мешают продуктивной работе, поскольку вынуждают ожидать освобождения блокированных файлов, хотя в большинстве случаев даже совместные изменения одних и тех же файлов, которые делаются в ходе разных по смыслу работ, не пересекаются и объединяются при слиянии автоматически.\nЧастота возникновения конфликтов и сложность их разрешения в большинстве случаев не настолько велики, чтобы создать серьёзные затруднения. Возникновение же серьёзного конфликта изменений чаще всего сигнализирует либо о существенном расхождении во мнениях разных разработчиков относительно дизайна одного и того же фрагмента, либо о неправильной организации работы (когда два или более разработчиков делают одно и то же).\nБлокировки создают административные проблемы. Типичный пример: разработчик может забыть снять блокировку с занятых им файлов, уходя в отпуск. Для разрешения подобных проблем приходится применять административные меры, в том числе включать в систему технические средства для сброса неверных блокировок, но и при их наличии на приведение системы в порядок расходуется время.>>>",
            "Порядок использования системы управления версиями в каждом конкретном случае определяется техническими регламентами и правилами, принятыми в конкретной фирме или организации, разрабатывающей проект. Тем не менее, общие принципы правильного использования VCS немногочисленны и едины для любых разработок и систем управления версиями.\n<<<Любые рабочие, тестовые или демонстрационные версии проекта собираются только из репозитория системы. «Персональные» сборки, включающие ещё незафиксированные изменения, могут делать только разработчики для целей промежуточного тестирования. Таким образом, гарантируется, что репозиторий содержит всё необходимое для создания рабочей версии проекта.\nТекущая версия главной ветви всегда корректна. Не допускается фиксация в главной ветви неполных или не прошедших хотя бы предварительное тестирование изменений. В любой момент сборка проекта, проведённая из текущей версии, должна быть успешной.\nЛюбое значимое изменение должно оформляться как отдельная ветвь. Промежуточные результаты работы разработчика фиксируются в эту ветвь. После завершения работы над изменением ветвь объединяется со стволом. Исключения допускаются только для мелких изменений, работа над которыми ведётся одним разработчиком в течение не более чем одного рабочего дня.\nВерсии проекта помечаются тегами. Выделенная и помеченная тегом версия более никогда не изменяется.>>>",
            "К недостаткам распределённых систем можно отнести увеличение требуемого объёма дисковой памяти: на каждом компьютере приходится хранить полную историю версий, тогда как в централизованной системе на компьютере разработчика обычно хранится лишь рабочая копия, то есть срез репозитория на какой-то момент времени и внесённые изменения. Менее очевидным, но неприятным недостатком является то, что в распределённой системе практически невозможно реализовать некоторые виды функциональности, предоставляемые централизованными системами. Это:\n<<<Блокировка файла или группы файлов (для хранения признака блокировки нужен общедоступный и постоянно находящийся в онлайне центральный сервер). Это вынуждает применять специальные административные меры, если приходится работать с бинарными файлами, непригодными для автоматического слияния.\nСлежение за определённым файлом или группой файлов (изменения файлов происходят на разных серверах, слияния и выделения ветвей происходят локально, об изменениях становится известно только при синхронизации, причём не всем разработчикам, а только тем, кто в данной синхронизации участвует).\nЕдиная сквозная нумерация версий системы и/или файлов, в которой номер версии монотонно возрастает (такая нумерация также требует наличия главного сервера, задающего номера версий для всех остальных). В распределённых системах приходится обходиться локальными обозначениями версий и применять теги, назначение которых определяется соглашением между разработчиками или корпоративными стандартами фирмы.\nЛокальная работа пользователя с отдельной, небольшой по объёму выборкой из значительного по размеру и внутренней сложности хранилища на удалённом сервере.>>>",
            "Можно выделить следующие типичные ситуации, в которых использование распределённой системы даёт заметные преимущества:\n<<<Периодическая синхронизация нескольких компьютеров под управлением одного разработчика (рабочего компьютера, домашнего компьютера, ноутбука и так далее). Использование распределённой системы избавляет от необходимости выделять один из компьютеров в качестве сервера, а синхронизация выполняется по необходимости, обычно при «пересадке» разработчика с одного устройства на другое.\nСовместная работа над проектом небольшой территориально распределённой группы разработчиков без выделения общих ресурсов. Как и в предыдущем случае, реализуется схема работы без главного сервера, а актуальность репозиториев поддерживается периодическими синхронизациями по схеме «каждый с каждым».\nКрупный распределённый проект, участники которого могут долгое время работать каждый над своей частью, при этом не имеют постоянного подключения к сети. Такой проект может использовать централизованный сервер, с которым синхронизируются копии всех его участников. Возможны и более сложные варианты — например, с созданием групп для работы по отдельным направлениям внутри более крупного проекта. При этом могут быть выделены отдельные «групповые» серверы для синхронизации работы групп, тогда процесс окончательного слияния изменения становится древовидным: сначала отдельные разработчики синхронизируют изменения на групповых серверах, затем обновлённые репозитории групп синхронизируются с главным сервером. Возможна работа и без «групповых» серверов, тогда разработчики одной группы синхронизируют изменения между собой, после чего любой из них (например, руководитель группы) передаёт изменения на центральный сервер.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Система_управления_версиями"
    },
    {
        "task": [
            "См.также<<<Индексация (программирование)\nЦикл со счётчиком\nУказатель (тип данных)>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Индексный_регистр"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Закрытый_исходный_код"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Размерность_Вапника_—_Червоненкиса"
    },
    {
        "task": [
            "Главными историческими этапами были[источник не указан 294 дня]:\n<<<1950-е — первые языки программирования (Фортран, Алгол и Кобол).\n1968 — Э. Дейкстра написал основополагающую статью «Go To Statement Considered Harmful».\n1967 — создание понятия объектно-ориентированной парадигмы программирования — язык Симула (позже — Smalltalk, Objective-C и C++).\n1969 — создание системного программного обеспечения для управления аппаратным, названное «операционная система», было представлено компанией Unix.\n1972 — Д. Парнас ввёл ключевое понятие модульности и скрытия информации, чтобы помочь программистам справляться со всё более сложными программными системами.\n1970-е — первые микрокомпьютеры позволили писать свои программы для персональных компьютеров (ПК) и Microsoft Windows.\n1980-е — появление понятий жизненный цикл программного обеспечения в качестве некоторого консенсуса для централизованной разработки программного обеспечения.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Программная_инженерия"
    },
    {
        "task": [
            "По конструктивной реализации сетевые платы делятся на:\n<<<внутренние — отдельные платы, вставляющиеся в ISA-, PCI- или PCI-E-слот;\nвнешние, подключающиеся через USB-, LPT-[2] или PCMCIA-интерфейс, преимущественно использующиеся в ноутбуках;\nвстроенные в материнскую плату.>>>",
            "На 10-мегабитных сетевых платах для подключения к локальной сети используются 4 типа разъёмов:\n<<<8P8C для витой пары;\nBNC-коннектор для тонкого коаксиального кабеля;\n15-контактный разъём AUI трансивера для толстого коаксиального кабеля.\nоптический разъём (en:10BASE-FL и другие стандарты 10 Мбит Ethernet)>>>",
            "При конфигурировании карты сетевого адаптера могут быть доступны следующие параметры:\n<<<номер линии запроса на аппаратное прерывание IRQ\nномер канала прямого доступа к памяти DMA (если поддерживается)\nбазовый адрес ввода-вывода\nбазовый адрес памяти ОЗУ (если используется)\nподдержка стандартов автосогласования дуплекса/полудуплекса, скорости[5][6]\nподдержка тегированных пакетов VLAN (802.1q) с возможностью фильтрации пакетов заданного VLAN ID\nпараметры WOL (Wake-on-LAN)\nфункция Auto-MDI/MDI-X автоматический выбор режима работы по прямой либо перекрестной обжимке витой пары\nMTU канального уровня>>>",
            "Сетевой адаптер совместно с драйвером выполняют две операции: передачу и приём кадра. Передача кадра из компьютера в кабель состоит из перечисленных ниже этапов (некоторые могут отсутствовать, в зависимости от принятых методов кодирования):\n<<<Приём кадра данных LLC через межуровневый интерфейс вместе с адресной информацией MAC-уровня. Обычно взаимодействие между протоколами внутри компьютера происходит через буферы, расположенные в оперативной памяти. Данные для передачи в сеть помещаются в эти буферы протоколами верхних уровней, которые извлекают их из дисковой памяти либо из файлового кэша с помощью подсистемы ввода-вывода операционной системы.\nОформление кадра данных MAC-уровня, в который инкапсулируется кадр LLC (с отброшенными флагами 01111110). Заполнение адресов назначения и источника, вычисление контрольной суммы.\nФормирование символов кодов при использовании избыточных кодов типа 4В/5В. Скремблирование кодов для получения более равномерного спектра сигналов. Этот этап используется не во всех протоколах — например, технология Ethernet 10 Мбит/с обходится без него.\nВыдача сигналов в кабель в соответствии с принятым линейным кодом — манчестерским, NRZI, MLT-3 и т. п.>>>",
            "Приём кадра из кабеля в компьютер включает следующие действия:\n<<<Приём из кабеля сигналов, кодирующих битовый поток.\nВыделение сигналов на фоне шума. Эту операцию могут выполнять различные специализированные микросхемы или сигнальные процессоры DSP. В результате в приёмнике адаптера образуется некоторая битовая последовательность, с большой степенью вероятности совпадающая с той, которая была послана передатчиком.\nЕсли данные перед отправкой в кабель подвергались скремблированию, то они пропускаются через дескремблер, после чего в адаптере восстанавливаются символы кода, посланные передатчиком.\nПроверка контрольной суммы кадра. Если она неверна, то кадр отбрасывается, а через межуровневый интерфейс наверх, протоколу LLC передается соответствующий код ошибки. Если контрольная сумма верна, то из MAC-кадра извлекается кадр LLC и передается через межуровневый интерфейс наверх, протоколу LLC. Кадр LLC помещается в буфер оперативной памяти.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Сетевая_плата"
    },
    {
        "task": [
            "Для формирования сигнала ОМ используются различные методы:\n<<<Фильтровый (наиболее распространенный): на выходе смесителя ставится высокодобротный полосовой фильтр с шириной полосы пропускания, равной одной боковой полосе. С этой целью применяются, например, лестничные фильтры на кварцевых резонаторах или электромеханические фильтры.\nФазоинверсионный (фазокомпенсационный): одна из боковых полос инвертируется по фазе и складывается сама с собой (компенсируется). Несущая при этом подавляется фильтром или балансным модулятором.>>>",
            "Применение<<<ОМ (SSB) ввиду своей эффективности широко используется в профессиональной и любительской радиосвязи. АМ в этой сфере уже почти не применяется.\nОМ используется в аналоговой аппаратуре уплотнения телефонных каналов, например, в таких распространённых аналоговых системах передачи, как К-60П, К-300 и других. В телефонных сетях общего пользования аналоговые системы были вытеснены цифровыми системами передачи на основе ИКМ, однако в ряде ведомственных и военных систем как минимум на территории бывшего СССР применяется до сих пор.\nИспользование ОМ (SSB) приводит к существенному усложнению и удорожанию приёмной радиоаппаратуры, поэтому в бытовом радиовещании вещание на однополосной модуляции не получило широкого распространения и было окончательно вытеснено цифровым вещанием в стандарте DRM. Одной из причин отказа от SSB в радиовещании также является требование к высокой стабильности и точности опорных генераторов как передатчика, так и приёмника. В случае невыполнения этого требования возникает характерное искажение звукового сигнала, некая «синтетичность» голоса. Это в меру допустимо для речевой информации, но совершенно неприемлемо для передачи музыки.\nКак правило, в ведомственных, военных и морских коротковолновых радиосетях используется верхняя боковая полоса (USB).\nВ любительской радиосвязи принято использовать нижнюю полосу на низкочастотных диапазонах (ниже 10 МГц, что соответствует диапазонам до 40-метрового включительно), и верхнюю — на всех остальных, в том числе на УКВ и СВЧ. Многие приёмо-передающие устройства как профессионального, так и любительского назначения имеют переключатель, позволяющий выбрать любую боковую полосу. Иногда в непрофессиональной аппаратуре ради упрощения схемы подавляют только несущую (такой способ называется DSB — англ. double side band)[3], что позволяет удовлетворительно принимать однополосные сигналы и передавать, хотя и с меньшей эффективностью, сигналы, которые могут быть приняты на приёмник в режиме ОМ. Однако излучать такой вид сигнала разрешено не во всех странах.\nВ ведомственных, морских и военных сетях иногда применяется передача разной информации на верхней и нижней боковых полосах или даже дуплексная работа на одной несущей частоте.\nПромежуточный между АМ и ОМ вид модуляции с частично подавленной нижней боковой полосой широко применялся в аналоговом эфирном ТВ-вещании.\nСуществует системы AM-стереофонии, в которых на разных боковых полосах передаются левый/правый каналы.>>>",
            "В советской аппаратуре:\n<<<A3J-A1 — ОМ с верхней боковой и несущей не более 3 %;\nA3J-B1 — ОМ с нижней боковой и несущей не более 3 %;\nA3A-A1 — ОМ с верхней боковой и 10 % несущей для автоматической подстройки частоты (АПЧ) для борьбы с эффектом Доплера при связи с быстродвижущимися объектами;\nA3A-B1 — ОМ с нижней боковой и 10 % несущей для автоматической подстройки частоты (АПЧ) борьбы с эффектом Доплера при связи с быстродвижущимися объектами;\nA3H-A1 — ОМ с верхней боковой и 70 % несущей для возможности приёма сигнала с ОМ обычными приёмниками с двухполосной модуляцией;\nA3H-B1 — ОМ с нижней боковой и 70 % несущей для возможности приёма сигнала с ОМ обычными приёмниками с двухполосной модуляцией.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Однополосная_модуляция"
    },
    {
        "task": [
            "Процесс разработки состоит из множества подпроцессов, или дисциплин, некоторые из которых перечислены ниже. Процесс — совокупность взаимосвязанных или взаимодействующих видов деятельности, преобразующих входы в выходы[2].\n<<<Анализ требований → Спецификация программного обеспечения\nПроектирование программного обеспечения\nПрограммирование\nТестирование программного обеспечения\nСистемная интеграция (System integration)\nУстановка программного обеспечения\nСопровождение программного обеспечения>>>",
            "Этапы проекта в соответствии с каскадной моделью:\n<<<Формирование требований;\nПроектирование;\nРеализация;\nТестирование;\nВнедрение;\nЭксплуатация и сопровождение.>>>",
            "Преимущества:\n<<<Полная и согласованная документация на каждом этапе;\nЛегко определить сроки и затраты на проект.>>>",
            "На каждой итерации оцениваются:\n<<<риск превышения сроков и стоимости проекта;\nнеобходимость выполнения ещё одной итерации;\nстепень полноты и точности понимания требований к системе;\nцелесообразность прекращения проекта.>>>",
            "Отличительной особенностью спиральной модели является специальное внимание, уделяемое рискам, влияющим на организацию жизненного цикла, и контрольным точкам. Боэм формулирует 10 наиболее распространённых (по приоритетам) рисков:\n<<<Дефицит специалистов.\nНереалистичные сроки и бюджет.\nРеализация несоответствующей функциональности.\nРазработка неправильного пользовательского интерфейса.\nПерфекционизм, ненужная оптимизация и оттачивание деталей.\nНепрекращающийся поток изменений.\nНехватка информации о внешних компонентах, определяющих окружение системы или вовлеченных в интеграцию.\nНедостатки в работах, выполняемых внешними (по отношению к проекту) ресурсами.\nНедостаточная производительность получаемой системы.\nРазрыв в квалификации специалистов разных областей.>>>",
            "В сегодняшней спиральной модели определён следующий общий набор контрольных точек[6]:\n<<<Concept of Operations (COO) — концепция (использования) системы;\nLife Cycle Objectives (LCO) — цели и содержание жизненного цикла;\nLife Cycle Architecture (LCA) — архитектура жизненного цикла; здесь же возможно говорить о готовности концептуальной архитектуры целевой программной системы;\nInitial Operational Capability (IOC) — первая версия создаваемого продукта, пригодная для опытной эксплуатации;\nFinal Operational Capability (FOC) –— готовый продукт, развернутый (установленный и настроенный) для реальной эксплуатации.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Процесс_разработки_программного_обеспечения"
    },
    {
        "task": [
            "Разумеется, реальные сигналы (например, звук на цифровом носителе) не обладают такими свойствами, так как они конечны по времени и обычно имеют разрывы во временно́й характеристике. Соответственно, ширина их спектра бесконечна. В таком случае полное восстановление сигнала невозможно, и из теоремы Котельникова вытекают следствия[3][4]:\n<<<любой аналоговый сигнал может быть восстановлен с какой угодно точностью по своим дискретным отсчётам, взятым с частотой \n\n\n\nf\n>\n2\n\nf\n\nc\n\n\n\n\n{\\displaystyle f>2f_{c}}\n\n, где \n\n\n\n\nf\n\nc\n\n\n\n\n{\\displaystyle f_{c}}\n\n — максимальная частота, которая ограничена спектром реального сигнала;\nесли максимальная частота в сигнале равна или превышает половину частоты дискретизации (наложение спектра), то способа восстановить сигнал из дискретного в аналоговый без искажений не существует[5].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Теорема_Котельникова"
    },
    {
        "task": [
            "Файловые системы[править | править код]<<<FAT: MS-DOS 6.x и Windows 9x содержат утилиту Defrag. Версия для DOS основана на Norton SpeedDisk, версия для Windows — на Diskeeper.\nNTFS: Windows NT 5 и новее содержат дефрагментатор, основанный на Diskeeper. Windows NT 4 и ранее не имели встроенных утилит для дефрагментации[4].\next2 использует дефрагментатор e2defrag.\next3 : e2defrag может работать с ext3, только если её временно преобразовать в ext2. Вместо этого можно использовать дефрагментатор, не зависящий от файловой системы — например, Shake[5].\next4 : e4defrag, работающий за счет создания экстентов и перемещения в них файлов.\nBtrfs: используется встроенный оффлайн-дефрагментатор. Опционально поддерживается автоматическая дефрагментация ФС.\nXFS: онлайн-дефрагментатор xfs_fsr.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Дефрагментация_диска"
    },
    {
        "task": [
            "Двенадцать основных приёмов экстремального программирования (по первому изданию книги Extreme programming explained) могут быть объединены в четыре группы:\n<<<Короткий цикл обратной связи (Fine-scale feedback)\nРазработка через тестирование (Test-driven development)\nИгра в планирование (Planning game)\nЗаказчик всегда рядом (Whole team, Onsite customer)\nПарное программирование (Pair programming)\nНепрерывный, а не пакетный процесс\nНепрерывная интеграция (Continuous integration)\nРефакторинг (Design improvement, Refactoring)\nЧастые небольшие релизы (Small releases)\nПонимание, разделяемое всеми\nПростота проектирования (Simple design)\nМетафора системы\nКоллективное владение кодом (Collective code ownership) или выбранными шаблонами проектирования (Collective patterns ownership)\nСтандарт оформления кода (Coding standard or Coding conventions)\nСоциальная защищённость программиста (Programmer welfare):\n40-часовая рабочая неделя (Sustainable pace, Forty-hour week)>>>",
            "XP предполагает написание автоматических тестов (программный код, написанный специально для того, чтобы тестировать логику другого программного кода). Особое внимание уделяется двум разновидностям тестирования:\n<<<юнит-тестирование модулей;\nфункциональное тестирование.>>>",
            "Кент Бэк и Мартин Фаулер[2] предлагают описывать \"простое проектирование\" как выполнение следующих четырех критериев:\n<<<Система проходит все тесты\nКаждый элемент системы имеет своё явное назначение\nВ системе отсутствует дублирование\nСистема содержит как можно меньше элементов>>>",
            "Роберт Мартин соглашается[3] c этими правилами, однако в своих ранних работах[4] так же предлагает описывать \"простое проектирование\" следующими тремя принципами:\n<<< DRY - не допускайте дублирование кода или ответственности [5]\n KISS - реализуйте функциональность самым простым из доступных способов\n YAGNI - не реализуйте функциональности больше, чем требуется для текущей итерации>>>",
            "Все члены команды в ходе работы должны соблюдать требования общих стандартов оформления кода. Благодаря этому:\n<<<члены команды не тратят время на споры о вещах, которые фактически никак не влияют на скорость работы над проектом;\nобеспечивается эффективное выполнение остальных практик.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Экстремальное_программирование"
    },
    {
        "task": [
            "где:\n<<<LF — это коэффициент обучения α. Чем он выше, тем сильнее агент доверяет новой информации.\nDF — это коэффициент обесценивания (дисконтирования) γ. Чем он меньше, тем меньше агент предпочитает выгоду от своих будущих действий в пользу настоящего.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Q-обучение"
    },
    {
        "task": [
            "Генерация ключей<<<Генерируется случайное простое число \n\n\n\np\n\n\n{\\displaystyle p}\n\n.\nВыбирается целое число \n\n\n\ng\n\n\n{\\displaystyle g}\n\n — первообразный корень \n\n\n\np\n\n\n{\\displaystyle p}\n\n.\nВыбирается случайное целое число \n\n\n\nx\n\n\n{\\displaystyle x}\n\n такое, что \n\n\n\n(\n1\n<\nx\n<\np\n−\n1\n)\n\n\n{\\displaystyle (1<x<p-1)}\n\n.\nВычисляется \n\n\n\ny\n=\n\ng\n\nx\n\n\n\nmod\n\np\n\n\n\n\n{\\displaystyle y=g^{x}{\\bmod {p}}}\n\n.\nОткрытым ключом является \n\n\n\n(\ny\n,\ng\n,\np\n)\n\n\n{\\displaystyle (y,g,p)}\n\n, закрытым ключом — число \n\n\n\nx\n\n\n{\\displaystyle x}\n\n.>>>",
            "Сообщение \n\n\n\nM\n\n\n{\\displaystyle M}\n\n должно быть меньше числа \n\n\n\np\n\n\n{\\displaystyle p}\n\n. Сообщение шифруется следующим образом:\n<<<Выбирается сессионный ключ — случайное целое число, \n\n\n\nk\n\n\n{\\displaystyle k}\n\n такое, что \n\n\n\n1\n<\nk\n<\np\n−\n1\n\n\n{\\displaystyle 1<k<p-1}\n\n.\nВычисляются числа \n\n\n\na\n=\n\ng\n\nk\n\n\n\nmod\n\np\n\n\n\n\n{\\displaystyle a=g^{k}{\\bmod {p}}}\n\n и \n\n\n\nb\n=\n\ny\n\nk\n\n\nM\n\nmod\n\np\n\n\n\n\n{\\displaystyle b=y^{k}M{\\bmod {p}}}\n\n.\nПара чисел \n\n\n\n(\na\n,\nb\n)\n\n\n{\\displaystyle (a,b)}\n\n является шифротекстом.>>>",
            "Пример[править | править код]<<<Шифрование\nДопустим, что нужно зашифровать сообщение \n\n\n\nM\n=\n5\n\n\n{\\displaystyle M=5}\n\n.\nПроизведем генерацию ключей:\nПусть \n\n\n\np\n=\n11\n,\ng\n=\n2\n\n\n{\\displaystyle p=11,g=2}\n\n. Выберем \n\n\n\nx\n=\n8\n\n\n{\\displaystyle x=8}\n\n — случайное целое число \n\n\n\nx\n\n\n{\\displaystyle x}\n\n такое, что \n\n\n\n1\n<\nx\n<\np\n\n\n{\\displaystyle 1<x<p}\n\n.\nВычислим \n\n\n\ny\n=\n\ng\n\nx\n\n\n\nmod\n\np\n\n\n=\n\n2\n\n8\n\n\n\nmod\n\n11\n\n\n=\n3\n\n\n{\\displaystyle y=g^{x}{\\bmod {p}}=2^{8}{\\bmod {11}}=3}\n\n.\nИтак, открытым ключом является тройка \n\n\n\n(\np\n,\ng\n,\ny\n)\n=\n(\n11\n,\n2\n,\n3\n)\n\n\n{\\displaystyle (p,g,y)=(11,2,3)}\n\n,а закрытым ключом — число \n\n\n\nx\n=\n8\n\n\n{\\displaystyle x=8}\n\n.\nВыбираем случайное целое число \n\n\n\nk\n\n\n{\\displaystyle k}\n\n такое, что 1 < k < (p − 1). Пусть \n\n\n\nk\n=\n9\n\n\n{\\displaystyle k=9}\n\n.\nВычисляем число \n\n\n\na\n=\n\ng\n\nk\n\n\n\nmod\n\np\n\n\n=\n\n2\n\n9\n\n\n\nmod\n\n11\n\n\n=\n512\n\nmod\n\n11\n\n\n=\n6\n\n\n{\\displaystyle a=g^{k}{\\bmod {p}}=2^{9}{\\bmod {11}}=512{\\bmod {11}}=6}\n\n.\nВычисляем число \n\n\n\nb\n=\n\ny\n\nk\n\n\nM\n\nmod\n\np\n\n\n=\n\n3\n\n9\n\n\n5\n\nmod\n\n11\n\n\n=\n19683\n⋅\n5\n\nmod\n\n11\n\n\n=\n9\n\n\n{\\displaystyle b=y^{k}M{\\bmod {p}}=3^{9}5{\\bmod {11}}=19683\\cdot 5{\\bmod {11}}=9}\n\n.\nПолученная пара \n\n\n\n(\na\n,\nb\n)\n=\n(\n6\n,\n9\n)\n\n\n{\\displaystyle (a,b)=(6,9)}\n\n является шифротекстом.\nРасшифрование\nНеобходимо получить сообщение \n\n\n\nM\n=\n5\n\n\n{\\displaystyle M=5}\n\n по известному шифротексту \n\n\n\n(\na\n,\nb\n)\n=\n(\n6\n,\n9\n)\n\n\n{\\displaystyle (a,b)=(6,9)}\n\n и закрытому ключу \n\n\n\nx\n=\n8\n\n\n{\\displaystyle x=8}\n\n.\nВычисляем M по формуле: \n\n\n\nM\n=\nb\n(\n\na\n\nx\n\n\n\n)\n\n−\n1\n\n\n\nmod\n\np\n\n\n=\n9\n(\n\n6\n\n8\n\n\n\n)\n\n−\n1\n\n\n\nmod\n\n\n11\n=\n5\n\n\n{\\displaystyle M=b(a^{x})^{-1}{\\bmod {p}}=9(6^{8})^{-1}\\mod {11}=5}\n\n\nПолучили исходное сообщение \n\n\n\nM\n=\n5\n\n\n{\\displaystyle M=5}\n\n.>>>",
            "Для подписи сообщения \n\n\n\nM\n\n\n{\\displaystyle M}\n\n выполняются следующие операции:\n<<<Вычисляется дайджест сообщения \n\n\n\nM\n\n\n{\\displaystyle M}\n\n: \n\n\n\nm\n=\nh\n(\nM\n)\n.\n\n\n{\\displaystyle m=h(M).}\n\n(Хеш функция может быть любая).\nВыбирается случайное число \n\n\n\n1\n<\nk\n<\np\n−\n1\n\n\n{\\displaystyle 1<k<p-1}\n\n взаимно простое с \n\n\n\np\n−\n1\n\n\n{\\displaystyle p-1}\n\n и вычисляется \n\n\n\nr\n=\n\ng\n\nk\n\n\n\n\nmod\n\n\n\n\np\n.\n\n\n{\\displaystyle r=g^{k}\\,{\\bmod {\\,}}p.}\n\n\nВычисляется число \n\n\n\ns\n\n=\n\n(\nm\n−\nx\nr\n)\n\nk\n\n−\n1\n\n\n\n\n(\nmod\n\np\n−\n1\n)\n\n\n\n{\\displaystyle s\\,=\\,(m-xr)k^{-1}{\\pmod {p-1}}}\n\n, где \n\n\n\n\nk\n\n−\n1\n\n\n\n\n{\\displaystyle k^{-1}}\n\n это мультипликативное обратное \n\n\n\nk\n\n\n{\\displaystyle k}\n\n по модулю \n\n\n\np\n−\n1\n\n\n{\\displaystyle p-1}\n\n, которое можно найти, например, с помощью расширенного алгоритма Евклида.\nПодписью сообщения \n\n\n\nM\n\n\n{\\displaystyle M}\n\n является пара \n\n\n\n\n(\n\nr\n,\ns\n\n)\n\n\n\n{\\displaystyle \\left(r,s\\right)}\n\n.>>>",
            "Зная открытый ключ \n\n\n\n\n(\n\np\n,\ng\n,\ny\n\n)\n\n\n\n{\\displaystyle \\left(p,g,y\\right)}\n\n, подпись \n\n\n\n\n(\n\nr\n,\ns\n\n)\n\n\n\n{\\displaystyle \\left(r,s\\right)}\n\n сообщения \n\n\n\nM\n\n\n{\\displaystyle M}\n\n проверяется следующим образом:\n<<<Проверяется выполнимость условий: \n\n\n\n0\n<\nr\n<\np\n\n\n{\\displaystyle 0<r<p}\n\n и \n\n\n\n0\n<\ns\n<\np\n−\n1\n\n\n{\\displaystyle 0<s<p-1}\n\n.\nЕсли хотя бы одно из них не выполняется, то подпись считается неверной.\nВычисляется дайджест \n\n\n\nm\n=\nh\n(\nM\n)\n.\n\n\n{\\displaystyle m=h(M).}\n\n\nПодпись считается верной, если выполняется сравнение:\n\n\n\n\n\ny\n\nr\n\n\n\nr\n\ns\n\n\n≡\n\ng\n\nm\n\n\n\n\n(\nmod\n\np\n)\n\n.\n\n\n{\\displaystyle y^{r}r^{s}\\equiv g^{m}{\\pmod {p}}.}\n\n>>>",
            "Пример[править | править код]<<<Подпись сообщения.\nДопустим, что нужно подписать сообщение \n\n\n\nM\n=\nb\na\na\nq\na\nb\n\n\n{\\displaystyle M=baaqab}\n\n.\nПроизведем генерацию ключей:\nПусть \n\n\n\np\n=\n23\n\n\n{\\displaystyle p=23}\n\n \n\n\n\ng\n=\n5\n\n\n{\\displaystyle g=5}\n\n переменные, которые известны некоторому сообществу.\nСекретный ключ \n\n\n\nx\n=\n7\n\n\n{\\displaystyle x=7}\n\n — случайное целое число \n\n\n\nx\n\n\n{\\displaystyle x}\n\n такое, что \n\n\n\n1\n<\nx\n<\np\n\n\n{\\displaystyle 1<x<p}\n\n.\nВычисляем открытый ключ \n\n\n\ny\n\n\n{\\displaystyle y}\n\n: \n\n\n\ny\n=\n\ng\n\nx\n\n\n\nmod\n\np\n\n\n=\n\n5\n\n7\n\n\n\nmod\n\n2\n\n\n3\n=\n17\n\n\n{\\displaystyle y=g^{x}{\\bmod {p}}=5^{7}{\\bmod {2}}3=17}\n\n.\nИтак, открытым ключом является тройка \n\n\n\n(\np\n,\ng\n,\ny\n)\n=\n(\n23\n,\n5\n,\n17\n)\n\n\n{\\displaystyle (p,g,y)=(23,5,17)}\n\n.\nТеперь вычисляем хеш-функцию: \n\n\n\nh\n(\nM\n)\n=\nh\n(\nb\na\na\nq\na\nb\n)\n=\nm\n=\n3\n\n\n{\\displaystyle h(M)=h(baaqab)=m=3}\n\n.\nВыберем случайное целое число \n\n\n\nk\n\n\n{\\displaystyle k}\n\n такое, что выполняется условие \n\n\n\n1\n<\nk\n<\np\n−\n1\n\n\n{\\displaystyle 1<k<p-1}\n\n. Пусть \n\n\n\nk\n=\n5\n\n\n{\\displaystyle k=5}\n\n.\nВычисляем \n\n\n\nr\n=\n\ng\n\nk\n\n\n\nmod\n\np\n\n\n=\n\n5\n\n5\n\n\n\nmod\n\n2\n\n\n3\n=\n20\n\n\n{\\displaystyle r=g^{k}{\\bmod {p}}=5^{5}{\\bmod {2}}3=20}\n\n.\nНаходим \n\n\n\n\nk\n\n−\n1\n\n\n\n\n{\\displaystyle k^{-1}}\n\n. Такое число существует, так как НОД\n\n\n\n(\nk\n,\np\n−\n1\n)\n=\n1\n\n\n{\\displaystyle (k,p-1)=1}\n\n. Его можно найти с помощью расширенного алгоритма Евклида. Получим \n\n\n\n\nk\n\n−\n1\n\n\n=\n\n5\n\n−\n1\n\n\n\n\n(\nmod\n\n22\n)\n\n=\n9\n\n\n{\\displaystyle k^{-1}=5^{-1}{\\pmod {22}}=9}\n\n\nНаходим число \n\n\n\ns\n\n≡\n\n(\nm\n−\nx\nr\n)\n\nk\n\n−\n1\n\n\n\n\n(\nmod\n\np\n−\n1\n)\n\n\n\n{\\displaystyle s\\,\\equiv \\,(m-xr)k^{-1}{\\pmod {p-1}}}\n\n. Получим \n\n\n\ns\n=\n21\n\n\n{\\displaystyle s=21}\n\n, так как \n\n\n\ns\n=\n\n(\n3\n−\n7\n⋅\n20\n)\n\n5\n\n−\n1\n\n\n\n\n(\nmod\n\n22\n)\n\n=\n21\n\n\n{\\displaystyle s=\\,(3-7\\cdot 20)5^{-1}{\\pmod {22}}=21}\n\n\nИтак, мы подписали сообщение: \n\n\n\n<\nb\na\na\nq\na\nb\n,\n20\n,\n21\n>\n\n\n{\\displaystyle <baaqab,20,21>}\n\n.>>>",
            "Подпись сообщения.\nДопустим, что нужно подписать сообщение \n\n\n\nM\n=\nb\na\na\nq\na\nb\n\n\n{\\displaystyle M=baaqab}\n\n.\nПроизведем генерацию ключей:\nПусть \n\n\n\np\n=\n23\n\n\n{\\displaystyle p=23}\n\n \n\n\n\ng\n=\n5\n\n\n{\\displaystyle g=5}\n\n переменные, которые известны некоторому сообществу.\nСекретный ключ \n\n\n\nx\n=\n7\n\n\n{\\displaystyle x=7}\n\n — случайное целое число \n\n\n\nx\n\n\n{\\displaystyle x}\n\n такое, что \n\n\n\n1\n<\nx\n<\np\n\n\n{\\displaystyle 1<x<p}\n\n.\nВычисляем открытый ключ \n\n\n\ny\n\n\n{\\displaystyle y}\n\n: \n\n\n\ny\n=\n\ng\n\nx\n\n\n\nmod\n\np\n\n\n=\n\n5\n\n7\n\n\n\nmod\n\n2\n\n\n3\n=\n17\n\n\n{\\displaystyle y=g^{x}{\\bmod {p}}=5^{7}{\\bmod {2}}3=17}\n\n.\nИтак, открытым ключом является тройка \n\n\n\n(\np\n,\ng\n,\ny\n)\n=\n(\n23\n,\n5\n,\n17\n)\n\n\n{\\displaystyle (p,g,y)=(23,5,17)}\n\n.\nТеперь вычисляем хеш-функцию: \n\n\n\nh\n(\nM\n)\n=\nh\n(\nb\na\na\nq\na\nb\n)\n=\nm\n=\n3\n\n\n{\\displaystyle h(M)=h(baaqab)=m=3}\n\n.\nВыберем случайное целое число \n\n\n\nk\n\n\n{\\displaystyle k}\n\n такое, что выполняется условие \n\n\n\n1\n<\nk\n<\np\n−\n1\n\n\n{\\displaystyle 1<k<p-1}\n\n. Пусть \n\n\n\nk\n=\n5\n\n\n{\\displaystyle k=5}\n\n.\nВычисляем \n\n\n\nr\n=\n\ng\n\nk\n\n\n\nmod\n\np\n\n\n=\n\n5\n\n5\n\n\n\nmod\n\n2\n\n\n3\n=\n20\n\n\n{\\displaystyle r=g^{k}{\\bmod {p}}=5^{5}{\\bmod {2}}3=20}\n\n.\nНаходим \n\n\n\n\nk\n\n−\n1\n\n\n\n\n{\\displaystyle k^{-1}}\n\n. Такое число существует, так как НОД\n\n\n\n(\nk\n,\np\n−\n1\n)\n=\n1\n\n\n{\\displaystyle (k,p-1)=1}\n\n. Его можно найти с помощью расширенного алгоритма Евклида. Получим \n\n\n\n\nk\n\n−\n1\n\n\n=\n\n5\n\n−\n1\n\n\n\n\n(\nmod\n\n22\n)\n\n=\n9\n\n\n{\\displaystyle k^{-1}=5^{-1}{\\pmod {22}}=9}\n\n\nНаходим число \n\n\n\ns\n\n≡\n\n(\nm\n−\nx\nr\n)\n\nk\n\n−\n1\n\n\n\n\n(\nmod\n\np\n−\n1\n)\n\n\n\n{\\displaystyle s\\,\\equiv \\,(m-xr)k^{-1}{\\pmod {p-1}}}\n\n. Получим \n\n\n\ns\n=\n21\n\n\n{\\displaystyle s=21}\n\n, так как \n\n\n\ns\n=\n\n(\n3\n−\n7\n⋅\n20\n)\n\n5\n\n−\n1\n\n\n\n\n(\nmod\n\n22\n)\n\n=\n21\n\n\n{\\displaystyle s=\\,(3-7\\cdot 20)5^{-1}{\\pmod {22}}=21}\n\n\nИтак, мы подписали сообщение: \n\n\n\n<\nb\na\na\nq\na\nb\n,\n20\n,\n21\n>\n\n\n{\\displaystyle <baaqab,20,21>}\n\n.<<<Проверка подлинности полученного сообщения.\nВычисляем хеш-функцию: \n\n\n\nh\n(\nM\n)\n=\nh\n(\nb\na\na\nq\na\nb\n)\n=\nm\n=\n3\n\n\n{\\displaystyle h(M)=h(baaqab)=m=3}\n\n.\nПроверяем сравнение \n\n\n\n\ny\n\nr\n\n\n⋅\n\nr\n\ns\n\n\n\n\n(\nmod\n\np\n)\n\n≡\n\ng\n\nm\n\n\n\n\n(\nmod\n\np\n)\n\n\n\n{\\displaystyle y^{r}\\cdot r^{s}{\\pmod {p}}\\equiv g^{m}{\\pmod {p}}}\n\n.\nВычислим левую часть по модулю 23: \n\n\n\n\n17\n\n20\n\n\n⋅\n\n20\n\n21\n\n\n\nmod\n\n2\n\n\n3\n=\n16\n⋅\n15\n\nmod\n\n2\n\n\n3\n=\n10\n\n\n{\\displaystyle 17^{20}\\cdot 20^{21}{\\bmod {2}}3=16\\cdot 15{\\bmod {2}}3=10}\n\n.\nВычислим правую часть по модулю 23: \n\n\n\n\n5\n\n3\n\n\n\nmod\n\n2\n\n\n3\n=\n10\n\n\n{\\displaystyle 5^{3}{\\bmod {2}}3=10}\n\n.\nТак как правая и левая части равны, то это означает что подпись верна.>>>",
            "Главным преимуществом схемы цифровой подписи Эль-Гамаля является возможность вырабатывать цифровые подписи для большого числа сообщений с использованием только одного секретного ключа. Чтобы злоумышленнику подделать подпись, ему нужно решить сложные математические задачи с нахождением логарифма в поле \n\n\n\n\n\nZ\n\n\np\n\n\n\n\n{\\displaystyle \\mathbb {Z} _{p}}\n\n. Следует сделать несколько комментариев:<<<Случайное число \n\n\n\nk\n\n\n{\\displaystyle k}\n\n должно сразу после вычисления подписи уничтожаться, так как если злоумышленник знает случайное число \n\n\n\nk\n\n\n{\\displaystyle k}\n\n и саму подпись, то он легко может найти секретный ключ по формуле: \n\n\n\nx\n=\n(\nm\n−\nk\ns\n)\n\nr\n\n−\n1\n\n\n\nmod\n\n(\n\n\np\n−\n1\n)\n\n\n{\\displaystyle x=(m-ks)r^{-1}{\\bmod {(}}p-1)}\n\n и полностью подделать подпись.>>>",
            "Число \n\n\n\nk\n\n\n{\\displaystyle k}\n\n должно быть случайным и не должно дублироваться для различных подписей, полученных при одинаковом значении секретного ключа.\n<<<Использование свертки \n\n\n\nm\n=\nh\n(\nM\n)\n\n\n{\\displaystyle m=h(M)}\n\n объясняется тем, что это защищает подпись от перебора сообщений по известным злоумышленнику значениям подписи. Пример: если выбрать случайные числа \n\n\n\ni\n,\nj\n\n\n{\\displaystyle i,j}\n\n,удовлетворяющие условиям \n\n\n\n0\n<\ni\n<\n\np\n−\n1\n\n,\n0\n<\nj\n<\n\np\n−\n1\n\n\n\n{\\displaystyle 0<i<{p-1},0<j<{p-1}}\n\n, НОД(j, p-1)=1 и предположить что\n\n\n\n\nr\n=\n\ng\n\ni\n\n\n⋅\n\ny\n\n−\nj\n\n\n\nmod\n\np\n\n\n\n\n{\\displaystyle r=g^{i}\\cdot y^{-j}{\\bmod {p}}}\n\n\n\n\n\n\ns\n=\nr\n⋅\n\nj\n\n−\n1\n\n\n\nmod\n\n(\n\n\np\n−\n1\n)\n\n\n{\\displaystyle s=r\\cdot j^{-1}{\\bmod {(}}p-1)}\n\n\n\n\n\n\nm\n=\nr\n⋅\ni\n⋅\n\nj\n\n−\n1\n\n\n\nmod\n\n(\n\n\np\n−\n1\n)\n\n\n{\\displaystyle m=r\\cdot i\\cdot j^{-1}{\\bmod {(}}p-1)}\n\n>>>",
            "то легко удостовериться в том, что пара \n\n\n\n(\nr\n,\ns\n)\n\n\n{\\displaystyle (r,s)}\n\n является верной цифровой подписью для сообщения \n\n\n\nx\n=\nM\n\n\n{\\displaystyle x=M}\n\n.\n<<<Цифровая подпись Эль-Гамаля стала примером построения других подписей, схожих по своим свойствам. В их основе лежит выполнение сравнения: \n\n\n\n\ny\n\nA\n\n\n⋅\n\nr\n\nB\n\n\n=\n\ng\n\nC\n\n\n(\nm\no\nd\np\n)\n\n\n{\\displaystyle y^{A}\\cdot r^{B}=g^{C}(modp)}\n\n, в котором тройка \n\n\n\n(\nA\n,\nB\n,\nC\n)\n\n\n{\\displaystyle (A,B,C)}\n\n принимает значения одной из перестановок ±r, ±s и ±m при каком-то выборе знаков. Например, исходная схема Эль-Гамаля получается при \n\n\n\nA\n=\nr\n\n\n{\\displaystyle A=r}\n\n, \n\n\n\nB\n=\ns\n\n\n{\\displaystyle B=s}\n\n, \n\n\n\nC\n=\nm\n\n\n{\\displaystyle C=m}\n\n.На таком принципе построения подписи сделаны стандарты цифровой подписи США и России. В американском стандарте DSS (Digital Signature Standard), используется значения \n\n\n\nA\n=\nr\n\n\n{\\displaystyle A=r}\n\n, \n\n\n\nB\n=\n−\ns\n\n\n{\\displaystyle B=-s}\n\n, \n\n\n\nC\n=\nm\n\n\n{\\displaystyle C=m}\n\n, а в Российском стандарте: \n\n\n\nA\n=\n−\nx\n\n\n{\\displaystyle A=-x}\n\n, \n\n\n\nB\n=\n−\nm\n\n\n{\\displaystyle B=-m}\n\n, \n\n\n\nC\n=\ns\n\n\n{\\displaystyle C=s}\n\n.\nЕщё одним из преимуществ является возможность уменьшения длины подписи с помощью замены пары чисел \n\n\n\n(\ns\n,\nm\n)\n\n\n{\\displaystyle (s,m)}\n\n на пару чисел \n\n\n\n(\ns\n\nmod\n\nq\n\n\n,\nm\n\nmod\n\nq\n\n\n\n\n{\\displaystyle (s{\\bmod {q}},m{\\bmod {q}}}\n\n), где \n\n\n\nq\n\n\n{\\displaystyle q}\n\n является каким-то простым делителем числа \n\n\n\n(\np\n−\n1\n)\n\n\n{\\displaystyle (p-1)}\n\n. При этом сравнение для проверки подписи по модулю \n\n\n\np\n\n\n{\\displaystyle p}\n\n нужно заменить на новое сравнение по модулю \n\n\n\nq\n\n\n{\\displaystyle q}\n\n: \n\n\n\n(\n \n\ny\n\nA\n\n\n⋅\n\nr\n\nB\n\n\n)\n\nmod\n\np\n\n\n=\n\ng\n\nC\n\n\n\n\n(\nmod\n\nq\n)\n\n\n\n{\\displaystyle (~y^{A}\\cdot r^{B}){\\bmod {p}}=g^{C}{\\pmod {q}}}\n\n. Так сделано в американском стандарте DSS (Digital Signature Standard).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Схема_Эль-Гамаля"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Бесконтактная_карта"
    },
    {
        "task": [
            "Специальный класс функций активации, известный как радиальные базисные функции (РБФ) используются в РБФ сетях, которые крайне эффективны в качестве универсальных аппроксиматоров функций. Эти функции активации могут принимать множество форм, но обычно берётся одна из следующих трёх функций:\n<<<Гауссова: \n\n\n\n\nϕ\n(\n\nv\n\ni\n\n\n)\n=\nexp\n⁡\n\n(\n\n−\n\n\n\n‖\n\nv\n\ni\n\n\n−\n\nc\n\ni\n\n\n\n‖\n\n2\n\n\n\n\n2\n\nσ\n\n2\n\n\n\n\n\n\n)\n\n\n\n{\\displaystyle \\,\\phi (v_{i})=\\exp \\left(-{\\frac {\\|v_{i}-c_{i}\\|^{2}}{2\\sigma ^{2}}}\\right)}\n\n\nМультиквадратичная (англ. Multiquadratics): \n\n\n\n\nϕ\n(\n\nv\n\ni\n\n\n)\n=\n\n\n‖\n\nv\n\ni\n\n\n−\n\nc\n\ni\n\n\n\n‖\n\n2\n\n\n+\n\na\n\n2\n\n\n\n\n\n\n{\\displaystyle \\,\\phi (v_{i})={\\sqrt {\\|v_{i}-c_{i}\\|^{2}+a^{2}}}}\n\n\nОбратная мультиквадратичная (англ. Inverse Multiquadratics): \n\n\n\n\nϕ\n(\n\nv\n\ni\n\n\n)\n=\n(\n‖\n\nv\n\ni\n\n\n−\n\nc\n\ni\n\n\n\n‖\n\n2\n\n\n+\n\na\n\n2\n\n\n\n)\n\n−\n1\n\n/\n\n2\n\n\n\n\n{\\displaystyle \\,\\phi (v_{i})=(\\|v_{i}-c_{i}\\|^{2}+a^{2})^{-1/2}}\n\n>>>",
            "Функции активации бывают следующих типов:\n<<<Тождественная функция\nДвоичная ступенчатая функция\nБиполярная[3] ступенчатая функция\nCигмоидная функция\nДвоичная cигмоидальная функция\nБиполярная сигмоидная функция\nФункция подъёма[4]>>>",
            "Некоторые желательные свойства функций активации:\n<<<Нелинейность – Если функция активации нелинейна, можно доказать, что двухуровневая нейронная сеть будет универсальным аппроксиматором функции [5]. Тождественная функция активации не удовлетворяет этому свойству. Если несколько уровней используют тождественную функцию активации, вся сеть эквивалентна одноуровневой модели.\nНепрерывная дифференцируемость – Это свойство желательно (RELU не является непрерывно дифференцируемой и имеет некоторые проблемы с оптимизацией, основанной на градиентном спуске, но остаётся допустимой возможностью) для обеспечения методов оптимизации на основе градиентного спуска. Двоичная ступенчатая функция активации не дифференцируема в точке 0 и её производная равна 0 во всех других точках, так что методы градиентного спуска не дают никакого успеха для неё[6].\nОбласть значений – Если множество значений функции активации ограничено, методы обучения на основе градиента более стабильны, поскольку представления эталонов существенно влияют лишь на ограниченный набор весов связей. Если область значений бесконечна, обучение, как правило, более эффективно, поскольку представления эталонов существенно влияют на большинство весов. В последнем случае обычно необходим меньший темп обучения.\nМонотонность – Если функция активации монотонна, поверхность ошибок, ассоциированная с одноуровневой моделью, гарантированно будет выпуклой [7].\nГладкие функции с монотонной производной – Показано, что в некоторых случаях они обеспечивают более высокую степень общности.\nАппроксимирует тождественную функцию около начала координат – Если функции активации имеют это свойство, нейронная сеть будет обучаться эффективно, если её веса инициализированы малыми случайными значениями. Если функция активации не аппроксимирует тождество около начала координат, нужно быть осторожным при инициализации весов[8]. В таблице ниже функции активации, у которых \n\n\n\nf\n(\n0\n)\n=\n0\n\n\n{\\displaystyle f(0)=0}\n\n, \n\n\n\n\nf\n′\n\n(\n0\n)\n=\n1\n\n\n{\\displaystyle f'(0)=1}\n\n и \n\n\n\n\nf\n′\n\n\n\n{\\displaystyle f'}\n\n непрерывна в точке 0, помечены как имеющие это свойство.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Функция_активации"
    },
    {
        "task": [
            "Для всех семантических сетей справедливо разделение по арности и количеству типов отношений.\n<<<По количеству типов отношений, сети могут быть однородными и неоднородными.\nОднородные сети обладают только одним типом отношений (стрелок), например, таковой является вышеупомянутая классификация биологических видов (с единственным отношением AKO).\nВ неоднородных сетях количество типов отношений больше одного. Классические иллюстрации данной модели представления знаний представляют именно такие сети. Неоднородные сети представляют больший интерес для практических целей, но и большую сложность для исследования. Неоднородные сети можно представлять как переплетение древовидных многослойных структур. Примером такой сети может быть Семантическая сеть Википедии.\nПо арности:\nтипичными являются сети с бинарными отношениями (связывающими ровно два понятия). Бинарные отношения очень просты и удобно изображаются на графе в виде стрелки между двух концептов. Кроме того, они играют исключительную роль в математике.\nНа практике, однако, могут понадобиться отношения, связывающие более двух объектов — N-арные. При этом возникает сложность — как изобразить подобную связь на графе, чтобы не запутаться. Концептуальные графы (см. ниже) снимают это затруднение, представляя каждое отношение в виде отдельного узла.\nПо размеру:\nДля решения конкретных задач, например, тех, которые решают системы искусственного интеллекта.\nСемантическая сеть отраслевого масштаба должна служить базой для создания конкретных систем, не претендуя на всеобщее значение.\nГлобальная семантическая сеть. Теоретически такая сеть должна существовать, поскольку всё в мире взаимосвязано. Возможно, когда-нибудь такой сетью станет Всемирная паутина.>>>",
            "Наиболее часто возникает потребность в описании отношений между элементами, множествами и частями объектов. Отношение между объектом и множеством, обозначающим, что объект принадлежит этому множеству, называется отношением классификации (ISA). Говорят, что множество (класс) классифицирует свои экземпляры.[3] (пример: «Шарик является собакой» = Шарик является объектом типа собака). Иногда это отношение именуют также MemberOf, InstanceOf или подобным образом. Связь ISA предполагает, что свойства объекта наследуются от множества. Обратное к ISA отношение используется для обозначения примеров, поэтому так и называется — «Example», или по-русски «Пример». Иерархические отношения образуют древовидную структуру.\n<<<Отношение между надмножеством и подмножеством (называется AKO — «A Kind Of», «разновидность»). (Пример: «собака является животным» = тип с именем собака является подтипом типа животные). Элемент подмножества называется гипонимом (собака), а надмножества — гиперонимом (животное), а само отношение называется отношением гипонимии. Альтернативные названия — «SubsetOf» и «Подмножество». Это отношение определяет, что каждый элемент первого множества входит и во второе (выполняется ISA для каждого элемента), а также логическую связь между самими подмножествами: что первое не больше второго и свойства первого множества наследуются от второго. Отношение АКО (Род-Вид) часто используется для навигации в информационном пространстве.>>>",
            "Отношение между надмножеством и подмножеством (называется AKO — «A Kind Of», «разновидность»). (Пример: «собака является животным» = тип с именем собака является подтипом типа животные). Элемент подмножества называется гипонимом (собака), а надмножества — гиперонимом (животное), а само отношение называется отношением гипонимии. Альтернативные названия — «SubsetOf» и «Подмножество». Это отношение определяет, что каждый элемент первого множества входит и во второе (выполняется ISA для каждого элемента), а также логическую связь между самими подмножествами: что первое не больше второго и свойства первого множества наследуются от второго. Отношение АКО (Род-Вид) часто используется для навигации в информационном пространстве.<<<Объект, как правило, состоит из нескольких частей, или элементов. Например, компьютер состоит из системного блока, монитора, клавиатуры, мыши и т. д. Важным отношением является HasPart, описывающее связь частей и целого — отношение меронимии. В этом случае свойства первого множества не наследуются вторым. Мероним и холоним — противоположные понятия:\nМероним — объект, являющийся частью для другого. (Двигатель — мероним автомобиля.)\nХолоним — объект, который включает в себя другое. (Например, у дома есть крыша. Дом — холоним крыши. Компьютер — холоним монитора.)>>>",
            "В семантических сетях часто используются также следующие отношения[источник не указан 1468 дней]:\n<<<функциональные связи (определяемые обычно глаголами «производит», «влияет»…);\nколичественные (больше, меньше, равно…);\nпространственные (далеко от, близко от, за, под, над…);\nвременные (раньше, позже, в течение…);\nатрибутивные (иметь свойство, иметь значение);\nлогические (И, ИЛИ, НЕ);\nлингвистические.>>>",
            "Рассмотрим пример — четыре предложения:\n<<<У Павла есть отец по имени Алексей.\nДля Павла найдётся отец из множества мужчин.\nНайдется человек, для которого Алексей — отец.\nУ каждого человека есть отец из множества мужчин.>>>",
            "Семантизация — процесс изменения текстов, в которых выделяются семантические отношения без изменения их содержания. В Википедии существуют проекты по семантизации статей и Дерева категорий.\n<<<Семантизация статей производится, в основном, путём использования шаблонов, при этом некоторые категории создаются автоматически.\nСемантизация Дерева категорий заключается в соблюдении транзитивности, создании метакатегорий и организации структуры подкатегорий, используя значимые критерии.>>>",
            "Концепция организации гипертекста напоминает однородную бинарную семантическую сеть, однако здесь есть существенное отличие:\n<<<Связь, осуществляемая гиперссылкой, не имеет семантики, то есть не описывает смысла этой связи. Назначение семантической сети состоит в том, чтобы описать взаимосвязи объектов, а не дополнительную информацию по предметной области. Человек может разобраться, зачем нужна та или иная гиперссылка, но компьютеру эта связь не понятна.\nСтраницы, связываемые гиперссылками, являются документами, описывающими, как правило, проблемную ситуацию в целом. В семантической сети вершины (то, что связывают отношения) представляют собой понятия или объекты реального мира.>>>",
            "Программное обеспечение<<<WordNet\nSNePS>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Семантическая_сеть"
    },
    {
        "task": [
            "Метод АНК — разделение смешанных сигналов, базируется на двух допущениях и трёх эффектах источников смешанного сигнала, что даёт очень хорошие результаты. Двумя допущениями являются:\n<<<Источники сигналов независимы друг от друга.\nЗначения каждого источника сигнала имеют негауссово распределение.>>>",
            "Тремя эффектами источника смешанного сигнала являются:\n<<<Независимость: как в и допущении 1, источники сигналов независимы, однако их смесь не является независимой от источников, потому что смесь сигналов имеет одни и те же источники.\nНормальность: согласно центральной предельной теореме, распределение суммы независимых случайных переменных с конечной дисперсией стремится к гауссовому распределению. Попросту говоря, сумма двух независимых случайных переменных обычно имеет распределение более близкое к гауссовому, чем любое из двух исходных случайных переменных. Здесь мы рассматриваем каждый сигнал как случайную переменную.\nСложность: временна́я сложность любой смеси сигналов больше, чем сложность одного сигнала, более простого по его составляющим.>>>",
            "АНК находит независимые компоненты (которые называются факторами, скрытыми переменными или источниками) путём максимизации статистической независимости оцениваемых компонент. Можно выбрать один из многих путей для определения заменителя независимости, и этот выбор определит форму алгоритма АНК. Два наиболее широких определения независимости АНК:\n<<<Минимизация взаимной информации\nМаксимизация негауссовости>>>",
            "Типичным алгоритмам АНК свойственно использование следующих методов:\n<<<центрирование (вычитание среднего и создание нулевого среднего для сигнала);\nизбавление от корреляции[англ.] (обычно с помощью спектрального разложения матрицы);\nснижение размерности в качестве препроцессорных шагов для снижения сложности проблемы и создания действительного итеративного алгоритма.>>>",
            "Независимые компоненты различимы с точностью до перестановки и масштабирования источников. Эта различимость требует, чтобы:\n<<<Максимум один из источников \n\n\n\n\ns\n\nk\n\n\n\n\n{\\displaystyle s_{k}}\n\n был гауссовым,\nЧисло наблюдаемых смесей \n\n\n\nm\n\n\n{\\displaystyle m}\n\n должно быть не меньше числа компонент \n\n\n\nn\n\n\n{\\displaystyle n}\n\n: \n\n\n\nm\n⩾\nn\n\n\n{\\displaystyle m\\geqslant n}\n\n. Это эквивалентно высказыванию, что матрица смеси \n\n\n\n\nA\n\n\n\n{\\displaystyle {\\boldsymbol {A}}}\n\n должна иметь полный ранг, чтобы существовала обратная ей смесь.>>>",
            "Используя коэффициент эксцесса как меру ненормальности мы можем теперь проверить насколько коэффициент эксцесса сигнала \n\n\n\n\ny\n\n=\n\n\nw\n\n\nT\n\n\n\nx\n\n\n\n{\\displaystyle \\mathbf {y} =\\mathbf {w} ^{T}\\mathbf {x} }\n\n, извлечённого из набора M смесей \n\n\n\n\nx\n\n=\n(\n\nx\n\n1\n\n\n,\n\nx\n\n2\n\n\n,\n…\n,\n\nx\n\nM\n\n\n\n)\n\nT\n\n\n\n\n{\\displaystyle \\mathbf {x} =(x_{1},x_{2},\\ldots ,x_{M})^{T}}\n\n, изменяется по мере того, как вектор весов \n\n\n\n\nw\n\n\n\n{\\displaystyle \\mathbf {w} }\n\n вращается вокруг начала координат. Если задано, что каждый источник сигнала \n\n\n\n\ns\n\n\n\n{\\displaystyle \\mathbf {s} }\n\n является супергауссовым, мы можем ожидать\n<<<коэффициент эксцесса извлечённого сигнала \n\n\n\n\ny\n\n\n\n{\\displaystyle \\mathbf {y} }\n\n максимален в точности тогда, когда \n\n\n\n\ny\n\n=\n\ns\n\n\n\n{\\displaystyle \\mathbf {y} =\\mathbf {s} }\n\n.\nкоэффициент эксцесса извлечённого сигнала \n\n\n\n\ny\n\n\n\n{\\displaystyle \\mathbf {y} }\n\n максимален, когда \n\n\n\n\nw\n\n\n\n{\\displaystyle \\mathbf {w} }\n\n ортогонален проекциям осей \n\n\n\n\nS\n\n1\n\n\n\n\n{\\displaystyle S_{1}}\n\n или \n\n\n\n\nS\n\n2\n\n\n\n\n{\\displaystyle S_{2}}\n\n, поскольку мы знаем, что вектор оптимального веса должен быть ортогонален преобразованным осям \n\n\n\n\nS\n\n1\n\n\n\n\n{\\displaystyle S_{1}}\n\n и \n\n\n\n\nS\n\n2\n\n\n\n\n{\\displaystyle S_{2}}\n\n.>>>",
            "Анализ независимых компонент в EEGLAB[англ.]<<<оптическое изображение нейронов[16]\nсортировка импульсов нейронов sorting[17]\nраспознавание лица[18]\nмоделирование рецепторного поля главных зрительных нейронов[19]\nпредсказание цен на рынке бумаг[20]\nмобильная телефонная связь[21]\nопределение зрелости помидор на основе цвета[22]\nудаление объектов, таких как мигание глаза, из данных электроэнцефалограммы[23]\nанализ изменений в экспрессии гена со временем в экспериментах по секвенированию РНК в отдельной клетке cell[24]\nизучение функциональной МРТ мозга в состоянии покоя[англ.][25]>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Анализ_независимых_компонент"
    },
    {
        "task": [
            "Решений проблемы выхода из вложенных циклов несколько.\n<<<Простейший — использовать оператор безусловного перехода goto для выхода в точку программы, непосредственно следующую за вложенным циклом. Этот вариант критикуется сторонниками структурного программирования, как и все конструкции, требующие использования goto. Некоторые языки программирования, например, Модула-2, просто не имеют оператора безусловного перехода, и в них подобная конструкция невозможна.\nАльтернатива — использовать штатные средства завершения циклов, в случае необходимости устанавливая специальные флаги, требующие немедленного завершения обработки. Недостаток — усложнение кода, снижение производительности.\nРазмещение вложенного цикла в процедуре. Идея состоит в том, чтобы всё действие, которое может потребоваться прервать досрочно, оформить в виде отдельной процедуры, и для досрочного завершения использовать оператор выхода из процедуры (если такой есть в языке программирования). В языке Си, например, можно построить функцию с вложенным циклом, а выход из неё организовать с помощью оператора return. Недостаток — выделение фрагмента кода в процедуру не всегда логически обосновано, и не все языки имеют штатные средства досрочного завершения процедур.\nВоспользоваться механизмом генерации и обработки исключений (исключительных ситуаций), который имеется сейчас в большинстве языков высокого уровня. В этом случае в нештатной ситуации код во вложенном цикле возбуждает исключение, а блок обработки исключений, в который помещён весь вложенный цикл, перехватывает и обрабатывает его. Недостаток — реализация механизма обработки исключений в большинстве случаев такова, что скорость работы программы уменьшается. Правда, в современных условиях это не особенно важно: практически потеря производительности столь мала, что имеет значение лишь для очень немногих приложений.\nНаконец, существуют специальные языковые средства для выхода из вложенных циклов. Так, в языке Ада программист может пометить цикл (верхний уровень вложенного цикла) меткой, и в команде досрочного завершения цикла указать эту метку. Выход произойдёт не из текущего цикла, а из всех вложенных циклов до помеченного, включительно[3]. Язык PHP предоставляет возможность указать число прерываемых циклов после команды break — так break 2 прервёт сам цикл и вышестоящий над ним, а break 1 эквивалентно простой записи команды break[4].>>>",
            "Цикл-'паук' выполняется так:\n<<<Вычисляются охраняющие условия. Если существует истинное охраняющее условие, выполняется соответствующая охраняемая команда.\nВычисляются условия выхода. Если существует истинное условие выхода, выполняется соответствующая команда завершения, после чего выполнение цикла заканчивается. Если все условия выхода ложны, начинается следующая итерация, но только в том случае, если в текущей итерации было истинным хотя бы одно из охраняющих условий.\nЕсли в данной итерации оказались ложными и все охраняющие условия, и все условия выхода, выполняется команда альтернативного завершения E, после чего выполнение цикла прерывается.>>>",
            "эквивалентными преобразованиями исходного кода\n<<<Разбиение цикла на блоки\nРазмотка цикла\nРазмыкание цикла>>>",
            "компилятором\n<<<Расщепление цикла\nРасщепление тела цикла\nСлияние циклов>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Цикл_(программирование)"
    },
    {
        "task": [
            "Видеопамять располагается на видеоадаптере или выделяется как часть от оперативной памяти[41]. Как правило, чипы оперативной памяти современной видеокарты припаяны прямо к текстолиту печатной платы, в отличие от съёмных модулей системной памяти, которые вставляются в стандартизированные разъёмы ранних видеоадаптеров.\n<<<\n\n\nОтдельная видеокарта с собственной памятью. Данные копируются через шину PCI Express\n\n\n\nОтдельная видеокарта с общей памятью en:Heterogeneous System Architecture. Через PCI Express передаются указатели делая возможным zero-copy.\n\n\n\nИнтегрированной видеокарте выделяется системная память\n\n\n\nИнтегрированная видеокарта с общей памятью (HSA)\n\n>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Видеопамять"
    },
    {
        "task": [
            "Существует два основных направления применения беспроводных компьютерных сетей:\n<<<Работа в замкнутом объеме (офис, выставочный зал и т. п.);\nСоединение удаленных локальных сетей (или удаленных сегментов локальной сети).>>>",
            "Для проникновения в беспроводную сеть злоумышленник должен:\n<<<Иметь оборудование для беспроводных сетей, совместимое с используемым в сети (применительно к стандартному оборудованию — соответствующей технологии беспроводных сетей — DSSS или FHSS);\nПри использовании в оборудовании FHSS нестандартных последовательностей скачков частоты узнать их;\nЗнать идентификатор сети, закрывающий инфраструктуру и единый для всей логической сети (SSID);\nЗнать (в случае с DSSS), на какой из 14 возможных частот работает сеть, или включить режим автосканирования;\nБыть занесенным в таблицу разрешенных MAC-адресов в точке доступа при инфраструктурной топологии сети;\nЗнать ключ WPA или WEP в случае, если в беспроводной сети ведется шифрованная передача.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Беспроводная_вычислительная_сеть"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Многопеременная_логистическая_функция"
    },
    {
        "task": [
            "Кроме границ эффективности, теория вычислительного обучения изучает сложность по времени и реализуемость алгоритма. В теории вычислительного обучения вычисление считается реализуемым, если оно может быть осуществлено за полиномиальное время. Есть два вида временно́й сложности результатов:\n<<<Положительные результаты показывают, что некоторый класс функций обучаем за полиномиальное время.\nОтрицательные результаты показывают, что некоторый класс функций не может быть обучен за полиномиальное время.>>>",
            "Отрицательные результаты часто опираются на некоторые положения, в которые верят, но они остаются недоказанными, такие как:\n<<<Вычислительная сложность — P ≠ NP;\nКриптография — Односторонние функции существуют.>>>",
            "Есть несколько различных подходов к теории вычислительного обучения. Эти различия основываются на сделанных предположениях относительно принципов вывода, используемых для обобщения ограниченных данных. Эти принципы включают определение вероятности (см. Частотная вероятность, Байесовская вероятность) и различные предположения о генерации образцов. Различные подходы включают:\n<<<Точное обучение, предложенное Даной Англуин[англ.];\nВероятностно приблизительно корректное обучение (ВПК обучение), предложенное Лесли Вэлиантом;\nТеория Вапника — Червоненкиса, предложенная Владимиром Вапником и Алексеем Червоненкисом;\nБайесовский вывод;\nАлгоритмическая теория обучения[англ.] из работы Е. Марка Голда;\nОнлайновое машинное обучение из работы Ника Литтлстоуна.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Теория_вычислительного_обучения"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Статистическая_теория_обучения"
    },
    {
        "task": [
            "Для визуализации[править | править код]<<<debug (в Microsoft Windows, частично)\nhexdump (в FreeBSD, GNU/Linux и т. п.)>>>",
            "Для редактирования[править | править код]<<<HEX-редактор\nbeye (для всех операционных систем, свободная программа)\nhiew (для DOS, Microsoft Windows, Windows NT)\nWinHex (для Windows)\nSublime Text\nИ другие>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Двоичный_файл"
    },
    {
        "task": [
            "Простейшие примеры коммутирующих матриц:\n<<<любая квадратная матрица — с самой собой: \n\n\n\n\nA\nA\n\n=\n\nA\nA\n\n=\n\n\nA\n\n2\n\n\n\n\n\n{\\displaystyle \\mathbf {AA} =\\mathbf {AA} =\\mathbf {A^{2}} }\n\n (возведение матрицы в квадрат);\nлюбая квадратная матрица — с единичной матрицей того же порядка: \n\n\n\n\nA\nE\n\n=\n\nE\nA\n\n=\n\nA\n\n\n\n{\\displaystyle \\mathbf {AE} =\\mathbf {EA} =\\mathbf {A} }\n\n;\nлюбая квадратная матрица — с нулевой матрицей того же порядка: \n\n\n\n\nA\n0\n\n=\n\n0\nA\n\n=\n\n0\n\n\n\n{\\displaystyle \\mathbf {A0} =\\mathbf {0A} =\\mathbf {0} }\n\n;\nлюбая невырожденная квадратная матрица — со своей обратной матрицей: \n\n\n\n\nA\n\nA\n\n−\n1\n\n\n\n=\n\n\nA\n\n−\n1\n\n\nA\n\n=\n\nE\n\n\n\n{\\displaystyle \\mathbf {AA^{-1}} =\\mathbf {A^{-1}A} =\\mathbf {E} }\n\n.>>>",
            "Сложность вычисления произведения матриц по определению составляет \n\n\n\n \nO\n(\n\nn\n\n3\n\n\n)\n\n\n{\\displaystyle \\ O(n^{3})}\n\n, однако существуют более эффективные алгоритмы[1], применяющиеся для больших матриц. Вопрос о предельной скорости умножения больших матриц, также как и вопрос о построении наиболее быстрых и устойчивых практических алгоритмов умножения больших матриц остаётся одной из нерешённых проблем линейной алгебры.\n<<<Алгоритм Штрассена (1969)>>>",
            "Первый алгоритм быстрого умножения больших матриц был разработан Фолькером Штрассеном[2] в 1969 году. В основе алгоритма лежит рекурсивное разбиение матриц на блоки 2×2. Штрассен доказал, что матрицы 2×2 можно некоммутативно перемножить с помощью семи умножений, поэтому на каждом этапе рекурсии выполняется семь умножений вместо восьми. В результате асимптотическая сложность этого алгоритма составляет \n\n\n\nO\n(\n\nn\n\n\nlog\n\n2\n\n\n⁡\n7\n\n\n)\n≈\nO\n(\n\nn\n\n2.81\n\n\n)\n\n\n{\\displaystyle O(n^{\\log _{2}7})\\approx O(n^{2.81})}\n\n. Недостатком данного метода является бо́льшая сложность программирования по сравнению со стандартным алгоритмом, слабая численная устойчивость и больший объём используемой памяти. Разработан ряд алгоритмов на основе метода Штрассена, которые улучшают численную устойчивость, скорость по константе и другие его характеристики. Тем не менее, в силу простоты алгоритм Штрассена остаётся одним из практических алгоритмов умножения больших матриц. Штрассен также выдвинул следующую гипотезу Штрассена: для сколь угодно малого \n\n\n\nε\n>\n0\n\n\n{\\displaystyle \\varepsilon >0}\n\n существует алгоритм, при достаточно больших натуральных n гарантирующий перемножение двух матриц размера \n\n\n\nn\n×\nn\n\n\n{\\displaystyle n\\times n}\n\n за \n\n\n\nO\n(\n\nn\n\n2\n+\nε\n\n\n)\n\n\n{\\displaystyle O(n^{2+\\varepsilon })}\n\n операций.<<<Дальнейшие улучшения показателя степени ω для скорости матричного умножения>>>",
            "В дальнейшем оценки скорости умножения больших матриц многократно улучшались. Однако эти алгоритмы носили теоретический, в основном приближённый характер. В силу неустойчивости алгоритмов приближённого умножения в настоящее время они не используются на практике.\nАлгоритм Пана (1978)\nВ 1978 году Пан[3] предложил свой метод умножения матриц, сложность которого составила Θ(n2.78041).\nАлгоритм Бини (1979)\nВ 1979 году группа итальянских учёных во главе с Бини[4] разработала алгоритм умножения матриц с использованием тензоров. Его сложность составляет Θ(n2.7799).\nАлгоритмы Шёнхаге (1981)\nВ 1981 году Шёнхаге[5] представил метод, работающий со скоростью Θ(n2.695). Оценка получена с помощью подхода, названного частичным матричным умножением. Позже ему удалось получить оценку Θ(n2.6087).\nЗатем Шёнхаге на базе метода прямых сумм получил оценку сложности Θ(n2.548). Романи сумел понизить оценку до Θ(n2.5166), а Пан — до Θ(n2.5161).<<<Алгоритм Копперсмита — Винограда (1990)>>>",
            "В 1990 году Копперсмит и Виноград[6] опубликовали алгоритм, асимптотическая сложность которого составляла O(n2.3755). Этот алгоритм использует идеи, схожие с алгоритмом Штрассена. На сегодняшний день модификации алгоритма Копперсмита—Винограда являются наиболее асимптотически быстрыми. В последней модификации (2024) сложность алгоритма составляет O(n2.371552). Известно, что широкий класс модификаций этого алгоритма в принципе не может достичь сложность лучше, чем O(n2.3078)[7]. Алгоритм Копперсмита—Винограда эффективен только на матрицах астрономического размера и на практике применяться не может.<<<Связь с теорией групп (2003)>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Умножение_матриц"
    },
    {
        "task": [
            "При определённых условиях регулярности эти три условия эквивалентны:\n<<<Класс понятий \n\n\n\nC\n\n\n{\\displaystyle C}\n\n является ВПК-обучаемым.\nРазмерность Вапника — Червоненкиса класса \n\n\n\nC\n\n\n{\\displaystyle C}\n\n конечна.\n\n\n\n\nC\n\n\n{\\displaystyle C}\n\n является однородным классом Гливенко — Кантелли.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Вероятно_приближённо_корректное_обучение"
    },
    {
        "task": [
            "Стандарт ISO/IEC 25010:2011 (ГОСТ Р ИСО/МЭК 25010-2015)[8] определяет модель качества продукта, которая включает восемь характеристик верхнего уровня:\n<<<функциональная пригодность;\nуровень производительности;\nсовместимость;\nудобство использования (юзабилити);\nнадёжность;\nзащищённость;\nсопровождаемость;\nпереносимость (мобильность).>>>",
            "В этом стандарте модель качества продукта (англ. software product quality model) рассматривается отдельно от субъективного качества в использовании, которое может сильно отличаться для различных стейкхолдеров[9]. Модель качества в использовании (англ. quality in use model) включает следующие характеристики верхнего уровня[8]:\n<<<результативность;\nпроизводительность;\nудовлетворённость;\nсвобода от риска;\nпокрытие контекста.>>>",
            "Роберт Гласс в известной книге «Факты и заблуждения профессионального программирования» утверждает, что большинство профессиональных разработчиков согласны с выделением семи показателей качества как основных[10]:\n<<<переносимость;\nнадёжность;\nэффективность;\nудобство использования (юзабилити);\nтестируемость[англ.];\nпонятность;\nмодифицируемость.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Качество_программного_обеспечения"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Бэггинг"
    },
    {
        "task": [
            "Для того, чтобы хеш-функция H считалась криптографически стойкой, она должна удовлетворять трём основным требованиям, на которых основано большинство применений хеш-функций в криптографии:\n<<<Необратимость: для заданного значения хеш-функции m должно быть практически невозможно найти блок данных \n\n\n\nX\n\n\n{\\displaystyle X}\n\n, для которого \n\n\n\nH\n(\nX\n)\n=\nm\n\n\n{\\displaystyle H(X)=m}\n\n.\nСтойкость к коллизиям первого рода: для заданного сообщения M должно быть практически невозможно подобрать другое сообщение N, для которого \n\n\n\nH\n(\nN\n)\n=\nH\n(\nM\n)\n\n\n{\\displaystyle H(N)=H(M)}\n\n.\nСтойкость к коллизиям второго рода: должно быть практически невозможно подобрать пару сообщений \n\n\n\n(\nM\n,\n\nM\n′\n\n)\n\n\n{\\displaystyle (M,M')}\n\n, имеющих одинаковый хеш.>>>",
            "Коллизии осложняют использование хеш-таблиц, так как нарушают однозначность соответствия между хеш-кодами и данными. Тем не менее, существуют специальные методики для преодоления возникающих сложностей:\n<<<Метод цепочек: Технология сцепления элементов (chaining) состоит в том, что элементы множества, которым соответствует одно и то же хеш-значение, связываются в цепочку-список. В позиции номер i хранится указатель на голову списка тех элементов, у которых хеш-значение ключа равно i; если таких элементов в множестве нет, в позиции i записан NULL.\nОткрытая адресация: В отличие от хеширования с цепочками, при открытой адресации никаких списков нет, а все записи хранятся в самой хеш-таблице. Каждая ячейка таблицы содержит либо элемент динамического множества, либо NULL.\nИсключение коллизий: В отличие от двух предыдущих методов, наличие коллизий в хеш-таблице исключается на этапе добавления элементов. Хеш-кодом адресуемого элемента является хеш информации + случайное значение. Если хеш-код уже есть в таблице, случайное значение перегенерируется, с повторным добавлением в хеш-таблицу элемента с другим хешем. Таким образом, наличие коллизий исключается, и элементы можно найти по уникальным их хешам, которые их адресуют однозначно в хеш-таблице.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Коллизия_хеш-функции"
    },
    {
        "task": [
            "Основные функции (простейшие операционные системы):\n<<<Загрузка приложений в оперативную память и их выполнение.\nСтандартизованный доступ к периферийным устройствам (устройства ввода-вывода).\nУправление оперативной памятью (распределение между процессами, виртуальная память).\nУправление доступом к данным на энергонезависимых носителях (таких как жёсткий диск, компакт-диск и т. д.), организованным в той или иной файловой системе.\nПользовательский интерфейс.\nСетевые операции, поддержка стека протоколов.>>>",
            "Типы утилит[править | править код]<<<Дисковые утилиты\nДефрагментаторы\nПроверка диска — поиск неправильно записанных либо повреждённых различным путём файлов и участков диска и их последующее удаление для эффективного использования дискового пространства.\nОчистка диска — удаление временных файлов, ненужных файлов, чистка «корзины».\nРазметка диска — деление диска на логические диски, которые могут иметь различные файловые системы и восприниматься операционной системой как несколько различных дисков.\nРезервное копирование — создание резервных копий целых дисков и отдельных файлов, а также восстановление из этих копий.\nСжатие дисков — сжатие информации на дисках для увеличения вместимости жёстких дисков.\nУтилиты работы с реестром\nУтилиты мониторинга оборудования\nТесты оборудования>>>",
            "К этой категории относятся системные программы, предназначенные для разработки программного обеспечения:\n<<<ассемблеры — компьютерные программы, осуществляющие преобразование программы в форме исходного текста на языке ассемблера в машинные команды в виде объектного кода;\nтрансляторы — программы или технические средства, выполняющее трансляцию программы;\nкомпиляторы — Программы, переводящие текст программы на языке высокого уровня, в эквивалентную программу на машинном языке.\nинтерпретаторы — Программы (иногда аппаратные средства), анализирующие команды или операторы программы и тут же выполняющие их;\nкомпоновщики (редакторы связей) — программы, которые производят компоновку — принимают на вход один или несколько объектных модулей и собирают по ним исполнимый модуль;\nпрепроцессоры исходных текстов — это компьютерные программы, принимающие данные на входе, и выдающие данные, предназначенные для входа другой программы, например, такой, как компилятор;\nотла́дчики (англ. debugger) — модули среды разработки или отдельные программы, предназначенные для поиска ошибок в программах;\nтекстовые редакторы — компьютерные программы, предназначенные для создания и изменения текстовых файлов, а также их просмотра на экране, вывода на печать, поиска фрагментов текста и т. п.;\nспециализированные редакторы исходных текстов — текстовые редакторы для создания и редактирования исходного кода программ. Специализированный редактор исходных текстов может быть отдельным приложением, или быть встроен в интегрированную среду разработки;\nбиблиотеки подпрограмм — сборники подпрограмм или объектов, используемых для разработки программного обеспечения;\nредакторы графического интерфейса.>>>",
            "Основные функции СУБД[править | править код]<<<управление данными во внешней памяти (на дисках);\nуправление данными в оперативной памяти с использованием дискового кэша;\nжурнализация изменений, резервное копирование и восстановление базы данных после сбоев;\nподдержка языков баз данных (язык определения данных, язык манипулирования данными).>>>",
            "Классификация СУБД по способу доступа к базе данных[править | править код]<<<Файл-серверные, в которых файлы данных располагаются централизованно на файл-сервере, а программная реализация СУБД располагается на каждом клиентском компьютере целиком. Доступ к данным осуществляется через локальную сеть. Синхронизация чтений и обновлений осуществляется посредством файловых блокировок. Всплеск популярности файл-серверных систем управления базами данных относится к концу 1980-х — началу 1990-х годов.\nКлиент-серверные СУБД состоят из клиентской части (которая входит в состав прикладной программы) и сервера (см. Клиент-сервер).\nВстраиваемые — программные библиотеки, которые позволяют унифицированным образом хранить большие объёмы данных на локальной машине.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Системное_программное_обеспечение"
    },
    {
        "task": [
            "Реляционная модель данных включает следующие компоненты:\n<<<Структурный аспект (составляющая) — данные в базе данных представляют собой набор отношений.\nАспект (составляющая) целостности — отношения отвечают определённым условиям целостности. РМД поддерживает декларативные ограничения целостности уровня домена (типа данных), уровня отношения и уровня базы данных.\nАспект (составляющая) обработки (манипулирования) — РМД поддерживает операторы манипулирования отношениями (реляционная алгебра, реляционное исчисление).>>>",
            "Для лучшего понимания РМД следует отметить три важных обстоятельства:\n<<<модель является логической, то есть отношения являются логическими (абстрактными), а не физическими (хранимыми) структурами;\nдля реляционных баз данных верен информационный принцип: всё информационное наполнение базы данных представлено одним и только одним способом, а именно — явным заданием значений атрибутов в кортежах отношений; в частности, нет никаких указателей (адресов), связывающих одно значение с другим;\nналичие реляционной алгебры позволяет реализовать декларативное программирование и декларативное описание ограничений целостности, в дополнение к навигационному (процедурному) программированию и процедурной проверке условий.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Реляционная_модель_данных"
    },
    {
        "task": [
            "В операционных системах «Windows» (корпорация Microsoft) доступны два вида символических ссылок:\n<<<Точка соединения (junction point, символическая связь)\nСимволическая ссылка (symbolic link)>>>",
            "В файловом менеджере Total Commander ссылки могут быть созданы с помощью утилит («NTLinks Maker», «NTFS Links»), вызываемых с помощью кнопки на панели инструментов или по заданному сочетанию клавиш. Второй способ:\n<<<создать в удобном месте текстовый файл mklinkfile.cmd с текстом mklink %1 %2\nсоздать там же файл mklinkdir.cmd с текстом mklink /d /j %1 %2\nсоздать там же файл mklinkhard.cmd с текстом mklink /h %1 %2\nсоздать три кнопки в панели кнопок:\nКоманда - пути к этим файлам\nПараметры - \"%M\" %t%m - одинаково для всех трёх\nФайл значка - wcmicons.dll - одинаково для всех трёх\nзначок № 70 \"красная звёздочка с двумя значками файлов\"\nзначок № 71 \"красная звёздочка с двумя значками папок\"\nзначок № 72 \"красная звёздочка с двумя значками файлов на папке\"\nПодсказка - Симлинк файл\nПодсказка - Симлинк папка\nПодсказка - Хардлинк файл>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Символическая_ссылка"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Автоматическое_машинное_обучение"
    },
    {
        "task": [
            "В зависимости от метода получения доступа к уязвимому программному обеспечению эксплойты подразделяются на удалённые (англ. remote) и локальные (англ. local).\n<<<Удалённый эксплойт работает через сеть и использует уязвимость в защите без какого-либо предварительного доступа к уязвимой системе;\nЛокальный эксплойт запускается непосредственно в уязвимой системе, требуя предварительного доступа к ней. Обычно используется для получения взломщиком прав суперпользователя.>>>",
            "Эксплойты фактически предназначены для выполнения сторонних действий на уязвимой системе и могут быть разделены между собой следующим образом:\n<<<Эксплойты для операционных систем.\nЭксплойты для прикладного ПО (музыкальные проигрыватели, офисные пакеты и т. д.).\nЭксплойты для браузеров (Internet Explorer, Mozilla Firefox, Opera и другие).\nЭксплойты для интернет-продуктов (IPB, WordPress, VBulletin, phpBB).\nЭксплойты для интернет-сайтов (facebook.com, hi5.com, livejournal.com).\nДругие эксплойты[1].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Эксплойт"
    },
    {
        "task": [
            "В исходной каскадной модели следующие фазы шли в таком порядке:\n<<<Определение требований\nПроектирование\nКонструирование (также «реализация» либо «кодирование»)\nВоплощение\nТестирование и отладка (также «верификация»)\nИнсталляция\nПоддержка>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Каскадная_модель"
    },
    {
        "task": [
            "Предположения дискриминантного анализа являются теми же, что и для многофакторного дисперсионного анализа. Анализ весьма чувствителен к выбросам и размер наименьшей группы должен быть больше, чем число предикторных (независимых) переменных[7].\n<<<Многомерная нормальность: Независимые переменные нормальны для любого уровня группирующей переменной [9][7].\nОднородность дисперсии/ковариации (гомоскедастичность): Дисперсии среди групповых переменных те же самые по всем уровням предикторов. Это может быть проверено с помощью М-статистики Бокса[9]. Предлагается, однако, чтобы линейный дискриминантный анализ применялся, когда ковариации равны, а когда ковариации не равны, может быть использован квадратичный дискриминантный анализ[англ.][7].\nМультиколлинеарность: Сила предсказания может уменьшаться с увеличением корреляции между предикторными (независимыми) переменными [7].\nНезависимость: Объекты предполагаются случайно распределёнными и оценка по одной переменной для объекта независима от оценки по другой переменной[9][7].>>>",
            "Каждая функция сопровождается дискриминантной оценкой для определения, насколько хорошо она предсказывает принадлежность группе.\n<<<Коэффициенты структурной корреляции: Корреляция между каждым предиктором и дискриминантной оценкой для каждой функции. Это полная корреляция[14].\nНормированные коэффициенты: Вклад каждого предиктора в каждую функцию, так что это является частной корреляцией[англ.]. Показывает относительную важность каждого предиктора как вклад в принадлежность группе для каждой функции.\nФункции от центроидов группы: Средние дискриминантные оценки для каждой переменной для каждой функции. Чем дальше друг от друга находятся средние, тем меньше будет ошибка при классификации.>>>",
            "Правила дискриминанта<<<Метод максимального правдоподобия: Назначает x группе, максимизирующей (групповую) плотность популяции[15].\nПравило дискриминанта Байеса: Назначает x группе, максимизирующей \n\n\n\n\nπ\n\ni\n\n\n\nf\n\ni\n\n\n(\nx\n)\n\n\n{\\displaystyle \\pi _{i}f_{i}(x)}\n\n, где \n\n\n\n\nπ\n\ni\n\n\n\n\n{\\displaystyle \\pi _{i}}\n\n представляет априорную вероятность классификации и \n\n\n\n\nf\n\ni\n\n\n(\nx\n)\n\n\n{\\displaystyle f_{i}(x)}\n\n представляет плотность популяции[15].\nПравило линейного дискриминанта Фишера: Максимизирует отношение между SSмежду и SSвнутри, и находит линейную комбинацию предикторов для предсказания группы[15].>>>",
            "В маркетинге дискриминантный анализ часто использовался для определения факторов, которые отличают различные типы пользователей и/или продуктов на основе опросов или других форм сбора данных. Ныне для этих целей обычно применяется логистическая регрессия или другие методы. Использование дискриминантного анализа в маркетинге можно описать в виде следующих шагов:\n<<<Формулируем задачу и собираем данные. Определяем черты[англ.] потребительских свойств, которые потребители используют для оценки в этой категории. Используем технику количественного маркетингового исследования (такую как соцопросы) для сбора данных из выборки потенциальных потребителей относительно их оценки всех атрибутов продукта. Этап сбора данных обычно осуществляется профессионалами маркетингового исследования. Вопросы социального опроса просят респондентов оценить продукт значением от 1 до 5 (или от 1 до 7, или от 1 до 10) на ряде показателей, выбранных исследователями. Выбирается от пяти до двадцати показателей. Они могут включать такие свойства как простота использования, вес, точность, долговечность, цветовая гамма, цена или размер. Выбранные показатели будут меняться в зависимости от изучаемого продукта. Те же самые вопросы спрашиваются обо всех продуктах, подвергающихся изучению. Данные для продуктов кодируются и вводятся в статистические программы, такие как R, SPSS или SAS[англ.]. (Этот шаг совпадает с шагом при факторном анализе).\nОцениваем коэффициенты дискриминантной функции и определяем статистическую значимость и обоснованность. Выбираем подходящий метод дискриминантного анализа. Прямой метод использует оценку дискриминантной функции, так что все предикторы оценивается одновременно. Пошаговый метод вводит предикторы последовательно. Следует использовать двухгрупповой метод, когда зависимая переменная имеет две категории или состояния. Многофакторный дискриминантный метод используется, когда зависимая переменная имеет три или больше категорийных состояний. Для проверки значимости можно использовать лямбда Уилкса[англ.] в SPSS или «F stat» в SAS. Наиболее распространённый метод для проверки обоснованности — разбить выборку на оценочную или аналитическую выборку и проверочную или отложенную выборку. Оценочная выборка используется для построения дискриминантной функции. Проверочная выборка используется для построения классификационной матрицы, которая содержит число правильно классифицированных и неправильно классифицированных случаев. Процент правильно классифицированных случаев называется коэффициентом попадания.\nНаносим результат на двумерный график, определяем размеры и интерпретируем результат. Статистическая программа помогает отобразить результаты. График будет отображать каждый продукт (обычно в двухмерном пространстве). Расстояние между продуктами показывает, насколько они различаются. Размеры должны быть помечены исследователем. Это требует субъективного решения и они часто очень спорны. См. Построение карты восприятия[англ.].>>>",
            "Литература для дальнейшего чтения<<<Duda R. O., Hart P. E., Stork D. H. Pattern Classification. — 2nd. — Wiley Interscience, 2000. — ISBN 0-471-05669-3.\nHilbe J. M. Logistic Regression Models. — Chapman & Hall/CRC Press, 2009. — ISBN 978-1-4200-7575-5.\nMika S. Fisher Discriminant Analysis with Kernels // IEEE Conference on Neural Networks for Signal Processing IX. — 1999. — С. 41–48. — doi:10.1109/NNSP.1999.788121.\nH. Richard McFarland, St. P. Richards Donald. Exact Misclassification Probabilities for Plug-In Normal Quadratic Discriminant Functions. I. The Equal-Means Case // Journal of Multivariate Analysis. — 2001. — Т. 77, вып. 1. — С. 21–53. — doi:10.1006/jmva.2000.1924.\nH. Richard McFarland, St. P. Richards Donald. Exact Misclassification Probabilities for Plug-In Normal Quadratic Discriminant Functions. II. The Heterogeneous Case // Journal of Multivariate Analysis. — 2002. — Т. 82, вып. 2. — С. 299–330. — doi:10.1006/jmva.2001.2034.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Линейный_дискриминантный_анализ"
    },
    {
        "task": [
            "Исторически, наиболее сильными стали коммерческие шахматные движки. В 2007, 2008 и 2009 годах чемпионат мира по шахматам среди компьютерных программ выиграла Rybka, что было в некоторой степени сбывшимся прогнозом. Если любительская программа выигрывает турнир или выступает хорошо, как, например, Zappa в 2005 году, то позже программа может стать коммерческой. Титулы, полученные на турнирах после победы, дают престиж и используются для последующего маркетинга.\n<<<Чемпионат мира по шахматам среди компьютерных программ (WCCC)\nЧемпионат мира по блицу среди компьютерных программ\nОткрытый чемпионат Нидерландов по шахматам среди компьютерных программ (ODCCC)\nИнтернет-чемпионат по шахматам среди компьютерных программ (CCT)\nМеждународный чемпионат по шахматам в Падерборне среди компьютерных программ (IPCCC)\nСевероамериканский чемпионат по шахматам среди компьютерных программ>>>",
            "Существует много факторов, различающих рейтинг-листы шахматных движков:\n<<<Контроль времени. Более долгий контроль времени, такой, как 40 ходов в течение 120 минут, лучше подходит для определения силы игры в турнире, но отнимает больше времени на тестирование.\nИспользуемые аппаратные средства и операционная система: 64-битные или 32-битные аппаратные средства, мультипроцессорные или однопроцессорные системы, быстродействие процессоров и объём памяти. Более быстрые аппаратные средства с большей памятью позволяют сильнее играть.\nНастройки параметра расчётов (возможность анализа во время хода соперника).\nРазмеры таблиц перестановок (повторяющихся шахматных позиций).\nНастройки дебютных книг (начал шахматных партий).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Шахматный_движок"
    },
    {
        "task": [
            "Пусть \n\n\n\n\n\nC\n\n\n\n\n{\\displaystyle {\\mathcal {C}}}\n\n и \n\n\n\n\n\nH\n\n\n\n\n{\\displaystyle {\\mathcal {H}}}\n\n являются классами понятий, содержащих целевые понятия и гипотезы соответственно. Тогда, для констант \n\n\n\nα\n⩾\n0\n\n\n{\\displaystyle \\alpha \\geqslant 0}\n\n и \n\n\n\n0\n⩽\nβ\n<\n1\n\n\n{\\displaystyle 0\\leqslant \\beta <1}\n\n алгоритм обучения \n\n\n\nL\n\n\n{\\displaystyle L}\n\n является \n\n\n\n(\nα\n,\nβ\n)\n\n\n{\\displaystyle (\\alpha ,\\beta )}\n\n-оккамовым алгоритмом для \n\n\n\n\n\nC\n\n\n\n\n{\\displaystyle {\\mathcal {C}}}\n\n по гипотезам \n\n\n\n\n\nH\n\n\n\n\n{\\displaystyle {\\mathcal {H}}}\n\n тогда и только тогда, когда, если дано множество \n\n\n\nS\n=\n{\nx\n}\n\n\n{\\displaystyle S=\\{x\\}}\n\n, содержащее \n\n\n\nm\n\n\n{\\displaystyle m}\n\n экземпляров, помеченных согласно понятию \n\n\n\nc\n(\nx\n)\n∈\n\n\nC\n\n\n\n\n{\\displaystyle c(x)\\in {\\mathcal {C}}}\n\n, выходом алгоритма \n\n\n\nL\n\n\n{\\displaystyle L}\n\n является гипотеза \n\n\n\nh\n∈\n\n\nH\n\n\n\n\n{\\displaystyle h\\in {\\mathcal {H}}}\n\n, такая, что\n<<<\n\n\n\nh\n\n\n{\\displaystyle h}\n\n согласуется с \n\n\n\nc\n\n\n{\\displaystyle c}\n\n на \n\n\n\nS\n\n\n{\\displaystyle S}\n\n (то есть \n\n\n\nh\n(\nx\n)\n=\nc\n(\nx\n)\n,\n∀\nx\n∈\nS\n\n\n{\\displaystyle h(x)=c(x),\\forall x\\in S}\n\n)\n\n\n\n\ns\ni\nz\ne\n(\nh\n)\n⩽\n(\nn\n⋅\ns\ni\nz\ne\n(\nc\n)\n\n)\n\nα\n\n\n\nm\n\nβ\n\n\n\n\n{\\displaystyle size(h)\\leqslant (n\\cdot size(c))^{\\alpha }m^{\\beta }}\n\n[2][1]>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Оккамово_обучение"
    },
    {
        "task": [
            "В общем случае поиск информации состоит из четырёх этапов:\n<<<определение (уточнение) информационной потребности и формулировка информационного запроса;\nопределение совокупности возможных держателей информационных массивов (источников);\nизвлечение информации из выявленных информационных массивов;\nознакомление с полученной информацией и оценка результатов поиска.>>>",
            "Процесс поиска документов по чисто формальным признакам, указанным в запросе.\nДля осуществления нужны следующие условия:\n<<<Наличие у документа точного адреса\nОбеспечение строгого порядка расположения документов в запоминающем устройстве или в хранилище системы.>>>",
            "Условия:\n<<<Перевод содержания документов и запросов с естественного языка на информационно-поисковый язык и составление поисковых образов документа и запроса.\nСоставление поискового описания, в котором указывается дополнительное условие поиска.>>>",
            "Два вида документального поиска:\n<<<Библиотечный, направленный на нахождение первичных документов.\nБиблиографический, направленный на нахождение сведений о документах, представленных в виде библиографических записей.>>>",
            "Различают два вида:\n<<<Документально-фактографический, заключается в поиске в документах фрагментов текста, содержащих факты.\nФактологический (описание фактов), предполагающий создание новых фактографических описаний в процессе поиска путём логической переработки найденной фактографической информации.>>>",
            "Классическая задача ИП, с которой началось развитие этой области, — это поиск документов, удовлетворяющих запросу, в рамках некоторой статической коллекции документов. Но список задач ИП постоянно расширяется и теперь включает:\n<<<Вопросы моделирования;\nКлассификация документов;\nФильтрация документов;\nКластеризация документов;\nПроектирование архитектур поисковых систем и пользовательских интерфейсов;\nИзвлечение информации, в частности аннотирования и реферирования документов;\nЯзыки запросов и др.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Информационный_поиск"
    },
    {
        "task": [
            "Однозадачный процессор тратит много тактов на NOOP-операции, не делая ничего полезного, каждый раз, когда происходит промах мимо кэша или при простое конвейера. Преимущества использования barrel процессоров по сравнению с однозадачными процессорами в следующем:\n<<<Способность выполнять полезную работу других потоков, в то время как приостановленный поток ожидает.\nПроектирование n-поточного Barrel процессора с длинной конвейера n гораздо проще, чем проектирование однозадачного процессора, поскольку у barrel процессора простой конвейера минимален и не требует создания схем упреждающего чтения (не нуждается в предсказаниях переходов).\nДля приложений реального времени barrel процессор может гарантировать, что «в реальном времени» поток будет выполняться с точным таймингом, независимо от того, что происходит с другими потоками, даже если другой поток блокируется в бесконечном цикле или постоянно прерывается через аппаратные прерывания.>>>",
            "Есть несколько недостатков barrel процессоров.\n<<<Состояние каждого потока должно храниться на чипе (обычно в регистрах), чтобы избежать дорогостоящих переключений контекста вне кристалла. Для этого требуется большее количество регистров, по сравнению с обычными процессорами.\nЕсли все потоки будут разделять один и тот же кэш, то это уменьшит общую производительность системы. Чтобы этого избежать, лучше разделить кэш-памяти на блоки под каждый поток отдельно, но это может значительно увеличить число транзисторов (и, следовательно, стоимость) такого процессора. (Однако, в режиме жёсткого реального времени во встраиваемых системах, где barrel процессоры встречаются чаще, стоимость доступа к памяти, как правило, рассчитана исходя из предположения о худшем промахе мимо кэша, так что это незначительная проблема. Кроме того, некоторые barrel процессоры, такие как XMOS XS1, не имеют кэша вообще.)>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Барабанный_процессор"
    },
    {
        "task": [
            "Программное обеспечение<<<dlib Библиотека на языке C++\nБиблиотека ядерных машин\nrvmbinary: пакет на языке R для двоичной классификации\nscikit-rvm\nfast-scikit-rvm, Обучающий курс по методу релевантных векторов>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Метод_релевантных_векторов"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Обучение_признакам"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Метод_нечёткой_кластеризации_C-средних"
    },
    {
        "task": [
            " От ассоциативных правил обычно требуется выполнение определённой пользователем минимальной поддержки и определённого пользователем минимального доверия. Генерация ассоциативного правила обычно разделяется на два шага:\n<<<Минимальный порог поддержки используется для поиска всех частых наборов объектов в базе данных.\nОграничение минимального доверия применяется к этим наборам для формирования правила.>>>",
            "Кроме доверия, были предложены и другие меры интересности для правил. Некоторые популярные меры:\n<<<Полное доверие (англ. All-confidence)[14]\nКоллективная мощь (англ. Collective strength)[15]\nУбеждённость (англ. Conviction)[16]\nРычаг (англ. Leverage)[17]\nЛифт (первоначально назывался интересом)[18]>>>",
            "Библиография<<<Extensive Bibliography on Association Rules by J.M. Luna\nAnnotated Bibliography on Association Rules by M. Hahsler\nStatsoft Electronic Statistics Textbook: Association Rules (недоступная ссылка) by Dell Software>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Обучение_ассоциативным_правилам"
    },
    {
        "task": [
            "С. А. Терехов[кто?] выделяет несколько типов информационных моделей, отличающихся по характеру запросов к ним[2]:\n<<<Моделирование отклика системы на внешнее воздействие\nКлассификация внутренних состояний системы\nПрогноз динамики изменения системы\nОценка полноты описания системы и сравнительная информационная значимость параметров системы\nОптимизация параметров системы по отношению к заданной функции ценности\nАдаптивное управление системой>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Информационная_модель"
    },
    {
        "task": [
            "Ведущие исследователи языково-ориентированного программирования (Мартин Уорд, Пол Хьюдак[англ.], Валид Таха и другие) приводят следующие примеры предметно-специфичных языков в качестве классических[4][7][8]:\n<<<TeX/LaTeX для подготовки (компьютерной вёрстки) текстовых документов;\nPerl для манипулирования текстами;\nSQL для СУБД;\nTcl/Tk для графического интерфейса пользователя;\nHTML и SGML для разметки документов;\nVerilog и VHDL для описания аппаратного обеспечения;\nMathematica и Maple для символьных вычислений;\nAutoLisp для компьютерного моделирования (САПР);\nProlog для задач, сформулированных в терминах исчисления предикатов;\nML и Haskell для задач, сформулированных в терминах функций (Haskell временами определяется как DSL для денотационной семантики[англ.]).>>>",
            "Другие примеры:\n<<<G-код — язык программирования устройств с числовым программным управлением (ЧПУ);\nЯМБ.>>>",
            "В дополнение к традиционному делению языков на интерпретируемые и компилируемые, встраиваемые языки вводят ещё несколько видов реализации языка:\n<<<чистое встраивание[7];\nиспользование макросредств языка (и нередко отождествление их с термином «метапрограммирование»), которое, в свою очередь, подразделяется на[11]:\nмногостадийные вычисления (англ. multistage computations);\nквазицитирование (известное из языка Lisp);\nиспользование шаблонов.>>>",
            "Основных причин для разработки встраиваемых текстовых языков три:\n<<<ввод в исходный язык дополнительных возможностей, расширяющих спектр эффективно решаемых задач или синтаксически упрощающих решение часто встречаемых задач;\nинтенсивное повторное использование компонентов транслятора базового языка: парсера, механизма типизации, реализации тривиальных вещей (таких как арифметика чисел), оптимизатора и др. Это обеспечивает кратное снижение трудоёмкости реализации придуманного языка, а также высокий уровень качества реализации при использовании безопасного языка в качестве базового;\nполучение возможности эффективно смешивать свойства разных самостоятельных языков в единых фрагментах кода, формируя мультипарадигменный язык широкого профиля, исключая необходимость межъязыкового взаимодействия[англ.] и расширяя возможности оптимизации.>>>",
            "При рассмотрении вопроса о создании DSL можно рассмотреть следующие варианты в порядке уменьшения затрат на разработку[18]:\n<<<Внешний язык со своим синтаксисом, отдельный от кода исходного языка. Может требовать поддержки от IDE и текстовых редакторов.\nВнутренний язык, который строится на основе синтаксиса исходного языка и модулей, классов, методов, функций обычной библиотеки\nОбёртка библиотеки. Внутренний DSL в виде библиотеки, реализующей промежуточный слой между прикладной программой и другой библиотекой или интерфейсом программирования приложений (API). Такой подход позволяет повторно использовать код другой библиотеки с определённой в ней семантикой предметной области.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Предметно-ориентированный_язык"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Теория_сложности_вычислений"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Компоновщик"
    },
    {
        "task": [
            "Примеры АТД<<<Список\nСтек\nОчередь\nАссоциативный массив\nОчередь с приоритетом>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Абстрактный_тип_данных"
    },
    {
        "task": [
            "К ним относятся:\n<<<Spectre\nMeltdown\nSpoiler[англ.]\nForeshadow[англ.]\nВыборка микроархитектурных данных[англ.]>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Спекулятивное_исполнение"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Данные_(вычислительная_техника)"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Веб-интерфейс"
    },
    {
        "task": [
            "Реализация в статистических пакетах<<<R: по мешьшей мере три пакета предлагают средства для байесовской модели усреднения[30], включая пакет BMS (сокращение от Bayesian Model Selection)[31], пакет BAS (сокращение от Bayesian Adaptive Sampling)[32] и пакет BMA[33]. Пакет H2O предлагает большое число моделей обучении машин, включая модель сборки ансамбля, которая может быть тренирована с помощью Spark.\nPython: Scikit-learn, пакет для машинного обучения на языке Python, предлагает пакеты для обучения ансамблей, включая пакеты для бэггинга и методов усреднения.\nMATLAB: ансамбли классификаторов реализованы в наборе средств Statistics и Machine Learning[34].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Ансамблевое_обучение"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Среда_выполнения"
    },
    {
        "task": [
            "Решаемые задачи<<<поддержка изоляции процессов и защиты памяти путём создания своего собственного виртуального адресного пространства для каждого процесса\nподдержка изоляции области ядра от кода пользовательского режима\nподдержка памяти «только для чтения» и неисполняемой памяти\nподдержка отгрузки давно не используемых страниц в область подкачки на диске\nподдержка отображённых в память файлов, в том числе загрузочных модулей\nподдержка разделяемой между процессами памяти, в том числе с копированием-по-записи для экономии физических страниц\nподдержка системного вызова fork() в ОС семейства UNIX>>>",
            "Запись таблицы страниц обычно содержит в себе следующую информацию:\n<<<флаг «страница отображена»\nфизический адрес\nфлаг «страница доступна из режима пользователя». При неустановке данного флага страница доступна только из режима ядра.\nфлаг «страница доступна только на чтение». В некоторых случаях используется только для режима пользователя, то есть в режиме ядра все страницы всегда доступны на запись.\nфлаг «страница недоступна на исполнение».\nрежим использования кэша для страницы. Влияет на тип шинных транзакций, инициируемых процессором при обращении через данную запись. Особенно часто используется для видеопамяти (комбинированная запись) и для отображенных в память регистров устройств (полное отсутствие кэширования).>>>",
            "Причины отказа страницы (page fault):\n<<<не существует таблицы, отображающей данный регион,\nPTE не имеет взведённого флага «страница отображена»,\nпопытка обратиться из пользовательского режима к странице «только для ядра»,\nпопытка записи в страницу «только для чтения»,\nпопытка исполнения кода из страницы «исполнение запрещено».>>>",
            "Кроме того, Microsoft принудительно отключила поддержку физических адресов выше 4 ГБ по политико-маркетинговым соображениям в следующих ОС:\n<<<32-битная Windows XP,\n32-битный Windows Server 2003 Web Edition,\n32-битная Windows Vista (подключение поддержки требует набора команд в командной строке: «BCDEdit /set PAE forceenable», «BCDEdit /set nolowmem on»).>>>",
            "Поддержка физических адресов выше 4 ГБ имеется в следующих версиях:\n<<<всe 64-битные версии,\n32-битная Windows Vista SP1 (поддержка включена по умолчанию, но её подключение нередко может требовать набора команд в командной строке),\n32-битный Windows Server 2003, отличный от Web Edition,\n32-битный Windows Server 2008.>>>",
            "Таким образом, для того, чтобы использовать память выше 3,2 ГБ в Windows, нужны:\n<<<поддержка чипсетом,\nправильные настройки BIOS,\nправильная версия Windows,\nправильная опция загрузки (с поддержкой PAE),\nподдержка 36-битного адресного пространства драйверами устройств.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Страничная_память"
    },
    {
        "task": [
            "Как отмечают В. Н. Волкова и А. А. Денисов, термин «системный анализ» использовался в научных публикациях неоднозначно. Среди определений[1]:\n<<<приложение системных концепций к функциям управления, связанным с планированием или даже со стратегическим планированием и целевой стадией планирования (Д. Клиланд, В. Кинг, 1979)\nсиноним термина «анализ систем», развитие методологии исследования операций (Э. Квейд, 1969)\nсистемное управление организацией (С. Янг, 1972)\nметодология исследования целенаправленных систем (Ю. И. Черняк, 1975)\nспособ мышления, способ решения проблемы (С. Оптнер, 1969).>>>",
            "Согласно классификации, все проблемы подразделяются на три класса:\n<<<хорошо структурированные (well-structured), или количественно сформулированные проблемы, в которых существенные зависимости выяснены очень хорошо;\nслабо структурированные (ill-structured), или смешанные проблемы, которые содержат как качественные элементы, так и малоизвестные, неопределенные стороны, которые имеют тенденцию доминировать;\nнеструктурированные (unstructured), или качественно выраженные проблемы, содержащие лишь описание важнейших ресурсов, признаков и характеристик, количественные зависимости между которыми совершенно неизвестны.>>>",
            "Системный анализ предоставляет к использованию в различных науках, системах следующие системные методы и процедуры:\n<<<абстрагирование и конкретизация\nанализ и синтез, индукция и дедукция\nформализация и конкретизация\nкомпозиция и декомпозиция\nлинеаризация и выделение нелинейных составляющих\nструктурирование и реструктурирование\nмакетирование\nреинжиниринг\nалгоритмизация\nмоделирование и эксперимент\nпрограммное управление и регулирование\nраспознавание и идентификация\nкластеризация и классификация\nэкспертное оценивание и тестирование\nверификация>>>",
            "Процедура принятия решений согласно [2] включает следующие основные этапы:\n<<<формулировка проблемной ситуации;\nопределение целей;\nопределение критериев достижения целей;\nпостроение моделей для обоснования решений;\nпоиск оптимального (допустимого) варианта решения;\nсогласование решения;\nподготовка решения к реализации;\nутверждение решения;\nуправление ходом реализации решения;\nпроверка эффективности решения.>>>",
            "Для многофакторного анализа, алгоритм можно описать и точнее:\n<<<описание условий (факторов) существования проблем, И, ИЛИ и НЕ связывание между условиями;\nотрицание условий, нахождение любых технически возможных путей. Для решения нужен хотя бы один единственный путь. Все И меняются на ИЛИ, ИЛИ меняются на И, а НЕ меняются на подтверждение, подтверждение меняется на НЕ-связывание;\nрекурсивный анализ вытекающих проблем из найденных путей, то есть п. 1 и п. 2 заново для каждой подпроблемы;\nоценка всех найденных путей решений по критериям исходящих подпроблем, сведенным к материальной или иной общей стоимости.>>>",
            "ПО для системного анализа<<<Wolfram SystemModeler\nMATLAB/Simulink\nMapleSim\nVisSim\n20-sim>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Системный_анализ"
    },
    {
        "task": [
            "В многоагентной системе агенты имеют несколько важных характеристик[4]:\n<<<Автономность: агенты, хотя бы частично, независимы\nОграниченность представления: ни у одного из агентов нет представления о всей системе, или система слишком сложна, чтобы знание о ней имело практическое применение для агента.\nДецентрализация: нет агентов, управляющих всей системой[5]>>>",
            "Темы для исследования в рамках МАС:\n<<<знания, желания и намерения (BDI),\nкооперация и координация,\nорганизация,\nкоммуникация,\nсогласование,\nраспределенное решение,\nраспределенное решение задач,\nмультиагентное обучение\nнадежность и устойчивость к сбоям>>>",
            "Модель «Запрос — Ответ — Соглашение» — обычное явление для МАС. Схема реализуется за несколько шагов:\n<<<сначала всем задаётся вопрос наподобие: «Кто может мне помочь?»\nна что только «способные» отвечают «Я смогу, за такую-то цену»\nв конечном итоге, устанавливается «соглашение»>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Многоагентная_система"
    },
    {
        "task": [
            "Сценарий использования разделяемой памяти[править | править код]<<<Сервер получает доступ к разделяемой памяти, используя семафор.\nСервер производит запись данных в разделяемую память.\nПосле завершения записи данных сервер освобождает доступ к разделяемой памяти с помощью семафора.\nКлиент получает доступ к разделяемой памяти, запирая доступ к этой памяти для других процессов с помощью семафора.\nКлиент производит чтение данных из разделяемой памяти, а затем освобождает доступ к памяти с помощью семафора.>>>",
            "В программном обеспечении разделяемой памятью называют:\n<<<Метод межпроцессного взаимодействия (IPC), то есть способ обмена данными между программами, работающими одновременно. Один процесс создаёт область в оперативной памяти, которая может быть доступна для других процессов.\nМетод экономии памяти, путём прямого обращения к тем исходным данным, которые при обычном подходе являются отдельными копиями исходных данных, вместо отображения виртуальной памяти или описанного метода . Такой подход обычно используется для разделяемых библиотек и для XIP.>>>",
            "Существует два разных подхода к подключению и использованию разделяемой памяти:\n<<<в стиле UNIX System V, используя функции расширения POSIX:XSI (часть стандарта POSIX.1-2001) shmget,  shmctl,  shmat и  shmdt[5];\nчерез функции POSIX shm_open,  shm_unlink,  ftruncate и  mmap (стандарт POSIX.1-2001)[6].>>>",
            "UNIX System V предоставляет набор функций языка C, позволяющий работать с разделяемой памятью[7]:\n<<<shmget — создание сегмента разделяемой памяти с привязкой к целочисленному идентификатору, либо анонимного сегмента разделяемой памяти (при указании вместо идентификатора значения IPC_PRIVATE)[8];\nshmctl — установка параметров сегмента памяти[9];\nshmat — подключение сегмента к адресному пространству процесса[4];\nshmdt — отключение сегмента от адресного пространства процесса[10].>>>",
            "POSIX позволяет связать с объектом разделяемой памяти файловый дескриптор, что является более унифицированным механизмом, чем механизм UNIX System V. Для работы с памятью могут быть использованы следующие функции языка C: \n<<<shm_open — создание или подключение объекта разделяемой памяти POSIX по его имени[6];\nshm_unlink — удаление объекта разделяемой памяти по его имени (при этом сегмент разделяемой памяти будет существовать, пока не будет отключен от всех процессов)[11];\nftruncate — задаёт или изменяет размер разделяемой памяти (или отображённого в память файла)[12];\nmmap — подключает существующий или создаёт анонимный сегмент разделяемой памяти к адресному пространству процесса[3].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Разделяемая_память"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Сетевой_процессор"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Декларативное_программирование"
    },
    {
        "task": [
            "Список примеров в этой статье не основывается на авторитетных источниках, посвящённых непосредственно предмету статьи. Добавьте ссылки на источники, предметом рассмотрения которых является тема настоящей статьи (или раздела) в целом, а не отдельные элементы списка. В противном случае список примеров может быть удалён.<<<Allen-Babcock RUSH (Remote Users of Shared Hardware) Time-sharing System on IBM S/360 hardware[3] → Tymshare\nAT&T Bell Labs Unix → UC Berkeley BSD Unix\nBBN PDP-1 Time-sharing System → Massachusetts General Hospital PDP-1D → MUMPS\nBBN TENEX → DEC TOPS-20, Foonly FOONEX, MAXC OS at PARC, Stanford Low Overhead Timesharing System (LOTS)\nBerkeley Timesharing System at UC Berkeley Project Genie → Scientific Data Systems SDS 940 (Tymshare, BBN, SRI, Community Memory) → BCC 500 → MAXC at PARC\nBurroughs Time-sharing MCP → HP 3000 MPE\nCambridge Multiple Access System was developed for the Titan, the prototype Atlas 2 computer built by Ferranti for the University of Cambridge.[4] This was the first time-sharing system developed outside the United States, and which influenced the later development of UNIX.\nCDC MACE, APEX → Kronos → NOS → NOS/VE\nCompuServe, also branded as Compu-Serv, CIS.\nCompu-Time, Inc.,[5] on Honeywell 400/4000, started in 1968 in Ft Lauderdale, Florida, moved to Daytona Beach in 1970.[источник не указан 3841 день]\nDartmouth Time Sharing System (DTSS) → GE Time-sharing → GEnie\nDEC PDP-6 Time-sharing Monitor → TOPS-10 → TSS-8, RSTS-11, RSX-11 → VAX/VMS\nHP 2000 Time-Shared BASIC\nIBM CALL/360, CALL/OS — using IBM 360/50\nIBM CP-40 → CP-67 → CP-370 → CP/CMS → VM/CMS\nIBM TSO for OS/MVT → for OS/VS2 → for MVS → for z/OS\nIBM TSS/360 → TSS/370\nInternational Timesharing Corporation on dual CDC 3300 systems.[5]\nMIT CTSS → MULTICS (MIT / GE / Bell Labs) → Unix\nMIT Time-sharing System for the DEC PDP-1 → ITS\nMcGill University MUSIC → IBM MUSIC/SP\nMichigan Terminal System, on the IBM S/360-67, S/370, and successors.\nMichigan State University CDC SCOPE/HUSTLER System\nNational CSS VP/CSS, на серии IBM 360; originally based on IBM’s CP/CMS.\nOregon State University OS-3, on CDC 3000 series.\nPrime Computer PRIMOS\nRAND JOSS → JOSS-2 → JOSS-3\nRCA TSOS → Univac / Unisys VMOS → VS/9\nService in Informatics and Analysis (SIA), on CDC 6600 Kronos.\nSystem Development Corporation Time-sharing System, on the AN/FSQ-32.\nStanford ORVYL and WYLBUR, on IBM S/360-67.\nStanford PDP-1 Time-sharing System → SAIL → WAITS\nTime Sharing Ltd. (TSL)[6] on DEC PDP-10 systems → Automatic Data Processing (ADP), первая коммерческая система распределения времени в Европе и первая двойная (fault tolerant) система распределения времени.\nTymshare SDS-940 → Tymcom X → Tymcom XX\nUC Berkeley CAL-TSS, on CDC 6400.\nXDS UTS → CP-V → Honeywell CP-6>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Разделение_времени"
    },
    {
        "task": [
            "Первая технология электронной бумаги, вышедшая на массовый рынок.\n<<<VizPlex — 800x600, 16 оттенков серого. Контрастность 7:1.>>>",
            "Во втором поколении были улучшены время отклика, энергопотребление и контрастность.\n<<<Pearl — 800x600, 16 оттенков серого. Контрастность 10:1;\nPearl HD — 1024x758, 16 оттенков серого. Контрастность 12:1;\nCarta — до 2200x1650, 16 оттенков серого. Контрастность 15:1.>>>",
            "В третьем поколении появилось цветное изображение.\n<<<Triton 1 — 800x600, до 4096 цветов (физическое разрешение 1600x1200). Контрастность 10:1. Цветной пиксель имеет 4 физических пикселя под каждым светофильтром: красный, синий, зелёный и белый;\nTriton 2 — 800x600, до 4096 цветов (физическое разрешение 1600x1200). Контрастность 10:1. Цветной пиксель состоит из 3 физических пикселей: красного, зелёного и синего.>>>",
            "Технологии электронной бумаги, сходные с E-Ink, однако действующие на несколько иных принципах.\n<<<SiPix — 1024x768, 16 оттенков серого. Контрастность 6:1. Технология использует для формирования изображения белые частицы, плавающие в чёрной жидкости. Такие экраны имеют плохую отражающую способность, из-за этого изображение выглядит несколько белесым.\nFlex (др. наименование — Mobius) — 2200x1650, 16 оттенков серого. Контрастность 10:1. Экраны имеют пластиковую подложку и могут сгибаться без повреждений, сохраняя работоспособность. Технология впервые была представлена LG и впоследствии приобретена E Ink Corporation.>>>",
            "Альтернативные технологии<<<Samsung делает ставку на электрокапельные чернила (electrowetting), дающие и больший контраст, и более высокую частоту смены изображения (вплоть до воспроизведения видео), и — самое главное — цветность[10].\nSharp разработал технологию Memory LCD[22], которая позволяет создавать дисплеи LCD энергоспотреблением всего 0,8 % от традиционных жидкокристаллических экранов за счёт использования сетчатого полимерного жидкокристаллического материала с собственными ячейками памяти в пикселах (PNLC), чтобы не перекрашивать ячейку без необходимости от кадра к кадру[23]. Имея уровень энергопотребления в 15-30 μW, что даже часто меньше, чем у E-Ink для динамических изображений, технология Memory LCD имеет преимущества в контрасте, возможности создания трансфлективных ЖК-дисплев с подсветкой самосвечения, скорости обновления и возможности создания цветных экранов. Наиболее известным поставщиком устройств на Memory LCD является изготовитель умных часов Pebble[24][25].\nТехнология Mirasol, разрабатываемая компанией Qualcomm. Эти дисплеи сочетают в себе преимущества стандартных жидкокристаллических экранов и технологии «электронных чернил» (E-Ink). Благодаря специальной технологии, в основе которой лежат микроэлектромеханические элементы, Mirasol дисплеи имеют очень низкое энергопотребление и в то же время способны отображать полноцветные изображения. Более того, уже были продемонстрированы образцы Mirasol дисплеев Qualcomm, способных отображать цветное видео с частотой в 30 кадров в секунду. Уже сейчас существуют действующие образцы таких дисплеев с диагональю 5,7 дюйма и разрешением 1024 x 768 пикселей, которые могут использоваться в связке с ёмкостными сенсорными экранами. Компания Qualcomm на конгрессе Mobile World Congress 2010 в Барселоне подтвердила, что первые электронные книги с цветными дисплеями, выполненными на основе фирменной технологии Mirasol, должны появиться на рынке уже осенью 2010 года. Однако в реальности первые коммерческие образцы появились лишь осенью 2011 года, и были признаны неудачными, так как разработка была скорее экспериментальной. Выявленные ошибки и недостатки позволили вывести на рынок сбыта более успешные продукты, и, начиная с середины 2013 года, полихромные электронные книги начали занимать свой сектор продаж.\nFOLED — технология изготовления гибких цветных дисплеев на основе органических светодиодов OLED.\nTMOS — Time Multiplexed Optical Shutter — технология временного мультиплексирования оптического затвора. Суть данной технологии заключена в использовании однослойной плёнки MEMS (microelectromechanical systems), размещённой между верхним и нижним листом стекла.>>>",
            "Публикации<<<Владимир Сирота. Почему иссякли электронные чернила  (рус.). iXBT.com (14 апреля 2005). Дата обращения: 15 мая 2022. Архивировано 30 июня 2012 года.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Электронная_бумага"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Статическая_типизация"
    },
    {
        "task": [
            "Оптимальная подструктура в динамическом программировании означает, что оптимальное решение подзадач меньшего размера может быть использовано для решения исходной задачи. К примеру, кратчайший путь в графе из одной вершины (обозначим s) в другую (обозначим t) может быть найден так: сначала считаем кратчайший путь из всех вершин, смежных с s, до t, а затем, учитывая веса рёбер, которыми s соединена со смежными вершинами, выбираем лучший путь до t (через какую вершину лучше всего пойти). В общем случае мы можем решить задачу, в которой присутствует оптимальная подструктура, проделывая следующие три шага.\n<<<Разбиение задачи на подзадачи меньшего размера.\nНахождение оптимального решения подзадач рекурсивно, проделывая такой же трёхшаговый алгоритм.\nИспользование полученного решения подзадач для конструирования решения исходной задачи.>>>",
            "Подводя итоги вышесказанного можно сказать, что динамическое программирование пользуется следующими свойствами задачи:\n<<<перекрывающиеся подзадачи;\nоптимальная подструктура;\nвозможность запоминания решения часто встречающихся подзадач.>>>",
            "Динамическое программирование обычно придерживается двух подходов к решению задач:\n<<<нисходящее динамическое программирование: задача разбивается на подзадачи меньшего размера, они решаются и затем комбинируются для решения исходной задачи. Используется запоминание для решений уже решённых подзадач.\nвосходящее динамическое программирование: все подзадачи, которые впоследствии понадобятся для решения исходной задачи просчитываются заранее и затем используются для построения решения исходной задачи. Этот способ лучше нисходящего программирования в смысле размера необходимого стека и количества вызова функций, но иногда бывает нелегко заранее выяснить, решение каких подзадач нам потребуется в дальнейшем.>>>",
            "Классические задачи динамического программирования<<<Задача о наибольшей общей подпоследовательности: даны две последовательности, требуется найти самую длинную общую подпоследовательность.\nЗадача поиска наибольшей увеличивающейся подпоследовательности: дана последовательность, требуется найти самую длинную возрастающую подпоследовательность.\nЗадача о редакционном расстоянии (расстояние Левенштейна): даны две строки, требуется найти минимальное количество стираний, замен и добавлений символов, преобразующих одну строку в другую.\nЗадача о вычислении чисел Фибоначчи\nЗадача о порядке перемножения матриц: даны матрицы \n\n\n\n\nA\n\n1\n\n\n\n\n{\\displaystyle A_{1}}\n\n, …, \n\n\n\n\nA\n\nn\n\n\n\n\n{\\displaystyle A_{n}}\n\n, требуется минимизировать количество скалярных операций для их перемножения.\nЗадача о выборе траектории\nЗадача последовательного принятия решения\nЗадача об использовании рабочей силы\nЗадача управления запасами\nЗадача о рюкзаке: из неограниченного множества предметов со свойствами «стоимость» и «вес» требуется отобрать некое число предметов таким образом, чтобы получить максимальную суммарную стоимость при ограниченном суммарном весе.\nАлгоритм Флойда — Уоршелла: найти кратчайшие расстояния между всеми вершинами взвешенного ориентированного графа.\nАлгоритм Беллмана — Форда: найти кратчайший путь во взвешенном графе между двумя заданными вершинами.\nМаксимальное независимое множество вершин в дереве: дано дерево, найти максимальное множество вершин, никакие две из которых не связаны ребром.\nЗадача о расписании работы конвейера: есть два конвейера, по \n\n\n\nn\n\n\n{\\displaystyle n}\n\n рабочих мест. Заданы времена работы на каждом конвейере, постановка на него и снятие, а также время передвижение на соседнее место. Требуется определить самый быстрый способ сборки детали, используя оба конвейера.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Динамическое_программирование"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Оптимизация_(информатика)"
    },
    {
        "task": [
            "Примеры<<<Lightspeeur® Series Intelligent Neural Processor[3] — серия специализированных энергоэффективных нейронных процессоров производительностью до 9.3TOPS доступных в том числе в виде USB модуля[4].\nIntel Movidius Myriad 2[англ.] — процессор являющийся многоядерным ИИ-ускорителем основанном на VLIW-архитектуре, с дополненными узлами предназначенными для обработки видео[5].\nComBox x64 Movidius PCIe Blade board - ускоритель инференса сверхточных нейронных сетей для ЦОД на базе VPU Intel Movidius (MyriadX) с высокой плотностью их размещения.\nMobileye EyeQ[англ.] — это специализированный процессор ускоряющий обработку алгоритмов машинного зрения для использования в беспилотном автомобиле[6].\nMicrosoft HoloLens — очки смешанной реальности компании Microsoft, которые включает в себя ускоритель, называемый голографический процессор (англ. holographic processing unit), задействованный для ускорения обработки видео с камеры, для среды отслеживание и работы приложений дополненной реальности[7].\nEyeriss[англ.] — процессор разработанный МТИ, предназначенный для работы свёрточных нейронных сетей[8].\nIntuitive[англ.] — израильская компания сфокусированная на проектировании VPU, названный ею NU series.\nNeuFlow[англ.] — разработка Яна Лекуна (в виде FPGA) для ускорения работы алгоритмов cвёртки, с помощью потоковой архитектуры.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Процессор_машинного_зрения"
    },
    {
        "task": [
            "Биометрические данные можно разделить на два основных класса:\n<<<Физиологические — относятся к форме тела. В качестве примера можно привести: отпечатки пальцев, распознавание лица, ДНК, ладонь руки, сетчатка глаза, запах, голос.\nПоведенческие — связаны с поведением человека. Например, походка и речь. Иногда для этого класса биометрии используется термин англ. behaviometrics.>>>",
            "Основные определения, используемые в сфере биометрических приборов[3]:\n<<<Универсальность — каждый человек должен обладать измеряемой характеристикой.\nУникальность — насколько хорошо человек отделяется от другого с биометрической точки зрения.\nПостоянство — мера того, в какой степени выбранные биометрические черты остаются неизменными во времени (например, в процессе старения).\nВзыскания — простота осуществления измерения.\nПроизводительность — точность, скорость и надёжность используемых технологий.\nПриемлемость — степень достоверности технологии.\nУстранение — простота использования замены.>>>",
            "Биометрическая система может работать в двух режимах:\n<<<Верификация — сравнение один к одному с биометрическим шаблоном. Проверяет, что человек тот, за кого он себя выдает. Верификация может быть осуществлена по смарт-карте, имени пользователя или идентификационному номеру.\nИдентификация — сравнение один ко многим: после «захвата» биометрических данных идет соединение с биометрической базой данных для определения личности. Идентификация личности проходит успешно, если биометрический образец уже есть в базе данных.>>>",
            "Используемые показатели эффективности биометрических систем[4]:\n<<<Коэффициент ложного приема (FAR), или коэффициент ложного совпадения (FMR) FAR — коэффициент ложного пропуска, вероятность ложной идентификации, то есть вероятность того, что система биоидентификации по ошибке признает подлинность (например, по отпечатку пальца) пользователя, не зарегистрированного в системе FMR — вероятность, что система неверно сравнивает входной образец с несоответствующим шаблоном в базе данных.\nКоэффициент ложного отклонения (FRR), или коэффициент ложного несовпадения (FNMR) FRR — коэффициент ложного отказа доступа — вероятность того, что система биоидентификации не признает подлинность отпечатка пальца зарегистрированного в ней пользователя. FNMR — вероятность того, что система ошибётся в определении совпадений между входным образцом и соответствующим шаблоном из базы данных. Система измеряет процент верных входных данных, которые были приняты неправильно.\nРабочая характеристика системы, или относительная рабочая характеристика (ROC) График ROC — это визуализация компромисса между характеристиками FAR и FRR. В общем случае сравнивающий алгоритм принимает решение на основании порога, который определяет, насколько близко должен быть входной образец к шаблону, чтобы считать это совпадением. Если порог был уменьшен, то будет меньше ложных несовпадений, но больше ложных приёмов. Соответственно, высокий порог уменьшит FAR, но увеличит FRR. Линейный график свидетельствует о различиях для высокой производительности (меньше ошибок — реже возникают ошибки).\nРавный уровень ошибок (коэффициент EER), или коэффициент переходных ошибок (CER) — это коэффициенты, при которых обе ошибки (ошибка приёма и ошибка отклонения) эквивалентны. Значение EER может быть с лёгкостью получено из кривой ROC. EER — это быстрый способ сравнить точность приборов с различными кривыми ROC. В основном, устройства с низким EER наиболее точны. Чем меньше EER, тем более точной будет система.\nКоэффициент отказа в регистрации (FTE или FER) — коэффициент, при котором попытки создать шаблон из входных данных безуспешны. Чаще всего это вызвано низким качеством входных данных.\nКоэффициент ошибочного удержания (FTC) — в автоматизированных системах это вероятность того, что система не способна определить биометрические входные данные, когда они представлены корректно.\nЁмкость шаблона — максимальное количество наборов данных, которые могут храниться в системе.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Биометрия"
    },
    {
        "task": [
            "Идеальный бэкдор[править | править код]<<<сложно обнаружить;\nможно использовать многократно;\nлегко отрицать — выглядит как ошибка, и в случае обнаружения разработчик может сослаться, что допустил эту ошибку случайно и злого умысла не имел;\nэксплуатируем только при знании секрета — только тот, кто знает, как активируется бэкдор, может им воспользоваться;\nзащищён от компрометации предыдущими использованиями — даже если бэкдор был обнаружен, то невозможно установить, кем он до этого эксплуатировался и какой информацией завладел злоумышленник;\nсложно повторить — даже если бэкдор был кем-то найден, то его невозможно будет использовать в другом коде или в другом устройстве.>>>",
            "Распространённые принципы создания бэкдоров в алгоритмах[править | править код]<<<слабая устойчивость алгоритма к криптоанализу;\nспециально подобранные константы — алгоритм может стать неустойчивым к криптоанализу при выборе определённых значений констант, используемых в его работе;\nсложность в безопасной реализации — это означает, что безопасная реализация алгоритма работает слишком медленно, и все будут использовать небезопасный вариант, что и выгодно злоумышленнику.>>>",
            "SHA1 — современная раундовая хеш-функция. Алгоритм хеширования следующий:\n<<<Инициализируются 32-битные значения \n\n\n\na\n=\n\nh\n\n0\n\n\n,\nb\n=\n\nh\n\n1\n\n\n,\nc\n=\n\nh\n\n2\n\n\n,\nd\n=\n\nh\n\n3\n\n\n,\ne\n=\n\nh\n\n4\n\n\n\n\n{\\displaystyle a=h_{0},b=h_{1},c=h_{2},d=h_{3},e=h_{4}}\n\n\nВходное сообщение разбивается на блоки длиной 512 бит\nКаждый блок сообщения обрабатывается и дополняется специальным образом, по алгоритму, определённому в стандарте\nПолученный блок сообщения хэшируется в 4 этапа по 20 раундов в каждом, причём для каждого этапа используется своя константа \n\n\n\n\nK\n\n1\n\n\n,\n\nK\n\n2\n\n\n,\n\nK\n\n3\n\n\n\n\n{\\displaystyle K_{1},K_{2},K_{3}}\n\n или \n\n\n\n\nK\n\n4\n\n\n\n\n{\\displaystyle K_{4}}\n\n\nВыходом функции для каждого блока будут новые значения \n\n\n\na\n,\nb\n,\nc\n,\nd\n,\ne\n\n\n{\\displaystyle a,b,c,d,e}\n\n, которые добавляются к результату: \n\n\n\n\nh\n\n0\n\n\n=\n\nh\n\n0\n\n\n+\na\n,\n\nh\n\n1\n\n\n=\n\nh\n\n1\n\n\n+\nb\n,\n\nh\n\n2\n\n\n=\n\nh\n\n2\n\n\n+\nc\n,\n\nh\n\n3\n\n\n=\n\nh\n\n3\n\n\n+\nd\n,\n\nh\n\n4\n\n\n=\n\nh\n\n4\n\n\n+\ne\n\n\n{\\displaystyle h_{0}=h_{0}+a,h_{1}=h_{1}+b,h_{2}=h_{2}+c,h_{3}=h_{3}+d,h_{4}=h_{4}+e}\n\n\nИтоговым результатом хеширования будет 160-битное значение полученное конкатенацией пяти 32-битных значений \n\n\n\n\nh\n\n0\n\n\n,\n\nh\n\n1\n\n\n,\n\nh\n\n2\n\n\n,\n\nh\n\n3\n\n\n,\n\nh\n\n4\n\n\n\n\n{\\displaystyle h_{0},h_{1},h_{2},h_{3},h_{4}}\n\n после обработки последнего блока сообщения.>>>",
            "Аппаратные бэкдоры имеют ряд преимуществ над программными:\n<<<Не могут быть обнаружены антивирусами, сканерами кода и другим защитным ПО.\nНе могут быть устранены обновлением или заменой программного обеспечения.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Бэкдор"
    }
]