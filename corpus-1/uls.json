[
    {
        "task": [
            "Главная отличительная особенность данного семейства ПК — аппаратная совместимость с IBM PC-компьютерами и установленные на них полноценные операционные системы, такие как:\n<<<семейство Microsoft Windows NT (Windows XP Tablet PC Edition, Windows 7).\nApple Mac OS X.\nLinux (полная настольная сборка одного из дистрибутивов этой ОС).>>>",
            "Главное достоинство:\n<<<Полная программная совместимость с огромным количеством программного обеспечения, написанным для полноценных операционных систем семейства Microsoft Windows NT (Windows XP Tablet PC Edition, Windows Vista, Windows 7), используемых также и на настольных компьютерах.>>>",
            "Недостатки по сравнению с интернет-планшетами, не совместимыми с IBM PC-компьютерами[3]:\n<<<Имеют старый интерфейс классических операционных систем Microsoft Windows, созданный для настольных компьютеров, только лишь немного адаптированный для мультитач-экранов[4];\nМенее энергоэффективны — меньше работают от одного заряда батареи;\nБолее тяжёлые;\nБолее дорогие.>>>",
            "Главная отличительная особенность данного семейства компьютеров — это аппаратная несовместимость с IBM PC-компьютерами и установленная на них разновидность мобильных операционных систем, обычно используемых в смартфонах, таких как:\n<<<iOS (Apple).\nAndroid (Google).\nWindows RT (Microsoft).\nBlackBerry Tablet OS (BlackBerry).\nTizen (Intel / Samsung).\nOpen webOS (LG Electronics).\nSailfish OS (Jolla).\nMaemo OS (Nokia).>>>",
            "Или ориентированные на облачные сервисы и веб-приложения ОС, такие как:\n<<<Chrome OS (Google).\nJolicloud.>>>",
            "Основные качества, отличающие интернет-планшет от планшетного ПК:\n<<<низкая стоимость (в пределах 80—500$);\nсенсорный экран для работы при помощи пальцев;\nупрощённый пользовательский интерфейс (больше похож на интерфейс смартфона, чем ПК);\nразвитые средства беспроводного интернет-соединения (Wi-Fi, 3G/4G);\nдлительное время автономной работы, которым ранее могли похвастаться лишь сотовые телефоны;\nзащищённость от хакерских атак.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Планшетный_компьютер"
    },
    {
        "task": [
            "В настоящее время в интернете существует достаточно большое количество служб, обеспечивающих работу со всем спектром ресурсов.\nНаиболее известными среди них являются:\n<<<служба DNS, или система доменных имён, обеспечивающая возможность использования для адресации узлов сети мнемонических имён вместо числовых адресов;\nэлектронная почта (E-mail), обеспечивающая возможность обмена сообщениями одного человека с одним или несколькими абонентами;\nслужба IRC, предназначенная для поддержки текстового общения в реальном времени (chat);\nтелеконференции, или группы новостей (Usenet), обеспечивающие возможность коллективного обмена сообщениями;\nслужба FTP — система файловых архивов, обеспечивающая хранение и пересылку файлов различных типов;\nслужба Telnet, предназначенная для управления удалёнными компьютерами в терминальном режиме;\nWorld Wide Web (WWW, W3, «Всемирная паутина») — гипертекстовая (гипермедиа) система, предназначенная для интеграции различных сетевых ресурсов в единое информационное пространство;\nПотоковое мультимедиа.>>>",
            "Для стандартных служб также стандартизируется и интерфейс взаимодействия с протоколами транспортного уровня. В частности, за каждым программным сервером резервируются стандартные номера TCP- и UDP-портов, которые остаются неизменными независимо от особенностей той или иной фирменной реализации как компонентов сервиса, так и транспортных протоколов. Номера портов клиентского программного обеспечения так жёстко не регламентируются. Это объясняется следующими факторами:\n<<<во-первых, на пользовательском узле может функционировать несколько копий клиентской программы, и каждая из них должна однозначно идентифицироваться транспортным протоколом, то есть за каждой копией должен быть закреплён свой уникальный номер порта;\nво-вторых, клиенту важна регламентация портов сервера, чтобы знать, куда направлять запрос, а сервер сможет ответить клиенту, узнав адрес из поступившего запроса.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Интернет"
    },
    {
        "task": [
            "Кэш центрального процессора разделён на несколько уровней. Максимальное количество кэшей — четыре. В универсальном процессоре в настоящее время число уровней может достигать трёх. Кэш-память уровня N+1, как правило, больше по размеру и имеет более низкие скорости доступа и передачи данных, чем кэш-память уровня N.\n<<<Самым быстрым является кэш первого уровня — L1 cache (level 1 cache). По сути, он является неотъемлемой частью процессора, поскольку расположен на одном с ним кристалле и входит в состав функциональных блоков. В современных процессорах обычно L1 разделён на два кэша — кэш команд (инструкций) и кэш данных (Гарвардская архитектура). Большинство процессоров без L1 не может функционировать. L1 работает на частоте процессора, и, в общем случае, обращение к нему может производиться каждый такт. Зачастую является возможным выполнять несколько операций чтения/записи одновременно.>>>",
            "Самым быстрым является кэш первого уровня — L1 cache (level 1 cache). По сути, он является неотъемлемой частью процессора, поскольку расположен на одном с ним кристалле и входит в состав функциональных блоков. В современных процессорах обычно L1 разделён на два кэша — кэш команд (инструкций) и кэш данных (Гарвардская архитектура). Большинство процессоров без L1 не может функционировать. L1 работает на частоте процессора, и, в общем случае, обращение к нему может производиться каждый такт. Зачастую является возможным выполнять несколько операций чтения/записи одновременно.<<<Вторым по быстродействию является кэш второго уровня — L2 cache, который обычно, как и L1, расположен на одном кристалле с процессором. В ранних версиях процессоров L2 реализовывался в виде отдельного набора микросхем памяти на материнской плате. Объём - L2 от 128 кбайт до 1—12 Мбайт. В современных многоядерных процессорах кэш второго уровня, находясь на том же кристалле, является памятью раздельного пользования — при общем объёме кэша в n Мбайт на каждое ядро приходится по n/c Мбайта, где c — количество ядер процессора.>>>",
            "Вторым по быстродействию является кэш второго уровня — L2 cache, который обычно, как и L1, расположен на одном кристалле с процессором. В ранних версиях процессоров L2 реализовывался в виде отдельного набора микросхем памяти на материнской плате. Объём - L2 от 128 кбайт до 1—12 Мбайт. В современных многоядерных процессорах кэш второго уровня, находясь на том же кристалле, является памятью раздельного пользования — при общем объёме кэша в n Мбайт на каждое ядро приходится по n/c Мбайта, где c — количество ядер процессора.<<<Кэш третьего уровня наименее быстродействующий, но он может быть очень большим — более 24 Мбайт. L3 медленнее предыдущих кэшей, но всё равно значительно быстрее, чем оперативная память. В многопроцессорных системах находится в общем пользовании и предназначен для синхронизации данных различных L2.>>>",
            "Кэш третьего уровня наименее быстродействующий, но он может быть очень большим — более 24 Мбайт. L3 медленнее предыдущих кэшей, но всё равно значительно быстрее, чем оперативная память. В многопроцессорных системах находится в общем пользовании и предназначен для синхронизации данных различных L2.<<<Существует четвёртый уровень кэша, применение которого оправдано только для многопроцессорных высокопроизводительных серверов и мейнфреймов. Обычно он реализован отдельной микросхемой.>>>",
            "Применение кэширования внешних накопителей обусловлено следующими факторами:\n<<<скорость доступа процессора к оперативной памяти в сотни и более раз больше, чем к памяти внешних накопителей;\nпроизводительность дисковых устройств хранения (жесткие, гибкие, оптические диски) максимальна при чтении-записи нескольких последовательно расположенных блоков и значительно уменьшается при одиночных запросах в разные места диска, что связано с инерцией механического привода головки.\nкрайне неравномерная частота обращения к различным блокам памяти внешних накопителей:\nиспользование части блоков несколькими процессами одновременно, по чтению и записи (например, в базах данных)\nочень частое чтение части блоков (индексные файлы, каталоги в файловой системе)\nочень частая запись части блоков (файлы логов, журналов, баз данных; метаданные файловой системы).>>>",
            "Существуют две основные политики записи кэш-памяти — сквозная запись (write-through) и отложенная запись (write-back):\n<<<Сквозная запись — запись производится непосредственно в основную память (и дублируется в кэш), то есть запись не кэшируется.\nОтложенная запись — запись данных производится в кэш. Запись же в основную память производится позже (при вытеснении или по истечении времени), группируя в одной операции несколько операций записи в соседние ячейки. Технология обратной записи на некоторое время делает данные в основной памяти неактуальными, для самого ЦП эти неактуальности не заметны, но перед обращением к памяти другого ведущего системной шины (контроллера DMA, bus-master-устройства шины PCI) кэш должен быть записан в память принудительно. При использовании обратной записи в многопроцессорной системе кэши различных ЦП должны быть согласованы (или процессоры должны использовать одну кэш-память).>>>",
            "Изначально все заголовки буферов помещаются в список свободных буферов. Если процесс намеревается прочитать или модифицировать блок, то он выполняет следующий алгоритм:\n<<<пытается найти в хеш-таблице заголовок буфера с заданным номером;\nв случае, если полученный буфер занят, ждёт его освобождения;\nв случае, если буфер не найден в хеш-таблице, берёт первый буфер из хвоста списка свободных;\nв случае, если список свободных буферов пуст, то выполняется алгоритм вытеснения (см. ниже);\nв случае, если полученный буфер помечен как «грязный», выполняет асинхронную запись содержимого буфера во внешнюю память.\nудаляет буфер из хеш-таблицы, если он был помещён в неё;\nпомещает буфер в хеш-таблицу с новым номером.>>>",
            "Таким образом:\n<<<если процесс прочитал некоторый блок в буфер, то велика вероятность, что другой процесс при чтении этого блока найдёт буфер в оперативной памяти;\nзапись данных во внешнюю память выполняется только тогда, когда не хватает «чистых» буферов, либо по запросу.>>>",
            "Если список свободных буферов пуст, то выполняется алгоритм вытеснения буфера. Алгоритм вытеснения существенно влияет на производительность кэша. Существуют следующие алгоритмы:\n<<<Реализуемые с помощью таймера:\nLRU (англ. Least Recently Used) — вытесняется буфер, неиспользованный дольше всех;\nMRU (англ. Most Recently Used) — вытесняется последний использованный буфер;\nРеализуемые с помощью счётчика:\nLFU[en] (англ. Least Frequently Used) — вытесняется буфер, использованный реже всех;\nARC[en] (англ. Adaptive Replacement Cache) — алгоритм вытеснения, комбинирующий LRU и LFU, запатентованный IBM.>>>",
            "Кэш оперативной памяти состоит из следующих элементов:\n<<<набор страниц оперативной памяти, разделённых на буферы, равные по длине блоку данных соответствующего устройства внешней памяти;\nнабор заголовков буферов, описывающих состояние соответствующего буфера;\nхеш-таблицы, содержащей соответствие номера блока заголовку;\nсписки свободных буферов.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Кэш"
    },
    {
        "task": [
            "Эволюционное развитие конструкции модулей памяти, используемых в качестве ОЗУ компьютеров. Сверху вниз: DIP, SIPP, SIMM 30 pin, SIMM 72 pin, DIMM, DDR DIMM<<<Полупроводниковая статическая (англ. Static Random Access Memory, SRAM) — ячейки представляют собой полупроводниковые триггеры. Достоинства — небольшое энергопотребление, высокое быстродействие. Отсутствие необходимости производить «регенерацию». Недостатки — малый объём, высокая стоимость. Благодаря принципиальным достоинствам широко используется в качестве кеш-памяти процессоров в компьютерах.\nПолупроводниковая динамическая (англ. Dynamic Random Access Memory, DRAM) — каждая ячейка представляет собой конденсатор на основе перехода КМОП-транзистора. Достоинства — низкая стоимость, большой объём. Недостатки — необходимость периодического считывания и перезаписи каждой ячейки — т. н. «регенерации», и, как следствие, понижение быстродействия, большое энергопотребление. Процесс регенерации реализуется специальным контроллером, установленным на материнской плате или в центральном процессоре. DRAM обычно используется в качестве оперативной памяти (ОЗУ) компьютеров.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Запоминающее_устройство_с_произвольным_доступом"
    },
    {
        "task": [
            "Существовали и другие варианты объединения ячеек в массив, но они не прижились.\n<<<\n\n\nПрограммирование флеш-памяти\n\n\n\nСтирание флеш-памяти\n\n>>>",
            "NOR-флеш наиболее применима в устройствах с энергонезависимой памятью относительно небольшого объёма, требующих быстрого доступа по случайным адресам и с гарантией отсутствия сбойных элементов:\n<<<Встраиваемая память программ однокристальных микроконтроллеров. Типовые объёмы — от 1 кбайта до 1 Мбайта.\nСтандартные микросхемы ПЗУ произвольного доступа для работы вместе с микропроцессором.\nСпециализированные микросхемы начальной загрузки компьютеров (POST и BIOS), процессоров ЦОС и программируемой логики. Типовые объёмы — единицы и десятки мегабайт.\nМикросхемы хранения среднего размера данных, например, DataFlash. Обычно снабжаются интерфейсом SPI и упаковываются в миниатюрные корпуса. Типовые объёмы — от сотен кбайт до технологического максимума.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Флеш-память"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Пиксель"
    },
    {
        "task": [
            "Помимо обычных сотовых телефонов, существуют такие разновидности, как:\n<<<Камерофон — мобильные телефоны с функцией фотоаппарата и/или видеокамеры. В настоящее время данное название практически вышло из обихода в первоначальном понимании, поскольку большинство современных аппаратов оснащено встроенными фото/видеокамерами. Тем не менее, так часто называют мультимедийные телефоны с расширенными фотовозможностями (в частности, телефоны с высоким качеством камеры).\nМультимедийный телефон (плеерфон, мьюзикфон, музыкальный телефон) — специализированные мобильные телефоны с расширенными возможностями воспроизведения аудио- и видеофайлов и т. п.. Этот термин, как и «камерофон», выходит из употребления, поскольку большая часть современных средних по цене аппаратов может проигрывать цифровые фонограммы и оснащается разъёмом для карты памяти. Тем не менее, в ряде мультимедийных телефонов упор делается именно на аудиовозможностях (например, Sony Ericsson серии W (Walkman) со встроенным плеером, Motorola серии ROKR; W, Nokia серии X, являющиеся в основном бюджетными телефонами, за некоторыми исключениями).\nСмартфон — мобильный телефон с полноценной операционной системой (Symbian OS, Windows Mobile, Palm OS, GNU/Linux, Android, Apple iOS, MeeGo и др.). Такие телефоны позволяют устанавливать любые новые программы, поддерживаемые данной операционной системой и расширяющие их функциональность: IM-клиенты, офисные пакеты, органайзеры, аудио- и видеопроигрыватели, программы управления звонками, браузеры и т. д. Для смартфонов существуют и вирусы (в то время как возможность внедрения в обычные телефоны деструктивного кода весьма затруднительна, в силу закрытости ОС).  С появлением таких телефонов в русском языке за телефонами, не обладающими такими функциями (в частности, «кнопочными», т. к. большинство современных смартфонов имеет сенсорный экран вместо клавиатуры и дисплея), закрепился жаргонный термин «звонилка».\nКоммуникатор — карманный персональный компьютер (КПК) с функциями мобильного телефона. Иная ветвь мобильных устройств по отношению к смартфонам, но имеющая тенденцию к сближению между ними (в настоящее время функциональность и тех и других в целом сходится). Как и смартфоны, работают под управлением операционных систем, открытых для разработки сторонних приложений.  Возможности смартфонов и коммуникаторов, как и любых «старших» компьютеров, зависят от установленных программ и «железа».\nБизнес-телефон — телефон со специализированными функциями для корпоративных пользователей. Такие телефоны позволяют просматривать текстовые документы и электронные таблицы, работать с электронной почтой, синхронизировать данные органайзера с корпоративным сервером и т. п. Значительная часть бизнес-телефонов является смартфонами или коммуникаторами, часто встречаются устройства с QWERTY-клавиатурой. Иногда такие телефоны, обладая значительной функциональностью, лишены фотокамеры (для организаций с повышенными требованиями безопасности).\nИмиджевый телефон — телефоны, главная особенность которых — стильный внешний вид и броская функциональность (в частности — автоматизированное раскрытие). В имиджевых телефонах часто применяются необычные форм-факторы и стильные (и дорогостоящие) материалы — при изготовлении таких телефонов для отделки корпуса нередко используются благородные металлы и драгоценные камни. Функциональность таких устройств обычно невысока, хотя, в виде исключения, среди них встречаются смартфоны и коммуникаторы. Примером имиджевых телефонов являются модели от Vertu, хотя таковые обычно имеются и в линейках моделей у многих производителей.\nОдноразовый телефон — телефон, обладающий базовой функциональностью (зачастую без дисплея и даже SIM-карты, некоторые в формате кредитной карты), предназначенный для звонков до исчерпания баланса или до окончания заряда батарей[3][4], далее выбрасываемый или утилизируемый.\nТелефон для пожилых людей («бабушкофон», «дедушкофон») — телефон, обладающий базовой функциональностью, кнопкой SOS, большими кнопками и крупным шрифтом на дисплее (зачастую монохромном). Также эти телефоны могут снабжаться светодиодом, выполняющим функцию фонарика.>>>",
            "Базовые[править | править код]<<<телефонный справочник\nголосовое управление\nвибровызов («виброзвонок») — полезен в зашумлённых местах, или же там, где нельзя нарушать тишину\nсменные мелодии звонков (чаще всего форматов MIDI, MMF, WAV, MP3 и AAC)\nподключение гарнитуры (Hands Free) (наушники + микрофон)\nгромкоговорящая связь («громкая связь»)\nчасы\nбудильник\nсекундомер\nтаймер\nкалендарь\nкалькулятор\nхранение данных (встроенная флэш-память, поддержка сменных карт флэш-памяти (MMC,RS MMC, SD, Memory Stick, MicroSD, Memory Stick Micro, Mini SD и др.), также жёсткий диск)\nигры и приложения (на Java (J2ME), Brew, Android, Windows Mobile)>>>",
            "Деловые[править | править код]<<<инженерный калькулятор\nконвертер валют\nдиктофон\nорганайзер\nконференц-связь — в этом режиме могут разговаривать несколько человек (для работы функции необходима поддержка функции оператора)\nОрганайзер паролей — возможность записать несколько паролей и скрыть их под единым паролем>>>",
            "Фотосъёмка с мобильного устройства<<<радиоприёмник\nцифровой проигрыватель\nвидеопроигрыватель\nТВ-тюнер\nкараоке (LG F1200)\nцифровой фотоаппарат, цифровая видеокамера (см. камерафон)\nпростые графические и видеоредакторы\nTrackID — сервис, встроенный в телефоны Sony Ericsson (серия Walkman (начиная с W810), K-серия), позволяющий узнать название и исполнителя музыкального произведения\nФункция получения некоторой информации от радиостанции (RDS)>>>",
            "Обмен сообщениями[править | править код]<<<SMS — служба коротких сообщений SMS (Short Message Service)\nEMS — служба расширенных сообщений EMS (Enhanced Message Service — расширение SMS, позволяющее форматировать текст, добавлять смайлик, черно-белые (а иногда и цветные) изображения, звуки и простые мелодии)\nMMS — служба мультимедийных сообщений MMS (Multimedia Messaging Service) позволяет добавлять в сообщения звук, изображение (например, фотографию) или небольшой видеоролик.\nВстроенный или дополнительно устанавливаемый IM-клиент\nCB (Cell Broadcast) — приём информационных сообщений от оператора>>>",
            "Обмен данными[править | править код]<<<через факс\nчерез модем (в том числе доступ в Интернет, по протоколам CSD, GPRS, EDGE, HSDPA, EV-DO, Wi-Fi, WiMAX и др.)\nчерез встроенный WAP-браузер\nчерез встроенный или дополнительно устанавливаемый Веб-браузер\nчерез средства для работы с электронной почтой\nчерез дата-кабель\nчерез ИК порт\nчерез Bluetooth\nчерез WiFi\nчерез NFC>>>",
            "Иногда производители сотовых телефонов включают в них и более экзотические функции[5]:\n<<<GPS\nPush-to-talk (PTT) — в этом режиме телефон имитирует портативную рацию\nфонарик\nфотокамера (присутствует во всех новых телефонах)\nпринтер (Polaroid HS-RSS)\nсканер изображений\nкомпас\nсканер отпечатков пальцев\nпреобразование речи в текст и наоборот (некоторые аппараты Samsung и Nokia)\nвидеокамера (присутствует во всех новых телефонах)\nLocation-based services\nСолнечная панель (Samsung S7550 Blue Earth) (позволяет заряжать телефон от солнца, 1 час = 10 мин разговора)\nШагомер (Samsung S7550 Blue Earth) (количество сохранённых деревьев, потраченной энергии, уменьшение выброса CO2)\nТВ-тюнер (аналоговый или цифровой; многие китайские модели)\nПроектор, встроенный в телефон (многие китайские модели, а также фирменные)\nТелефон-часы (многие китайские модели)\niFan — зарядка iPhone силой ветра (крепится на руль велосипеда)\nТеплогенератор, встроенный в телефон Nokia E-Cu (концепт)>>>",
            "Телефоны могут:\n<<<иметь внешнюю или встроенную (внутреннюю) антенну\nразличаться по количеству дисплеев: с одним, двумя, редко — с тремя.\nобладать как обычным, так и сенсорным дисплеем.\nобладать как обычной телефонной 3×4, так и расширенной (напр. BlackBerry) клавиатурой, также полноценной (или урезанной) QWERTY-клавиатурой, также клавиатурой со шрифтом Брайля, могут и вообще не иметь клавиатуры (см. форм-фактор Lipstick).\nиметь как один, так и два (стерео) встроенных динамика\nработать как в одном типе сети (напр. GSM), так и в нескольких\nработать в одном диапазоне (напр. GSM 800 МГц), так и в нескольких\nиметь слот для карты памяти>>>",
            "Также существуют такие исполнения сотовых телефонов, как:\n<<<Стационарный — аналогичен обычному проводному телефону. Используется вместо обычного телефона там, где проведение выделенной телефонной линии невозможно или нецелесообразно (телефонизации удалённых объектов: склады, цеха, бытовки, дачи или коттеджи). Имеет встроенный аккумулятор и обычно внешнюю антенну (штыревую всенаправленную), что позволяет использовать аппарат в зонах слабого приёма сигнала сотовой сети. Конечно, такие телефоны хотя и являются сотовыми, но не являются мобильными.\nАвтомобильный — аналогичен стационарному, но предназначен для установки в автомобиль и обычно оптимизирован для удобной работы в автомобиле. Питание имеет от автомобильного аккумулятора (Nokia 810).>>>",
            "(Samsung A100) Один из первых складных телефонов компании Samsung производства 2000 года<<<Моноблок (т. н. классический) — корпус не содержит движущихся частей.\nс сенсорным дисплеем — смартфон, где отсутствуют какие-либо клавиши (за исключением двух-трёх), а для каких либо действий используется прикосновения пальцев или стилуса к экрану (Nokia N8, Samsung Galaxy S5, IPhone 5s и др.)\nС флипом — с откидной крышкой, закрывающей клавиатуру. Обычно на этой крышке располагают микрофон, что позволяет телефону иметь удобное расстояние между микрофоном и динамиком даже при небольшом размере телефона. Одно время были очень популярны, на данный же момент такая конструкция почти не используется, главным образом из-за распространения «раскладушек» и падения цен на них.\n«Раскладушка» («книжка», «лягушка», «жаба», «ракушка») — складной корпус, состоящий из двух частей и напоминающий блокнот или пудреницу. Обычно на верхней крышке находится дисплей и динамик, а в нижней части — клавиатура и микрофон. Помимо внутреннего (основного) дисплея, такой телефон часто имеет и небольшой внешний дисплей, доступный в сложенном состоянии. Обычно раскладушки раскрываются на угол меньше 180 градусов, но существуют и модели этого форм-фактора, раскладываемые на 180 градусов.\nПсевдораскладушка — похожа на «раскладушку», но экран находится в нижней её части, а на откидной крышке только динамик. В отличие от флипа, верхняя крышка «псевдораскладушки» закрывает и дисплей. Часто в верхней крышке оставляют отверстие или делают часть крышки (а иногда и всю) прозрачной, чтобы можно было видеть дисплей в закрытом состоянии.\nДвойная раскладушка — корпус, который может быть как горизонтальной, так и вертикальной «раскладушкой». Применяется в коммуникаторах: вертикальное открытие даёт доступ к телефонным функциям, а горизонтальное — к большому экрану и полноценной QWERTY-клавиатуре.\nСлайдер — состоит из двух частей, одна из которых сдвигается (обычно вверх) относительно другой.\nБоковой слайдер — похож по принципу на обычный слайдер, но корпус выезжает не вверх, а вбок, иногда откидываясь при этом под небольшим углом. Применяется, как правило, в коммуникаторах и смартфонах, обычно оснащеных сенсорным экраном.\nРотатор — телефон, где вторая половина не откидывается (в отличие от раскладушки), а поворачивается относительно первой.\nРотационная раскладушка — телефон, вторая половина которого может как поворачиваться (rotary), так и откидываться.\nБраслет (наручный телефон, часофон) — телефон, носимый на запястье.\nТубус (англ. Lipstick) — корпус, по форме напоминающий тюбик губной помады, пенал или авторучку. Обладает нетрадиционными органами управления (часто только джойстик). Применяется в имиджевых моделях.\nMMS-камера — устройство, пересылающее фотографию охраняемого объекта в виде MMS-сообщения, позволяет прослушивать охраняемое помещение.>>>",
            "Основные производители[править | править код]<<<\nMotorola — Список моделей сотовых телефонов Motorola :: Категория:Мобильные телефоны Motorola\nNokia — Список моделей сотовых телефонов Nokia :: Категория:Мобильные телефоны Nokia\nLG — Категория:Мобильные телефоны LG :: Шаблон:Сотовые телефоны LG\nSony Ericsson — Список моделей сотовых телефонов Sony Ericsson :: Категория:Мобильные телефоны Sony Ericsson\nSamsung — Список моделей сотовых телефонов Samsung :: Категория:Мобильные телефоны Samsung\nSiemens — Сотовые телефоны Siemens :: Категория:Мобильные телефоны Siemens (подразделение продано фирме BenQ)>>>",
            "В России[править | править код]<<<Атлас — М-663С «Атлас»\nBeeline (ВымпелКом)>>>",
            "Компьютерные программы для работы с мобильным телефоном:\n<<<BlackBerry Desktop Software\nHTC Sync и HTC Sync Manager\nMobile Phone Manager (Siemens)\nNokia PC Suite\nSamsung Kies\nSony Ericsson PC Suite\nSony PC Companion\niTunes\nZune>>>",
            "В искусстве и культуре<<<В фильме Чарли Чаплина «Цирк» в кадр попала женщина, своими манерами поведения напоминающая сотового абонента. Однако, дата выхода фильма — 1928 год. На самом деле в руке она держит одну из первых моделей электрического слухового аппарата.\nStar Trek (1966—1969) — герои сериала общались друг с другом при помощи коммуникаторов. Идея создания мобильного телефона возникла у доктора Мартина Купера именно во время просмотра этого телесериала[44].\nМобильный телефон (мобила) стал неотъемлемым атрибутом так называемого нового русского в начале-середине 90-х годов.\nВ 2003 году вышел саундтрек Сергея Шнурова «Мобильник» к фильму «Бумер».\nВ 2004 году вышел фильм режиссёра Дэвида Р. Эллиса «Сотовый».\nВ 2006 году вышел роман «Мобильник» известного американского писателя Стивена Кинга.\nВ 2007 на экраны вышел фильм режиссёра Джеймса Хута «Чёртов мобильник».\nВ 2010 году вышел видеоклип на песню «Telephone» в исполнении Леди Гаги и Бейонсе.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Сотовый_телефон"
    },
    {
        "task": [
            "Для получения трёхмерного изображения на плоскости требуются следующие шаги:\n<<<моделирование — создание трёхмерной математической модели сцены и объектов в ней;\nтекстурирование — назначение поверхностям моделей растровых или процедурных текстур (подразумевает также настройку свойств материалов — прозрачность, отражения, шероховатость и пр.);\nосвещение — установка и настройка источников света;\nанимация (в некоторых случаях) — придание движения объектам;\nдинамическая симуляция (в некоторых случаях) — автоматический расчёт взаимодействия частиц, твёрдых/мягких тел и пр. с моделируемыми силами гравитации, ветра, выталкивания и др., а также друг с другом;\nрендеринг (визуализация) — построение проекции в соответствии с выбранной физической моделью;\nкомпозитинг (компоновка) — доработка изображения;\nвывод полученного изображения на устройство вывода — дисплей или специальный принтер.>>>",
            "Моделирование сцены (виртуального пространства моделирования) включает в себя несколько категорий объектов:\n<<<Геометрия (построенная с помощью различных техник (например, создание полигональной сетки) модель, например, здание);\nМатериалы (информация о зрительных свойствах модели, например, цвет стен и отражающая/преломляющая способность окон);\nИсточники света (настройки направления, мощности, спектра освещения);\nВиртуальные камеры (выбор точки и угла построения проекции);\nСилы и воздействия (настройки динамических искажений объектов, применяется в основном в анимации);\nДополнительные эффекты (объекты, имитирующие атмосферные явления: свет в тумане, облака, пламя и пр.)>>>",
            "Наиболее популярными пакетами сугубо для моделирования являются:\n<<<Pixologic Zbrush;\nAutodesk Mudbox, Autodesk 3Ds Max;\nRobert McNeel & Assoc. Rhinoceros 3D;\nTrimble SketchUp.\nBlender\nКомпас (САПР)\nCinema4D>>>",
            "Заключается в создании, направлении и настройке виртуальных источников света. При этом в виртуальном мире источники света могут иметь негативную интенсивность, отбирая свет из зоны своего «отрицательного освещения». Как правило, пакеты 3D-графики предоставляют следующие типы источников освещения:\n<<<Omni light (Point light) — всенаправленный;\nSpot light — конический (прожектор), источник расходящихся лучей;\nDirectional light — источник параллельных лучей;\nArea light (Plane light) — световой портал, излучающий свет из плоскости;\nPhotometric — источники света, моделируемые по параметрам яркости свечения в физически измеримых единицах, с заданной температурой накала.>>>",
            "Одно из главных призваний трёхмерной графики — придание движения (анимация) трёхмерной модели, либо имитация движения среди трёхмерных объектов.\nУниверсальные пакеты трёхмерной графики обладают весьма богатыми возможностями по созданию анимации. Существуют также узкоспециализированные программы, созданные сугубо для анимации и обладающие очень ограниченным набором инструментов моделирования:\n<<<Autodesk MotionBuilder\nPMG Messiah Studio>>>",
            "Существует несколько технологий рендеринга, часто комбинируемых вместе. Например:\n<<<Z-буфер (используется в OpenGL и DirectX 10);\nСканлайн (scanline) — он же Ray casting («бросание луча», упрощённый алгоритм обратной трассировки лучей) — расчёт цвета каждой точки картинки построением луча из точки зрения наблюдателя через воображаемое отверстие в экране на месте этого пикселя «в сцену» до пересечения с первой поверхностью. Цвет пикселя будет таким же, как цвет этой поверхности (иногда с учётом освещения и т. д.);\nТрассировка лучей (рейтрейсинг, англ. raytracing) — то же, что и сканлайн, но цвет пикселя уточняется за счёт построения дополнительных лучей (отражённых, преломлённых и т. д.) от точки пересечения луча взгляда. Несмотря на название, применяется только обратная трассировка лучей (то есть как раз от наблюдателя к источнику света), прямая крайне неэффективна и потребляет слишком много ресурсов для получения качественной картинки;\nГлобальное освещение (англ. global illumination, radiosity) — расчёт взаимодействия поверхностей и сред в видимом спектре излучения с помощью интегральных уравнений.>>>",
            "Наиболее популярными системами рендеринга являются:\n<<<PhotoRealistic RenderMan (PRMan)\nMental ray\nV-Ray\nCoronaRenderer\nArnold Render\nFinalRender\nBrazil R/S\nCycles\nTurtle\nMaxwell Render\nFryrender\nIndigo Renderer\nLuxRender\nPOV-Ray>>>",
            "Вследствие большого объёма однотипных вычислений рендеринг можно разбивать на потоки (распараллеливать). Поэтому для рендеринга весьма актуально использование многопроцессорных систем. В последнее время активно ведётся разработка систем рендеринга, использующих GPU вместо CPU, и уже сегодня их эффективность для таких вычислений намного выше.\nК таким системам относятся:\n<<<Refractive Software Octane Render\nAAA studio FurryBall\nRandomControl ARION (гибридная)\nCycles\nV-Ray GPU Next\nLuxRender\nIray>>>",
            "Программные пакеты, позволяющие создавать трёхмерную графику, то есть моделировать объекты виртуальной реальности и создавать на основе этих моделей изображения, очень разнообразны. Последние годы устойчивыми лидерами в этой области являются коммерческие продукты, такие, как:\n<<<Autodesk 3ds Max\nAutodesk Maya\nAutodesk Softimage\nBlender\nCinema 4D\nHoudini\nModo\nLightWave 3D\nCaligari Truespace\nUnreal Engine\nUnity>>>",
            "Технологии апсемплинга, позволяющие большей части графического конвейера работать с более низким разрешением для повышения производительности, а затем вывести из этого изображение с более высоким разрешением, которое приближается к тому же уровню детализации, как если бы изображение было отрисовано с этим более высоким разрешением (это позволяет использовать более высокие графические настройки и/или частоту кадров для заданного выходного разрешения, в зависимости от предпочтений пользователя):\n<<<Deep learning super sampling (DLSS[en]) — семейство технологий улучшения и масштабирования изображений в реальном времени, разработанных компанией Nvidia, которые являются эксклюзивными для линейки видеокарт RTX, и доступны в ряде видеоигр (последняя версия DLSS 3.0).\nDeep learning anti-aliasing[en] – на основе алгоритмов сглаживания DLSS 2.0 без какого-либо масштабирования;\nFidelityFX Super Resolution (FSR, производная GPUOpen[en]) — конкурирующая технология от AMD (последняя версия FSR 3.0); в отличие от DLSS, доступен на любом «железе», но в то же время компания рекомендует хотя бы минимальную видеокарту с RT-ядрами; поддерживается в ограниченном числе игр;\nIntel XeSS[en] — технология от Intel, основанная на ИИ;\nLSFG — встроен в программу Lossless Scaling от Valve (работает на любых видеокартах, даже встроенных)[1].>>>",
            "Основные используемые в настоящее время технологии показа стереофильмов[4]:\n<<<Dolby 3D\nXpanD\nRealD\nIMAX>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Трёхмерная_графика"
    },
    {
        "task": [
            "Чтобы взаимодействие разработчиков происходило по принципу научного сотрудничества, необходимо было обеспечить, чтобы исходные тексты программ оставались доступными для чтения и критики всему научному сообществу с сохранением авторства произведений. Для этого Ричард Столлман сформулировал понятие свободное программное обеспечение, в котором отразились принципы открытой разработки программ в научном сообществе, сложившемся в американских университетах в 1970-е годы. Столлман явно сформулировал эти принципы, они же — критерии свободного программного обеспечения. Эти критерии оговаривают те права, которые авторы свободных программ передают любому пользователю:\n<<<Программу можно свободно использовать с любой целью («нулевая свобода»).\nМожно изучать, как программа работает, и адаптировать её для своих целей («первая свобода»). Условием этого является доступность исходного текста программы.\nМожно свободно распространять копии программы — в помощь товарищу («вторая свобода»).\nПрограмму можно свободно улучшать и публиковать свою улучшенную версию — с тем, чтобы принести пользу всему сообществу («третья свобода»). Условием этой третьей свободы является доступность исходного текста программы и возможность внесения в него модификаций и исправлений.>>>",
            "Пользователи, которые бы иначе предпочли свободное ПО несвободному, продолжают использовать несвободное по следующим причинам:\n<<<В странах, где неавторизованное распространение объектов авторского права является обычным делом, нет ни юридического, ни экономического стимула переходить на свободное ПО. К тому же пользователи, привыкшие к проприетарному ПО, не хотят тратить время на изучение свободного аналога, если это не даёт им прямой выгоды в короткий срок.\nВ некоторых отраслях мало или вообще нет свободного ПО высокого качества.[28] А именно:\nПрограммное обеспечение, в котором доля работы программиста мала по сравнению с работой художника, редактора и т. д. Например: квесты и многие другие жанры игр, электронные словари.\nРазвивающиеся отрасли, для которых мало пригодных к использованию общепринятых алгоритмов, — машинный перевод, распознавание речи с большим словарём и, в меньшей степени, синтез речи. Кроме того, требуется ручная обработка большого количества текстовых или аудиоданных.\nОтрасли, связанные со сложной высокооплачиваемой работой (фотообработка, инженерное проектирование), — так как создать программу, близкую по сложности и качеству к проприетарным стандартам де‐факто очень трудно, то свободных аналогов меньше, чем в других отраслях, и пользователю не всегда удаётся найти подходящий для него продукт.\nОтрасли, в которых существуют платные или собственнические стандарты де-факто, например Pantone в допечатной подготовке.\nДля аппаратного обеспечения в отраслях, где господствует лишь несколько производителей, в свободном доступе часто отсутствуют не только драйверы, но и спецификации.\nРазнообразие лицензий тоже может иметь отрицательное влияние. Пример (не очень удачный): драйвер файловой системы ZFS выпущен под лицензией, несовместимой с GNU GPL 2, и потому долгое время мог быть использован[уточнить] на самой популярной платформе для СПО — Linux — только посредством FUSE, приводившего к сильному замедлению производительности этой ФС. Однако вскоре вышла и реализация ZFS в виде модуля ядра для Linux (то есть полноценно), единственным условием использования которого является недопустимость их совместного (слитного) распространения.[29]\nПроприетарное ПО из-за маркетинговых методов настолько популярно, что пользователи не знают о существовании других подобных программ.\nПроприетарное ПО зачастую использует собственные форматы файлов и протоколы обмена, описание которых отсутствует в свободном доступе. Поэтому переход может быть затруднён проблемами совместимости с другим ПО или с существующими форматами файлов (вариант замыкания на поставщике).\nНекоторое проприетарное ПО как требует огромных финансовых затрат на создание и поддержание в нужном качестве, так и либо чрезвычайно сложно, либо содержит большое количество различных патентов из других источников, к примеру драйверы видеоускорителей. В свою очередь, из-за стартовой, малой процентной распространённости открытого решения компания-производитель не способна существенно повысить финансирование, а значит, предоставить качественную поддержку этой области. Как результат, количество ПО, использующего и требующего качественных драйверов, невелико — что, соответственно, сдерживает распространённость открытых решений. В связи с тем драйвера для видеоускорителей под Linux, хоть и предоставляются всеми крупными компаниями, но являются или полностью закрытыми и менее эффективными, чем их варианты под Windows, или открытыми, но сознательно создаваемыми менее производительными и функциональными[30].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Свободное_программное_обеспечение"
    },
    {
        "task": [
            "К аппаратному обеспечению обычно относят:\n<<<центральный процессор (процессоры)\nоперативную память\nсистемную логику\nпериферийные устройства\nсетевое оборудование>>>",
            "Примеры аппаратной реализации алгоритмов, которые могли бы быть реализованы программно:\n<<<3D графика\nDMA-режим работы IDE устройств\nFIFO-буффер у COM-портов\nФизический процессор для обсчёта поведения объектов в компьютерных играх\nМатематический сопроцессор, ускоряющий операции с плавающей запятой (в современных процессорах интегрирован)\nФункции файрвола>>>",
            "В состав системного блока входят:\n<<<материнская плата с припаянными или установленными на ней:\nЧипсет — взаимосвязанный набор микросхем, логика которого в наибольшей степени определяет то, каковы прочие элементы компьютера.\nцентральный процессор\nBIOS — программное обеспечение в ПЗУ материнской платы.\nкулер охлаждения процессора как основного тепловыделяющего элемента современного компьютера.\nоперативная память и кэш\nслоты расширения шин — PCI, PCI-E, USB, FireWire, AGP (устарела), ISA (устарела), EISA (устарела)\nконтроллеры устройств — хранения: IDE, SCSI, SATA, SAS или других типов, находящиеся непосредственно на материнской плате (встроенные) либо на платах расширения.\nвидеоконтроллер (встроенный или в виде отдельной платы), передающий сигнал на монитор\nзвуковой контроллер\nсетевой интерфейс (сетевая плата)\nблок питания\nсистема охлаждения — дополнительные элементы охлаждения (вентиляторы, механические элементы, части водяной системы охлаждения), необходимые при установке блоков, имеющих повышенное тепловыделение (видеокарт, вычислительных сопроцессоров).>>>",
            "Через контроллеры к материнской плате при помощи шлейфов кабелей, сигнальных и питания, подключаются находящиеся внутри системного блока возможные элементы:\n<<<жёсткий диск (их может быть несколько, они могут быть объединены в RAID-массив)\nSSD\nнакопитель на гибких дисках\nоптический накопитель типа CD-ROM и другие устройства.>>>",
            "Кроме того, в аппаратное обеспечение компьютера также входят внешние (по отношению к системному блоку) компоненты — периферийные устройства в различных сочетаниях:\n<<<Устройства ввода\nкомпьютерная клавиатураклавиатура\nмышь, трекбол или тачпад\nграфический планшет\nджойстик\nсканер\nмикрофон\nустройства вывода\nмонитор\nколонки/наушники\nпечатающие устройства типа принтера или плоттера\nдля связи используются различные модемы и сетевое оборудование: маршрутизатор, сетевой коммутатор, беспроводная точка доступа.\nустройства ввода-вывода для технологий виртуальной реальности.>>>",
            "Разработка аппаратных средств обычно осуществляется на следующих этапах[7]:\n<<<разработка схем аппаратных элементов;\nреализация аппаратных элементов (в виде печатной платы или их комбинации);\nтестирование аппаратных элементов в лабораторных условиях;\nинтеграция системы;\nтестирование аппаратных средств в полевых условиях.>>>",
            "Сходства с разработкой программного обеспечения[9] очевидны:\n<<<Модель>>>",
            "Пользователи взаимодействуют с продуктами различными способами, продукты взаимодействуют с другими продуктами, и продукты производят выходные данные, учитывая входные данные.\n<<<Требования>>>",
            "У него есть функциональные (обращенные к пользователю) и нефункциональные (не обращенные к пользователю) требования.\n<<<Сложность>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Аппаратное_обеспечение"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Компьютерная_программа"
    },
    {
        "task": [
            "Компиля́ция — сборка программы, включающая:\n<<<трансляцию всех модулей программы, написанных на одном или нескольких исходных языках программирования высокого уровня и/или языке ассемблера, в эквивалентные программные модули на низкоуровневом языке, близком машинному коду (абсолютный код, объектный модуль, иногда на язык ассемблера)[2][3][4] или непосредственно на машинном языке или ином двоичнокодовом низкоуровневом командном языке;\nпоследующую сборку исполняемой машинной программы, в том числе вставка в программу кода всех функций, импортируемых из статических библиотек и/или генерация кода запроса к ОС на загрузку динамических библиотек, из которых  функции будут вызываться программой.>>>",
            "Входная информация для компилятора есть:\n<<<на фазе трансляции: исходный код программы, являющийся описанием алгоритма или программы на предметно-ориентированном языке программирования;\nна фазе компоновки: сгенерированные на фазе трансляции файлы объектных кодов модулей программы, а также файлы объектных кодов статических библиотек и данные об используемых динамических библиотеках.>>>",
            "Компили́ровать — проводить сборку машинной программы, включая:\n<<<трансляцию с предметно-ориентированного языка на машинно-ориентированный язык[3],\nкомпоновка исполняемой машинно-ориентированной программы из сгенерированных на фазе трансляции объектных модулей — модулей, содержащих части кода программы на машинно-ориентированного кода программы.>>>",
            "Виды компиляторов<<<Векторизующий. Базируется на трансляторе, транслирующем исходный код в машинный код компьютеров, оснащённых векторным процессором.\nГибкий. Сконструирован по модульному принципу, управляется таблицами и запрограммирован на языке высокого уровня или реализован с помощью компилятора компиляторов.\nДиалоговый. См.: диалоговый транслятор.\nИнкрементальный. Пересобирает программу, заново транслируя только изменённые фрагменты программы без перетрансляции всей программы.\nИнтерпретирующий (пошаговый). Последовательно выполняет независимую компиляцию каждого отдельного оператора (команды) исходной программы.\nКомпилятор компиляторов. Транслятор, воспринимающий формальное описание языка программирования и генерирующий компилятор для этого языка.\nОтладочный. Устраняет отдельные виды синтаксических ошибок.\nРезидентный. Постоянно находится в оперативной памяти и доступен для повторного использования многими задачами.\nСамокомпилируемый. Написан на том же языке программирования, с которого осуществляется трансляция.\nУниверсальный. Основан на формальном описании синтаксиса и семантики входного языка. Составными частями такого компилятора являются: ядро, синтаксический и семантический загрузчики.>>>",
            "Также все компиляторы условно можно разделить на две группы:\n<<<Компиляторы с конкретных языков программирования. (Примеры: GCC, gnat, clang, xcode, gfortran.)\nКомпиляторы как системы сборки программ. Таковы например довольно распространенная в UNIX- и Linux-системах система Makefile и распространенная в Windows-системах cmake. Работа последних (например в Makefile) очень часто управляется встроенным входным интерпретируемым языком, на котором и прописывается порядок самой компиляции программы.>>>",
            "Виды компиляции[2]:\n<<<Пакетная. Компиляция нескольких исходных модулей в одном задании.\nПострочная. Машинный код порождается и затем исполняется для каждой завершённой грамматической конструкции языка. Внешне воспринимается как интерпретация, но имеет иное устройство.\nУсловная. На фазе трансляции результат трансляции зависит от условий, прописанных в исходном транслируемом тексте программы директивами компилятора. (Яркий пример — работа препроцессора языка С и производных от него.) Так, в зависимости от значения некой константы некая транслятор заданную часть транслируемого исходного текста программы транслирует или пропускает (игнорирует).>>>",
            "Процесс компиляции состоит из следующих этапов:\n<<<Трансляция программы — трансляция всех или только изменённых модулей исходной программы.\nКомпоновка машинно-ориентированной программы.>>>",
            "Структурные реализации компилятора могут быть следующими:\n<<<И транслятор, и компоновщик могут целиком входить в состав компилятора как исполняемые программы.\nКомпилятор сам выполняет лишь трансляцию компилируемой программы, компоновка же программы выполняется вызываемой компилятором отдельной программой-компоновщиком. Практически все современные компиляторы построены по такой схеме.\nПакет программ, включающий в себя трансляторы с разных языков программирования и компоновщики.>>>",
            "Трансляция программы как неотъемлемая составляющая компиляции включает в себя:\n<<<Лексический анализ. На этом этапе последовательность символов исходного файла преобразуется в последовательность лексем.\nСинтаксический (грамматический) анализ. Последовательность лексем преобразуется в древо разбора.\nСемантический анализ. На этой фазе древо разбора обрабатывается с целью установления его семантики (смысла) — например, привязка идентификаторов к их объявлениям, типам данных, проверка совместимости, определение типов выражений и т. д. Результат обычно называется «промежуточным представлением/кодом», и может быть дополненным древом разбора, новым деревом, абстрактным набором команд или чем-то ещё, удобным для дальнейшей обработки.\nОптимизация. Выполняется удаление излишних конструкций и упрощение кода с сохранением его смысла. Оптимизация может быть на разных уровнях и этапах — например, над промежуточным кодом или над конечным машинным кодом.\nГенерация кода. Из промежуточного представления порождается код на целевом машинно-ориентированном языке.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Компилятор"
    },
    {
        "task": [
            "Терминология<<<Открытый (исходный) текст — данные (не обязательно текстовые), передаваемые без использования криптографии или другими словами незашифрованные данные.\nШифротекст, шифрованный (закрытый) текст — данные, полученные после применения криптосистемы (обычно — с некоторым указанным ключом). Другое название: криптограмма.\nШифр, криптосистема — семейство обратимых преобразований открытого текста в шифрованный.\nКлюч — параметр шифра, определяющий выбор конкретного преобразования данного текста. В современных шифрах криптографическая стойкость шифра целиком определяется секретностью ключа (принцип Керкгоффса). Также выделяют ключ шифрования (encryption key) и ключ расшифрования (decryption key)\nШифрование — процесс нормального применения криптографического преобразования открытого текста на основе алгоритма и ключа, в результате которого возникает шифрованный текст.\nРасшифровывание — процесс нормального применения криптографического преобразования шифрованного текста в открытый.\nАсимметричный шифр, двухключевой шифр, шифр с открытым ключом — шифр, в котором используются два ключа, шифрующий и расшифровывающий. При этом, зная лишь ключ зашифровывания, нельзя расшифровать сообщение, и наоборот.\nОткрытый ключ — тот из двух ключей асимметричной системы, который свободно распространяется. Шифрующий для секретной переписки и расшифровывающий — для электронной подписи.\nСекретный ключ, закрытый ключ — тот из двух ключей асимметричной системы, который хранится в секрете.>>>",
            "Открытый (исходный) текст — данные (не обязательно текстовые), передаваемые без использования криптографии или другими словами незашифрованные данные.\nШифротекст, шифрованный (закрытый) текст — данные, полученные после применения криптосистемы (обычно — с некоторым указанным ключом). Другое название: криптограмма.\nШифр, криптосистема — семейство обратимых преобразований открытого текста в шифрованный.\nКлюч — параметр шифра, определяющий выбор конкретного преобразования данного текста. В современных шифрах криптографическая стойкость шифра целиком определяется секретностью ключа (принцип Керкгоффса). Также выделяют ключ шифрования (encryption key) и ключ расшифрования (decryption key)\nШифрование — процесс нормального применения криптографического преобразования открытого текста на основе алгоритма и ключа, в результате которого возникает шифрованный текст.\nРасшифровывание — процесс нормального применения криптографического преобразования шифрованного текста в открытый.\nАсимметричный шифр, двухключевой шифр, шифр с открытым ключом — шифр, в котором используются два ключа, шифрующий и расшифровывающий. При этом, зная лишь ключ зашифровывания, нельзя расшифровать сообщение, и наоборот.\nОткрытый ключ — тот из двух ключей асимметричной системы, который свободно распространяется. Шифрующий для секретной переписки и расшифровывающий — для электронной подписи.\nСекретный ключ, закрытый ключ — тот из двух ключей асимметричной системы, который хранится в секрете.<<<Криптоанализ — наука, изучающая математические методы нарушения конфиденциальности и целостности информации.\nКриптоаналитик — учёный, создающий и применяющий методы криптоанализа.\nКриптография и криптоанализ составляют криптологию, как единую науку о создании и взломе шифров (такое деление привнесено с запада, до этого в СССР и России не применялось специального деления).\nКриптографическая атака — попытка криптоаналитика вызвать отклонения в атакуемой защищённой системе обмена информацией. Успешную криптографическую атаку называют взлом или вскрытие.\nДешифрование (дешифровка) — процесс извлечения открытого текста без знания криптографического ключа на основе известного шифрованного. Термин дешифрование обычно применяют по отношению к процессу криптоанализа шифротекста (криптоанализ сам по себе, вообще говоря, может заключаться и в анализе криптосистемы, а не только зашифрованного ею открытого сообщения).\nКриптографическая стойкость — способность криптографического алгоритма противостоять криптоанализу.>>>",
            "Криптоанализ — наука, изучающая математические методы нарушения конфиденциальности и целостности информации.\nКриптоаналитик — учёный, создающий и применяющий методы криптоанализа.\nКриптография и криптоанализ составляют криптологию, как единую науку о создании и взломе шифров (такое деление привнесено с запада, до этого в СССР и России не применялось специального деления).\nКриптографическая атака — попытка криптоаналитика вызвать отклонения в атакуемой защищённой системе обмена информацией. Успешную криптографическую атаку называют взлом или вскрытие.\nДешифрование (дешифровка) — процесс извлечения открытого текста без знания криптографического ключа на основе известного шифрованного. Термин дешифрование обычно применяют по отношению к процессу криптоанализа шифротекста (криптоанализ сам по себе, вообще говоря, может заключаться и в анализе криптосистемы, а не только зашифрованного ею открытого сообщения).\nКриптографическая стойкость — способность криптографического алгоритма противостоять криптоанализу.<<<Имитозащита — защита от навязывания ложной информации. Другими словами, текст остаётся открытым, но появляется возможность проверить, что его не изменяли ни случайно, ни намеренно. Имитозащита достигается обычно за счёт включения в пакет передаваемых данных имитовставки.\nИмитовставка — блок информации, применяемый для имитозащиты, зависящий от ключа и данных.\nЭлектронная цифровая подпись, или электронная подпись — асимметричная имитовставка (ключ защиты отличается от ключа проверки). Другими словами, такая имитовставка, которую проверяющий не может подделать.\nЦентр сертификации — сторона, чья честность неоспорима, а открытый ключ широко известен. Электронная подпись центра сертификации подтверждает подлинность открытого ключа.>>>",
            "Имитозащита — защита от навязывания ложной информации. Другими словами, текст остаётся открытым, но появляется возможность проверить, что его не изменяли ни случайно, ни намеренно. Имитозащита достигается обычно за счёт включения в пакет передаваемых данных имитовставки.\nИмитовставка — блок информации, применяемый для имитозащиты, зависящий от ключа и данных.\nЭлектронная цифровая подпись, или электронная подпись — асимметричная имитовставка (ключ защиты отличается от ключа проверки). Другими словами, такая имитовставка, которую проверяющий не может подделать.\nЦентр сертификации — сторона, чья честность неоспорима, а открытый ключ широко известен. Электронная подпись центра сертификации подтверждает подлинность открытого ключа.<<<Хеш-функция — функция, которая преобразует сообщение произвольной длины в число («свёртку») фиксированной длины. Для криптографической хеш-функции (в отличие от хеш-функции общего назначения) сложно вычислить обратную и даже найти два сообщения с общей хеш-функцией.\nГибри́дная криптосисте́ма — это система шифрования, совмещающая преимущества криптосистемы с открытым ключом с производительностью симметричных криптосистем.>>>",
            "Для современной криптографии характерно использование открытых алгоритмов шифрования, предполагающих использование вычислительных средств. Известно более десятка проверенных алгоритмов шифрования, которые при использовании ключа достаточной длины и корректной реализации алгоритма криптографически стойки. Распространённые алгоритмы:\n<<<симметричные DES, AES, ГОСТ 28147-89, Camellia, Twofish, Blowfish, IDEA, RC4 и др.;\nасимметричные RSA и Elgamal (Эль-Гамаль);\nхеш-функций MD4, MD5, MD6, SHA-1, SHA-2, ГОСТ Р 34.11-2012 («Стрибог») .>>>",
            "В основе построения криптостойких систем лежит многократное использование относительно простых преобразований, так называемых криптографических примитивов.\nКлод Шеннон известный американский математик и электротехник предложил использовать подстановки (англ. substitution) и перестановки (англ. permutation). Схемы, которые реализуют эти преобразования, называются SP-сетями. Нередко используемыми криптографическими примитивами являются также преобразования типа циклический сдвиг или гаммирование. Ниже приведены основные криптографические примитивы и их использование.\n<<<Симметричное шифрование. Заключается в том, что обе стороны-участники обмена данными имеют абсолютно одинаковые ключи для шифрования и расшифровки данных. Данный способ осуществляет преобразование, позволяющее предотвратить просмотр информации третьей стороной. Пример: книжный шифр.>>>",
            "Симметричное шифрование. Заключается в том, что обе стороны-участники обмена данными имеют абсолютно одинаковые ключи для шифрования и расшифровки данных. Данный способ осуществляет преобразование, позволяющее предотвратить просмотр информации третьей стороной. Пример: книжный шифр.<<<Асимметричное шифрование. Предполагает использовать в паре два разных ключа — открытый и секретный(закрытый). В асимметричном шифровании ключи работают в паре — если данные шифруются открытым ключом, то расшифровать их можно только соответствующим секретным ключом и наоборот — если данные шифруются секретным ключом, то расшифровать их можно только соответствующим открытым ключом. Использовать открытый ключ из одной пары и секретный с другой — невозможно. Каждая пара асимметричных ключей связана математическими зависимостями. Данный способ также нацелен на преобразование информации от просмотра третьей стороной.>>>",
            "Асимметричное шифрование. Предполагает использовать в паре два разных ключа — открытый и секретный(закрытый). В асимметричном шифровании ключи работают в паре — если данные шифруются открытым ключом, то расшифровать их можно только соответствующим секретным ключом и наоборот — если данные шифруются секретным ключом, то расшифровать их можно только соответствующим открытым ключом. Использовать открытый ключ из одной пары и секретный с другой — невозможно. Каждая пара асимметричных ключей связана математическими зависимостями. Данный способ также нацелен на преобразование информации от просмотра третьей стороной.<<<Подписи используются для подтверждения личности с древних времёнЦифровые подписи. Цифровые подписи используются для установления подлинности документа, его происхождения и авторства, исключает искажения информации в электронном документе.>>>",
            "Подписи используются для подтверждения личности с древних времёнЦифровые подписи. Цифровые подписи используются для установления подлинности документа, его происхождения и авторства, исключает искажения информации в электронном документе.<<<Хеширование. Преобразование входного массива данных произвольной длины в выходную битовую строку фиксированной длины. Такие преобразования также называются хеш-функциями или функциями свёртки, а их результаты называют хеш-кодом, контрольной суммой или дайджестом сообщения (англ. message digest). Результаты хеширования статистически уникальны. Последовательность, отличающаяся хотя бы одним байтом, не будет преобразована в то же самое значение.>>>",
            "В Российской Федерации коммерческая деятельность, связанная с использованием криптографических средств, подлежит обязательному лицензированию. С 22 января 2008 года действовало постановление Правительства РФ от 29 декабря 2007 № 957 (отменено постановлением Правительства РФ от 16 апреля 2012 г. № 313) «Об утверждении положений о лицензировании отдельных видов деятельности, связанных с шифровальными (криптографическими) средствами», которым приняты положения о лицензировании деятельности по:\n<<<распространению шифровальных (криптографических) средств;\nтехническому обслуживанию шифровальных (криптографических) средств;\nпредоставлению услуг в области шифрования информации;\nразработке, производству шифровальных (криптографических) средств, защищённых с использованием шифровальных (криптографических) средств информационных и телекоммуникационных систем.>>>",
            "Постановление Правительства РФ от 16 апреля 2012 г. № 313 «Об утверждении Положения о лицензировании деятельности по разработке, производству, распространению шифровальных (криптографических) средств, информационных систем и телекоммуникационных систем, защищённых с использованием шифровальных (криптографических) средств, выполнению работ, оказанию услуг в области шифрования информации, техническому обслуживанию шифровальных (криптографических) средств, информационных систем и телекоммуникационных систем, защищённых с использованием шифровальных (криптографических) средств (за исключением случая, если техническое обслуживание шифровальных (криптографических) средств, информационных систем и телекоммуникационных систем, защищённых с использованием шифровальных (криптографических) средств, осуществляется для обеспечения собственных нужд юридического лица или индивидуального предпринимателя)» отменило действие постановления Правительства Российской Федерации от 29 декабря 2007 г. № 957 «Об утверждении положений о лицензировании отдельных видов деятельности, связанных с шифровальными (криптографическими) средствами» и вводит новые[какие?] ограничения[4].\n<<<Национальный технологический центр по цифровой криптографии  (НТЦЦК) будет обеспечивать частно-государственное взаимодействие и развитие технологий криптографии. Проект реализуется Минцифры совместно с ФСБ; создание НТЦЦК предусмотрено федеральным проектом «Информационная безопасность» национальной программы «Цифровая экономика». Изначально планировалось создать данный центр в 2024 г., но из-за геополитической ситуации сроки запуска НТЦЦК были перенесены на конец 2022 — начало 2023 гг. Расходы федерального бюджета на создание центра в 2021-2024 гг. составят 11,5 млрд руб.[5]>>>",
            "США разрешает экспорт программного обеспечения без ограничений, если все следующие пункты выполнены:\n<<<код регулируется экспортными ограничениями ECCN 5D002[уточнить];\nкод публично доступен;\nпослано уведомление в Бюро промышленности и безопасности США.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Криптография"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Система_мгновенного_обмена_сообщениями"
    },
    {
        "task": [
            "Этапы производства компакт-дисков<<<Мастеринг — процесс подготовки данных для запуска в серию. (также см. SPARS-код)\nФотолитография — процесс изготовления штампа диска. На стеклянный диск наносится слой фоторезиста, на который производится запись информации. Фоторезист — полимерный светочувствительный материал, который под действием света изменяет свои физико-химические свойства.\nЗапись информации. Запись производится лазерным лучом, мощность которого модулируется записываемой информацией. Для создания пита мощность лазера повышается, что приводит к разрушению химических связей молекул фоторезиста, в результате чего он «задубевает».\nПроявка фоторезиста. Поверхность фоторезиста подвергается травлению (кислотному, щелочному, плазменному), при котором удаляются те области фоторезиста, которые не были экспонированы лазерным лучом.\nГальванопластика. Проявленный стеклянный мастер-диск помещается в гальваническую ванну, где на его поверхность производится электролитическое осаждение тонкого слоя никеля.\nШтамповка дисков методом литья под давлением с использованием полученного штампа.\nНапыление зеркального металлического (алюминий, золото, серебро и др.) слоя на информационный слой.\nНанесение защитного лака.\nНанесение графического изображения — лейбла (от англ. Label).>>>",
            "Суть технологии записи высокой плотности заключается в применении двух новых принципов, которые позволяют записывать вдвое больше информации на обычном носителе — диске CD-R.\n<<<Длина пита на диске уменьшается до 0,62 мкм.[уточнить] Длина пита обычного CD составляет 0,83 мкм.[уточнить] Это означает, что HD-BURN увеличивает ёмкость диска в 1,35 раза. Длина пита 0,62 мкм была выбрана для того, чтобы все существующие DVD Video-плееры и приводы DVD-ROM смогли считывать HD-BURN-диски после незначительной модернизации.\nПрименяется иная система коррекции ошибок: вместо CIRC (Cross Interleaved Reed Solomon Code — перемежающийся код Рида — Соломона) используется RS-PC (RS-PRODUCT Code) с модуляцией 8-16. Это позволило увеличить ёмкость ещё в 1,49 раза. По сообщению Sanyo, система коррекции ошибок RS-PC не только более компактна, но и эффективней, чем CIRC.[источник не указан 4170 дней]>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Компакт-диск"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Цифровая_дистрибуция"
    },
    {
        "task": [
            "Способы связи клавиатуры с компьютером[править | править код]<<<Непосредственное подключение матрицы к процессору — применялось в микрокомпьютерах 1970-80-х. Опросом матрицы занимался процессор, периодически прерывая работу текущей программы. Достоинства такого подхода — дешевизна и максимальная гибкость, возможно например опрашивать не всю матрицу. Недостатки: трата процессорного времени на опрос клавиатуры; необходимость подключения клавиатуры многопроводным шлейфом; несовместимость клавиатур разных моделей компьютеров. Примеры компьютеров с такой клавиатурой: ZX-Spectrum, Commodore PET.\nПередача ASCII-символа — применялась в терминалах и некоторых компьютерах 1970-80-х. Процессор освобождён от опроса клавиатуры, этим занимается специальный контроллер. Этот контроллер возвращает ASCII-код символа исходя из нажатой клавиши и положения клавиш-модификаторов. Такой способ требует меньше нагрузки на процессор, чем предыдущий, но нет возможности считывать состояние клавиш-модификаторов, определить, нажата ли та или иная клавиша в текущий момент, а также ограничивает использование сочетаний клавиш. Кроме того, раскладка такой клавиатуры задана жёстко, для переключения раскладки требуется внесение изменений в схему контроллера. Примеры компьютеров с такой клавиатурой: Apple II, БК-0010.\nПередача скан-кода — наиболее распространённый способ с появлением IBM PC. В этом случае опросом также занимается контроллер клавиатуры, например для PC (PS/2)-клавиатур аналогичный Intel 8042[3]. Однако каждой клавише, в том числе клавишам-модификаторам, присваивается собственный скан-код, не соотносящийся напрямую с кодом символа ASCII. При нажатии или отпускании клавиши передаётся этот скан-код и признак нажатия/отпускания. Сопоставление скан-кода с кодом символа производится программным обеспечением самого компьютера. Данный подход совмещает достоинства двух предыдущих.>>>",
            "По своему назначению клавиши на клавиатуре условно делятся на основные группы[источник не указан 626 дней]:\n<<<буквенно-цифровые клавиши [⇨];\nклавиши цифровой клавиатуры (англ. numeric keypad) [⇨];\nклавиши управления, клавиши-модификаторы [⇨];\nфункциональные клавиши [⇨];\nклавиши управления курсором;>>>",
            "Дополнительные группы:\n<<<мёртвые клавиши;\nспециализированные клавиши [⇨].>>>",
            "Многие современные компьютерные клавиатуры помимо стандартного набора из 104 клавиш снабжаются дополнительными клавишами (как правило, другого размера и формы), которые предназначены для управления некоторыми основными функциями компьютера:\n<<<для управления громкостью звука: громче, тише, включить или выключить звук;\nдля управления лотком в приводе для компакт-дисков: извлечь диск, принять диск;\nдля управления проигрывателем: воспроизводить, поставить на паузу, остановить воспроизведение, промотать запись вперёд или назад, перейти к следующей или предыдущей записи;\nдля управления сетевыми возможностями компьютера: открыть почтовую программу, открыть браузер, показать домашнюю страницу, двигаться вперёд или назад по истории посещённых страниц, открыть поисковую систему;\nдля запуска часто используемых программ: открыть калькулятор, открыть файловый менеджер;\nдля управления состоянием окон операционной системы: свернуть окно, закрыть окно, перейти к следующему или к предыдущему окну;\nдля управления состоянием компьютера: перевести в ждущий режим, перевести в спящий режим, пробудить компьютер, выключить компьютер.>>>",
            "С целью экономии места на рабочем столе или для того, чтобы уместить клавиатуру на устройстве, на котором полноразмерная клавиатура не может поместиться, производители клавиатур могут располагать клавиши на клавиатуре в не стандартном порядке или удалять клавиши с клавиатуры. Компактные программируемые клавиатуры популярны, например, среди геймеров и системных администраторов, так как такую клавиатуру легче носить с собой. Наиболее популярные форматы компактных клавиатур:\n<<<80 % или TKL (от англ. tenkeyless — буквально «без десяти клавиш») — клавиатура стандартной раскладки без цифрового блока. Цифровой блок также может эмулироваться в пределах основной буквенно-цифровой клавиатуры при включении режима NumLock;\n75 % — распространённый на ноутбуках формат, при котором клавиши Home, End, PgUp и PgDown могут либо располагаться в один столбец по правому краю клавиатуры, либо эмулироваться через клавишу Fn совместно с курсорными клавишами. Малоиспользуемые клавиши (Scroll Lock, Pause, Insert), как правило, тоже эмулируются;\n60 % — формат, при котором клавиатуры состоят исключительно из буквенно-цифрового блока, клавиш-модификаторов, клавиш Esc, ↵ Enter и ← Backspace. Все остальные клавиши (F1-F12, стрелки и другие) эмулируются с помощью клавиши Fn. Наиболее известный представитель — Happy Hacking Keyboard[en].>>>",
            "80 % или TKL (от англ. tenkeyless — буквально «без десяти клавиш») — клавиатура стандартной раскладки без цифрового блока. Цифровой блок также может эмулироваться в пределах основной буквенно-цифровой клавиатуры при включении режима NumLock;\n75 % — распространённый на ноутбуках формат, при котором клавиши Home, End, PgUp и PgDown могут либо располагаться в один столбец по правому краю клавиатуры, либо эмулироваться через клавишу Fn совместно с курсорными клавишами. Малоиспользуемые клавиши (Scroll Lock, Pause, Insert), как правило, тоже эмулируются;\n60 % — формат, при котором клавиатуры состоят исключительно из буквенно-цифрового блока, клавиш-модификаторов, клавиш Esc, ↵ Enter и ← Backspace. Все остальные клавиши (F1-F12, стрелки и другие) эмулируются с помощью клавиши Fn. Наиболее известный представитель — Happy Hacking Keyboard[en].<<<\n\n\nКлавиатура «IBM Model M Space Saving» без цифрового блока\n\n\n\nКлавиатура формата 75 %\n\n\n\n60 % — Happy Hacking Keyboard Professional 2[en].\n\n\n\nBluetooth-клавиатура для мобильных устройств с клавишами уменьшенного размера\n\n\n\nБеспроводная клавиатура компьютера Apple\n\n>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Компьютерная_клавиатура"
    },
    {
        "task": [
            "Типы видеопамяти[18]:\n<<<Ранние видеокарты не предъявляли особых требований к быстродействию и использовали стандартные типы памяти — статические Static RAM (например, в адаптере MDA) или динамические Dynamic RAM.\nFPM DRAM (Fast Page Mode Dynamic RAM — динамическое ОЗУ с быстрым страничным доступом) — основной тип видеопамяти, идентичный используемой в системных платах. Использует асинхронный доступ, при котором управляющие сигналы не привязаны жёстко к тактовой частоте системы. Активно применялся примерно до 1996 года.\nVRAM (Video RAM — видео ОЗУ) — так называемая двухпортовая DRAM. Этот тип памяти обеспечивает доступ к данным со стороны сразу двух устройств, то есть имеется возможность одновременно писать данные в какую-либо ячейку памяти, и одновременно с этим читать данные из какой-нибудь соседней ячейки. За счёт этого позволяет совмещать во времени вывод изображения на экран и его обработку в видеопамяти, что сокращает задержки при доступе и увеличивает скорость работы. То есть RAMDAC может свободно выводить на экран монитора раз за разом экранный буфер, ничуть не мешая видеопроцессору осуществлять какие-либо манипуляции с данными. Но это всё та же DRAM, и скорость у неё не слишком высокая.\nWRAM (Window RAM) — вариант VRAM, с увеличенной на ~25 % пропускной способностью и поддержкой некоторых часто применяемых функций, таких, как отрисовка шрифтов, перемещение блоков изображения и т. п. Применяется практически только на акселераторах фирмы Matrox и Number Nine, поскольку требует специальных методов доступа и обработки данных. Наличие всего одного производителя данного типа памяти (Samsung) сильно сократило возможности её использования. Видеоадаптеры, построенные с использованием данного типа памяти, не имеют тенденции к падению производительности при установке больших разрешений и частот обновления экрана, на однопортовой же памяти в таких случаях RAMDAC всё большее время занимает шину доступа к видеопамяти, и производительность видеоадаптера может сильно упасть.\nEDO DRAM (Extended Data Out DRAM — динамическое ОЗУ с расширенным временем удержания данных на выходе) — тип памяти с элементами конвейеризации, позволяющий несколько ускорить обмен блоками данных с видеопамятью приблизительно на 25 %.\nSDRAM (Synchronous Dynamic RAM — синхронное динамическое ОЗУ) пришёл на замену EDO DRAM и других асинхронных однопортовых типов памяти. После того, как произведено первое чтение из памяти или первая запись в память, последующие операции чтения или записи происходят с нулевыми задержками. Этим достигается максимально возможная скорость чтения и записи данных.\nDDR SDRAM (Double Data Rate) — вариант SDRAM с передачей данных по как по нарастающему, так и по ниспадающему фронту тактового сигнала, что даёт удвоение скорости работы памяти. Дальнейшее развитие пока происходит в виде очередного уплотнения числа пакетов в одном такте шины — DDR2 SDRAM (GDDR2), DDR3 SDRAM и т. д.\nSGRAM (Synchronous Graphics RAM — синхронное графическое ОЗУ) вариант DRAM с синхронным доступом. В принципе, работа SGRAM полностью аналогична SDRAM, но дополнительно поддерживаются ещё некоторые специфические функции, типа блоковой и масочной записи. В отличие от VRAM и WRAM, SGRAM является однопортовой, однако может открывать две страницы памяти как одну, эмулируя двухпортовость других типов видеопамяти.\nMDRAM (Multibank DRAM — многобанковое ОЗУ) — вариант DRAM, разработанный фирмой MoSys, организованный в виде множества независимых банков объёмом по 32 КиБ каждый, работающих в конвейерном режиме.\nRDRAM (RAMBus DRAM) — память, использующая специальный канал передачи данных (Rambus Channel), представляющий собой шину данных шириной в один байт. По этому каналу удаётся передавать информацию очень большими потоками, наивысшая скорость передачи данных для одного канала на сегодняшний момент составляет 1600 МБ/с (частота 800 МГц, данные передаются по обоим срезам импульса). На один такой канал можно подключить несколько чипов памяти. Контроллер этой памяти работает с одним каналом Rambus, на одной микросхеме логики можно разместить четыре таких контроллера, значит, теоретически можно поддерживать до 4 таких каналов, обеспечивая максимальную пропускную способность в 6,4 Гб/с. Минус этой памяти — нужно читать информацию большими блоками, иначе её производительность резко падает.>>>",
            "Характеристики<<<Ширина шины памяти, измеряется в битах — количество бит информации, передаваемой за такт. Важный параметр в производительности карты.\nОбъём видеопамяти, измеряется в мегабайтах — объём собственной оперативной памяти видеокарты. Больший объём далеко не всегда означает большую производительность.>>>",
            "Видеокарты, интегрированные в набор системной логики материнской платы или являющиеся частью ЦПУ, обычно не имеют собственной видеопамяти и используют для своих нужд часть оперативной памяти компьютера (UMA — Unified Memory Access).\n<<<частоты ядра и памяти — измеряются в мегагерцах, чем больше, тем быстрее видеокарта будет обрабатывать информацию.\nтекстурная и пиксельная скорость заполнения, измеряется в млн. пикселей в секунду, показывает количество выводимой информации в единицу времени.>>>",
            "Затем поколения ускорителей в видеокартах можно считать по версии DirectX, которую они поддерживают. Различают следующие поколения:\n<<<DirectX 7 — карта не поддерживает шейдеры, все картинки рисуются наложением текстур;\nDirectX 8 — поддержка пиксельных шейдеров версий 1.0, 1.1 и 1.2, в DX 8.1 ещё и версию 1.4, поддержка вершинных шейдеров версии 1.0;\nDirectX 9 — поддержка пиксельных шейдеров версий 2.0, 2.0a и 2.0b, 3.0;\nDirectX 10 — поддержка унифицированных шейдеров версии 4.0;\nDirectX 10.1 — поддержка унифицированных шейдеров версии 4.1;\nDirectX 11 — поддержка унифицированных шейдеров версии 5.0;\nDirectX 12 — поддержка унифицированных шейдеров версии 6.0;>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Видеокарта"
    },
    {
        "task": [
            "Мышь стала основным координатным устройством ввода из-за следующих особенностей:\n<<<Очень низкая цена по сравнению с остальными устройствами, например как сенсорных экранов и т.д;\nМышь пригодна для длительной работы. В первые годы мультимедиа кинорежиссёры любили показывать «компьютеры будущего» с сенсорным интерфейсом, но на поверку такой способ ввода довольно утомителен, так как руки нужно держать на весу;\nВысокая точность позиционирования курсора. Мышью (за исключением некоторых «неудачных» моделей) легко попасть в нужное место экрана;\nМышь позволяет выполнять множество разных манипуляций — двойные и тройные щелчки, перетаскивания, жесты, нажатие одной кнопки во время перетаскивания другой и т. д. Поэтому в одной руке можно сконцентрировать большое количество органов управления — многокнопочные мыши позволяют управлять, например, браузером вообще без привлечения клавиатуры.\n\n\n>>>",
            "\nНедостатки<<<Для работы требуется ровная гладкая поверхность достаточных размеров (за исключением гироскопических мышей);\nНеустойчивость к песку и вибрациям. По этой причине мышь практически не применяется в военных устройствах. Трекбол требует меньше места для работы и не требует перемещать руку, не может потеряться, имеет большую стойкость к внешним воздействиям, более надёжен.>>>",
            "Недостатки оптических преобразователей первого поколения:\n<<<необходимость использования специального коврика и невозможность его замены другим. Кроме всего прочего, коврики разных оптических мышей часто не были взаимозаменяемыми и не выпускались отдельно;\nнеобходимость определённой ориентации мыши относительно коврика, в противном случае мышь работала неправильно;\nчувствительность мыши к загрязнению коврика (ведь пользователь трогает его когда нужно) — преобразователь плохо воспринимал штриховку на загрязнённых местах коврика;\nвысокая стоимость устройства.>>>",
            "В таких мышах известны только преимущества, к которым относятся:\n<<<более высокие надёжность и разрешение;\nотсутствие заметного свечения (сенсору достаточно слабой подсветки лазером видимого или, возможно, инфракрасного диапазона);\nнизкое энергопотребление;\nимеются полностью интегрированные решения, когда лазер подсветки выполняется на том же кристалле, что и сенсор[5].>>>",
            "Производители постоянно стараются добавить на топовые модели дополнительные кнопки, чаще всего — кнопки под большой или указательный и реже — под средний палец. Некоторые кнопки служат для внутренней настройки мыши (например, для изменения чувствительности) или двойные-тройные щелчки (для программ и игр), на другие — в драйвере и/или специальной утилитой назначаются некоторые системные функции, например:\n<<<горизонтальная прокрутка;\nдвойное нажатие (double click);\nнавигация в браузерах и файловых менеджерах;\nуправление уровнем громкости и воспроизведением аудио- и видеоклипов;\nзапуск приложений и т. п.\n>>>",
            "Игроки различают три основных способа хвата мыши[7]:\n<<<Пальцами. Пальцы лежат плашмя на кнопках, верхняя часть ладони упирается в «пятку» мыши. Нижняя часть ладони — на столе. Преимущество — точные движения мыши.\nКогтеобразный. Пальцы согнуты и упираются в кнопки только кончиками. «Пятка» мыши в центре ладони. Преимущество — удобство щелчков.\nЛадонью. Вся ладонь лежит на мыши, «пятка» мыши, как и в когтеобразном хвате, упирается в центр ладони. Хват более приспособлен для размашистых движений шутеров.>>>",
            "Отличительной особенностью мышей как класса устройств является хорошая стандартизованность аппаратных протоколов.\n<<<Для взаимодействия с мышью по интерфейсу RS-232 стандартом де-факто является протокол MS Mouse фирмы Microsoft, разработанный для MS-DOS и поддержанный в ней драйвером mouse.com. Конкурирующий интерфейс IBM PC Mouse был вытеснен с рынка к середине 1990-x годов.\nДля мыши PS/2, управляемой контроллером i8042, роль стандарта играет спецификация IBM, впервые опубликованная в документации к компьютерам PS/2; позднее спецификация была расширена для поддержки колеса прокрутки.\nБазовый протокол (англ. boot protocol) для USB-мышей входит в спецификацию USB 1.1 (приложение B.2)[8].>>>",
            "Благодаря этой особенности один стандартный драйвер, входящий в поставку ОС, и даже BIOS компьютера могут работать практически с любой мышью. Дополнительное ПО нужно лишь для поддержания специфичных возможностей изделия. Дополнительные возможности нестандартны и имеют ограниченную программную поддержку.\n<<<Для Windows к такой мыши прилагается программа привязки нестандартных компонентов мыши к событиям в ОС.\nВ дистрибутивах Linux доступна программа btnx, связывающая (переназначающая) манипуляции с мышью (в том числе и стандартные) с заданной пользователем комбинацией клавиш.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Компьютерная_мышь"
    },
    {
        "task": [
            "В настоящее время значимыми являются несколько семейств процессоров ARM:\n<<<ARM7 (с тактовой частотой до 60-72 МГц), предназначенные, например, для недорогих мобильных телефонов и встраиваемых решений средней производительности. В настоящее время активно вытесняется новым семейством Cortex.\nARM9, ARM11 (с частотами до 1 ГГц) для более мощных телефонов, карманных компьютеров и встраиваемых решений высокой производительности.\nCortex A — новое семейство процессоров на смену ARM9 и ARM11.\nCortex M — новое семейство процессоров на смену ARM7, также призванное занять новую для ARM нишу встраиваемых решений низкой производительности. В семействе присутствуют четыре значимых ядра:\nCortex-M0, Cortex-M0+ (более энергоэффективное) и Cortex-M1 (оптимизировано для применения в ПЛИС) с архитектурой ARMv6-M;\nCortex-M3 с архитектурой ARMv7-M;\nCortex-M4 (добавлены SIMD-инструкции, опционально FPU) и Cortex-M7 (FPU с поддержкой чисел одинарной и двойной точности) с архитектурой ARMv7E-M;\nCortex-M23 и Cortex-M33 с архитектурой ARMv8-M ARMv8-M .>>>",
            "Уже давно существует справочное руководство по архитектуре ARM, которое разграничивает все типы интерфейсов, которые поддерживает ARM, так как детали реализации каждого типа процессора могут различаться.\nАрхитектура развивалась с течением времени и, начиная с ARMv7, были определены 3 профиля:\n<<<A (application) — для устройств, требующих высокой производительности (смартфоны, планшеты);\nR (real time) — для приложений, работающих в реальном времени;\nM (microcontroller) — для микроконтроллеров и недорогих встраиваемых устройств[3].>>>",
            "Процессор может находиться в одном из следующих операционных режимов:\n<<<User mode — обычный режим выполнения программ. В этом режиме выполняется большинство программ.\nFast Interrupt (FIQ) — режим быстрого прерывания (меньшее время срабатывания).\nInterrupt (IRQ) — основной режим прерывания.\nSystem mode — защищённый режим для использования операционной системой.\nAbort mode — режим, в который процессор переходит при возникновении ошибки доступа к памяти (доступ к данным или к инструкции на этапе prefetch конвейера).\nSupervisor mode — привилегированный пользовательский режим.\nUndefined mode — режим, в который процессор входит при попытке выполнить неизвестную ему инструкцию.>>>",
            "Особенности AArch64:\n<<<Новый набор команд A64\n31 регистр общего назначения, каждый длиной 64 бит\nОтдельные регистры SP и PC\nИнструкции имеют размер 32 бит и многие совпадают с командами A32\nБольшинство инструкций работает как с 32-, так и с 64-битными аргументами\nАдреса имеют размер 64 бит\nУлучшения Advanced SIMD (NEON) enhanced\nС 16 до 32 увеличено количество 128-битных регистров, доступных через NEON, VFPv4, криптоинструкции AES, SHA\nПоддерживает вычисления с числами с плавающей запятой двойной точности (64-бит double)\nПолная совместимость с IEEE 754\nНовая система исключений>>>",
            "Новый набор команд A64\n31 регистр общего назначения, каждый длиной 64 бит\nОтдельные регистры SP и PC\nИнструкции имеют размер 32 бит и многие совпадают с командами A32\nБольшинство инструкций работает как с 32-, так и с 64-битными аргументами\nАдреса имеют размер 64 бит\nУлучшения Advanced SIMD (NEON) enhanced\nС 16 до 32 увеличено количество 128-битных регистров, доступных через NEON, VFPv4, криптоинструкции AES, SHA\nПоддерживает вычисления с числами с плавающей запятой двойной точности (64-бит double)\nПолная совместимость с IEEE 754\nНовая система исключений<<<Трансляция виртуальных адресов из 48-битного формата работает с помощью существующих механизмов LPAE>>>",
            "Архитектура ARM обладает следующими особенностями RISC:\n<<<Архитектура загрузки/хранения\nНет поддержки нелинейного (не выровненного по словам) доступа к памяти (теперь поддерживается в процессорах ARMv6, за некоторыми исключениями, и полностью в ARMv7)\nРавномерный 16х32-битный регистровый файл\nФиксированная длина команд (32 бита) для упрощения декодирования за счет снижения плотности кода. Позднее режим Thumb повысил плотность кода.\nОднотактное исполнение>>>",
            "Чтобы компенсировать простой дизайн, в сравнении с современными процессорами вроде Intel 80286 или Motorola 68020 были использованы некоторые особенности дизайна:\n<<<Арифметические инструкции заменяют условные коды, только когда это необходимо\n32-битное многорегистровое циклическое сдвиговое устройство, которое может быть использовано без потерь производительности в большинстве арифметических инструкций и адресных расчетов.\nМощные индексированные адресные режимы\nРегистр ссылок для быстрого вызова функций листьев\nПростые, но быстрые, с двумя уровнями приоритетов подсистемы прерываний с включенными банками регистров.>>>",
            "ARM предоставляет 31 регистр общего назначения разрядностью 32 бит. В зависимости от режима и состояния процессора пользователь имеет доступ только к строго определённому набору регистров. В ARM state разработчику постоянно доступны 17 регистров:\n<<<13 регистров общего назначения (r0..r12).\nStack Pointer (r13) — содержит указатель стека выполняемой программы.\nLink register (r14) — содержит адрес возврата в инструкциях ветвления.\nProgram Counter (r15) — биты [31:1] содержат адрес выполняемой инструкции.\nCurrent Program Status Register (CPSR) — содержит флаги, описывающие текущее состояние процессора. Модифицируется при выполнении многих инструкций: логических, арифметических, и др.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/ARM_(архитектура)"
    },
    {
        "task": [
            "Важнейшие характеристики ЖК-дисплеев:\n<<<тип матрицы — определяется технологией, по которой изготовлен ЖК-дисплей;\nкласс матрицы; стандарт ISO 13406-2 выделяет четыре класса матриц по допустимому количеству «битых пикселей»;\nразрешение — горизонтальный и вертикальный размеры, выраженные в пикселях. В отличие от ЭЛТ-мониторов, ЖК-дисплеи имеют одно фиксированное разрешение, а поддержка остальных реализуется путём интерполяции (ЭЛТ-мониторы также имеют фиксированное количество пикселей, которые также состоят из красных, зелёных и синих точек, однако из-за особенностей технологии при выводе нестандартного разрешения в интерполяции нет необходимости);\nразмер точки (размер пикселя) — расстояние между центрами соседних пикселей. Непосредственно связан с физическим разрешением;\nсоотношение сторон экрана (пропорциональный формат) — отношение ширины к высоте (5:4, 4:3, 3:2 (15÷10), 8:5 (16÷10), 5:3 (15÷9), 16:9 и др.);\nвидимая диагональ — размер самой панели, измеренный по диагонали. Площадь дисплеев зависит также от формата: при одинаковой диагонали, монитор формата 4:3 имеет бо́льшую площадь, чем монитор формата 16:9;\nконтрастность — отношение яркостей самой светлой и самой тёмной точек при заданной яркости подсветки. В некоторых мониторах используется адаптивный уровень подсветки с использованием дополнительных ламп, приведённая для них цифра контрастности (так называемая динамическая) не относится к статическому изображению;\nяркость — количество света, излучаемое дисплеем (обычно измеряется в канделах на квадратный метр);\nвремя отклика — минимальное время, необходимое пикселю для изменения своей яркости. Составляется из двух величин:\nвремя буферизации (input lag). Высокое значение мешает в динамичных играх; обычно умалчивается; измеряется сравнением с кинескопом в скоростной съёмке. По состоянию на 2011-й год в пределах 20—50 мс; в отдельных ранних моделях достигало 200 мс;\nвремя переключения. Указывается в характеристиках монитора. Высокое значение ухудшает качество видео; методы измерения неоднозначны. По состоянию на 2016-й год практически во всех мониторах заявленное время переключения составляет 1—6 мс;\nугол обзора — угол, при котором падение контраста достигает заданного, для разных типов матриц и разными производителями вычисляется по-разному, и часто не подлежит сравнению. Некоторые производители указывают в технических параметрах своих мониторов углы обзора, такие, к примеру, как: CR 5:1 — 176/176°, CR 10:1 — 170/160°. Аббревиатура CR (англ. contrast ratio) обозначает уровень контрастности при указанных углах обзора относительно контрастности при взгляде перпендикулярно экрану. В приведённом примере, при углах обзора 170°/160° контрастность в центре экрана снижается до значения не ниже, чем 10:1, при углах обзора 176°/176° — не ниже, чем до значения 5:1.>>>",
            "Конструктивно дисплей состоит из следующих элементов:\n<<<ЖК-матрицы (первоначально — плоский пакет стеклянных пластин, между слоями которого и располагаются жидкие кристаллы; в 2000-е годы начали применяться гибкие материалы на основе полимеров);\nисточников света для подсветки;\nконтактного жгута (проводов);\nкорпуса, чаще пластикового, с металлической рамкой для придания жёсткости.>>>",
            "Состав пикселя ЖК-матрицы:\n<<<два прозрачных электрода;\nслой молекул, расположенный между электродами;\nдва поляризационных фильтра, плоскости поляризации которых (как правило) перпендикулярны.>>>",
            "Аналогами MVA являются технологии:\n<<<PVA (patterned vertical alignment) от Samsung;\nSuper PVA от Sony-Samsung (S-LCD);\nSuper MVA от Chi Mei Optoelectronics  (англ.) (рус.;\nASV (advanced super view), также называется ASVA (axially symmetric vertical alignment) от Sharp. Дальнейшее развитие технологии ASV — UV2A (Ultraviolet-induced Multi-domain Vertical Alignment)[30];\nAMVA от AU Optronics  (англ.) (рус..>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Жидкокристаллический_дисплей"
    },
    {
        "task": [
            "Основные функции:\n<<<Исполнение запросов программ (ввод и вывод данных, запуск и остановка других программ, выделение и освобождение дополнительной памяти и др.).\nЗагрузка программ в оперативную память и их выполнение.\nСтандартизованный доступ к периферийным устройствам (устройства ввода-вывода).\nУправление оперативной памятью (распределение между процессами, организация виртуальной памяти).\nУправление доступом к данным на энергонезависимых носителях (таких как жёсткий диск, оптические диски и др.), организованным в той или иной файловой системе.\nОбеспечение пользовательского интерфейса.\nСохранение информации об ошибках системы.>>>",
            "Дополнительные функции:\n<<<Параллельное или псевдопараллельное выполнение задач (многозадачность).\nЭффективное распределение ресурсов вычислительной системы между процессами.\nРазграничение доступа различных процессов к ресурсам.\nОрганизация надёжных вычислений (невозможности одного вычислительного процесса намеренно или по ошибке повлиять на вычисления в другом процессе), основана на разграничении доступа к ресурсам.\nВзаимодействие между процессами: обмен данными, взаимная синхронизация.\nЗащита самой системы, а также пользовательских данных и программ от действий пользователей (злонамеренных или по незнанию) или приложений.\nМногопользовательский режим работы и разграничение прав доступа (см.: аутентификация, авторизация).>>>",
            "Операционные системы нужны:\n<<<если нужен универсальный механизм сохранения данных;\nдля предоставления программам системных библиотек с часто используемыми подпрограммами;\nдля распределения полномочий;\nнеобходима возможность имитации «одновременного» исполнения нескольких программ на одном компьютере;\nдля управления процессами выполнения отдельных программ.>>>",
            "Таким образом, современные универсальные операционные системы можно охарактеризовать, прежде всего, как:\n<<<использующие файловые системы (с универсальным механизмом доступа к данным),\nмногопользовательские (с разделением полномочий),\nмногозадачные (с разделением времени).>>>",
            "Многозадачность и распределение полномочий требуют определённой иерархии привилегий компонентов в самой операционной системе. В составе операционной системы различают три группы компонентов:\n<<<ядро, содержащее планировщик; драйверы устройств, непосредственно управляющие оборудованием; сетевая подсистема, файловая система;\nсистемные библиотеки;\nоболочка с утилитами.>>>",
            "Объекты ядра ОС:\n<<<процессы,\nфайлы,\nсобытия,\nпотоки,\nсемафоры,\nмьютексы,\nканалы,\nфайлы, проецируемые в память.>>>",
            "Задуманная и реализованная в 1969 году Кеном Томпсоном при участии нескольких коллег (включая Денниса Ритчи и Брайана Кернигана), операционная система UNIX (первоначально UNICS, что обыгрывало название Multics) собрала в себя многие черты более ранних систем, но обладала целым рядом свойств, отличающих её от большинства предшественниц:\n<<<простая метафорика (два ключевых понятия: вычислительный процесс и файл);\nкомпонентная архитектура: принцип «одна программа — одна функция» плюс мощные средства связывания различных программ для решения возникающих задач («оболочка»);\nминимизация ядра (кода, выполняющегося в «реальном» (привилегированном) режиме процессора) и количества системных вызовов;\nнезависимость от аппаратной архитектуры и реализация на машиннонезависимом языке программирования (язык программирования Си стал побочным продуктом разработки UNIX);\nунификация файлов.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Операционная_система"
    },
    {
        "task": [
            "Ниже перечислены некоторые отличия синтаксических конструкций Delphi от семейства C-подобных языков (C/C++/Java/C#):\n<<<В Delphi формальное начало любой программы чётко отличается от других участков кода и должно располагаться в определённом, единственном в рамках проекта, исходном файле с расширением dpr (тогда как другие файлы исходных текстов программы имеют расширение pas).>>>",
            "В С-подобных языках программирования в качестве входа обычно используется глобальная функция или статический метод с именем main и определённым списком параметров, причём такая функция может быть расположена в любом из файлов исходного текста проекта.<<<В Delphi идентификаторы типов, переменных, а равно и ключевые слова читаются независимо от регистра: например, идентификатор SomeVar полностью эквивалентен somevar. Регистро-зависимые идентификаторы в начале компьютерной эпохи ускоряли процесс компиляции, и кроме того, позволяли использовать очень короткие имена, порой отличающиеся лишь регистром.>>>",
            "И хотя к настоящему времени обе эти практики − использование нескольких идентификаторов, различающихся лишь регистром, равно как и чрезмерная их лаконичность, осуждены и не рекомендованы к применению, практически все унаследованные от С языки − C++, Java, C# − являются регистро-зависимыми, что, с одной стороны, требует достаточно большой внимательности к объявлению и использованию идентификаторов, а с другой — принуждает писать более строгий код, когда каждая переменная имеет чётко определённое имя (вариации регистра могут вызвать путаницу и ошибки).<<<В Delphi в исходных файлах .pas (которые, как правило, и содержат основное тело программы) на уровне языковых средств введено строгое разделение на интерфейсный раздел и раздел реализации. В интерфейсной части содержатся лишь объявления типов и методов, тогда как код реализации в интерфейсной части не допускается на уровне компиляции. Подобное разделение свойственно также языкам C/C++, где в рамках культуры и парадигмы программирования вводится разделение на заголовочные и собственно файлы реализации, но подобное разделение не обеспечивается на уровне языка или компилятора.>>>",
            "В C# и Java такое разделение утрачено вовсе − реализация метода, как правило, следует сразу же после его объявления. Инкапсуляция обеспечивается лишь принадлежностью метода к той или иной области видимости. Для просмотра одной только интерфейсной части модуля исходного кода используются специальные средства.<<<В Delphi метод или функция чётко определяются зарезервированными для этого ключевыми словами procedure или function, тогда как в C-подобных языках различие обуславливается ключевым словом, определяющим тип возвращаемого значения: //Delphi\nprocedure DoSomething (aParam: Integer); //не возвращает значения\nfunction Calculate (aParam1, aParam2: Integer): Integer; //возвращает целочисленный результат\n//C#\nvoid DoSomething(int aParam); // не возвращает значения\n{\n// code\n}\nint Calculate(int aParam1, aParam2); // возвращает целочисленный результат\n{\n// code\n}\n>>>",
            "Тем сложнее в C#/C++ выглядят такие конструкции, как объявление типа «указатель на метод»: //C++: объявление типа pCalc, указателя на функцию-член, принимающую два целочисленных параметра и возвращающую целочисленный результат\ntypedef int (TSomeClass::*pCalc)(int, int);\n\nВ вышеуказанном примере объявление типа отличается от объявления переменной ключевым словом typedef, имя типа, pCalc, указывается в середине выражения, в скобках. //C#: объявление типа pCalc, указателя на функцию-член, принимающую два целочисленных параметра и возвращающую целочисленный результат\npublic delegate int pCalc(int aParam1, int aParam2);\n\nВ вышеуказанном примере объявление типа отличается от объявления переменной специальным ключевым словом delegate, имя типа указывается в середине выражения. //Delphi\ntype pCalc = function(aParam1, aParam2: Integer): Integer of object;\n\nВ вышеуказанном примере объявление типа отличается от объявления переменной специальным ключевым словом type, применением знака равенства (в случае переменной используется двоеточие), имя типа идёт сразу после ключевого слова.<<<В Delphi начало и конец программного блока выделяются ключевыми словами begin и end, тогда как в C-подобных языках программирования для этих целей используются фигурные скобки: {}. Таким образом, возможно, в Delphi достигается лучшая читаемость кода для лиц с ослабленным зрением. С другой стороны, фигурные скобки могут быть более интуитивными при визуальном восприятии, выполняя функцию пиктограммы. //C#\nif (bVal) {\n//код, состоящий из нескольких инструкций\n}\nif (bVal2) /* код, состоящий из одной инструкции */;\n>>>",
            "В вышеуказанном примере фигурные скобки обозначают составную инструкцию, то есть блок инструкций. Поскольку в команде ветвления для одной инструкции допускается выражение без фигурных скобок, то для условного выражения круглые скобки обязательны. В сложных условных выражениях количество вложенных скобочных конструкций может быть велико. //Delphi\nif bVal then begin\n// код, состоящий из нескольких инструкций\nend;\nif bVal2 then (* код, состоящий из одной инструкции *);\n\nВ Delphi условное выражение всегда отделяется от следующей инструкции ключевым словом then, что избавляет от необходимости заключать условие в круглые скобки.<<<В C-подобных языках в целях подобного отделения условное выражение цикла заключается в круглые скобки: while (condition) { // цикл с \"предусловием\"\n// тело цикла\n};\ndo {\n// тело другого цикла\n} while (condition2); // конец цикла с \"постусловием\", тело выполняется хотя бы однажды\n>>>",
            "В Delphi циклы с предусловием и постусловием различаются сильнее: конец цикла с постусловием труднее принять за начало цикла с предусловием. Но порой такое различие может вызвать путаницу (необходимо помнить, что в цикле until указывается условие выхода). while condition do begin//условием продолжения цикла является истинность выражения, следующего за словом while, как C/C#\n//тело цикла\nend;\nrepeat//начало цикла с постусловием\n//тело цикла\nuntil not condition2;//истинность выражения, следующего за словом until - это условие ВЫХОДА из цикла, в отличие от C/C#\n<<<В Delphi операция присвоения значения переменной обозначается при помощи двоеточия со знаком равенства, :=, что является заимствованием из математической нотации. Знак равенства без двоеточия — это оператор проверки равенства, возвращающий булево значение. Напротив, в C-подобных языках оператором присваивания является одинарный знак равенства, а оператором проверки равенства — двойной, ==. В силу того, что в этих языках программирования присваивание является лишь выражением, возвращающим значение переменной слева, не так уж редки следующие неочевидные для новичка ошибки: // C++\nint iVal = 12;\nwhile (iVal = 1) {\n// по замыслу программиста, данное тело цикла не должно выполняться, если на входе iVal имеет значение, отличное от единицы\n// однако, в результате ошибочной замены знака == на одиночный =, iVal будет присвоено значение 1, а цикл окажется бесконечным\n}\n>>>",
            "В Delphi подобная ошибка невозможна хотя бы уже потому, что присваивание в этом языке — операция, не возвращающая значения.<<<В Delphi объектное и объектно-ориентированное программирование хоть и поощряется, однако не является единственно возможным. Так, допустимо (в отличие от C#) объявление и использование глобальных или статических функций и переменных.>>>",
            "Несмотря на такую акцентированную на объектность парадигму, в C# отсутствует понятие виртуального конструктора, то есть создания экземпляра класса, точный тип которого на этапе компиляции неизвестен, а известен лишь базовый класс этого экземпляра. Отчасти этот недостаток может быть скомпенсирован посредством интерфейсов или reflection, однако подобные решения не являются стандартными для языка. type\n  TAnimal = class abstract\n  protected\n    FPersonalName: string;\n  public\n    constructor Create(const PersonalName: string); virtual; abstract;\n    function GetSpecieName: string; virtual; abstract; // возвращает биологический вид животного\n    property Name: string read FPersonalName;\n  end;\n\n  TAnimalClass = class of TAnimal; // метакласс, могущий ссылаться на любой класс, унаследованный от TAnimal\n\n  ...\n\nfunction CreateAnAnimal(const FactAnimalClass: TAnimalClass; const Name: string): TAnimal;\nbegin\n  Result := FactAnimalClass.Create(Name); // функция не знает, животное какого именно вида будет создано, хотя \"кличка\" известна. Конкретная реализация вида скрыта.\nend;\n\nКроме того, в отличие от C# и C++, где вызов конструктора базового класса непременно осуществляется ещё до входа в тело конструктора унаследованного класса, в Delphi этот вызов делается явно. Таким образом, его можно отложить или вовсе опустить в специальных целях. Очевидно, в отличие от C#, возможен контроль над исключениями в базовых конструкторах.<<<Для наиболее гибкой и эффективной реализации объектно-ориентированного подхода в Delphi введены два механизма полиморфного вызова: классический виртуальный, а также динамический: если в случае классического виртуального вызова адреса всех виртуальных функций будут содержаться в таблице виртуальных методов каждого класса, то в случае с динамическим вызовом указатель на метод существует лишь в таблице того класса, в котором он был задан или перекрыт.>>>",
            "Подобная оптимизация имеет своей целью уменьшение размера статической памяти, занимаемой под таблицы методов. Экономия может быть существенна для длинных иерархий классов с очень большим количеством виртуальных методов. В C-подобных языках динамические полиморфные вызовы не применяются.<<<В отличие от C#, язык Delphi допускает создание (инициализацию) экземпляра класса, содержащего абстрактные (не имеющие реализации) методы. Чтобы исключить возможность создания экземпляра класса, не достаточно объявить в нём абстрактные методы. Необходимо использовать в описании класса ключевое слово abstract. Таким образом, в настоящее время классы, имеющие абстрактные методы (в отличие от ранних реализаций Delphi), не считаются абстрактными. При помощи механизма виртуальных функций код базового класса, имеющего абстрактные методы, определяет на этапе выполнения, перекрыт ли в фактическом экземпляре класса конкретный абстрактный метод, и в зависимости от этого или вызывает перекрытый метод, или создаёт исключение EAbstractError.>>>",
            "Также Delphi допускает перекрытие любого конкретного виртуального метода базового класса абстрактным в классе-потомке: type\nTMyBase = class(TObject)\n  function A: integer; virtual; // метод A имеет реализованное тело в разделе implementation\nend;\n\nTMyDerived = class(TMyBase)\n  function A: integer; override; abstract; // метод перекрыт как абстрактный, тела не имеет,\n// и при этом перекрывает (скрывает) реализованный в базовом классе\nend;\n\nprocedure Test;\nvar m: TMyBase;\nbegin\n  m := TMyDerived.Create; // мы создали класс с абстрактным методом\n  m.A; // вызов A полиморфный, и мы получаем исключение типа EAbstractError, пытаясь выполнить абстрактный метод\nend;\n<<<В отличие от C++, язык C# обладает унаследованной от Delphi концепцией свойств класса: псевдополей, которые, в ряде случаев, могут более интуитивно, по сравнению с методами, отражать, а также изменять состояние объекта. public class Date{//данный пример взят с [http://msdn.microsoft.com/en-us/library/w86s7x04.aspx msdn]\n    private int month = 7;  // Backing store\n\n    public int Month{\n        get{ return month; }\n        set{\n            if ((value > 0) && (value < 13)) {\n                month = value;\n            }\n        }//set\n    }//prop\n}//class\n>>>",
            "Как Delphi, так и C# допускают использование индексируемых свойств: в этом случае синтаксис доступа к такому свойству аналогичен доступу к элементу массива. Однако, если в Delphi число индексируемых свойств, равно как и число индексаторов, может быть произвольным, в C# индексатор применим лишь к специальному свойству по умолчанию. Кроме того, в Delphi свойство по умолчанию не только может быть индексируемым, также оно может быть перегружено по типу индексатора: TMyObject = class\nprotected\n  function getStr(Name: string): string; virtual;\n  function getStrByIx(Index: Integer): string; virtual;\n  function getBy2Indicies(X, Y: Integer): string; virtual;\npublic\n  property Value[Name: string]: string  read getStr; default;\n  property Value[Index: Integer]: string read getStrByIx; default;\n  property Value[X, Y: Integer]: string read getBy2Indicies; default; //количество\nend;\n<<<Языки Java и C# были изначально спроектированы для создания программ, работающих в управляемой среде, где управлением временем жизни объектов занимается эта среда: так что ручное управление памятью не допускается. Удобство и безопасность этого подхода отрицательно влияют на производительность.>>>",
            "Delphi оказал огромное влияние на создание концепции языка C# для платформы .NET[источник не указан 4317 дней]. Многие его элементы и концептуальные решения вошли в состав С#. Одной из причин называют переход Андерса Хейлсберга, одного из ведущих разработчиков Дельфи, из компании Borland Ltd. в Microsoft Corp.\n<<<Версия 8 способна генерировать байт-код исключительно для платформы .NET. Это первая среда, ориентированная на разработку многоязычных приложений (лишь для платформы .NET);\nПоследующие версии (обозначаемые годами выхода, а не порядковыми номерами, как это было ранее) могут создавать как приложения Win32, так и байт-код для платформы .NET.>>>",
            "25 августа 2008 года компания Embarcadero, новый хозяин CodeGear, опубликовала пресс-релиз на Delphi for Win32 2009[10]. Версия привнесла множество нововведений в язык, как то[11]:\n<<<По умолчанию полная поддержка Юникода во всех частях языка, VCL и RTL; замена обращений ко всем функциям Windows API на юникодные аналоги (то есть MessageBox вызывает MessageBoxW, а не MessageBoxA).\nОбобщённые типы, они же generics.\nАнонимные методы.\nНовая директива компилятора $POINTERMATH [ON|OFF].\nФункция Exit теперь может принимать параметры в соответствии с типом функции.>>>",
            "Компиляторы<<<Embarcadero Delphi (ранее наз. CodeGear Delphi и Borland Delphi) — вероятно, наиболее известный компилятор, который является последователем Borland Pascal и Turbo Pascal. Используется Win16 (Delphi 1), Win32 (Delphi 2 и позже), Win64 (Delphi 16 (XE2) и позже), а также .NET 1.x, 2.0 (Delphi 8, Delphi 2005-Delphi 2007). Поддержка .NET впоследствии выделена в отдельный продукт, известный как (несовместимый с Delphi) Oxygene.\nFree Pascal (FPC) — свободный компилятор Object Pascal, который поддерживает различные диалекты Паскаля, включая Turbo Pascal (с некоторыми оговорками), Delphi и собственные диалекты. На текущий момент FPC может генерировать код для x86, x86-64, PowerPC, SPARC и процессоров ARM, а также для различных операционных систем, в том числе для Microsoft Windows, Linux, FreeBSD, Mac OS. Существует несколько сред разработки программного обеспечения для FPC (одна из самых известных представителей — Lazarus).\nGNU Pascal (отдельно разработанная версия из GCC). Не ставит целью продолжение серии диалектов Delphi как составляющей Паскаля, но тем не менее содержит режим совместимости с Borland Pascal, и очень медленно приспосабливает компоненты языка Delphi. Не подходит для компиляции больших проектов, содержащих код Delphi, но его поддерживает большинство операционных систем и архитектур.\nOxygene (ранее известен как Chrome) — компилятор ограниченно совместимого с Delphi языка, который интегрирован в Microsoft Visual Studio. Также доступен в виде компилятора с вольной командной строкой CLI. Использует .NET и моноплатформы. Прежде продавался под маркой Embarcadero Delphi Prism.\nMIDletPascal — язык программирования с Delphi-подобным синтаксисом и одноимённый компилятор, который преобразует исходный код в компактный и быстрый байт-код Java.\nPocketStudio — основанная на Паскале IDE для Palm OS.\nVirtual Pascal — Бесплатный компилятор и текстовая IDE для Win32, OS/2 и Linux. На тот момент очень быстрый и весьма совместимый (частично поддерживаются конструкции Delphi 5). Внешне очень похож на текстовую среду Borland Pascal 7, хотя отсутствует совместимая с ним графика, например. Однако разработка окончилась в 2004 году, а исходники открыты не были. С тех пор FPC ушёл намного вперёд и в целом для программирования лучше он. Тем не менее VP остаётся очень неплохим вариантом быстрой замены ещё более устаревших версий Borland Pascal для школы/института, учитывая родную работу в Win32 без проблем с русскими кодировками.>>>",
            "Расширения файлов<<<.pas — исходный код модуля (pascal)\n.dpr — исходный код проекта (pascal)\n.dproj — исходный код проекта (xml)\n.dproj.local — исходный код проекта (xml)\n.dfm — исходный код формы\n.dpk — исходный код проекта пакета\n.bpl — скомпилированный пакет\n.dcu — скомпилированный модуль\n.exe — скомпилированное приложение\n.res — ресурсы\n.dsk — привязки к файлам\n.identcache — кэшированные привязки к файлам>>>",
            "Среди многих распространённых программных продуктов, написанных на Delphi, можно найти[12]:\n<<<Продукция Embarcadero: Embarcadero Delphi, Embarcadero C++ Builder, Borland JBuilder 1 и 2 версии.\nАдминистрирование и разработка баз данных: MySQL Tools, IBExpert, Open Server.\nИнженерное программное обеспечение: Altium Designer, SprutCAM.\nФайловые менеджеры: Total Commander, Frigate, ViewFD, FreeCommander.\nПросмотрщики графики: FastStone Image Viewer, FuturixImager, drComRead.\nРедакторы графики: IcoFX.\nВидео- и аудиопроигрыватели: Light Alloy, The KMPlayer, AIMP, X-Amp, Nata Player.\nПрограммы мгновенного обмена сообщениями: QIP 2012, R&Q, The Bat!, PopTray, FeedDemon, MyChat, Skype (до покупки Microsoft).\nКлиенты файлообменных сетей: Shareman, Ares Galaxy.\nСоздание музыки: FL Studio, Guitar Pro (до версии 6.0).\nРазработка программного обеспечения: Dev-C++, DUnit, Game Maker, Inno Setup, PyScripter, PE Explorer.\nВеб-разработка: Macromedia HomeSite, PHPEdit.\nТекстовые редакторы: BirEdit, Notepad GNU, Bred (до версии Bred 3), PSPad.\nУчёт и налогообложение: Меркурий-ERP, «Бюджет 21», «Парус», AVARDA (до версии 6.x включительно), r_keeper, Traider Alpha.\nСистема электронной очереди «МАКСИМА»[13].\nПрограммы хранения и обработки медицинских изображений Makhaon Worsktation, Makhaon Storage\nПрограммы для создания анимаций: Pivot Stickfigure Animator.\nПрограммы для сжатия данных: ALZip, PowerArchiver, IZArc.\nНахождение и уничтожение шпионского ПО и вредоносных программ: Spybot — Search & Destroy.\nКомпьютерные игры: Age of Wonders, «Космические рейнджеры», Космические рейнджеры HD: Революция, Venom. Codename: Outbreak, Space Empires V, «Правда о девятой роте».\nЛаунчер портативных программ: PortableApps.\nДефрагментация диска: SmartDefrag.\nРазличные системные утилиты: TreeSize.\nТерминал для работы с COM-портом: TerminalTMB.>>>",
            "Некоторые изменения языка, осуществлённые компанией Embarcadero (разработчиком языка) в так называемых NextGen-компиляторах языка Delphi, намеренно нарушили совместимость с накопленной базой исходного кода. Эти изменения были отрицательно восприняты широким кругом опытных Delphi-разработчиков, поскольку, хотя и приближали язык к парадигме языков .NET, но сломали традицию высокой обратной совместимости и существенно затруднили перенос имеющегося исходного кода в программное обеспечение для мобильных платформ.\nУказанные ниже изменения поставили под сомнение самую парадигму мультиплатформенной разработки на базе единого исходного кода, рекламируемую Embarcadero.\n<<<введение индексации строк по нулевой базе>>>",
            "Со времён Pascal исторически сложилось, что встроенный строковый тип индексировался с базой в единицу: «нулевой» элемент строки возвращал длину строки. По мере введения новых («длинных» и «юникодных») строковых типов данный порядок индексации сохранялся, обеспечивая почти бесшовный перенос кодовой базы на обновлённые версии языка. Однако со введением nextgen-компиляции парадигма изменилась: в новых компиляторах строки стали индексироваться по нулевой базе, как и в семействе С-подобных языков (C++, C#, Java), при этом в «классических» компиляторах для Windows и Mac OS парадигма единичной индексации была сохранена.\n<<<введение безальтернативного механизма подсчёта ссылок для экземпляров классов>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Delphi_(язык_программирования)"
    },
    {
        "task": [
            "Серверное оборудование зачастую предназначено для обеспечения работы сервисов в режиме 24/7, поэтому часто комплектуется дублирующими элементами, позволяющими обеспечить «пять девяток» (99,999 %; время недоступности сервера или простой системы составляет менее 6 минут в год). Для этого конструкторами при создании серверов создаются специальные решения, отличные от создания обычных компьютеров:\n<<<Память имеет повышенную устойчивость к сбоям. Например для i386-совместимых серверов, модули оперативной памяти и кэша имеет усиленную технологию коррекции ошибок (англ. Error Checking and Correction, ECC). На некоторых других платформах, например SPARC (Sun Microsystems), вся память имеет коррекцию ошибок. Для собственных мэйнфреймов IBM разработала специальную технологию Chipkill™.\nПовышение надёжности сервера достигается резервированием, в том числе с горячим подключением и заменой (англ. Hot-swap) критически важных компонентов:\nпри необходимости вводится дублирование процессоров (например, это важно для непрерывности выполнения сервером задачи долговременного расчёта — в случае отказа одного процессора вычисления не обрываются, а продолжаются, пусть и на меньшей скорости)\nблоков питания,\nжёстких дисков в составе массива RAID и самих контроллеров дисков,\nгрупп вентиляторов, обеспечивающих охлаждение компонентов сервера.\nВ функции аппаратного мониторинга входят дополнительные каналы для контроля большего количества параметров сервера: датчики температуры (самостоятельно контролирует температурные режимы процессоров, модулей памяти, отсеков с жёсткими дисками), электронные счётчики импульсов, (встроены в вентиляторы, выполняют функции тахометров и позволяют, в зависимости от температуры, регулировать скорость их вращения), постоянный контроль напряжения питания компонентов сервера (позволяет сигнализировать об эффективности работы блоков питания), сторожевой таймер (не позволяет остаться незамеченным зависанию системы, автоматически производя принудительную перезагрузку сервера).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Сервер_(аппаратное_обеспечение)"
    },
    {
        "task": [
            "Устройства ввода графической информации:\n<<<сканер;\nвидео- и веб-камера;\nцифровой фотоаппарат;\nплата видеозахвата, карта для приёма спутникового ТВ.>>>",
            "Устройства ввода звуковой информации:\n<<<микрофон;\nдиктофон[источник не указан 414 дней].>>>",
            " Указательные (координатные) устройства:\n<<<компьютерная мышь;\nтрекбол;\nтачпад;\nсветовое перо;\nграфический планшет;\nсенсорный экран или тачскрин;\nджойстик;\nустройства, основанные на компьютерном зрении, например Kinect.>>>",
            "Игровые устройства ввода:\n<<<геймпад;\nкомпьютерный руль;\nтанцевальная платформа;>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Устройство_ввода"
    },
    {
        "task": [
            "Если в Европе, Америке и др. регионах при написании используются только два варианта — «email» или «e-mail» (причём рекомендации о том, писать дефис или нет, разнятся: например, с марта 2011 года одно из стилистических руководств — AP Stylebook — рекомендует писать сокращение от «электронная почта» как «email», а не «e-mail»[2]), то в русском языке присутствует значительная вариативность. Наиболее часто[источник не указан 1347 дней] в кириллических текстах также используется «e-mail», то есть написание латиницей без транслитерации (визуальное восприятие других форм написания хуже[источник не указан 1347 дней]), но можно встретить и другие написания:\n<<<электронная почта, эл. почта;\nинтернет-почта[3];\nимейл (транскрипция с английского)[4];\nе-мейл, емейл, емайл, е-мэйл, мейл (различные варианты транслитерации и её сокращения).>>>",
            "Де-факто в официальных русскоязычных документах[источник не указан 1347 дней]:\n<<<в тексте (в смысле «способ связи») употребляют выражение «электронная почта»;\nв списке контактов используют префикс «e-mail» (E-mail: user@example.com).>>>",
            "В терминологии электронной почты выделяются следующие компоненты:\n<<<MTA (англ. mail transfer agent — агент пересылки почты) — отвечает за пересылку почты между почтовыми серверами; как правило, первый MTA в цепочке получает сообщение от MUA, последний передаёт сообщение к MDA; возможна реализация с отправкой почты через smart host.\nMDA (англ. mail delivery agent — агент доставки почты) — отвечает за доставку почты конечному пользователю.\nMUA (англ. mail user agent — почтовый агент пользователя; в русской нотации закрепился термин почтовый клиент) — программа, обеспечивающая пользовательский интерфейс, отображающая полученные письма и предоставляющая возможность отвечать, создавать, перенаправлять письма.\nMRA[en] (англ. mail retrieval agent) — почтовый сервер, забирающий почту с другого сервера по протоколам, предназначенным для MDA[9].>>>",
            "Основываясь на работе протоколов, можно разделить их по двум основным критериям:\n<<<производительность сервера — в этом отношении IMAP более требователен к ресурсам, нежели POP3, так как вся работа по обработке почты (такая как поиск) ложится на плечи сервера, POP3 только передаёт почту клиенту;\nпропускная способность канала — здесь IMAP в выигрыше: POP3 передаёт тела всех писем целиком, тогда как IMAP может передавать отдельные части сообщений, например только текстовую, а остальное — по запросу.>>>",
            "При передаче по протоколу SMTP электронное письмо состоит из следующих частей.\n<<<Данные SMTP-конверта, полученные сервером. Часть этих данных может отсутствовать в самом сообщении. Так, например, в RCPT TO (envelope to) содержится список получателей письма, при этом в самом письме получатель может быть не указан. Эта информация передаётся за пределы сервера только в рамках протокола SMTP, и смена протокола при доставке почты (например, на узле-получателе в ходе внутренней маршрутизации) может приводить к потере этой информации. В большинстве случаев эта информация недоступна конечному получателю, который использует не-SMTP-протоколы (POP3, IMAP) для доступа к почтовому ящику. Для возможности контролировать работоспособность системы эта информация обычно сохраняется в журналах почтовых серверов.\nСамо сообщение (в терминологии протокола SMTP — 'DATA'), которое, в свою очередь, состоит из следующих частей, разделённых пустой строкой:\nзаголовки (англ. headers) письма — в них указывается служебная информация и пометки почтовых серверов, через которые прошло письмо, пометки о приоритете, указание на адрес и имя отправителя и получателя письма, тема письма и другая информация;\nтело (англ. body) письма — в нём находится собственно сообщение письма.>>>",
            "Данные SMTP-конверта содержат в себе параметры, которые задаются одноимёнными командами:\n<<<Параметр HELO/EHLO — содержит имя (FQDN) отправляющего узла, либо адрес-литерал отправляющего узла.\nПараметр MAIL FROM — содержит e-mail отправителя. Адрес может быть произвольным (в том числе несуществующим, что допускается протоколом SMTP; однако RFC 5321 содержит рекомендацию использовать или Null Reverse-Path для специальных сообщений, или существующий e-mail[11]), но именно это значение используется для формирования уведомлений об ошибках доставки сообщений (а не значение из поля From заголовка сообщения). Этот адрес, так же, может проверяться при первичной проверке на спам[12] и в иных случаях[каких?]. При отправке сообщения обычный почтовый клиент формирует MAIL FROM из содержимого поля From.\nПараметр RCPT TO — наиболее важное содержимое конверта для доставки почты, содержит электронный адрес одного или нескольких получателей. При формировании SMTP-конверта RCPT TO может использоваться несколько раз. При отправке сообщения обычный почтовый клиент формирует список для RCPT TO из содержимого полей сообщения To, Cc и Bcc.>>>",
            "Заголовки письма описываются стандартами RFC:\n<<<RFC 2076 — Common Internet Message Headers (общепринятые стандарты заголовков сообщений), включает в себя информацию из других RFC: RFC 822, RFC 1036, RFC 1123, RFC 1327, RFC 1496, RFC 1521, RFC 1766, RFC 1806, RFC 1864, RFC 1911).\nRFC 4021 — Registration of Mail and MIME Header Fields (регистрация почты и поля заголовков MIME).>>>",
            "Часто используемые заголовки[править | править код]<<<Return-Path: (RFC 821, RFC 1123) — адрес возврата в случае неудачи, когда невозможно доставить письмо по адресу назначения. Может отличаться от MAIL FROM и заголовков From:, Sender: или Reply-To:, но обычно совпадает с MAIL FROM.\nReceived: (RFC 822, RFC 1123) — данные о прохождении письма через каждый конкретный почтовый сервер (MTA). При прохождении через несколько почтовых серверов (обычная ситуация), новые заголовки дописываются над предыдущими, в конечном итоге журнал перемещения будет записан в обратном порядке (от ближайшего к получателю узла к самому дальнему).\nMIME-Version: (RFC 1521) — версия MIME, с которым это сообщение создано. Зачастую этот заголовок создаётся раньше всех остальных, поэтому он обычно самый первый (то есть последний в списке).\nFrom: (RFC 822, RFC 1123, RFC 1036) — имя и адрес отправителя (именно в этом заголовке появляется текстовое поле с именем отправителя). Может не совпадать с return-path и даже не совпадать с заголовком SMTP MAIL FROM:.\nSender: (RFC 822, RFC 1123) — отправитель письма. Добавлено для возможности указать, что письмо от чьего-то имени (from) отправлено другой персоной (например, секретарём от имени начальника). Некоторые почтовые клиенты показывают сообщение при наличии sender и from как «сообщение от 'sender' от имени 'from'». Sender является информационным заголовком (и также может отличаться от заголовка SMTP MAIL FROM).\nTo: (RFC 822, RFC 1123) — имя и адрес получателя. Может содержаться несколько раз (если письмо адресовано нескольким получателям). На основании этого поля формируется содержимое поля SMTP RCPT TO.\nCc: (RFC 822, RFC 1123) — (от англ. carbon copy) содержит имена и адреса вторичных получателей письма, к которым направляется копия. Участвует в формировании поля SMTP RCPT TO, как и поле «To».\nBcc: (RFC 822, RFC 1123) — (от англ. blind carbon copy) содержит имена и адреса получателей письма, чьи адреса не следует показывать другим получателям. Участвует в формировании поля SMTP RCPT TO, как поля «To» и «Cc», но отсутствует в отправляемом сообщении.\nReply-To: (RFC 822, RFC 1036) — имя и адрес, куда следует адресовать ответы на это письмо. Если, например, письмо рассылается роботом, то в качестве Reply-To будет указан адрес почтового ящика, готового принять ответ на письмо.\nMessage-ID: (RFC 822, RFC 1036) — уникальный идентификатор сообщения. Состоит из адреса узла-отправителя и номера (уникального в пределах узла). Алгоритм генерации уникального номера зависит от сервера/клиента. Выглядит примерно так: AAB77AA2175ADD4BACECE2A49988705C0C93BB7B4A@example.com. Вместе с другими идентификаторами используется для поиска прохождения конкретного сообщения по журналам почтовой системы (почтовые системы фиксируют прохождение письма по его Message-ID) и для указания на письмо из других писем (используется для группировки и построения цепочек писем). Обычно создаётся почтовым клиентом (MUA) в момент составления письма.\nIn-Reply-To: (RFC 822) — указывает на Message-ID, для которого это письмо является ответом (с помощью этого почтовые клиенты могут легко выстраивать цепочку переписки — каждый новый ответ содержит Message-ID для предыдущего сообщения).\nSubject: (RFC 822, RFC 1036) — тема письма.\nDate: (RFC 822, RFC 1123, RFC 1036) — дата отправки письма.\nContent-Type: (RFC 1049, RFC 1123, RFC 1521, RFC 1766) — тип содержимого письма (HTML, RTF, Plain text) и кодировка, в которой создано письмо (см. ниже про кодировки).\nReturn-Receipt-To: (RFC 2076) — e-mail, куда почтовый сервер получателя должен отправить уведомление о доставке. В RFC 2076 упоминается в разделе «Not Internet standard», в силу этого может не поддерживаться серверами.\nDisposition-Notification-To: (RFC 3798) — e-mail, куда почтовый клиент получателя должен отправить уведомление о доставке, если это разрешит пользователь (посредством настроек и т. п.).>>>",
            "В настоящий момент существуют следующие модели коммерческого применения почтовых систем:\n<<<Домашние и корпоративные почтовые системы — функционируют на собственном или арендованном оборудовании владельца почтовой системы (обычно он же является и владельцем домена, в котором работает почтовый сервер).\nУслуга приёма/отправки электронной почты осуществляется сторонней организацией. Организация (персона) владеет доменом и самостоятельно хранит архив переписки.\nУслуги приёма/отправки и хранения почты осуществляет сторонняя организация на своих мощностях. Заказчик получает доступ к системе исполнителя для отправки писем и для доступа к архиву писем. Почтовый домен при этом находится в собственности заказчика.\nПриём, отправка, хранение писем осуществляет исполнитель, почтовый домен принадлежит исполнителю. Большинство подобных сервисов бесплатны и работают за счёт показа рекламы пользователю или являются бесплатным дополнением к другим сервисам исполнителя (подробнее см.: Почтовый сервис#Бесплатные).>>>",
            "Почтовая система позволяет организовать сложные системы, основанные на пересылке почты от одного ко многим абонентам, это:\n<<<Почтовые рассылки — письмо от одного адреса с одинаковым (или меняющимся по шаблону) содержимым, рассылаемое подписчикам рассылки. Технически может быть организовано как отправка множества писем (используется при шаблонных письмах) или как отправка письма со множеством получателей (в полях TO, CC, BCC). Для управления крупными почтовыми рассылками (более 10—50 абонентов) используются специализированные программы (например, mailman). Правильно организованная почтовая рассылка должна контролировать возврат писем (сообщения о невозможности доставить письмо) с исключением недоступных адресатов из списка рассылки, позволять подписчикам отписываться от рассылок. Нежелательные почтовые рассылки называются спамом и существенно осложняют функционирование почтовых систем.\nГруппы переписки — специализированный тип почтовой рассылки, в которой письмо на адрес группы (обычный почтовый адрес, обработкой почты которого занимается специализированная программа) рассылается всем участникам группы. Является аналогом новостных конференций, эхоконференций. Правильно настроенная почтовая рассылка должна контролировать циклы (два робота рассылок, подписанные друг на друга способны создать бесконечный цикл пересылки писем), ограничивать список участников рассылки, имеющих право на помещение сообщения, выполнять прочие требования к почтовой рассылке.>>>",
            "Примеры программ управления рассылками:\n<<<mailman;\nSympa;\nMajordomo.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Электронная_почта"
    },
    {
        "task": [
            "Выражения сходны с большинством других процедурных языков программирования, но в первых вариантах Бейсика их набор был довольно бедным. В самых ранних вариантах число ключевых слов не достигало даже 20. Вот набор основных программных конструкций и интерактивных команд, которые были реализованы практически в любой Бейсик-системе конца 1970-х годов:\n<<<LIST — вывод на монитор текста программы в правильной последовательности строк. В зависимости от реализации команда поддерживала параметры — диапазон строк, который требуется вывести. Иногда поддерживался вариант LLIST — вывод на печатающее устройство.\nRUN — запуск текущей программы с первого оператора строки с самым маленьким номером. Мог поддерживаться параметр — номер строки, с которого нужно начинать исполнение.\nREM — комментарий. Текст, находившийся после ключевого слова и до конца строки, на исполнение программы не влиял. Многие интерпретаторы также поддерживали в качестве знака начала комментария одиночную кавычку '.\nINPUT \"Приглашение: \", Переменная — вывод на монитор текста \"Приглашение: \" и ожидание, пока пользователь не введёт значение и не нажмёт Enter. После этого в Переменную запишется введённое значение. В простейших реализациях приглашение в INPUT не поддерживалось и его нужно было выводить отдельным оператором PRINT (см. ниже).\nPRINT «Текст»; Переменная; Переменная; «Текст» — вывод на монитор последовательно перечисленных объектов (текста и значений переменных). В зависимости от реализации, по-разному воспринимались разделители: в одних случаях разделитель приводил к выводу хотя бы одного пробела, в других — значения выводились подряд и разделители нужно было добавлять вручную. Разделитель «;» выполнял также функцию подавления перевода на следующую строку.\nCLS — очистка экрана терминала. В зависимости от реализации, конструкции и режима работы терминала текстовый курсор переносился либо в верхний левый, либо в нижний левый угол.\nLET — присваивание (формат «LET Переменная = Значение»). В абсолютном большинстве версий оператор LET поддерживался, но был факультативным — присваивания переменным значений записывались без LET).\nDIM — описание массива. В отличие от обычных переменных, массивы требовали описания. Максимальное число размерностей массива определялось только реализацией\nDATA — набор данных, размещаемых прямо в тексте программы (аналог константы или массива-константы).\nREAD — команда считывания из набора DATA.\nGOTO Lbl — команда безусловного перехода на метку Lbl.\nON… GOTO — команда вычисляемого перехода — после ON должно было идти вычисляемое выражение или переменная, а после GOTO — набор меток через запятую. Значение выражения указывало номер метки, на которую нужно перейти.\nIF … THEN … — обычный оператор ветвления. После IF размещается логическое условие, после THEN — оператор, который должен быть выполнен при истинности этого условия. Для сокращения записи многие реализации поддерживали соглашение — если после THEN идёт число, то это — метка, на которую нужно перейти, то есть форма «IF … THEN 150» равнозначна «IF … THEN GOTO 150». Также могли поддерживаться формы «IF … GOTO…»\nFOR ПеременнаяЦикла=НачальноеЗначение TO КонечноеЗначение STEP Шаг — заголовок цикла с шагом. Инициирует цикл, в котором Переменная последовательно проходит ряд значений от НачальноеЗначение до КонечноеЗначение с шагом Шаг. Тело цикла ограничивается заголовком и ключевым словом NEXT. Часть STEP могла опускаться — в этом случае шаг был равен единице. Когда ПеременнаяЦикла выходит за указанные пределы, происходит переход за соответствующий оператор NEXT.\nNEXT — завершение тела цикла с шагом. Оператор показывает, что необходимо перейти на заголовок текущего исполняемого цикла FOR и продолжить работу. В более развитых реализациях NEXT мог содержать список переменных цикла через запятую — это означало, что в данной точке программы завершается тело не одного, а нескольких циклов. Применение NEXT с переменной также страховало от нарушения логики программы, так как вызывало ошибку времени выполнения, если при выполнении этой команды оказывалось, что активен цикл не по той переменной, имя которой указано.\nWHILE Условие — заголовок цикла с предусловием. Цикл завершался, если условие оказывалось ложно. В этом случае происходил переход за соответствующий заголовку оператор WEND.\nWEND — завершение тела цикла WHILE. Аналог NEXT но для цикла с предусловием.\nGOSUB Метка — переход к подпрограмме, начинающейся с Метки. Возврат происходит при достижении оператора RETURN. Рекурсивный вызов процедуры был, как правило, запрещён и приводил к ошибке времени выполнения.\nRETURN — оператор возврата из подпрограммы. Выполняется безусловный переход на оператор, следующий за командой GOSUB, которой был произведён переход к подпрограмме.\nEND — завершение выполнения программы. Система выходит в интерпретатор и пользователю выдаётся приглашение на ввод команд.\nCHAIN — загрузка диапазона строк программы с внешнего носителя.\nOPEN — открытие файла данных на внешнем носителе.\nCLOSE — закрытие файла данных на внешнем носителе.\nGET — последовательное чтение значений указанных переменных из файла с перемещением файлового указателя за последний считанный символ.\nPUT — последовательная запись значений указанных переменных в файл с перемещением файлового указателя за последний записанный символ.\nDELETE — команда интерактивного режима — удаление строки с указанным номером.\nSAVE — команда интерактивного режима — сохранение текущей программы в файле на внешнем носителе.\nLOAD — команда интерактивного режима — загрузка в память программы из файла на внешнем носителе. Как правило, по умолчанию она приводила к уничтожению ранее загруженной программы и данных.\nRENUM — команда интерактивного режима — перенумерация всех или заданного диапазона строк программы начиная с заданного числа с указанным шагом. По умолчанию — перенумеруются все строки программы с шагом 10.>>>",
            "Бейсик поздних версий (начиная с Turbo Basic и Visual Basic) резко отличается от ранних вариантов. Фактически, это новый язык, который во многом ближе к Фортрану или Паскалю, чем к исходному Бейсику. Основные изменения версий 1990-х годов состоят в следующем:\n<<<Отказались от представления программы как неструктурированного набора пронумерованных строк. Номера строк превратились в обычные метки, которые стали необязательными и перестали влиять на порядок исполнения программы. Если ранее строка с номером 15 всегда шла в программе раньше строки с номером 20, то теперь порядок исполнения стал определяться порядком расположения строк в исходном коде. Метки перестали быть только числовыми.\nВ языке появились именованные подпрограммы с параметрами, механизм вызова подпрограмм стал обычным: подпрограмма вызывается по имени, с указанием списка фактических параметров.\nПоявилась рекурсия.\nБыли введены структурные управляющие конструкции, в результате для организации обычных ветвлений и циклов перестало быть необходимым использование оператора GOTO и меток строк.\nСущественно расширилась номенклатура типов данных, появилась возможность явно описывать типы обычных переменных.\nСтали необязательными типизирующие суффиксы в именах переменных, хотя их использование не запрещалось.\nВ более поздних версиях появилась обработка исключений и поддержка элементов ООП.\nБыли введены механизмы поддержки модульности — появилась возможность без «фокусов» (типа динамической загрузки модулей с помощью явных системных вызовов) разделять программу на несколько файлов исходного кода.\nПоявились средства для работы с цветной графикой и звуковой картой.\nVisual Basic, ориентированный на разработку Windows-приложений с графическим интерфейсом пользователя, был выполнен интегрированным с графическим дизайнером интерфейса, что позволило быстро писать простые программы под Windows.\nПоявились кроссплатформенные реализации, например, FreeBASIC и PureBasic.>>>",
            "Советские:\n<<<Вильнюсский университет — Вильнюс\nВЦ СО АН СССР — Новосибирск\nПО «ВЭФ» — Рига\nНижегородский государственный университет имени Н. И. Лобачевского — Нижний Новгород>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Бейсик"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Свободное_и_открытое_программное_обеспечение"
    },
    {
        "task": [
            "\nПринцип действия и способы применения транзисторов существенно зависят от их типа и внутренней структуры.\n<<<Биполярные\nn-p-n-структуры, «обратной проводимости».\np-n-p-структуры, «прямой проводимости».>>>",
            "В биполярном транзисторе носители заряда движутся от эмиттера через тонкую базу к коллектору. База отделена от эмиттера и коллектора p-n-переходами. Ток протекает через транзистор лишь тогда, когда носители заряда инжектируются из эмиттера в базу через p-n-переход. В базе они являются неосновными носителями заряда и легко захватываются другим p-n-переходом между базой и коллектором, ускоряясь при этом. В базовом слое носители заряда распространяются за счёт диффузионного механизма, если нет градиента легирующей примеси в слое базы, или под действием электрического поля при неравномерном легировании базы. Для повышения быстродействия прибора толщина базового слоя должна быть как можно тоньше, но чрезмерное снижение толщины базы вызывает снижение предельно допустимого напряжения коллектора. Управление током между эмиттером и коллектором осуществляется изменением напряжения между базой и эмиттером, от которого зависят условия инжекции носителей заряда в базу и ток базы.<<<Полевые\nс p-n-переходом.\nс изолированным затвором — МДП-транзистор.>>>",
            "Другие разновидности транзисторов[править | править код]<<<Однопереходные транзисторы.\nМногоэмиттерные транзисторы (применяются в транзисторно-транзисторной логике для построения логических элементов И-НЕ)[12][13].\nБаллистические транзисторы.\nОдномолекулярный транзистор[14].\nФототранзисторы.\nДиэлектрические транзисторы>>>",
            "Основная статья: Составной транзистор<<<Транзисторы со встроенными резисторами (Resistor-equipped transistors (RETs)) — биполярные транзисторы со встроенными в один корпус резисторами.\nТранзистор Дарлингтона, пара Шиклаи — комбинация двух биполярных транзисторов, работающая как биполярный транзистор с высоким коэффициентом усиления по току.\nна транзисторах одной структуры;\nна транзисторах разной структуры.\nЛямбда-диод — двухполюсник, сочетание из двух полевых транзисторов, имеющая, как и туннельный диод, значительный участок с отрицательным дифференциальным сопротивлением.\nБиполярный транзистор, управляемый полевым транзистором с изолированным затвором (IGBT) — силовой электронный прибор, предназначенный в основном для управления электрическими приводами.>>>",
            "По рассеиваемой в виде тепла мощности различают:\n<<<маломощные транзисторы до 100 мВт;\nтранзисторы средней мощности от 0,1 до 1 Вт;\nмощные транзисторы (больше 1 Вт).>>>",
            "По исполнению[править | править код]<<<дискретные транзисторы;\nкорпусные\nдля свободного монтажа\nдля установки на радиатор\nдля автоматизированных систем пайки\nбескорпусные\nтранзисторы в составе интегральных схем.>>>",
            "По материалу и конструкции корпуса[править | править код]<<<В металлостеклянном/металлокерамическом корпусе.>>>",
            "Материал корпуса — металл. Материал изоляторов, через которые проходят выводы — стекло либо керамика. Имеют наибольший диапазон температур окружающей среды и максимальную защищённость от воздействия внешних факторов.<<<В пластмассовом корпусе.>>>",
            "Отличаются меньшей стоимостью и более мягкими допустимыми условиями эксплуатации. У мощных приборов в пластмассовом корпусе кроме выводов часто имеется металлический теплоотвод — кристаллодержатель для монтажа прибора на внешний радиатор.<<<Бескорпусные — применяются в составе гибридных микросхем и микромодулей.>>>",
            "Прочие типы[править | править код]<<<Одноэлектронные транзисторы содержат квантовую точку (т. н. «остров») между двумя туннельными переходами. Ток туннелирования управляется напряжением на затворе, связанном с ним ёмкостной связью[15].\nБиотранзистор.>>>",
            "Схемы включения биполярного транзистора[править | править код]<<<с общим эмиттером (ОЭ) — осуществляет усиление как по току, так и по напряжению — наиболее часто применяемая схема;\nс общим коллектором (ОК) — осуществляет усиление только по току — применяется для согласования высокоимпедансных источников сигнала с низкоомными сопротивлениями нагрузок;\nс общей базой (ОБ) — усиление только по напряжению, в силу своих недостатков в однотранзисторных каскадах усиления применяется редко (в основном в усилителях СВЧ), обычно в составных схемах (например, каскодных).>>>",
            "Полевые транзисторы как с p-n-переходом (канальные), так и МОП (МДП) имеют следующие схемы включения:\n<<<с общим истоком (ОИ) — аналог ОЭ биполярного транзистора;\nс общим стоком (ОС) — аналог ОК биполярного транзистора;\nс общим затвором (ОЗ) — аналог ОБ биполярного транзистора.>>>",
            "Вне зависимости от типа транзистора, принцип применения его един:\n<<<Источник питания питает электрической энергией нагрузку, которой может быть громкоговоритель, реле, лампа накаливания, вход другого, более мощного транзистора, электронной лампы. Именно источник питания даёт нужную энергию для работы любой схемы усиления электрического сигнала с помощью транзистора. Сам по себе транзистор усиливать мощность не может. Он является только одним из элементов схемы усиления, хотя и самым главным. С его помощью схема, за счёт небольшой мощности, управляет выходной мощностью, в десятки и сотни раз превышающую мощность управления.\nТранзистор же используется для ограничения силы тока, поступающего в нагрузку, и включается в разрыв между источником питания и нагрузкой. То есть транзистор представляет собой некий вариант полупроводникового резистора, сопротивление которого можно очень быстро изменять.\nВыходное сопротивление транзистора меняется в зависимости от напряжения на управляющем электроде. Важно то, что это напряжение, а также сила тока, потребляемая входной цепью транзистора, гораздо меньше напряжения и силы тока в выходной цепи.>>>",
            "Это положение не всегда верно: так в схеме с общим коллектором ток на выходе в β раз больше, чем на входе, напряжение же на выходе несколько ниже входного; в схеме с общей базой увеличивается напряжение на выходе по сравнению с входом, но выходной ток немного меньше входного. Таким образом, в схеме с общим коллектором происходит усиление только по току, а в схеме ОБ — только по напряжению. За счёт контролируемого управления источником питания достигается усиление сигнала либо по току, либо по напряжению, либо по мощности (схемы с общим эмиттером).\n<<<Если мощности входного сигнала недостаточно для «раскачки» входной цепи применяемого транзистора, или конкретный транзистор не даёт нужного усиления, применяют каскадное включение транзисторов, когда более чувствительный и менее мощный транзистор управляет энергией источника питания на входе более мощного транзистора. Также подключение выхода одного транзистора ко входу другого может использоваться в генераторных схемах типа мультивибратора. В этом случае применяются одинаковые по мощности транзисторы.>>>",
            "Транзистор применяется в:\n<<<Усилительных схемах. Работает, как правило, в усилительном режиме[16][17][18].>>>",
            "Существуют экспериментальные разработки полностью цифровых усилителей, на основе ЦАП, состоящих из мощных транзисторов[19][20]. Транзисторы в таких усилителях работают в ключевом режиме.\n<<<Генераторах сигналов. В зависимости от типа генератора транзистор может использоваться либо в ключевом (генерация прямоугольных сигналов), либо в линейном усилительном режиме (генерация сигналов произвольной формы).\nЭлектронных ключах. Транзисторы работают в ключевом режиме. Ключевые схемы можно условно назвать усилителями (регенераторами) цифровых сигналов. Иногда электронные ключи применяют и для управления силой тока в аналоговом виде. Это применяется, когда нагрузка обладает достаточно большой инерционностью, а напряжение и сила тока в ней регулируются не амплитудой, а шириной импульсов. На подобном принципе основаны бытовые диммеры для ламп накаливания и нагревательных приборов, а также импульсные источники питания, приводы электродвигателей.>>>",
            "Основные преимущества, которые позволили транзисторам заменить своих предшественников (вакуумные лампы) в большинстве электронных устройств:\n<<<малые размеры и небольшой вес, что способствует развитию миниатюризации электронных устройств;\nвысокая степень автоматизации и групповой характер операций на многих этапах технологического процесса изготовления, что ведёт к постоянному снижению удельной стоимости при массовом производстве;\nнизкие рабочие напряжения, что позволяет использовать транзисторы в небольших по габаритам и энерговооружённости электронных устройствах с питанием от малогабаритных электрохимических источников тока;\nне требуется дополнительного времени на разогрев катода после включения, что позволяет достичь почти мгновенной готовности к работе транзисторных устройств сразу после подачи питания;\nмалая, по сравнению с лампами, рассеиваемая мощность, в том числе из-за отсутствия разогрева катода, что способствует повышению энергоэффективности, облегчает отвод избыточного тепла и позволяет повышать компактность устройств;\nвысокая надёжность и бо́льшая физическая прочность, стойкость к механическим ударам и вибрации, что позволяет избежать проблем при использовании устройств в условиях любых ударных и вибрационных нагрузок;\nочень продолжительный срок службы — некоторые транзисторные устройства находились в эксплуатации более 50 лет и при этом не потеряли своей работоспособности;\nвозможность объединения множества элементов в едином миниатюрном конструктивном модуле позволяет значительно повысить степень интеграции и облегчает разработку комбинированных схем высокой сложности, что не представляется возможным с вакуумными лампами.>>>",
            "Недостатки (ограничения)[править | править код]<<<Обычные кремниевые транзисторы не работают при напряжениях выше 1 кВ, вакуумные лампы могут работать с напряжениями на несколько порядков выше 1 кВ (для коммутации цепей с напряжением свыше 1 кВ разработаны IGBT транзисторы);\nПрименение транзисторов в мощных радиовещательных и СВЧ передатчиках нередко оказывается технически и экономически нецелесообразным: требуется параллельное включение и согласование многих сравнительно маломощных усилителей. Мощные и сверхмощные генераторные лампы с воздушным или водяным охлаждением анода, а также магнетроны, клистроны, лампы бегущей волны (ЛБВ) обеспечивают лучшее соотношение частотных характеристик, мощностей и приемлемой стоимости.\nТранзисторы значительно более уязвимы, чем вакуумные лампы, к действию сильных электромагнитных импульсов, которые, в том числе, являются одним из поражающих факторов ядерного взрыва;\nЧувствительность к радиации и воздействию космических излучений (созданы специальные радиационно-стойкие микросхемы для электронных устройств космических аппаратов).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Транзистор"
    },
    {
        "task": [
            "Основные особенности Си:\n<<<простая языковая база, из которой в стандартную библиотеку вынесены многие существенные возможности, вроде математических функций или функций работы с файлами;\nориентация на процедурное программирование;\nсистема типов, предохраняющая от бессмысленных операций;\nиспользование препроцессора для абстрагирования однотипных операций;\nдоступ к памяти через использование указателей;\nнебольшое число ключевых слов;\nпередача параметров в функцию по значению, а не по ссылке (передача по ссылке эмулируется с помощью указателей);\nналичие указателей на функции и статические переменные;\nобласти видимости имён;\nструктуры и объединения — определяемые пользователем собирательные типы данных, которыми можно манипулировать как одним целым.>>>",
            "В то же время в Си отсутствуют:\n<<<вложенные функции;\nпрямое возвращение нескольких значений из функций;\nсопрограммы;\nсредства автоматического управления памятью;\nвстроенные средства объектно-ориентированного программирования;\nсредства функционального программирования.>>>",
            "Несмотря на широкое распространение идеи нуль-терминированных строк и удобство их использования в некоторых алгоритмах, у них есть несколько серьёзных недостатков.\n<<<Необходимость добавления в конец строки терминального символа не даёт возможность получить подстроку без необходимости её копирования, а функций для работы с указателем на подстроку и её длиной в языке не предусмотрено.\nЕсли требуется заранее выделять память под результат алгоритма на основе входных данных, каждый раз требуется обходить всю строку для подсчёта её длины.\nПри работе с большими объёмами текста подсчёт длины может оказаться узким местом.\nРабота со строкой, которая по ошибке не терминирована нулём, может приводить к неопределённому поведению программы, в том числе к ошибкам сегментирования, ошибкам переполнения буфера и к уязвимостям.>>>",
            "В число возможностей препроцессора входит:\n<<<подмена заданной лексемы текстом с помощью директивы #define, включая возможность создания параметризованных шаблонов текста (вызываются аналогично функциям), а также отменять подобные подмены, что даёт возможность осуществлять подмену на ограниченных участках текста программы;\nусловное встраивание и удаление кусков из текста, включая сами директивы, с помощью условных команд #ifdef, #ifndef, #if, #else и #endif;\nвстраивание в текущий файл текста из другого файла с помощью директивы #include.>>>",
            "Программа представляет собой набор файлов с кодом на языке Си, которые могут компилироваться в объектные файлы. Объектные файлы затем проходят этап компоновки друг с другом, а также со внешними библиотеками, в результате чего получается итоговый исполняемый файл или библиотека. Связь файлов друг с другом, равно как и с библиотеками, требует описания прототипов используемых функций, внешних переменных и необходимых типов данных в каждом файле. Такие данные принято выносить в отдельные заголовочные файлы, которые подключаются с помощью директивы #include в тех файлах, где требуется та или иная функциональность, и позволяют организовывать систему, похожую на систему модулей. Модулем в таком случае может выступать:\n<<<набор отдельных файлов с исходным кодом, для которых представлен интерфейс в виде заголовочных файлов;\nобъектная библиотека или её часть, с соответствующими заголовочными файлами;\nсамодостаточный набор из одного или более заголовочных файлов (интерфейсная библиотека);\nстатическая библиотека или её часть с соответствующими заголовочными файлами;\nдинамическая библиотека или её часть с соответствующими заголовочными файлами.>>>",
            "В качестве маркеров ошибок обычно выступают следующие значения:\n<<<-1 для типа int в случаях, когда отрицательный диапазон результата не используется[56];\n-1 для типа ssize_t (POSIX)[57];\n(size_t) -1 для типа size_t[56];\n(time_t) -1 при использовании некоторых функций для работы со временем[56];\nNULL для указателей[56];\nEOF при потоковой работе с файлами[56];\nненулевой код ошибки[56].>>>",
            "Более сложной является обработка ошибок в математических функциях из заголовочного файла math.h, в которых могут возникать 3 типа ошибок[64]:\n<<<выход за пределы диапазона входных значений;\nполучение бесконечного результата для конечных входных данных;\nвыход результата за пределы диапазона используемого типа данных.>>>",
            "Предотвращение двух из трёх типов ошибок сводится к проверкам входных данных на область допустимых значений. Однако предсказать выход результата за пределы типа крайне сложно. Поэтому стандартом языка предусмотрена возможность анализа математических функций на ошибки. Начиная со стандарта C99 такой анализ возможен двумя способами, в зависимости от значения, хранимого в макросе math_errhandling.\n<<<Если выставлен бит MATH_ERRNO, то переменную errno необходимо предварительно сбросить в 0, а после вызова математической функции — проверить на ошибки EDOM и ERANGE.\nЕсли выставлен бит MATH_ERREXCEPT, то возможные математические ошибки предварительно сбрасываются функцией feclearexcept() из заголовочного файла fenv.h, а после вызова математической функции —тестируются с помощью функции fetestexcept().>>>",
            "Некоторые компиляторы идут в комплекте с компиляторами других языков программирования (включая C++) или являются составной частью среды разработки программного обеспечения.\n<<<GNU Compiler Collection (GCC) полностью поддерживает стандарты C99 и C17 (C11 с исправлениями)[68]. Также поддерживает расширения GNU, защиту кода с помощью санитайзеров и набор дополнительных возможностей, в том числе атрибуты.\nClang также полностью поддерживает стандарты C99[69] и C17[70]. Разрабатывается во многом совместимым с компилятором GCC, в том числе поддерживает расширения GNU и защиту кода санитайзерами.>>>",
            "Несмотря на то, что стандартная библиотека входит в стандарт языка, её реализации идут отдельно от компиляторов. Поэтому стандарты языка, поддерживаемые компилятором и библиотекой, могут различаться.\n<<<Открытая библиотека glibc является основной во многих дистрибутивах GNU/Linux, поддерживает стандарты C11 и POSIX.1-2008[71], а также предоставляет набор исправлений и дополнительных возможностей от GNU.\nОткрытая библиотека musl задумывалась в качестве более легковесной замены для glibc, используется как библиотека по умолчанию в дистрибутиве Alpine Linux[72], Void Linux[73].\nБиблиотека CRT от Microsoft поддерживает стандарт C99, поставляется как компонент в составе Windows 10[74].>>>",
            "Интегрированные среды разработки[править | править код]<<<CLion полностью поддерживает C99, но поддержка С11 — частичная[75], сборка основана на CMake.\nCode::Blocks — свободная кроссплатформенная интегрированная среда разработки для языков Си, C++, D, Fortran. Поддерживает более двух десятков компиляторов. С компилятором GCC доступен Си всех версий от C90 до C17.\nEclipse — свободная интегрированная среда разработки, поддерживающая язык Си стандарта С99. Имеет модульную архитектуру, что даёт возможность подключения поддержки разных языков программирования и дополнительных возможностей. Доступен модуль для интеграции с Git, однако отсутствует интеграция с CMake.\nKDevelop — свободная интегрированная среда разработки, поддерживающая некоторые особенности языка Си из стандарта C11. Позволяет управлять проектами, использующими разные языки программирования, включая C++ и Python, поддерживает систему сборки CMake. Имеет встроенную поддержку Git на уровне работы с файлами и настраиваемое форматирование исходного кода для разных языков.\nMicrosoft Visual Studio лишь частично поддерживает стандарты C99 и C11, поскольку ориентируется на разработку под C++, однако имеет встроенную поддержку CMake.>>>",
            "Поскольку язык Си не предоставляет средств для безопасного написания кода, а многие элементы языка способствуют появлению ошибок, написание качественного и отказоустойчивого кода можно гарантировать только с помощью создания автоматизированных тестов. Для упрощения такого тестирования существуют различные реализации сторонних библиотек модульного тестирования.\n<<<Библиотека Check предоставляет фреймворк для тестирования программного кода на языке Си в общепринятом стиле xUnit. Среди возможностей можно упомянуть запуск тестов в отдельных процессах через fork(), что позволяет распознавать в тестах ошибки сегментирования[76], а также даёт возможность задавать максимальное время исполнения отдельных тестов.\nБиблиотека Google Test также предоставляет тестирование по принципам xUnit, но предназначена для тестирования кода на языке C++, что позволяет её использовать для тестирования кода и на языке Си. Также поддерживает изолированное тестирование отдельных частей программы. Одним из достоинств библиотеки является разделение макросов тестирования на утверждения и ошибки, что может облегчить отладку кода.>>>",
            "По проявлениям ошибок не всегда можно сделать однозначный вывод о проблемном месте в коде, однако локализовать проблему часто помогают различные средства отладки.\n<<<Gdb — интерактивный консольный отладчик для различных языков, в том числе и для Си.\nValgrind является средством динамического анализа кода, может выявлять ошибки в коде непосредственно во время выполнения программы. Поддерживает выявление: утечек, обращений в неинициализированную память, обращений по неверным адресам (в том числе переполнение буфера). Также поддерживает исполнение в режиме профилирования с помощью профайлера callgrind[77].\nKCacheGrind — графический интерфейс для визуализации результатов профилирования, полученных с помощью профайлера callgrind[78].>>>",
            "Иногда, в целях переноса тех или иных библиотек, функций и инструментов, написанных на Си, в иную среду, требуется компиляция Си-кода на язык более высокого уровня или в код виртуальной машины, предназначенной для такого языка. Следующие проекты предназначены для этих целей:\n<<<Emscripten[79] — компилятор из LLVM-байт-кода (например, полученный из C++) в JavaScript.\nFlascc[en] (старое название — Alchemy)[80] — компилятор из Си/C++ в ActionScript Virtual Machine (AVM2). Позволяет использовать Си-библиотеки в Flash- и Adobe AIR-приложениях.\nClue[81] — компилятор из ANSI Си в Lua, JavaScript, Perl, Java, Common Lisp.\nAMPC[82] — компилятор из Си в виртуальную машину Java.>>>",
            "Также для Си существуют и другие инструменты, облегчающие и дополняющие разработку, включая статические анализаторы и утилиты для форматирования кода. Статический анализ помогает выявлять потенциальные ошибки и уязвимости. А автоматическое форматирование кода упрощает организацию совместной работы в системах контроля версий, минимизируя конфликты из-за стилевых правок.\n<<<Cppcheck — статический анализатор кода для языков Си и C++ с открытыми исходными текстами, иногда выдаёт ложные срабатывания, которые можно подавлять специально оформленными комментариями в коде.\nClang-format — утилита командной строки для форматирования исходного кода согласно заданному стилю, который может указываться в специально оформленном файле конфигурации. Обладает множеством параметров и несколькими встроенными стилями. Разрабатывается в рамках проекта Clang[83].\nУтилиты Indent и GNU Indent также предоставляют форматирование кода, но параметры форматирования задаются в виде опций командной строки[84].>>>",
            "Синтаксис Си не включает специального механизма обработки ошибок. Стандартная библиотека поддерживает лишь простейшие средства: переменная (в случае POSIX — макрос) errno из заголовочного файла errno.h для установки кода последней ошибки и функции для получения сообщений об ошибках согласно кодам.[⇨] Такой подход приводит к необходимости писать большой объём повторяющегося кода, смешивая основной алгоритм с обработкой ошибок, к тому же он не является потокобезопасным. Причём даже в этом механизме нет единого порядка:\n<<<большинство функций стандартной библиотеки при ошибке возвращает маркер -1[⇨], а сам код требуется получать из errno, если функция его выставляет;\nв стандарте POSIX принято возвращать код ошибки напрямую, но не все функции этого стандарта так делают;\nво многих функциях, например, fopen(), fread() и fwrite(), выставление errno не стандартизировано и может отличаться в разных реализациях[55] (в POSIX требования более строгие и указаны некоторые из вариантов возможных ошибок[⇨]);\nесть функции, у которых маркер ошибки является одним из допустимых возвращаемых значений, и перед их вызовом приходится обнулять errno, чтобы быть уверенным, что код ошибки был установлен именно этой функцией[55].>>>",
            "Выпущено значительное количество исследований о правильном программировании на Си, от небольших статей до объёмных книг. Для поддержания качества кода на Си принимаются корпоративные и отраслевые стандарты. В частности:\n<<<MISRA C — стандарт, разработанный Motor Industry Software Reliability Association для использования Си в разработке встроенных систем транспортных средств. Сейчас MISRA C используется во многих отраслях, в том числе в военной, медицинской и аэрокосмической. Редакция 2013 года содержит 16 директив и 143 правила, включающие требования к коду и ограничения на использование определённых языковых средств (например, запрещено использование функций с переменным числом параметров). На рынке имеется около десятка инструментов проверки кода на соответствие MISRA C и несколько компиляторов со встроенной проверкой ограничений этого стандарта.\nCERT C Coding Standard — стандарт, разрабатываемый координационным центром CERT[111]. Он также имеет целью обеспечение надёжного и безопасного программирования на Си. Включает правила и рекомендации для разработчиков, в том числе примеры неправильного и правильного кода по каждому отдельно взятому случаю. Стандарт используется в разработке продуктов такими компаниями как Cisco и Oracle[112].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Си_(язык_программирования)"
    },
    {
        "task": [
            "Правовая охрана компьютерных программ возможна по двум разным правовым режимам:\n<<<Режимом авторского права,\nРежимом патентного права.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Проприетарное_программное_обеспечение"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Плагин"
    },
    {
        "task": [
            "На телетайпе интерфейс командной строки был единственным возможным[источник не указан 438 дней]. На видеотерминалах интерфейс командной строки может применяться по следующим причинам[источник не указан 1145 дней]:\n<<<Более скромные требования к ресурсам по сравнению с другими видами интерфейсов.\nПри большом наборе возможных команд опытные пользователи могут работать с приложением быстрее, чем с системой меню.\nИнтерфейс командной строки может быть естественно расширен до пакетного интерфейса, а команды стать частью сценарного языка. Выполнение сценария (скрипта) подобно вводу команд по очереди в командную строку. Примеры — .bat-файлы в DOS и Windows, shell-скрипты в Unix-системах.>>>",
            "Параметры команд могут иметь самый разный формат. В основном применяются следующие правила:\n<<<параметры разделяются пробелами (и отделяются от названия команды пробелом)\nпараметры, содержащие пробелы, обрамляются кавычками-апострофами (') или двойными кавычками (\")\nесли параметр используется для обозначения включения какой-либо опции, выключенной по умолчанию, он начинается с косой черты (/) или дефиса (-)\nесли параметр используется для включения/выключения какой-либо опции, он начинается (или заканчивается) знаком плюс или минус (для включения и выключения соответственно)\nесли параметр указывает действие из группы действий, назначенных команде, он не начинается со специальных символов\nесли параметр указывает объект, к которому применяется действие команды, он не начинается со специальных символов\nесли параметр указывает дополнительный параметр какой-либо опции, то он имеет формат /опция:дополнительный_параметр (вместо косой черты также может употребляться дефис)>>>",
            "/map dm1 /skill:2<<</ — символ начала команды\nmap — название команды (переход на другой уровень)\ndm1 — обязательный параметр (название уровня)\n/skill:2 — дополнительный параметр (задание уровня сложности)>>>",
            "Основные сферы применения интерфейса командной строки:\n<<<операционные системы\nчаты\nкомпьютерные игры[1]>>>",
            "Консоль Asterisk<<<САПР\nAutoCAD\nтекстовые редакторы\nVim\nБраузеры\nVimperator — расширение для браузера Firefox, позволяющее управлять им, как редактором Vim\nразличные клиенты IRC\nAsterisk>>>",
            "Достоинства<<<Легкость автоматизации. Shell script в UNIX-подобных системах является полноценным интерпретируемым языком программирования и способен автоматизировать любую системную задачу. В Windows присутствует их примитивный аналог — пакетные файлы, и более мощный аналог — powershell. По сути, это — простейшая программируемость. С графическим интерфейсом без поддержки программой командной строки это сделать почти невозможно.\nМожно управлять программами, не имеющими графического интерфейса (например, выделенным сервером).\nЛюбую команду можно вызвать небольшим количеством нажатий.\nМожно обращаться к командам для разных исполнимых файлов почти мгновенно и непосредственно, тогда как в GUI приходится сначала запускать, а затем закрывать графический интерфейс для каждого исполнимого файла.\nПросмотрев содержимое консоли, можно повторно увидеть промелькнувшее сообщение, которое вы не успели прочитать.\nМожно пользоваться удаленным компьютером с любого устройства подключаемого к Интернету или локальной сети (ПК, субноутбук, КПК, сотовый телефон, портативная игровая консоль) без особых затрат трафика (единицы килобайт за сеанс).\nОтсутствие деталей интерфейса, таких как пусковые панели и рамки окон, что при равных разрешениях позволяет вместить значительно больше текста на страницу.\nВозможность работы через стандартизированные линии передачи данных, такие как RXD, TXD в RS232, на небольшой скорости (наиболее часто 9600 бод), делает этот интерфейс основным, а порой и единственно возможным, для встраиваемых систем, систем с небольшой вычислительной мощностью, иных недорогих и экономичных устройств. Принтеры, жёсткие диски, роутеры, датчики пожарной охраны — лишь малая часть примеров такого оборудования.\nЛегче отладка сообществом. Если пользователь столкнулся с проблемой или ошибкой, на интернет-форуме достаточно оставить копию диалога пользователя и ЭВМ. Такой листинг имеет однозначное толкование (в том числе по порядку ввода и появления сообщений), в отличие от графического интерфейса, когда нужно не только отправить копию экрана, и порой не одну (что уже само по себе может быть проблемно), но также и входящие данные (какую «галочку» и где нажать, и тому подобное). К тому же, копия экрана одной и той же программы может существовать на разных языках, что усложнит отладку международным сообществом.\nПоскольку данный стандарт существует десятки лет без особых изменений, можно быть уверенным, что не только личный опыт, но и руководства, опыт сообщества, и другие наработки по работе с командной строкой, будут востребованы и полезны ещё длительное время, не придётся переучиваться и тратить время на адаптацию к новым возможностям либо искать замену внезапно исключённым функциям, работа останется доведённой до автоматизма - что особенно важно в профессиональной среде.[3]>>>",
            "Недостатки<<<Интерфейс командной строки не является «дружелюбным» для пользователей, которые начали знакомство с компьютером с графического режима, из-за почти отсутствующих возможностей интуитивного обнаружения (англ. discoverabililty).[4]\nНеобходимость изучения синтаксиса команд и запоминания сокращений, осложняющаяся тем, что каждая команда может иметь свои собственные обозначения.[4]\nБез автодополнения, ввод длинных и содержащих спецсимволы параметров с клавиатуры может быть затруднительным.\nОтсутствие «аналогового» ввода. Например подбор громкости с помощью озвученного ползунка позволяет выставить подходящую громкость быстрее, чем командой вроде aumix -v 90. (Однако, озвученный ползунок вполне может быть псевдографическим, что реализовано в большинстве консольных плееров).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Интерфейс_командной_строки"
    },
    {
        "task": [
            "Таблицы УДК состоят из следующих частей:\n<<<структура, свойства и принципы УДК;\nметодические указания по применению УДК;\nосновные разделы УДК;\nалфавитно-предметные указатели (АПУ) к основным разделам УДК;\nвспомогательные таблицы УДК;\nалфавитно-предметные указатели к вспомогательным таблицам.>>>",
            "Общие определители[править | править код]<<<«=…» — Определители языка, на котором написан классифицируемый документ.\n«(0…)» — Определители формы классифицируемого документа: книга, периодическое издание, реферат, …\n«(1/9)» — Определители места.\n«(=…)» — Определители народов.\n«\"…\"» — Определители времени.\n«-…» — Другие общие определители: свойств, материалов и лиц.>>>",
            "Специальные определители «−1/-9», «.01/.09» и «'1/'9» имеют ограниченные сферы применения. Каждый из этих видов определителей используется для обозначения характерной повторяющейся детализации в тех разделах основной таблицы, для которых они разработаны и в которых помещены, а иногда и в некоторых других разделах, если это специально оговорено. Таким образом, в отличие от общих определителей (вспомогательная таблица «I»), группа или подгруппа специальных определителей с одной и той же нотацией может иметь различное значение в разных разделах УДК, например, «−3» в «54», «62» и «82» или «.02» в «06», «53», «54», «57», «621.3», «629.656», «677» и «7». Однако в одном разделе они всегда обозначают одинаковые повторяющиеся характеристики, независимо от того, используются ли они с основным индексом УДК, под которым перечисляются, или же добавляются к подразделам этого индекса.\n<<<В УДК используются специальные определители трёх видов:\nопределители с дефисом «−1/-9» (кроме «−0», см. таблицу «1k»), выполняющие в основном аналитическую или дифференцирующую функцию, служат для обозначения элементов, составных частей, свойств и других признаков предметов, выраженных основным индексом УДК, при котором приведена таблица этих определителей, и его непосредственными подразделениями. Например, определители «−1/-9» в разделах «62/69» обозначают технологические характеристики и детали машин, в разделах «82/89» — литературные формы и жанры (поэзия, драматургия, роман и т. д.);\nопределители с точкой и нулём «.01/.09» более разнообразны по применению и содержанию и часто разработаны с большей степенью детализации, чем «−1/-9». Они содержат такие повторяющиеся характеристики, как аспект рассмотрения, деятельность, процессы, операции, машины и оборудование. Например, определители «.07/.08», помещённые в разделе «35», могут применяться во всех разделах «31/39»; определители «.01/.09» имеются в классе «5» (например, в разделах «523», «528», «53», «54», «556», «57/59»), в классах «8» и «9»; особенно широко они используются в классе «6»;\nопределители с апострофом «'1/'9», в отличие от «−1/-9» и (ещё более) от «.01/.09», выполняют, главным образом, синтетическую или интегрирующую функцию и служат для создания комплексно-предметной нотации путём объединения отдельных составляющих элементов, компонентов и других характеристик; в одних случаях эти элементы явно представлены в качестве полностью приведённых таблиц, в других — образуются из соответствующих подразделений основного индекса при помощи параллельного подразделения «'1/'9» ? «.1/.9».\nВсе три вида специальных определителей могут быть применены:\nв виде единичных определителей какого-либо одного типа, (например, «547.29-41 Реагенты для органических кислот»; «882.09 Критика в русской литературе»);\nв комбинации однотипных определителей, (например, «62-242-436 Поршни двигателей сферические»; «678.652’737’21 Поликонденсатные меламинформальдегиды»);\nв комбинированной цепи определителей разных видов, (например, «329.12’23.052 Либерально-республиканские оппозиционные партии»; «882-31.09 Русский роман, критика»).\nРекомендуемая форма методических указаний о применении определителей с апострофом в тех разделах УДК, где методические указания даны не полностью: «Для обозначения… подразделения… могут применяться в качестве специального определителя со знаком «'» (апостроф), заменяющим…» (например в «553.3/.4» для уточнения залежей сложных полиметаллических руд подразделения «.3/.4» из «553» можно использовать в качестве специальных определителей «'3/'4», где знак «'» (апостроф) заменяет «553»; в «622.34» — для обозначения разработки месторождений сложных полиметаллических руд подразделения «622.341/.349» могут применяться в качестве специальных определителей «'41/'49», где знак «'» (апостроф) заменяет «622.3»).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Универсальная_десятичная_классификация"
    },
    {
        "task": [
            "Определения из нормативных документов, в том числе стандартов:\n<<<База данных — представленная в объективной форме совокупность самостоятельных материалов (статей, расчётов, нормативных актов, судебных решений и иных подобных материалов), систематизированных таким образом, чтобы эти материалы могли быть найдены и обработаны с помощью электронной вычислительной машины (ЭВМ)[5]\nБаза данных — совокупность данных, организованных в соответствии с концептуальной структурой, описывающей характеристики этих данных и взаимоотношения между ними, которая поддерживает одну или более областей применения[6].>>>",
            "Определения из авторитетных монографий:\n<<<База данных — организованная в соответствии с определёнными правилами и поддерживаемая в памяти компьютера совокупность данных, характеризующая актуальное состояние некоторой предметной области и используемая для удовлетворения информационных потребностей пользователей[7].\nБаза данных — некоторый набор перманентных (постоянно хранимых) данных, используемых прикладными программными системами какого-либо предприятия[8].\nБаза данных — совместно используемый набор логически связанных данных (и описание этих данных), предназначенный для удовлетворения информационных потребностей организации[9].>>>",
            "В определениях наиболее часто (явно или неявно) присутствуют следующие отличительные признаки[10]:\n<<<БД хранится и обрабатывается в вычислительной системе.Таким образом, любые внекомпьютерные хранилища информации (архивы, библиотеки, картотеки и т. п.) базами данных не являются.\nДанные в БД логически структурированы (систематизированы) с целью обеспечения возможности их эффективного поиска и обработки в вычислительной системе.Структурированность подразумевает явное выделение составных частей (элементов), связей между ними, а также типизацию элементов и связей, при которой с типом элемента (связи) соотносится определённая семантика и допустимые операции[11].\nБД включает схему, или метаданные, описывающие логическую структуру БД в формальном виде (в соответствии с некоторой метамоделью).В соответствии с ГОСТ Р ИСО МЭК ТО 10032-2007, «постоянные данные в среде базы данных включают в себя схему и базу данных. Схема включает в себя описания содержания, структуры и ограничений целостности, используемые для создания и поддержки базы данных. База данных включает в себя набор постоянных данных, определённых с помощью схемы. Система управления данными использует определения данных в схеме для обеспечения доступа и управления доступом к данным в базе данных»[1].>>>",
            "В классификацию по модели данных обычно включают:\n<<<иерархические;\nобъектные или объектно-ориентированные;\nобъектно-реляционные;\nреляционные;\nсетевые;\nфункциональные.>>>",
            "Также базы данных могут классифицироваться по содержимому, например, могут быть географическими, историческими, научными, мультимедийными. Для некоторых форм содержания строятся специализированные СУБД, либо добавляются специализированные возможности в СУБД общего назначения, среди таковых баз данных:\n<<<пространственные (англ. spatial database): базы с пространственными свойствами сущностей предметной области, используются в геоинформационных системах;\nвременны́е (темпоральные, англ. temporal database): поддерживают какой-либо аспект времени, не считая времени, определяемого пользователем.>>>",
            "По степени распределённости базы данных подразделяются на следующие классы:\n<<<централизованные (сосредоточенные; англ. centralized database) — полностью поддерживаемые на одном компьютере\nраспределённые (англ. distributed database), составные части которых размещаются в различных узлах компьютерной сети в соответствии с каким-либо критерием.>>>",
            "Среди распределённых баз данных выделяют:\n<<<сегментированные: разделённые на независимые сегменты, каждый из которых управляется отдельным экземпляром сервера базы данных, размещаемым, как правило, на отдельном вычислительном узле;\nтиражированные (реплицированные; англ. replicated database): одни и те же данные разнесены под управление различных экземпляров СУБД;\nнеоднородные (англ. heterogeneous distributed database): фрагменты распределённой базы в разных узлах сети поддерживаются средствами более одной СУБД.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/База_данных"
    },
    {
        "task": [
            "\n\nНазвание\nАкроним\nФормфактор\nТСЗАП\n\n\nPC Card\nPCMCIA\n85,6 × 54 × 3,3 мм\nНет\n\n\nCompactFlash I\nCF-I\n43 × 36 × 3,3 мм\nНет\n\n\nCompactFlash II\nCF-II\n43 × 36 × 5,5 мм\nНет\n\n\nSmartMedia\nSM / SMC\n45 × 37 × 0,76 мм\nНет\n\n\nMemory Stick\nMS\n50,0 × 21,5 × 2,8 мм\nMagicGate\n\n\nMemory Stick Duo\nMSD\n31,0 × 20,0 × 1,6 мм\nMagicGate\n\n\nMemory Stick PRO Duo\nMSPD\n31,0 × 20,0 × 1,6 мм\nMagicGate\n\n\nMemory Stick PRO-HG Duo\nMSPDX\n31,0 × 20,0 × 1,6 мм\nMagicGate\n\n\nMemory Stick Micro M2\nM2\n15,0 × 12,5 × 1,2 мм\nMagicGate\n\n\nMiniature Card\n\n37 × 45 × 3,5 мм\nНет\n\n\nMultimedia Card\nMMC\n32 × 24 × 1,5 мм\nНет\n\n\nReduced Size Multimedia Card\nRS-MMC\n16 × 24 × 1,5 мм\nНет\n\n\nMMCmicro Card\nMMCmicro\n12 × 14 × 1,1 мм\nНет\n\n\nSecure Digital card\nSD\n32 × 24 × 2,1 мм\nCPRM\n\n\nSxS\nSxS\n\nнеизвестно\n\n\nUniversal Flash Storage\nUFS\n15 × 11 × 0,74 мм[4]\nнеизвестно\n\n\nminiSD card\nminiSD\n21,5 × 20 × 1,4 мм\nCPRM\n\n\nmicroSD card (TransFlash)\nmicroSD, TF\n15 × 11 × 0,7 мм\nCPRM\n\n\nxD-Picture Card\nxD\n20 × 25 × 1,7 мм\nНет\n\n\nIntelligent Stick\niStick\n24 × 18 × 2,8 мм\nНет\n\n\nSerial Flash Module\nSFM\n45 × 15 мм\nНет\n\n\nµ card\nµcard\n32 × 24 × 1 мм\nнеизвестно\n\n\nNT Card\nNT NT+\n44 × 24 × 2,5 мм\nНет\n<<<\n\n\nSecure Digital (SD)\n\n\n\nCompactFlash (CF-I)\n\n\n\nMemory Stick\n\n\n\nMultiMediaCard (MMC)\n\n\n\nSmartMedia\n\n\n\nxD-Picture Card (xD)\n\n>>>",
            "Картридер имеет вид флешки и позволяет читать карты памяти разных форматов<<<SD to CF (Secure Digital SD to CF CompactFlash Card Adapter Type II)\nSDHC to CF\nMicro SD/TF to CF\nMS to CF\nMicroSD (TF) to MS/MS Pro Duo\nMS to PC card\nMicro SD to SD\nUSB (типа флешки)>>>",
            "Ёмкости в скобках относятся к официальным картам памяти, выпущенным в первых партиях.\n<<<Линейка Microsoft Xbox:\nXbox Memory Unit (8 Мбайт)\nXbox 360 Memory Unit (64 Мбайт/256 Мбайт/512 Мбайт)\nЛинейка Nintendo:\nNintendo 64 Controller Pak (256 Кбит/32 Кбайт), поделённых на 123 страницы\nNintendo GameCube Memory Card версии: 59 блоков (4 Мбит/512 Кбайт), 251 блок (16 Мбит/2 Мбайт) и 1019 блоков (64 Мбит/8 Мбайт)\nWii Nintendo GameCube совместимая с Multimedia Card или совместимая с картой Secure Digital до 2 GB\nNintendo DSi совместимая с картой Secure Digital\nSega Dreamcast Visual Memory Unit (VMU) (128 Кбайт поделённых на 200 блоков)\nКарта памяти Sega Saturn может иметь 20 блоков с записями игр.\nЛинейка Sony PlayStation:\nКарта памяти PlayStation (1 Мбит/128 Кбайт, поделённых на 15 блоков).\nPlayStation 2 использует карты 8 Мбайт для своего собственного контента и поддерживает карты памяти PlayStation для обратной совместимости. Сторонними производителями выпускаются карты большей ёмкости, но они не поддерживаются официально.\nДля ранних моделей PlayStation 3 характерна интеграция с CompactFlash, Secure Digital и Memory Stick PRO Duo. Внешние устройства позволяют импортировать и экспортировать сохранения на карты памяти PlayStation и PlayStation 2.\nМодели PSP-1000, −2000, −3000 и −E1000 используют для хранения данных Memory Stick PRO Duo, тогда как модель PSP Go использует Memory Stick Micro.\nPlayStation Vita использует карты памяти собственного формата (от 4 до 64 Гбайт).\nПортативная игровая консоль GP2X на базе GNU/Linux использует карты SD/MMC.\nNeo Geo AES, разработанная в 1990 г. фирмой SNK Playmore, была первой игровой консолью, использующей карты памяти. Карты памяти AES совместимы также с Neo-Geo MVS для игровых автоматов.>>>",
            "Причины поломок карт памяти<<<Для снижения себестоимости, производители карт памяти иногда могут устанавливать низкокачественные микросхемы NAND памяти с очень низким показателем максимального количества циклов записи в ячейку памяти;\nНекорректное извлечение карты памяти из устройства. При этом может произойти сбой и карта памяти выйдет из строя. Поэтому рекомендуется предварительно «извлечь» в системе карту памяти или штатно выключить устройство, а только потом вытаскивать карту памяти из разъёма;\nРазличные механические воздействия на карту памяти: удары, падения, вибрация. При этом на карте памяти может отойти заводская пайка или треснуть печатная плата, на которой распаяны все элементы;\nИспользование карты памяти в видеорегистраторе автомобиля с циклической записью. Из-за очень частой записи информации в ячейки памяти, использование карт памяти в видеорегистраторах очень сильно ускоряет процесс износа микросхем NAND памяти[6];>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Карта_памяти"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Микропроцессор"
    },
    {
        "task": [
            "На разных операционных системах и средах — независимо от того, как технически достигнута работа в них — стандартные элементы интерфейса имеют разные размеры. Поэтому простое жёсткое позиционирование элементов интерфейса невозможно — в другой операционной системе (среде) они могут «налезать» друг на друга, «расплываться», «пьянеть». Существует несколько подходов:\n<<<Единый стиль, общий для всех операционных систем, программы выглядят одинаково под всеми системами. Так работают интерфейсные библиотеки Java наподобие Swing.\nПлюс: можно жёстко расставлять элементы управления на манер Delphi, оригинальный стиль.\nМинус: системе приходится иметь свои экранные шрифты, и стиль отличается от стиля ОС.\nСамоадаптирующийся (адаптивный) интерфейс, подстраивающий сетку под реальные размеры элементов управления. Типичные примеры — Qt, wxWidgets, XUL.\nПлюс: стандартный стиль операционной системы, очень быстрый и «скинующийся» под Windows XP, Vista и Windows 7, и некоторая автоматизация локализации.\nМинус: чтобы собрать самоадаптирующуюся (адаптивную) сетку, требуется квалифицированный программист, а также затруднена плотная компоновка.\nГибридный подход реализован в GTK+.\nПлюс: шрифты можно брать из системы, а не «тащить» свои, а также некоторая автоматизация локализации.\nМинус: берёт все недостатки от первых двух подходов. Стиль отличается от стиля операционной системы, затруднена плотная компоновка.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Кроссплатформенность"
    },
    {
        "task": [
            "Хронология<<<1943 — У. Маккалок и У. Питтс формализуют понятие нейронной сети в фундаментальной статье о логическом исчислении идей и нервной активности[2]. В начале своего сотрудничества с Питтсом Н. Винер предлагает ему вакуумные лампы в качестве средства для реализации эквивалентов нейронных сетей[5].\n1948 — опубликована книга Н. Винера о кибернетике. Основной идеей стало представление сложных биологических процессов математическими моделями.\n1949 — Д. Хебб предлагает первый алгоритм обучения.\nВ 1958 Ф. Розенблатт изобретает однослойный перцептрон и демонстрирует его способность решать задачи классификации[6]. Перцептрон использовали для распознавания образов, прогнозирования погоды. К моменту изобретения перцептрона завершилось расхождение теоретических работ Маккалока с «кибернетикой» Винера; Маккалок и его последователи вышли из состава «Кибернетического клуба».\nВ 1960 году Бернард Уидроу[en] совместно со своим студентом Хоффом на основе дельта-правила (формулы Уидроу) разработали Адалин, который сразу начал использоваться для задач предсказания и адаптивного управления. Адалин был построен на базе созданных ими же (Уидроу — Хоффом) новых элементах — мемисторах[7][8].\nВ 1963 году в Институте проблем передачи информации АН СССР А. П. Петровым проводится исследование задач, «трудных» для перцептрона[9]. На эту работу в области моделирования ИНС в СССР опирался М. М. Бонгарда в своей работе как «сравнительно небольшой переделкой алгоритма (перцептрона) исправить его недостатки»[10].\nВ 1969 году М. Минский публикует формальное доказательство ограниченности перцептрона и показывает, что он не способен решать некоторые задачи (проблема «чётности» и «один в блоке»), связанные с инвариантностью представлений.\nВ 1972 году Т. Кохонен и Дж. Андерсон[en] независимо предлагают новый тип нейронных сетей, способных функционировать в качестве памяти[11].\nВ 1973 году Б. В. Хакимов предлагает нелинейную модель с синапсами на основе сплайнов и внедряет её для решения задач в медицине, геологии, экологии[12].\n1974 — Пол Дж. Вербос[13] и Галушкин А. И.[14] одновременно изобретают алгоритм обратного распространения ошибки для обучения многослойных перцептронов[15].\n1975 — Фукусима[en] представляет когнитрон — самоорганизующуюся сеть, предназначенную для инвариантного распознавания образов, но это достигается только при помощи запоминания практически всех состояний образа.\n1982 — Дж. Хопфилд показал, что нейронная сеть с обратными связями может представлять собой систему, минимизирующую энергию (сеть Хопфилда). Кохоненом представлены модели сети, обучающейся без учителя (нейронная сеть Кохонена), решающей задачи кластеризации, визуализации данных (самоорганизующаяся карта Кохонена) и другие задачи предварительного анализа данных.\n1986 — Дэвидом И. Румельхартом, Дж. Е. Хинтоном и Рональдом Дж. Вильямсом[16], а также независимо и одновременно С. И. Барцевым и В. А. Охониным[17], переоткрыт и развит метод обратного распространения ошибки.\n2007 — Джеффри Хинтоном в университете Торонто созданы алгоритмы глубокого обучения многослойных нейронных сетей. Хинтон при обучении нижних слоёв сети использовал ограниченную машину Больцмана (RBM — Restricted Boltzmann Machine). По Хинтону необходимо использовать много примеров распознаваемых образов (например, множество лиц людей на разных фонах). После обучения получается готовое быстро работающее приложение, способное решать конкретную задачу (например, осуществлять поиск лиц на изображении).>>>",
            "Используемые архитектуры нейросетей[править | править код]<<<Обучение с учителем:\nПерцептрон\nСвёрточные нейронные сети>>>",
            "Обучение с учителем:\nПерцептрон\nСвёрточные нейронные сети<<<Обучение без учителя:\nСети адаптивного резонанса>>>",
            "Обучение без учителя:\nСети адаптивного резонанса<<<Смешанное обучение:\nСеть радиально-базисных функций>>>",
            "Используемые архитектуры нейросетей[править | править код]<<<Обучение без учителя:>>>",
            "Используемые архитектуры нейросетей[править | править код]<<<Обучение с учителем:>>>",
            "Перцептрон<<<Смешанное обучение:>>>",
            "Используемые архитектуры нейросетей[править | править код]<<<Обучение с учителем:>>>",
            "Перцептрон<<<Смешанное обучение:>>>",
            "Используемые архитектуры нейросетей[править | править код]<<<Обучение с учителем:>>>",
            "Перцептрон<<<Обучение без учителя:>>>",
            "Используемые архитектуры нейросетей[править | править код]<<<Обучение без учителя:>>>",
            "Этапы решения задач<<<Сбор данных для обучения;\nПодготовка и нормализация данных;\nВыбор топологии сети;\nЭкспериментальный подбор характеристик сети;\nЭкспериментальный подбор параметров обучения;\nСобственно обучение;\nПроверка адекватности обучения;\nКорректировка параметров, окончательное обучение;\nВербализация сети[21] с целью дальнейшего использования.>>>",
            "Выбор данных для обучения сети и их обработка является самым сложным этапом решения задачи. Набор данных для обучения должен удовлетворять нескольким критериям:\n<<<Репрезентативность — данные должны иллюстрировать истинное положение вещей в предметной области;\nНепротиворечивость — противоречивые данные в обучающей выборке приведут к плохому качеству обучения сети.>>>",
            "Исходные данные преобразуются к виду, в котором их можно подать на входы сети. Каждая запись в файле данных называется обучающей парой или обучающим вектором. Обучающий вектор содержит по одному значению на каждый вход сети и, в зависимости от типа обучения (с учителем или без), по одному значению для каждого выхода сети. Обучение сети на «сыром» наборе, как правило, не даёт качественных результатов. Существует ряд способов улучшить «восприятие» сети.\n<<<Нормировка выполняется, когда на различные входы подаются данные разной размерности. Например, на первый вход сети подаются величины со значениями от нуля до единицы, а на второй — от ста до тысячи. При отсутствии нормировки значения на втором входе будут всегда оказывать существенно большее влияние на выход сети, чем значения на первом входе. При нормировке размерности всех входных и выходных данных сводятся воедино;\nКвантование выполняется над непрерывными величинами, для которых выделяется конечный набор дискретных значений. Например, квантование используют для задания частот звуковых сигналов при распознавании речи;\nФильтрация выполняется для «зашумленных» данных.>>>",
            "В разделе не хватает ссылок на источники (см. рекомендации по поиску). Информация должна быть проверяема, иначе она может быть удалена. Вы можете отредактировать статью, добавив ссылки на авторитетные источники в виде сносок. (7 декабря 2023)<<<Аналоговые нейронные сети (используют информацию в форме действительных чисел);\nДвоичные нейронные сети (оперируют с информацией, представленной в двоичном виде);\nОбразные нейронные сети (оперируют с информацией, представленной в виде образов: знаков, иероглифов, символов).>>>",
            "В разделе не хватает ссылок на источники (см. рекомендации по поиску). Информация должна быть проверяема, иначе она может быть удалена. Вы можете отредактировать статью, добавив ссылки на авторитетные источники в виде сносок. (7 декабря 2023)<<<Обучение с учителем — выходное пространство решений нейронной сети известно;\nОбучение без учителя — нейронная сеть формирует выходное пространство решений только на основе входных воздействий. Такие сети называют самоорганизующимися;\nОбучение с подкреплением — система назначения штрафов и поощрений от среды.>>>",
            "В разделе не хватает ссылок на источники (см. рекомендации по поиску). Информация должна быть проверяема, иначе она может быть удалена. Вы можете отредактировать статью, добавив ссылки на авторитетные источники в виде сносок. (7 декабря 2023)<<<Сети с фиксированными связями (весовые коэффициенты нейронной сети выбираются сразу, исходя из условий задачи, при этом: \n\n\n\n\nd\n\nW\n\n/\n\nd\nt\n=\n0\n\n\n{\\displaystyle {\\boldsymbol {d}}W/dt=0}\n\n, где W — весовые коэффициенты сети);\nСети с динамическими связями (для них в процессе обучения происходит настройка синаптических связей, то есть \n\n\n\n\nd\n\nW\n\n/\n\nd\nt\n≠\n0\n\n\n{\\displaystyle {\\boldsymbol {d}}W/dt\\not =0}\n\n, где W — весовые коэффициенты сети).>>>",
            "Радиально-базисная сеть характеризуется тремя особенностями:\n<<<Единственный скрытый слой;\nТолько нейроны скрытого слоя имеют нелинейную активационную функцию;\nСинаптические веса связей входного и скрытого слоёв равны единице.>>>",
            "Начальное вложение сетки в пространство данных выбирается произвольным образом. В авторском пакете SOM_PAK предлагаются варианты случайного начального расположения узлов в пространстве и вариант расположения узлов в плоскости. После этого узлы начинают перемещаться в пространстве согласно следующему алгоритму:\n<<<Случайным образом выбирается точка данных \n\n\n\nx\n\n\n{\\displaystyle x}\n\n.\nОпределяется ближайший к \n\n\n\nx\n\n\n{\\displaystyle x}\n\n узел карты (BMU — Best Matching Unit).\nЭтот узел перемещается на заданный шаг по направлению к \n\n\n\nx\n\n\n{\\displaystyle x}\n\n. Однако он перемещается не один, а увлекает за собой определённое количество ближайших узлов из некоторой окрестности на карте. Из всех двигающихся узлов наиболее сильно смещается центральный — ближайший к точке данных — узел, а остальные испытывают тем меньшие смещения, чем дальше они от BMU. В настройке карты различают два этапа — этап грубой (ordering) и этап тонкой (fine-tuning) настройки. На первом этапе выбираются большие значения окрестностей и движение узлов носит коллективный характер — в результате карта «расправляется» и грубым образом отражает структуру данных; на этапе тонкой настройки радиус окрестности равен 1-2 и настраиваются уже индивидуальные положения узлов. Кроме этого, величина смещения равномерно затухает со временем, то есть она велика в начале каждого из этапов обучения и близка к нулю в конце.\nАлгоритм повторяется определённое число эпох (понятно, что число шагов может сильно изменяться в зависимости от задачи).>>>",
            "Вычислительные системы, основанные на нейронных сетях, обладают рядом качеств, которые отсутствуют в машинах с архитектурой фон Неймана (но присущи мозгу человека):\n<<<Массовый параллелизм;\nРаспределённое представление информации и вычисления;\nСпособность к обучению и обобщению;\nАдаптивность;\nСвойство контекстуальной обработки информации;\nТолерантность к ошибкам;\nНизкое энергопотребление.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Нейронная_сеть"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Интегрированная_среда_разработки"
    },
    {
        "task": [
            "Монолитное ядро предоставляет богатый набор абстракций оборудования. Все части монолитного ядра работают в одном адресном пространстве. Это такая схема операционной системы, при которой все компоненты её ядра являются составными частями одной программы, используют общие структуры данных и взаимодействуют друг с другом путём непосредственного вызова процедур. Монолитное ядро — старейший способ организации операционных систем. Примером систем с монолитным ядром является большинство UNIX-систем.\n<<<Достоинства: Скорость работы, упрощённая разработка модулей.\nНедостатки: Поскольку всё ядро работает в одном адресном пространстве, сбой в одном из компонентов может нарушить работоспособность всей системы.>>>",
            "Микроядро предоставляет только элементарные функции управления процессами и минимальный набор абстракций для работы с оборудованием. Бо́льшая часть работы осуществляется с помощью специальных пользовательских процессов, называемых сервисами. Решающим критерием «микроядерности» является размещение всех или почти всех драйверов и модулей в сервисных процессах, иногда с явной невозможностью загрузки любых модулей расширения в собственно микроядро, а также разработки таких расширений. Примером системы с микроядром является Symbian OS.\n<<<Достоинства: Устойчивость к сбоям оборудования, ошибкам в компонентах системы. Основное достоинство микроядерной архитектуры — высокая степень модульности ядра операционной системы. Это существенно упрощает добавление в него новых компонентов. В микроядерной операционной системе можно, не прерывая её работы, загружать и выгружать новые драйверы, файловые системы и т. д. Существенно упрощается процесс отладки компонентов ядра, так как новая версия драйвера может загружаться без перезапуска всей операционной системы. Компоненты ядра операционной системы ничем принципиально не отличаются от пользовательских программ, поэтому для их отладки можно применять обычные средства. Микроядерная архитектура повышает надежность системы, поскольку ошибка на уровне непривилегированной программы менее опасна, чем отказ на уровне режима ядра.\nНедостатки: Передача данных между процессами требует накладных расходов.>>>",
            "Классические микроядра предоставляют лишь очень небольшой набор низкоуровневых примитивов, или системных вызовов, реализующих базовые сервисы операционной системы.\n<<<Сервисные процессы (в принятой в семействе UNIX терминологии — «демоны») активно используются в самых различных ОС для задач типа запуска программ по расписанию (UNIX и Windows NT), ведения журналов событий (UNIX и Windows NT), централизованной проверки паролей и хранения пароля текущего интерактивного пользователя в специально ограниченной области памяти (Windows NT). Тем не менее, не следует считать ОС микроядерными только из-за использований такой архитектуры.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Ядро_операционной_системы"
    },
    {
        "task": [
            "Суперкомпьютеры используются в сферах:\n<<<где для решения задачи применяется численное моделирование, сопряженное с очень большим объёмом сложных вычислений;\nгде требуется большой объём сложных вычислений, обработка большого количества данных в реальном времени, или решение задачи может быть найдено простым перебором множества значений множества исходных параметров (см. Метод Монте-Карло).>>>",
            "Совершенствование методов численного моделирования происходило одновременно с совершенствованием вычислительных машин. Чем сложнее были задачи, тем выше были требования к создаваемым машинам. Чем быстрее были машины, тем сложнее были задачи, которые на них можно было решать. Поначалу суперкомпьютеры применялись почти исключительно для оборонных задач: расчёты по ядерному и термоядерному оружию, ядерным реакторам, проектированию подводных кораблей. Потом, по мере совершенствования математического аппарата численного моделирования, развития знаний в других сферах науки — суперкомпьютеры стали применяться и в мирных расчётах и расчётах двойного назначения, создавая новые научные дисциплины, как то:\n<<<численный прогноз погоды,\nвычислительная биология и медицина,\nвычислительная химия,\nвычислительная гидродинамика,\nвычислительная лингвистика и проч., — где достижения информатики сливались с достижениями прикладной науки.>>>",
            "Ниже приведён неполный список областей применения суперкомпьютеров:\n<<<Математические проблемы:\nКриптография\nСтатистика>>>",
            "Математические проблемы:\nКриптография\nСтатистика<<<Физика высоких энергий:\nЯдерная физика, физика плазмы, анализ данных экспериментов, проведённых на ускорителях микрочастиц;\nразработка и совершенствование атомных и термоядерных взрывных устройств, управление ядерным арсеналом, моделирование ядерных взрывов;\nмоделирование жизненного цикла ядерных топливных элементов, проекты ядерных и термоядерных реакторов.>>>",
            "Физика высоких энергий:\nЯдерная физика, физика плазмы, анализ данных экспериментов, проведённых на ускорителях микрочастиц;\nразработка и совершенствование атомных и термоядерных взрывных устройств, управление ядерным арсеналом, моделирование ядерных взрывов;\nмоделирование жизненного цикла ядерных топливных элементов, проекты ядерных и термоядерных реакторов.<<<Наука о Земле:\nпрогноз погоды, состояния морей и океанов;\nпрогноз эволюции климата и её последствий;\nисследование процессов, происходящих в земной коре, для предсказания землетрясений и извержений вулканов;\nанализ данных геологической разведки для поиска и оценки нефтяных и газовых месторождений, моделирование процесса выработки месторождений;\nмоделирование растекания рек во время паводка, растекания нефти во время аварий;>>>",
            "Наука о Земле:\nпрогноз погоды, состояния морей и океанов;\nпрогноз эволюции климата и её последствий;\nисследование процессов, происходящих в земной коре, для предсказания землетрясений и извержений вулканов;\nанализ данных геологической разведки для поиска и оценки нефтяных и газовых месторождений, моделирование процесса выработки месторождений;\nмоделирование растекания рек во время паводка, растекания нефти во время аварий;<<<Вычислительная биология: фолдинг белка, расшифровка ДНК;>>>",
            "Вычислительная биология: фолдинг белка, расшифровка ДНК;<<<Вычислительная химия и медицина: изучение строения вещества и природы химической связи как в изолированных молекулах, так и в конденсированном состоянии, поиск и создание новых катализаторов и лекарств.>>>",
            "Вычислительная химия и медицина: изучение строения вещества и природы химической связи как в изолированных молекулах, так и в конденсированном состоянии, поиск и создание новых катализаторов и лекарств.<<<Физика:\nгазодинамика: газотурбинные двигатели, горение топлива, аэродинамические процессы для создания совершенных форм крыла и лопаток, фюзеляжей самолётов, ракет, кузовов автомобилей;\nгидродинамика: течение жидкостей по трубам, по руслам рек, обтекание корабельных корпусов;\nматериаловедение: создание новых материалов с заданными свойствами, анализ распределения динамических нагрузок в конструкциях, моделирование крэш-тестов при конструировании автомобилей;\nв качестве сервера для искусственных нейронных сетей[2][3]\nсоздание принципиально новых способов вычисления и обработки информации (Квантовый компьютер[4][5], Искусственный интеллект[6][7])>>>",
            "Первые суперкомпьютеры имели производительность порядка 1 кфлопс, то есть 1000 операций с плавающей точкой в секунду. В США компьютер, имевший производительность в 1 МФлопс (1 миллион флопсов) (CDC 6600), был создан в 1964 году. Известно, что в 1963 году в московском НИИ-37 (позже НИИ ДАР) был разработан компьютер на основе модулярной арифметики с производительностью 2,4 млн оп/с. Это был экспериментальный компьютер второго поколения (на дискретных транзисторах) Т340-А[8] (гл. конструктор Д. И. Юдицкий). Однако прямое сравнение производительности модулярных и классических («фон-неймановских») ЭВМ некорректно. Модулярная арифметика оперирует только с целыми числами. Представление вещественных чисел в модулярных ЭВМ возможно только в формате с фиксированной запятой, недостатком коего является существенное ограничение диапазона представимых чисел.\n<<<Планка в 1 миллиард флопс (1 Гигафлопс) была преодолена суперкомпьютерами NEC SX-2 в 1983 году с результатом 1.3 Гфлопс.\nВ 1996 году суперкомпьютером ASCI Red взят барьер в 1 триллион флопс (1 Тфлопс).\nРубеж 1 квадриллион флопс (1 Петафлопс) перейден в 2008 году суперкомпьютером IBM Roadrunner.\nРубеж 1 квинтиллион флопс (1 Эксафлопс) перейден в 2022 году суперкомпьютером Frontier.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Суперкомпьютер"
    },
    {
        "task": [
            "Возможны две физические (в частности электронные) реализации бита (одного двоичного разряда):\n<<<однофазный («однопроводный») бит (двоичный разряд). Используется один выход двоичного триггера. Нулевой уровень обозначает либо сигнал логического «0», либо неисправность схемы. Высокий уровень обозначает либо сигнал логической «1», либо исправность схемы. Дешевле двухфазной реализации, но менее надёжен;\nдвухфазный (парафазный, «двухпроводный») бит (двоичный разряд). Используются оба выхода двоичного триггера. При исправной схеме один из двух уровней высокий, другой — низкий. Неисправность схемы опознаётся либо высоким уровнем на обоих проводах (на обеих фазах), либо низким уровнем на обоих проводах (на обеих фазах). Дороже однофазной реализации, но более надёжен.>>>",
            "В международном стандарте МЭК (IEC) 60027-2 2005 года[6] для применения в электротехнической и электронной областях рекомендуются обозначения:\n<<<«bit» для обозначения бита;\n«o» или «B» для обозначения октета или байта. «о» — единственное указанное обозначение во французском языке.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Бит"
    },
    {
        "task": [
            "Запрос «Пузырь криптовалют»[d] перенаправляется сюда. На эту тему нужно создать отдельную статью.<<<\nКриптовалюты часто сравниваются с пирамидными схемами и экономическими пузырями, такими как, например, пузырь на рынке недвижимости.[89][90] Говард Маркс[en] из Oaktree Capital Management[en] заявил в 2017 году, что цифровые валюты являются «не чем иным, как необоснованной манией (или, возможно, пирамидной схемой), основанной на желании придать вес чему-то, чего имеется очень мало или совсем ничего, кроме того, что люди будут платить за это», и сравнил это с тюльпаноманией (1637), финансовой пирамидой Компании Южных морей (1720) и пузырём доткомов (1999)[91]. Есть и примеры явного мошенничества в данной сфере: паразитируя на неинформированности населения об особенностях криптовалют, была создана система OneCoin, которая позиционировалась как криптовалюта, но при этом изначально являлась финансовой пирамидой; вся информация была централизована только у компании-эмитента, и последняя могла произвольно изменять любые данные, так как не было блокчейна, его лишь имитировала обычная база SQL[92].\nРоберт Шиллер, американский учёный-экономист, лауреат премии по экономике памяти Альфреда Нобеля, считает, что биткойн демонстрирует схожесть с экономическим пузырём[93][94]. При этом любая коммерция, использующая криптовалюты, пострадает от их огромной нестабильности.\nПол Кругман, также нобелевский лауреат по экономике, очень скептичен относительно утверждений, что будущее финансов именно за криптоактивами. Он обращает внимание, что криптовалюты так и не обрели широкого применения, кроме сферы нелегальной деятельности. Он также указывает на схожесть рынка криптовалют с «пузырем» на рынке субстандартного ипотечного кредитования 2007—2008 годов[95][96].\nБывший глава ФРС, Алан Гринспен назвал bitcoin пузырём без присущей валюте ценности[97].\n14 марта 2014 года бизнесмен Уоррен Баффет в телевизионной передаче «Squawk Box» назвал bitcoin «миражом» и посоветовал «держаться от него подальше»[98].\nАвстралийский экономист Джон Квиггин в статье «Пузырь биткойн и плохая гипотеза»[99] утверждает, что «Биткойн является лучшим примером чистого пузыря». Как и любой денежный актив, от золота до табака и долларов США, ценность биткойнов будет сохраняться, пока люди готовы его принять. Но готовность брать активы всегда зависит от той ценности актива, которая зависит от его применимости, а не исключительно от готовности других людей им владеть. Табак можно курить, из золота можно делать ювелирные изделия, долларами США можно погасить обязательства перед правительством США. Но у биткойна источник ценности отсутствует. Если биткойны перестанут принимать при оплате товаров и услуг, то их стоимость гарантированно станет нулевой. При этом биткойны демонстрируют несостоятельность гипотезы эффективного рынка, согласно которой рыночную стоимость актива определяет текущая оценка стоимости услуг или потока дохода, которые актив будет генерировать. Криптовалюты непосредственно никаких доходов не генерируют, а значит, их цена должна стремиться к нулю.\nЭксперты инвестиционного банка Goldman Sachs, сопоставив котировки биткойна, Ethereum и акций компаний, анонсировавших внедрение технологии блокчейн в свой бизнес, сделали вывод, что вокруг криптоиндустрии образовался огромный пузырь[100].\nВ октябре 2017 главный управляющий компании BlackRock Ларри Финк (Larry Fink) заявил, что биткойн является «индексом отмывания денег»[101]. Многие другие авторы считают, что цифровые деньги могут стать инструментами для анонимных интернет-преступников[77]; отмывание денег через криптовалюты может быть достигнуто посредством анонимных транзакций[77], поскольку этот способ обмена сложно (а в некоторых случаях, невозможно) отследить; он может упростить уклонение от уплаты налогов для физических лиц[77].\nПервый заместитель председателя Центрального банка Российской Федерации Ксения Юдаева сообщила: «В ходе обсуждения на „Большой двадцатке“ было отмечено, что криптоактивы как расчётное средство „в сотни раз менее эффективны, чем традиционные платёжные системы“»[102].\nВ июне 2022 года Билл Гейтс заявил, что криптовалюты «на 100 % основаны на теории большего дурака»[103].\nВ декабре 2022 года глава Резервного банка Индии Шактиканта Дас заявил, что следующий мировой финансовый кризис могут вызвать частные криптовалюты из-за их сугубо спекулятивной природы. Он считает, что подобные частные проекты государство должно запретить и даже не начинать регулировать, так как любое регулирование позволит расти спекулятивым операциям, что неизбежно приведёт к финансовому кризису[104].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Криптовалюта"
    },
    {
        "task": [
            "где:\n<<<\n\n\n\nn\n\n\n{\\displaystyle n}\n\n — количество цифр (знаков) в числе,\n\n\n\n\n\na\n\nk\n\n\n\n\n{\\displaystyle a_{k}}\n\n — значения цифр из множества {0,1},\n\n\n\n\nk\n\n\n{\\displaystyle k}\n\n — порядковый номер цифры.>>>",
            "где:\n<<<\n\n\n\nm\n\n\n{\\displaystyle m}\n\n — количество цифр дробной части числа,\n\n\n\n\n\na\n\nk\n\n\n\n\n{\\displaystyle a_{k}}\n\n — значения цифр из множества \n\n\n\n{\n0\n,\n1\n}\n\n\n{\\displaystyle \\{0,1\\}}\n\n.>>>",
            "Если в исходном числе есть целая часть, то она преобразуется отдельно от дробной. Перевод дробного числа из десятичной системы счисления в двоичную осуществляется по следующему алгоритму:\n<<<Дробь умножается на основание двоичной системы счисления (2);\nВ полученном произведении выделяется целая часть, которая принимается в качестве старшего разряда числа в двоичной системе счисления;\nАлгоритм завершается, если дробная часть полученного произведения равна нулю или если достигнута требуемая точность вычислений. В противном случае вычисления продолжаются над дробной частью произведения.>>>",
            "Двоичная система используется в цифровых устройствах, поскольку является наиболее простой и соответствует требованиям:\n<<<Чем меньше значений существует в системе, тем проще изготовить отдельные элементы, оперирующие этими значениями. В частности, две цифры двоичной системы счисления могут быть легко представлены многими физическими явлениями: есть ток (ток больше пороговой величины) — нет тока (ток меньше пороговой величины), индукция магнитного поля больше пороговой величины или нет (индукция магнитного поля меньше пороговой величины) и т. д.\nЧем меньше количество состояний у элемента, тем выше помехоустойчивость и тем быстрее он может работать. Например, чтобы закодировать три состояния через величину напряжения, тока или индукции магнитного поля, потребуется ввести два пороговых значения и два компаратора,>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Двоичная_система_счисления"
    },
    {
        "task": [
            "Скриншоты наиболее распространённых дистрибутивов<<<\n\n\nUbuntu 22.04 \"Jammy Jellyfish\"\n\n\n\nDebian 10 \"Buster\"\n\n\n\nFedora 31\n\n\n\nLinux Mint 19.1 \"Tessa\"\n\n\n\nelementary OS 5.0 \"Hera\"\n\n\n\nArch Linux\n\n\n\nopenSUSE 15.1\n\n\n\nZorin OS 15\n\n\n\nGentoo Linux 10.1\n\n\n\nOpenMandriva Lx 4.0\n\n\n\nSlackware 15.0\n\n>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Дистрибутив_Linux"
    },
    {
        "task": [
            "В реальном режиме память делится на следующие участки:\n<<<основная область памяти (англ. conventional memory),\nрасширенная память (EMS),\nдополнительная память (XMS),\nUpper Memory Area (UMA),\nHigh Memory Area (HMA).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Оперативная_память"
    },
    {
        "task": [
            "Деннис Ритчи, один из создателей Unix, выразил своё мнение, что Unix-подобные системы, такие, как Linux, являются де-факто Unix-системами. Эрик Рэймонд предложил разделить Unix-подобные системы на 3 типа:\n<<<Генетический Unix: Системы, исторически связанные с кодовой базой AT&T. Большинство, но не все коммерческие дистрибутивы Unix-систем попадают под эту категорию. Так же, как и BSD-системы, которые являются результатами работы университета Беркли в поздних 1970-х и ранних 1980-х. В некоторых из этих систем отсутствует код AT&T, но до сих пор прослеживается происхождение от разработки AT&T.\nUNIX по товарному знаку, или бренду: эти системы, в основном коммерческого характера, были определены The Open Group как соответствующие Единой спецификации UNIX, и им разрешено носить имя UNIX. Большинство этих систем — коммерческие производные кодовой базы UNIX System V в той или иной форме (например, Amiga UNIX), хотя некоторые (например, z/OS компании IBM) заслужили торговую марку через слой совместимости с POSIX, не являясь, по сути, Unix. Многие старые Unix-системы не подходят под это определение.\nUnix по функциональности: В целом, любая система, поведение которой примерно соответствует спецификации UNIX. К таким системам можно отнести Linux, Minix и BSD/OS, которые ведут себя подобно Unix-системе, но не имеют генетических связей с кодовой базой AT&T. Большинство свободных/открытых реализаций Unix, являясь генетическим Unix или нет, подпадают под ограниченное определение этой категории в связи с дороговизной сертификации The Open Group, которая стоит несколько тысяч долларов.>>>",
            "Исследовательские системы<<<Unix (разработана Bell Labs в 1970 году, идея Кена Томпсона)\nMach (от разработчиков ядер ОС в CMU; см.: NeXTSTEP)\nxv6 (учебная ОС, сделанная в MIT)\nK42 (разрабатывается в IBM)\nMISS (первая отечественная[уточнить] Unix-подобная операционная система)\nДЕМОС (советский клон Unix)\nИНМОС (Инструментальная мобильная операционная система — разработана в СССР в 1985 году в ИНЭУМ Институт электронных управляющих машин, головное КБ Минприбора).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Unix-подобная_операционная_система"
    },
    {
        "task": [],
        "link": "https://ru.wikipedia.org/wiki/Бесплатное_программное_обеспечение"
    },
    {
        "task": [
            "В России подготовка специалистов в этой области ведется по следующим направлениям:\n<<<01.03.02 «Прикладная математика и информатика»\n02.03.01 «Математика и компьютерные науки»\n02.03.02 «Фундаментальная информатика и информационные технологии»\n02.03.03 «Математическое обеспечение и администрирование информационных систем»\n09.02.03 «Программирование в компьютерных системах»\n09.02.07 «Информационные системы и программирование»\n09.03.01 «Информатика и вычислительная техника»\n09.03.02 «Информационные системы и технологии»\n09.03.03 «Прикладная информатика»\n09.03.04 «Программная инженерия»\n09.03.05 «Информационно-аналитические системы безопасности»\n10.03.01 «Информационная безопасность»\n10.05.03 «Информационная безопасность автоматизированных систем»\n10.05.01 «Компьютерная безопасность»\n38.03.05 «Бизнес-информатика»>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Программист"
    },
    {
        "task": [
            "Формы организации взаимодействия ЭВМ и человека при машинном переводе<<<С постредактированием: исходный текст перерабатывается машиной, а человек-редактор исправляет результат.\nС предредактированием: человек приспосабливает текст к обработке машиной (устраняет возможные неоднозначные прочтения, упрощает и размечает текст), после чего начинается программная обработка.\nС интерредактированием: человек вмешивается в работу системы перевода, разрешая трудные случаи.\nСмешанные системы (например, одновременно с пред- и постредактированием).>>>",
            "Автоматизированный перевод предполагает такие формы взаимодействия:\n<<<Частично автоматизированный перевод: например, использование переводчиком-человеком компьютерных словарей.\nСистемы с разделением труда: компьютер обучен переводить только фразы жёстко заданной структуры (но делает это так, чтобы исправлять за ним не требовалось), а всё, не уложившееся в схему, отдаёт человеку.>>>",
            "К середине 1960-х в США для практического использования были предоставлены две системы русско-английского перевода:\n<<<MARK (в Департаменте иностранной техники ВВС США);\nGAT (разработка Джорджтаунского университета, использовалась в Национальной лаборатории атомной энергии в Окридже и в центре Евратома в г. Испра, Италия).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Машинный_перевод"
    },
    {
        "task": [
            "Субъективное качество видео измеряется по следующей методике:\n<<<Выбираются видеопоследовательности для использования в тесте\nВыбираются параметры системы измерения\nВыбирается метод показа видео и подсчёта результатов измерения\nПриглашается необходимое число экспертов (обычно не меньше 15)\nПроводится сам тест\nПодсчитывается средняя оценка на основе оценок экспертов.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Видео"
    },
    {
        "task": [
            "Средства<<<вывода информации из устройства к пользователю — весь доступный диапазон воздействий на организм человека (зрительных, слуховых, тактильных, обонятельных и т. д.) — экраны (дисплеи, проекторы) и лампочки, динамики, зуммеры и сирены, вибромоторы и т. д. и т. п.\nввода информации/команд пользователем в устройство — множество всевозможных устройств для контроля состояния человека — кнопки, переключатели, потенциометры, датчики положения и движения, сервоприводы, жесты лицом[источник не указан 446 дней] и руками, даже съём мозговой активности пользователя.>>>",
            "Методы<<<набор правил, заложенных разработчиком устройства, согласно которым совокупность действий пользователя должна привести к необходимой реакции устройства и выполнения требуемой задачи — так называемый логический интерфейс.>>>",
            "В разделе не хватает ссылок на источники (см. рекомендации по поиску). Информация должна быть проверяема, иначе она может быть удалена. Вы можете отредактировать статью, добавив ссылки на авторитетные источники в виде сносок. (8 октября 2022)<<<Визуальный\nТекстовый (в частности, интерфейс командной строки)\nГрафический\nОконный\nWIMP\nWeb-ориентированный\nИндуктивный\nМасштабируемый\nТактильный\nЖестовый\nГолосовой\nМатериальный (осязательный)\nНейрокомпьютерный интерфейс>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Интерфейс_пользователя"
    },
    {
        "task": [
            "Для некоторого ПО различают минимальные и рекомендуемые системные требования:\n<<<Минимальные системные требования - это набор характеристик и параметров, которые должны быть у компьютера или программного обеспечения, чтобы оно могло работать без серьезных проблем. Эти требования определяют минимальные характеристики аппаратного и программного обеспечения, необходимые для стабильной работы определенной программы, операционной системы или приложения.\nРекомендуемые системные требования - это более высокие характеристики аппаратного и программного обеспечения, которые обеспечивают более оптимальную производительность, качество и стабильность работы программы, операционной системы или приложения. Если ваш компьютер соответствует рекомендуемым требованиям, вы сможете использовать программу с большим комфортом и возможностями.>>>",
            "Минимальные системные требования для компьютерной игры Baldur's Gate 3:\n<<<Видеокарта — Nvidia GTX 970 / RX 480 (4GB+ of VRAM).\nОперационная система — Windows 10 64-bit.\nПроцессор — Intel I5 4690 / AMD FX 8350\nОперативная память — 8 Гб ОЗУ.\n150 Гб свободного места на жёстком диске (HDD).\nDirectX Версии 11>>>",
            "Рекомендованные системные требования для компьютерной игры Forza Horizon 5:\n<<<Видеокарта — NVidia GTX 1070 OR AMD RX 590\nОперационная система — Windows 10 версии 15063.0 или выше\nПроцессор —  Intel i5-8400 or AMD Ryzen 5 1500X.\nОперативная память — 16 Гб ОЗУ .\nСкорость Интернет-соединения — Широкополосное подключение к интернету.\n110  Гб свободного места на жёстком диске (HDD / SSD).\nDirectX Версии 12.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Системные_требования"
    },
    {
        "task": [
            "Этот раздел не завершён. Вы поможете проекту, исправив и дополнив его.<<<Контекстно-свободная грамматика\nКонтекстно-зависимая грамматика\nРегулярный язык\nрегулярные выражения\nГрамматика с фразовой структурой\nLL(n)\nLALR(1)\nYacc\nANTLR\nParsec\nAST\nДерево разбора[en]\nАбстрактный синтаксис первого порядка[en]\nАбстрактный синтаксис высшего порядка[en]>>>",
            "Существует несколько подходов к определению семантики языков программирования. Основных три: операционная, аксиоматическая и денотационная.\n<<<При описании семантики в рамках операционного подхода обычно исполнение конструкций языка программирования интерпретируется с помощью некоторой воображаемой (абстрактной) ЭВМ.\nАксиоматическая семантика описывает последствия выполнения конструкций языка с помощью языка логики и задания пред- и постусловий.\nДенотационная семантика оперирует понятиями, типичными для математики — множества, соответствия, а также суждения, утверждения и др.>>>",
            "Формально язык программирования не имеет такого критерия как «уровень». Условно этот термин обычно означает одно из двух:\n<<<«приближенность» языка программирования к естественному человеческому языку и образу мысли,\n«удалённость» семантики языка программирования от машинного кода целевой архитектуры процессора — то есть наименьший масштаб преобразований, которые должен претерпеть код программы перед тем, как он сможет исполняться.>>>",
            "Примеры математически обоснованных языков и воплощаемых ими математических моделей:\n<<<Agda, Epigram[en], Idris — интуиционистская теория типов Мартин-Лёфа.\nAPL и его потомки (J, K) — оригинальная семантика, не имеющая названия, воплощающая нотацию Айверсона для исчисления массивов (часто встречается термин «array languages»).\nCoq — исчисление индуктивных конструкций.\nErlang — исчисление процессов (первоначально в форме модели акторов, позже также построено обоснование на \n\n\n\nπ\n\n\n{\\displaystyle \\pi }\n\n-исчислении[57]).\nForth — стековая машина[en] и конкатенативный язык программирования.\nHaskell — теория категорий (включая «декартово замкнутую категорию», воплощающую лямбда-исчисление; категорию монад для моделирования побочных эффектов; расширение системы типов Хиндли — Милнера; систему родо́в; и др.).\nJoy — композиция функций и гомоморфизм (иначе говоря, чистый конкатенативный язык программирования и, как следствие, чистый функциональный).\nLisp — лямбда-исчисление Чёрча (в том числе язык S-выражений, воплощающий нотацию пар Чёрча).\nScheme — «облагороженный» диалект Лиспа (сильнее типизированный, в большей степени гомоиконичный, ограничивающийся гигиеническими макроопределениями[en] и соблюдающий числовую башню[en]), дополненный нотацией продолжений.\nML — типизированное лямбда-исчисление, то есть лямбда-исчисление, дополненное системой типов Хиндли — Милнера.\nProlog — исчисление предикатов.\nMercury — исчисление предикатов, дополненное системой типов Хиндли — Милнера.\nSmalltalk — теория множеств[58] (с соблюдением числовой башни[en]).\nSQL — исчисление кортежей (вариант реляционного исчисления, в свою очередь основанного на исчислении предикатов первого порядка).\nSGML и его потомки (HTML, XML) — нотация деревьев (важный случай графов).\nUnlambda — комбинаторная логика.\nРегулярные выражения.\nРефал — оригинальная семантика Турчина, носящая название «Рефал-машины» или «Рефал-автомата», созданная на основе нормального алгоритма Маркова, воплощающая композицию теории автоматов, сопоставления с образцом и переписывания термов.>>>",
            "Наличие математического обоснования для языка может гарантировать (или, как минимум, обещать с очень высокой вероятностью) некоторые или все из следующих положительных свойств:\n<<<Существенное повышение стабильности программ. В одних случаях — за счёт построения доказательства надёжности для самого языка (см. типобезопасность), существенного упрощения формальной верификации программ и даже получения языка, который сам является системой автоматического доказательства (Coq, Agda). В других случаях — за счёт раннего обнаружения ошибок на первых же пробных запусках программ (Forth и регулярные выражения).\nОбеспечение потенциально более высокой эффективности программ. Даже если семантика языка далека от архитектуры целевой платформы компиляции, к нему могут быть применимы формальные методики глобального анализа программ (хотя трудоёмкость написания даже тривиального транслятора может оказаться выше). Например, для языков Scheme и Standard ML существуют развитые полнопрограммно-оптимизирующие компиляторы и суперкомпиляторы, результат работы которых может уверенно конкурировать по скорости с языком низкого уровня Си и даже опережать последний (хотя ресурсоёмкость работы самих компиляторов оказывается значительно выше). Одна из самых быстрых СУБД — KDB[59] — написана на языке K. Язык Scala (унаследовавший математику от ML) обеспечивает на платформе JVM более высокую скорость, чем «родной» для неё язык Java[источник не указан 2598 дней]. С другой стороны, Forth имеет репутацию одного из самых нетребовательных к ресурсам языков (менее требователен, чем Си) и используется для разработки приложений реального времени под самые маломощные ЭВМ; кроме того, транслятор Форта является одним из наименее трудоёмких в реализации на ассемблере.\nЗаранее известный (неограниченный или, наоборот, чётко очерченный) предел роста сложности программных компонентов, систем и комплексов, которые можно выразить средствами этого языка с сохранением показателей качества[28][60]. Языки, не имеющие математического обоснования (а именно такие наиболее часто применяются в мейнстриме: C++, Java, C#, Delphi и др.), на практике ограничивают реализуемую функциональность и/или снижают качество по мере усложнения системы[61], так как им присущи экспоненциальные кривые роста сложности как относительно работы одного отдельно взятого человека, так и относительно сложности управления проектом в целом[51][62]. Прогнозируемая сложность системы приводит либо к поэтапной декомпозиции проекта на множество более мелких задач, каждая из которых решается соответствующим языком, либо к языково-ориентированному программированию для случая, когда адресуемой языком задачей является как раз описание семантик и/или символьные вычисления (Lisp, ML, Haskell, Рефал, Регулярные выражения). Языки с неограниченным пределом роста сложности программ нередко относят к метаязыкам (что в непосредственном толковании термина не верно, но практике сводимо, так как всякий мини-язык, выбранный для решения некоторой подзадачи в составе общей задачи, может быть представлен в виде синтаксического и семантического подмножества данного языка, не требуя трансляции[63]).>>>",
            "Существенное повышение стабильности программ. В одних случаях — за счёт построения доказательства надёжности для самого языка (см. типобезопасность), существенного упрощения формальной верификации программ и даже получения языка, который сам является системой автоматического доказательства (Coq, Agda). В других случаях — за счёт раннего обнаружения ошибок на первых же пробных запусках программ (Forth и регулярные выражения).\nОбеспечение потенциально более высокой эффективности программ. Даже если семантика языка далека от архитектуры целевой платформы компиляции, к нему могут быть применимы формальные методики глобального анализа программ (хотя трудоёмкость написания даже тривиального транслятора может оказаться выше). Например, для языков Scheme и Standard ML существуют развитые полнопрограммно-оптимизирующие компиляторы и суперкомпиляторы, результат работы которых может уверенно конкурировать по скорости с языком низкого уровня Си и даже опережать последний (хотя ресурсоёмкость работы самих компиляторов оказывается значительно выше). Одна из самых быстрых СУБД — KDB[59] — написана на языке K. Язык Scala (унаследовавший математику от ML) обеспечивает на платформе JVM более высокую скорость, чем «родной» для неё язык Java[источник не указан 2598 дней]. С другой стороны, Forth имеет репутацию одного из самых нетребовательных к ресурсам языков (менее требователен, чем Си) и используется для разработки приложений реального времени под самые маломощные ЭВМ; кроме того, транслятор Форта является одним из наименее трудоёмких в реализации на ассемблере.\nЗаранее известный (неограниченный или, наоборот, чётко очерченный) предел роста сложности программных компонентов, систем и комплексов, которые можно выразить средствами этого языка с сохранением показателей качества[28][60]. Языки, не имеющие математического обоснования (а именно такие наиболее часто применяются в мейнстриме: C++, Java, C#, Delphi и др.), на практике ограничивают реализуемую функциональность и/или снижают качество по мере усложнения системы[61], так как им присущи экспоненциальные кривые роста сложности как относительно работы одного отдельно взятого человека, так и относительно сложности управления проектом в целом[51][62]. Прогнозируемая сложность системы приводит либо к поэтапной декомпозиции проекта на множество более мелких задач, каждая из которых решается соответствующим языком, либо к языково-ориентированному программированию для случая, когда адресуемой языком задачей является как раз описание семантик и/или символьные вычисления (Lisp, ML, Haskell, Рефал, Регулярные выражения). Языки с неограниченным пределом роста сложности программ нередко относят к метаязыкам (что в непосредственном толковании термина не верно, но практике сводимо, так как всякий мини-язык, выбранный для решения некоторой подзадачи в составе общей задачи, может быть представлен в виде синтаксического и семантического подмножества данного языка, не требуя трансляции[63]).<<<Удобство для человека при решении задач, на которые этот язык ориентирован по своей природе (см. проблемно-ориентированный язык), что в некоторой степени также способно (косвенно) повлиять на повышение стабильности результирующих программ за счёт повышения вероятности обнаружения ошибок в исходном коде и снижения дублирования кода.>>>",
            "Особые категории языков[править | править код]<<<Учебные\nПредметно-специфичные\nЭзотерические\nВизуальные>>>",
            "Существуют различные метрики для измерения популярности языков, каждая из которых разработана с пристрастием к определённому смыслу понятия популярности:\n<<<подсчёт числа вакансий, упоминающих язык;\nколичество проданных книг (учебников или справочников);\nоценка количества строк кода, написанных на языке (что не принимает в расчёт редко публикуемые случаи использования языков);\nподсчёт упоминаний языка в запросах поисковиков.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Язык_программирования"
    },
    {
        "task": [
            "В процессе программирования в настоящее время широко используются интегрированные среды разработки[9][10], в состав которых обычно входят:\n<<<редактор для ввода и редактирования текста программ[10];\nтранслятор для преобразования текста программы в машинное представление;\nотладчик для отладки (поиска и устранения ошибок);\nкомпоновщик для сборки программы из нескольких модулей;\nдругие служебные модули и инструменты.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Программирование"
    },
    {
        "task": [
            "Аналоговый телевизионный тракт в общем виде включает в себя следующие устройства[55]:\n<<<Телевизионная передающая камера. Служит для преобразования изображения, получаемого при помощи объектива на мишени передающей трубки или полупроводниковой матрице, в телевизионный видеосигнал.\nТелекинопроектор. Преобразует изображение и звук на киноплёнке в телевизионный сигнал и позволяет демонстрировать кинофильмы по телевидению.\nВидеомагнитофон. Записывает и в нужный момент воспроизводит видеосигнал, сформированный передающей камерой или телекинопроектором.\nВидеомикшер. Позволяет переключаться между несколькими источниками изображения: камерами, видеомагнитофонами и другими.\nПередатчик. Несущий сигнал высокой частоты модулируется телевизионным сигналом и передаётся по радио или по проводам.\nПриёмник — телевизор. С помощью синхроимпульсов, содержащихся в видеосигнале, телевизионное изображение воспроизводится на экране приёмника (кинескоп, ЖК-дисплей, плазменная панель).>>>",
            "Любопытные факты<<<Папа Римский Франциск отказался от просмотра телепередач, в чём в 1990 году дал обет Деве Марии[63].\nПервым в мире массовым мероприятием, транслировавшимся по телевидению, стали Олимпийские игры в нацистской Германии[64].\nВ Южно-Африканской Республике телевизионные передачи начались только в 1976 году; до этого телевидение в ЮАР было запрещено из-за его предполагаемого вредного влияния на население.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Телевидение"
    },
    {
        "task": [
            "Можно выделить следующие виды графического пользовательского интерфейса:\n<<<простой: типовые экранные формы и стандартные элементы интерфейса, обеспечиваемые самой подсистемой GUI;\nистинно-графический, двумерный: нестандартные элементы интерфейса и оригинальные метафоры, реализованные собственными средствами приложения или сторонней библиотекой;\nтрёхмерный.>>>",
            "Недостатки<<<Большее потребление ресурсов в сравнении с текстовым интерфейсом.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Графический_интерфейс_пользователя"
    },
    {
        "task": [
            "«Хорошая» хеш-функция должна удовлетворять двум свойствам:\n<<<быстрое вычисление;\nминимальное количество «коллизий».>>>",
            "Введём обозначения:\n<<<\n\n\n\nK\n\n\n{\\displaystyle K}\n\n — количество «ключей» (входных данных);\n\n\n\n\nh\n(\nk\n)\n\n\n{\\displaystyle h(k)}\n\n — хеш-функция, имеющая не более \n\n\n\nM\n\n\n{\\displaystyle M}\n\n различных значений (выходных данных).>>>",
            "Среди преимуществ алгоритма:\n<<<простоту вычисления;\nотсутствие таких входных данных, для которых вероятность коллизии наибольшая;\nвозможность модификации в идеальную хеш-функцию[5].>>>",
            "Описание[править | править код]<<<Функция \n\n\n\nh\n(\nk\n)\n:\nU\n→\n[\nm\n]\n\n\n{\\displaystyle h(k)\\colon U\\to [m]}\n\n называется идеальной хеш-функцией для \n\n\n\nS\n⊆\nU\n\n\n{\\displaystyle S\\subseteq U}\n\n, если она инъективна на \n\n\n\nS\n\n\n{\\displaystyle S}\n\n.\nФункция \n\n\n\nh\n(\nk\n)\n:\nU\n→\n[\nm\n]\n\n\n{\\displaystyle h(k)\\colon U\\to [m]}\n\n называется минимальной идеальной хеш-функцией для \n\n\n\nS\n⊆\nU\n\n\n{\\displaystyle S\\subseteq U}\n\n, если она является идеальной хеш-функцией и \n\n\n\nm\n=\nn\n=\n\n|\n\nS\n\n|\n\n\n\n{\\displaystyle m=n=|S|}\n\n.\nДля целого \n\n\n\nk\n≥\n1\n\n\n{\\displaystyle k\\geq 1}\n\n функция \n\n\n\nh\n(\nk\n)\n:\nU\n→\n[\nm\n]\n\n\n{\\displaystyle h(k)\\colon U\\to [m]}\n\n называется \n\n\n\nk\n\n\n{\\displaystyle k}\n\n-идеальной хеш-функцией (k-PHF) для \n\n\n\nS\n⊆\nU\n\n\n{\\displaystyle S\\subseteq U}\n\n, если для каждого \n\n\n\nj\n∈\n[\nm\n]\n\n\n{\\displaystyle j\\in [m]}\n\n имеем \n\n\n\n\n|\n\n{\nx\n∈\nS\n\n|\n\nh\n(\nx\n)\n=\nj\n}\n\n|\n\n≤\nk\n\n\n{\\displaystyle |\\{x\\in S|h(x)=j\\}|\\leq k}\n\n.>>>",
            "Большинство первых работ, описывающих хеширование, посвящено методам борьбы с коллизиями в хеш-таблицах. Тогда хеш-функции применялись при поиске текста в файлах большого размера. Существует два основных метода борьбы с коллизиями в хеш-таблицах:\n<<<метод цепочек (метод прямого связывания);\nметод открытой адресации.>>>",
            "Среди множества существующих хеш-функций принято выделять криптографически стойкие, применяемые в криптографии, так как на них накладываются дополнительные требования. Для того, чтобы хеш-функция \n\n\n\nH\n\n\n{\\displaystyle H}\n\n считалась криптографически стойкой, она должна удовлетворять трём основным требованиям, на которых основано большинство применений хеш-функций в криптографии:\n<<<необратимость: для заданного значения хеш-функции m должно быть вычислительно неосуществимо найти блок данных \n\n\n\nX\n\n\n{\\displaystyle X}\n\n, для которого \n\n\n\nH\n(\nX\n)\n=\nm\n\n\n{\\displaystyle H(X)=m}\n\n;\nстойкость к коллизиям первого рода: для заданного сообщения M должно быть вычислительно неосуществимо подобрать другое сообщение N, для которого \n\n\n\nH\n(\nN\n)\n=\nH\n(\nM\n)\n\n\n{\\displaystyle H(N)=H(M)}\n\n;\nстойкость к коллизиям второго рода: должно быть вычислительно неосуществимо подобрать пару сообщений \n\n\n\n(\nM\n,\n\nM\n′\n\n)\n\n\n{\\displaystyle (M,M')}\n\n, имеющих одинаковый хеш.>>>",
            "Данные требования не являются независимыми:\n<<<обратимая функция нестойка к коллизиям первого и второго рода;\nфункция, нестойкая к коллизиям первого рода, нестойка к коллизиям второго рода; обратное неверно.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Хеш-функция"
    },
    {
        "task": [
            "По территориальной распространённости:\n<<<BAN (Body Area Network — нательная компьютерная сеть) — сеть надеваемых или имплантированных компьютерных устройств;\nPAN (Personal Area Network) — персональная сеть, предназначенная для взаимодействия различных устройств, принадлежащих одному владельцу;\nLAN (ЛВС, Local Area Network) — локальная сеть, имеющая замкнутую инфраструктуру до выхода на поставщиков услуг; может описывать и маленькую офисную сеть, и сеть уровня большого завода, занимающего несколько сотен гектаров; иногда определяется как сеть «около шести миль (10 км) в радиусе»; локальные сети являются сетями закрытого типа, доступ к ним разрешён только ограниченному кругу пользователей, для которых работа в такой сети непосредственно связана с их профессиональной деятельностью;\nCAN (Campus Area Network) — кампусная сеть, объединяет локальные сети близко расположенных зданий;\nMAN (Metropolitan Area Network) — городские сети между учреждениями в пределах одного или нескольких городов, связывающие много локальных вычислительных сетей;\nWAN (Wide Area Network) — глобальная сеть, покрывающая большие географические регионы, включающие в себя как локальные сети, так и прочие телекоммуникационные сети и устройства. Пример WAN — сети с коммутацией пакетов (Frame relay), через которую могут «разговаривать» между собой различные компьютерные сети. Глобальные сети являются открытыми и ориентированы на обслуживание любых пользователей.>>>",
            "По архитектуре:\n<<<клиент-сервер[2];\nодноранговая сеть (децентрализованная или пиринговая сеть).>>>",
            "По типу сетевой топологии:\n<<<шина\nкольцо\nдвойное кольцо\nзвезда\nячеистая\nрешётка\nдерево\nсмешанная топология\nFat Tree>>>",
            "По типу среды передачи:\n<<<проводная (телефонный провод, коаксиальный кабель, витая пара, волоконно-оптический кабель);\nбеспроводная (передача информации по радиоволнам в определённом частотном диапазоне)>>>",
            "По функциональному назначению:\n<<<сеть хранения данных;\nсерверная ферма;\nсеть управления процессом;\nСеть SOHO, домовая сеть.>>>",
            "По скорости передачи:\n<<<низкоскоростная (до 10 Мбит/с),\nсреднескоростная (до 100 Мбит/с),\nвысокоскоростная (свыше 100 Мбит/с);>>>",
            "По сетевым операционным системам:\n<<<на основе Windows\nна основе Unix\nна основе NetWare\nна основе Cisco>>>",
            "По необходимости поддержания постоянного соединения:\n<<<пакетная сеть, например, Фидонет и UUCP\nонлайновая сеть, например, Интернет и GSM>>>",
            "Примеры самостоятельных логических вычислительных сетей, использующих другие физические сети и среды передачи данных:\n<<<Коммутируемый (модемный) доступ\nВиртуальная частная сеть (VPN) и виртуальная локальная вычислительная сеть VLAN\nДаркнет\nБлокчейн>>>",
            "Сетевая модель OSI\n<<<Прикладной уровень\nУровень представления информации\nСеансовый уровень\nТранспортный уровень\nСетевой уровень\nКоммутация\nМаршрутизация\nКанальный уровень (Уровень связывания данных) — Спецификация IEEE 802 разделяет этот уровень на 2 подуровня — MAC (Media Access Control) регулирует доступ к разделяемой физической среде, LLC (Logical Link Control) обеспечивает обслуживание сетевого уровня.\nФизический уровень>>>",
            "Основная статья: Передача данных<<<Проводная связь, кабельные линии связи\nТелефонная сеть PSTN\nМодем и коммутируемый доступ\nВыделенные линии\nКоммутация пакетов\nFrame relay\nPDH\nEthernet\nRS-232\nПередача по оптоволоконному кабелю\nSynchronous optical networking\nFiber distributed data interface\nБеспроводная связь\nБлижнего радиуса действия\nBluetooth\nHuman Area Network\nСреднего радиуса действия\nIEEE 802.11\nNetsukuku\nIEEE 802.16e WiMAX\nДальнего радиуса действия\nСпутниковая связь\nMMDS\nSMDS\nПередача данных при помощи мобильных телефонов\nCSD\nGPRS\nHSCSD\nEDGE\nUMTS\nHSDPA\nHSUPA\nCDMA\nLTE\nIEEE 802.16e WiMAX\nCDPD\nPaging networks\nDataTAC\nMobitex\nMotient>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Вычислительная_сеть"
    },
    {
        "task": [
            "Локализация не ограничивается переводом интерфейса на другой язык. Это многоуровневая операция, первые шаги которой можно выполнить, даже оставив интерфейс нетронутым,[1] а последние — требуют взаимодействия программистов, дизайнеров и переводчиков[2]:\n<<<Обеспечить поддержку языка и национальных стандартов — необходимый минимум, чтобы программа могла выполнять свои функции в другой стране. Современные ОС берут на себя многие из этих вопросов, но и программист должен быть достаточно квалифицированным, чтобы использовать их возможности.\nКорректная работа в локализованной операционной системе[3], для игр на ТВ-приставках — стандарт телевидения (PAL или NTSC).\nСделать, чтобы программа отвечала товарным законам целевой страны. В частности: издать документацию на целевом языке, подогнать функциональность под патенты, антимонопольное законодательство, законы о печати, о хранении персональных данных… Так, в Windows 98 исчезла подсветка часовых поясов из-за спорных территорий: крайне трудно угодить обеим спорящим странам.[4]\nВывод на экран символов языка.[5] Подготовка локализованных шрифтов, если таковые нужны.[6] При этом адаптация под другую письменность может быть довольно сложной.[1]\nДругие действия с языком — ввод текста, алфавитная сортировка, строковые операции, орфографические словари, правила переносов[1] и т. д.\nСтандарты целевой страны, непосредственно связанные с функционированием программы:\nФормат даты, времени, дробных и многозначных чисел.\nОсобенности человеческих имён.\nСимволы валюты.\nФорматы бумаги.\nСистема мер.\nОсобенности законодательства.\nНалоговая система.\nВыдаваемые правительством документы — номер социального обеспечения, идентификационный номер налогоплательщика, номер паспорта.\nТребования к ПО для госструктур — открытость данных, стандарты шифрования и прочее.\nПеревод текстов в интерфейсе программы на целевой язык.\nВ сложном ПО не все части стоит переводить. Например, многие не согласны с переводом имён функций Excel на русский язык. Некоторые ошибки ОС выводятся, когда компьютер ещё не способен показывать русские буквы, при том, что специалист, кому эти сообщения адресованы, поймёт и английские.\nКорректное выравнивание и размещение элементов интерфейса с учётом того, что сообщения-строки в разных языках могут иметь существенно разные размеры (например, обычное сообщение на английском, будучи переведено на немецкий язык, как правило, становится длиннее на 17,3 %[7]). Кроме того, существуют языки с написанием справа налево (арабский, иврит) и сверху вниз (японский);\nЧрезвычайно важен перевод терминологии. Например, спорным является применяемый в Windows термин «обозреватель», обозначающий браузер.\nЕсли есть текст на изображениях, его нужно перерисовать. Если есть речевые сообщения, их надо наговорить.\nТонкая настройка под целевую страну.\nРабота со словоформами. Примером будет пресловутое «Найдено 3 файлов».\nДополнительные стандарты, не влияющие на основную функциональность программы. Например: формат даты/времени в медиаплеере, особенности типографики.\nОбеспечить интероперабельность локализированной программы с исходной. Например: мы ввели в документ формулу «x*2,5». Будет ли она работать, если открыть его в английской версии? Наладили сетевую игру русского с английским — не разорвёт ли связь, сославшись на несовпадение версий?\nОбеспечить интероперабельность программы с ПО, распространённым в целевой стране. Например, от страны к стране варьируются бухгалтерские программы, и «1С: Предприятие» мало известно за пределами стран СССР.\nУчёт национального менталитета. Например: красный цвет у русских ассоциируется не только с опасностью, но и с праздником. В играх зачастую приходится менять юмор, а изредка — даже корректировать сюжет (например, в Syberia 2 турецкий иммигрант Sirkos превратился в еврея Цукермана).\nАмериканский почтовый ящик, который мы привыкли видеть в программах электронной почтыПерерисовка графики (сплэш-экранов, значков, клипартов и т. д.) под реалии другой страны. Например, в разных странах могут выглядеть по-разному дорожные знаки, вилки и розетки, почтовый ящик. Глобус поворачивают к зрителю той частью света, на которую рассчитывается продукт. В Великобритании у выключателя включенным является нижнее положение, в бывшем СССР — верхнее. Значки перерисовывают крайне редко, поэтому дизайнеры изначально стараются сделать их как можно более «интернациональными».>>>",
            "Примеры языковых тегов:\n<<<Английский язык: en-GB (британский английский), en-US (американский английский), en-AU (австралийский английский).\nИспанский язык: es-ES (кастильский испанский, письменный и разговорный язык Испании), es-MX (мексиканский испанский), es-AR (аргентинский испанский), es-CO (колумбийский испанский).\nПортугальский язык: pt-PT (европейский португальский, письменный и разговорный язык Португалии), pt-BR (бразильский португальский).\nКитайский язык: zh-CN (материковый Китай, упрощённые иероглифы), zh-TW (Тайвань, традиционные иероглифы), zh-HK (Гонконг, традиционные иероглифы).\nРусский язык: ru-RU (русский, Россия).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Локализация_программного_обеспечения"
    },
    {
        "task": [
            "Ключевые понятия:\n<<<квантификация переменных типа (универсальная, экзистенциальная, ограниченная[en]);\nподтипизация[en] (англ. subtyping — отношения «супертип-подтип»);\nвключение (англ. subsumption — см. принцип подстановки Барбары Лисков) — частный случай подтипизации — см. подтипизация на записях;\nобъект;\nобъектный тип (фактически, специальная форма «записи», в число полей которой входят функции первого класса);\nкласс.>>>",
            "Наиболее заметные отличия в проявлении показателей качества между языками разных видов:\n<<<В мейнстримных языках декларируемые принципы нацелены на повышение изначально низкого для императивного программирования коэффициента повторного использования кода. В полиморфно типизированных применение концепций ООП, напротив, означает очевидное его снижение из-за перехода от параметрического полиморфизма к ad-hoc-полиморфизму[10]. В динамически типизированных языках (Smalltalk, Python, Ruby) эти принципы используются для логической организации программы, и их влияние на коэффициент повторного использования трудно спрогнозировать — он сильно зависит от дисциплины программиста. Например, в CLOS мультиметоды одновременно являются функциями первого класса, что позволяет рассматривать их одновременно и как связанно квантифицированные[en], и как обобщённые (истинно полиморфные).\nТрадиционные ОО-языки используют номинативную типизацию[en], то есть допустимость соиспользования объектов разных классов только при условии явного указания родственных отношений между классами. Для полиморфно типизированных языков характерна структурная типизация[en], то есть согласование классов между собой тем же механизмом, что и согласование числа 5 с типом int. Динамически типизированные языки также занимают здесь промежуточную позицию.>>>",
            "Объектно ориентированное проектирование ориентируется на описание структуры проектируемой системы (приоритетно по отношению к описанию её поведения, в отличие от функционального программирования), то есть, фактически, в ответе на два основных вопроса:\n<<<Из каких частей состоит система;\nВ чём состоит ответственность каждой из её частей.>>>",
            "Прототипное программирование, сохранив часть черт ООП, отказалось от базовых понятий — класса и наследования.\n<<<Прототип — это объект-образец, по образу и подобию которого создаются другие объекты. Объекты-копии могут сохранять связь с родительским объектом, автоматически наследуя изменения в прототипе; эта особенность определяется в рамках конкретного языка.\nВместо механизма описания классов и порождения экземпляров, язык предоставляет механизм создания объекта (путём задания набора полей и методов, которые объект должен иметь) и механизм клонирования объектов.\nКаждый вновь созданный объект является «экземпляром без класса». Каждый объект может стать прототипом — быть использован для создания нового объекта с помощью операции клонирования. После клонирования новый объект может быть изменён, в частности, дополнен новыми полями и методами.\nКлонированный объект либо становится полной копией прототипа, хранящей все значения его полей и дублирующей его методы, либо сохраняет ссылку на прототип, не включая в себя клонированных полей и методов до тех пор, пока они не будут изменены. В последнем случае среда исполнения обеспечивает механизм делегирования — если при обращении к объекту он сам не содержит нужного метода или поля данных, вызов передаётся прототипу, от него, при необходимости — дальше по цепочке.>>>",
            "Критические высказывания в адрес ООП:\n<<<Было показано отсутствие значимой разницы в продуктивности разработки программного обеспечения между ООП и процедурным подходом[19].\nКристофер Дэйт указывает на невозможность сравнения ООП и других технологий во многом из-за отсутствия строгого и общепризнанного определения ООП[20].\nАлександр Степанов в одном из своих интервью указывал, что ООП «методологически неправильно» и что «…ООП практически такая же мистификация, как и искусственный интеллект…»[21].\nФредерик Брукс указывает, что наиболее сложной частью создания программного обеспечения является «…спецификация, дизайн и тестирование концептуальных конструкций, а отнюдь не работа по выражению этих концептуальных конструкций…». ООП (наряду с такими технологиями как искусственный интеллект, верификация программ, автоматическое программирование, графическое программирование, экспертные системы и др.), по его мнению, не является «серебряной пулей», которая могла бы на порядок величины снизить сложность разработки программных систем. Согласно Бруксу, «…ООП позволяет сократить только привнесённую сложность в выражение дизайна. Дизайн остаётся сложным по своей природе…»[22].\nЭдсгер Дейкстра указывал: «…то, о чём общество в большинстве случаев просит — это эликсир от всех болезней. Естественно, „эликсир“ имеет очень впечатляющие названия, иначе будет очень трудно что-то продать: „Структурный анализ и Дизайн“, „Программная инженерия“, „Модели зрелости“, „Управляющие информационные системы“ (Management Information Systems), „Интегрированные среды поддержки проектов“, „Объектная ориентированность“, „Реинжиниринг бизнес-процессов“…»[23].\nНиклаус Вирт считает, что ООП — не более чем тривиальная надстройка над структурным программированием[источник не указан 1953 дня], и преувеличение её значимости, выражающееся, в том числе, во включении в языки программирования всё новых модных «объектно ориентированных» средств, вредит качеству разрабатываемого программного обеспечения.\nПатрик Киллелиа в своей книге «Тюнинг веб-сервера» писал: «…ООП предоставляет вам множество способов замедлить работу ваших программ…».\nИзвестная обзорная статья проблем современного ООП-программирования перечисляет некоторые типичные проблемы ООП[24][неавторитетный источник].\nВ программистском фольклоре получила широкое распространение критика объектно ориентированного подхода в сравнении с функциональным подходом с использованием метафоры «Действие в Королевстве существительных» из эссе Стива Йегги[25].>>>",
            "Как правило, объектно ориентированный язык (ООЯ) содержит следующий набор элементов:\n<<<Объявление классов с полями (данными — членами класса) и методами (функциями — членами класса).\nМеханизм расширения класса (наследования) — порождение нового класса от существующего с автоматическим включением всех особенностей реализации класса-предка в состав класса-потомка. Большинство ООЯ поддерживают только единичное наследование.\nПолиморфные переменные и параметры функций (методов), позволяющие присваивать одной и той же переменной экземпляры различных классов.\nПолиморфное поведение экземпляров классов за счёт использования виртуальных методов. В некоторых ООЯ все методы классов являются виртуальными.>>>",
            "Некоторые языки добавляют к указанному минимальному набору те или иные дополнительные средства. В их числе:\n<<<Конструкторы, деструкторы, финализаторы;\nСвойства (аксессоры);\nИндексаторы;\nСредства управления видимостью компонентов классов (модификаторы доступа или интерфейсы, такие как public, private, protected, feature и др.).>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Объектно-ориентированное_программирование"
    },
    {
        "task": [
            "В отличие от человека, для компьютера нет «хорошо написанного» или «плохо написанного» кода. Но то, как написан код, может сильно влиять на процесс сопровождения ПО. О качестве исходного кода можно судить по следующим параметрам:\n<<<читаемость кода (в том числе наличие комментариев к коду);\nлёгкость в поддержке, тестировании, отладке и устранении ошибок, модификации и портировании;\nэкономное использование ресурсов: памяти, процессора, дискового пространства;\nотсутствие замечаний, выводимых компилятором;\nотсутствие «мусора» — неиспользуемых переменных, недостижимых блоков кода, ненужных устаревших комментариев и т. д.;\nадекватная обработка ошибок;\nвозможность интернационализации интерфейса.>>>",
            "В таких случаях исходным кодом считается форма данной работы, предпочтительная для её редактирования. В лицензиях, предназначенных не только для ПО, она также может называться версией в «прозрачном формате». Это может быть, например:\n<<<для файла, сжатого с потерей данных — версия без потерь;\nдля рендера векторного изображения или трёхмерной модели — соответственно, векторная версия и модель;\nдля изображения текста — такой же текст в текстовом формате;\nдля музыки — файл во внутреннем формате музыкального редактора;\nи наконец, сам файл, если он удовлетворяет указанным условиям, либо если более удобной версии просто не существовало.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Исходный_код"
    },
    {
        "task": [
            "Преимущества ноутбуков перед настольными ПК:\n<<<Малый вес и габариты. Даже ноутбуки категории замена настольного ПК можно легко переместить в другое место. Ноутбук можно взять в командировку, на дачу, в отпуск. Перемещение настольного компьютера в другую комнату/кабинет зачастую представляет собой проблему, не говоря уже о перемещении в другой город.\nДля работы не обязательно подключать внешние устройства. Ноутбук включает в себя встроенные дисплей, клавиатуру и устройство указания (обычно тачпад), а к настольному компьютеру все эти устройства необходимо подключать отдельно.\nВозможность автономной работы. Наличие аккумулятора позволяет ноутбуку работать в условиях, когда электрическая сеть недоступна (в поезде, самолёте, автомобиле, кафе и просто на улице). Настольный компьютер может работать автономно очень недолгое время и только при наличии источника бесперебойного питания.\nВозможность подключения к беспроводным сетям. Практически все современные ноутбуки (за исключением некоторых сверхбюджетных моделей) оснащены встроенным Wi-Fi-адаптером, что позволяет подключиться к интернету без проводов. Точки доступа Wi-Fi есть во многих кафе, развлекательных центрах, аэропортах, гостиницах. Существуют также городские Wi-Fi сети, позволяющие подключиться к беспроводной сети во многих районах города. Настольные компьютеры обычно не содержат встроенного Wi-Fi-адаптера (за исключением некоторых дорогих моделей и большинства неттопов), впрочем, для стационарных компьютеров данный недостаток несущественен.>>>",
            "Недостатки[править | править код]<<<Низкая максимальная производительность. Компактные размеры ноутбуков предъявляют особые требования к охлаждению, поэтому компоненты, используемые в ноутбуках, имеют жёсткие ограничения по тепловыделению, а, следовательно, и мощности. Даже мощные игровые ноутбуки и мобильные рабочие станции не могут сравниться с производительными настольными ПК, предназначенными для таких требовательных задач, как компьютерные игры, трёхмерное моделирование и проектирование, рендеринг, инженерные расчёты. Немногочисленные дескноуты исправить положение не могут, поскольку для них существуют те же ограничения по габаритам и тепловыделению, что и для других ноутбуков. Поэтому в дескноутах устанавливаются не самые производительные настольные процессоры и используются мобильные версии видеокарт.\nОграниченность модернизации. В отличие от настольных компьютеров, возможность модернизации ноутбуков сильно ограничена. В портативных компьютерах, как правило, предусмотрена возможность самостоятельной замены ОЗУ и жёсткого диска. Модернизация видеокарты в большинстве ноутбуков не предусмотрена, хотя встречаются модели, позволяющие осуществить и замену графического адаптера. В случае необходимости замены других компонентов, в том числе процессора и дисковода оптических дисков, рекомендуется обращаться к квалифицированным специалистам. В розничной продаже мобильные версии процессоров и видеокарт практически не встречаются.\nПроблемы совместимости с различными операционными системами. Производители ноутбуков редко осуществляют поддержку семейства операционных систем, отличных от предустановленной на данную модель ноутбука. Кроме того, в ноутбуках часто используются специфические компоненты, поэтому проблемы совместимости с другими ОС возникают значительно чаще, чем для настольных компьютеров.>>>",
            "Недостатки ноутбуков, являющиеся следствием мобильности портативных компьютеров:\n<<<Качество встроенных компонентов. В отличие от настольных компьютеров, в ноутбук встроены дисплей, клавиатура и тачпад (иногда — трекбол или тензометрический джойстик), качество и удобство использования которых зачастую невысоки. Клавиатура обычно имеет меньше клавиш, чем настольная (за счёт совмещённого цифрового блока клавиш), а размеры клавиш, особенно у субноутбуков и нетбуков, могут быть очень маленькими и неудобными для некоторых пользователей. Тачпад менее удобен, чем компьютерная мышь. Монитор ноутбука не может быть очень большим (как правило, диагональ не превышает 17.3 дюйма). Перечисленные недостатки встроенных элементов вполне закономерны для мобильных устройств, и их можно компенсировать подключением внешних компонентов (монитора, клавиатуры, компьютерной мыши), однако это увеличивает конечную стоимость ноутбука и несколько снижает мобильность портативного компьютера.\nСистема охлаждения электронных компонентов ноутбука часто работает на пределе из-за небольших габаритов. Микросхемы ноутбуков чаще перегреваются до температур деградации и выходят из строя — в особенности если пользователи, пренебрегая этим фактором, располагают включённый ноутбук так, что вентиляционные отверстия оказываются перекрыты. В настольных компьютерах организация адекватного охлаждения обычно не представляет труда, особенно в случае современных корпусов с расположением блока питания снизу.\nПовышенная вероятность поломки. Мобильность ноутбуков порождает ещё одну проблему, которую тоже иногда заносят в недостатки портативных компьютеров — большая вероятность поломки по сравнению с настольным ПК. Ноутбуки чаще роняют. Существует вероятность сломать дисплей ноутбука при закрытии крышки (если между клавиатурой и дисплеем попадёт посторонний предмет). Если залить клавиатуру ноутбука какой-либо жидкостью, то велика вероятность выхода портативного компьютера из строя (в то время, как в настольном компьютере из строя выйдет только клавиатура).\nВысокая вероятность потери или кражи. Компактные и мобильные портативные ПК очень часто крадут, и столь же часто их теряют, забывая в транспорте, отелях, конференц-залах и так далее. Защитить ноутбук от потери или кражи можно путём соблюдения элементарных правил безопасности (не оставлять устройство где попало, не привлекать к нему внимание и прочее). Дополнительно можно оснастить портативное устройство кодовым замком со стальным кабелем (например, замком Kensington Security Lock), который прикрепляется к большому и тяжёлому неподвижному объекту или замком со звуковой сигнализацией, подключаемым через USB-разъём (при отключении такого замка или повреждении троса срабатывает сирена). В случае кражи или потери ноутбука до его информации добраться проще простого, причём можно даже без снятия пароля: с гаджета просто снимается жёсткий диск, подключается к специальному переходнику для HDD, который (то есть переходник) подключается через USB-порт — к ПК в качестве съёмного диска.>>>",
            "В первом приближении клавиатура является обычной резино-мембранной. Чтобы уменьшить её толщину до нескольких миллиметров, применяются несколько технических решений:\n<<<Основа клавиатуры — металлическая пластина с выштампованными рёбрами жёсткости.\nРезинки уменьшены до предела, что, впрочем, снижает жёсткость клавиш.\nЧтобы защитить клавиши от перекоса, используют так называемый ножничный механизм, сборку из двух пластмассовых деталей. Это усложняет разборку клавиатуры (часто, чтобы ничего не сломать, её продувают сжатым газом без разборки), но тонкую клавиатуру проще чистить снаружи, а узкие щели медленнее загрязняются. В длинных клавишах (пробел, ввод) используется такой же проволочный стабилизатор, как и в полноразмерных клавиатурах.\nМембраны делают из тонкого прочного лавсана или полиимида, с прорезями для частей механизма.>>>",
            "В качестве изготовителей ноутбуков часто выступают следующие компании (Таблица соответствия брендов и OEM-производителей ноутбуков):\n<<<Quanta Computer — крупный тайваньский производитель (для Sony, Lenovo, HP, Apple).\nFalcon Northwest[en] — выпускает High-End-ноутбуки.\nCompal — производит некоторые модели Acer, Dell, Toshiba, HP и т. д., специализируется на бюджетных ноутбуках.\nPegatron — широкий список моделей (Lenovo, Asus, Alienware, HP, Apple), бывшее подразделение Asus.\nClevo — выпускает популярные игровые ноутбуки.\nSager — мощные ноутбуки.\nUniwill — ноутбуки ECS[en].\nWistron — бизнес-модели (Apple, HP, Dell, Lenovo), бывшее подразделение Acer.\nInventec — бизнес-модели HP.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Ноутбук"
    },
    {
        "task": [
            "Модель OSI, которая была определена в серии стандартов ISO/IEC 7498, состоит из следующих частей:\n<<<ISO/IEC 7498-1 — базовая модель;\nISO/IEC 7498-2 — архитектура безопасности;\nISO/IEC 7498-3 — наименования и адресация;\nISO/IEC 7498-4 — система менеджмента.>>>",
            "Обработка данных двумя взаимодействующими OSI-совместимыми устройствами происходит следующим образом:\n<<<Передаваемые данные составляются на самом верхнем уровне передающего устройства (уровень N) в протокольный блок данных (PDU).\nPDU передается на уровень N-1, где он становится сервисным блоком данных (SDU).\nНа уровне N-1 SDU объединяется с верхним, нижним или обоими уровнями, создавая слой N-1 PDU. Затем он передается в слой N-2.\nПроцесс продолжается до достижения самого нижнего уровня, с которого данные передаются на принимающее устройство.\nНа приемном устройстве данные передаются от самого низкого уровня к самому высокому в виде серии SDU, последовательно удаляясь из верхнего или нижнего колонтитула каждого слоя до достижения самого верхнего уровня, где принимаются последние данные.>>>",
            "В литературе наиболее часто принято начинать описание уровней модели OSI с седьмого уровня, называемого прикладным, на котором пользовательские приложения обращаются к сети. Модель OSI заканчивается 1-м уровнем — физическим, на котором определены стандарты, предъявляемые независимыми производителями к средам передачи данных:\n<<<тип передающей среды (медный кабель, оптоволокно, радиоэфир и др.),\nтип модуляции сигнала,\nсигнальные уровни логических дискретных состояний (нули и единицы).>>>",
            "Прикладной уровень (уровень приложений; англ. application layer) — верхний уровень модели, обеспечивающий взаимодействие пользовательских приложений с сетью:\n<<<позволяет приложениям использовать сетевые службы:\nудалённый доступ к файлам и базам данных,\nпересылка электронной почты;\nотвечает за передачу служебной информации;\nпредоставляет приложениям информацию об ошибках;\nформирует запросы к уровню представления.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Сетевая_модель_OSI"
    },
    {
        "task": [
            " Основные показатели элементов, зависящие от химсостава, находятся в следующих пределах:\n<<<напряжение единичного элемента:\nмаксимальное: 4,2 В (или 4,35/4,40 В для высоковольтных);[5]\nминимальное: 2,5 В (или 2,8/3,0 В для высоковольтных);\nудельная энергоёмкость: 110…270 Вт·ч/кг;[6]\nвнутреннее сопротивление: 4…15 мОм;[7]\nчисло циклов заряд-разряд до снижения ёмкости до 80 %: 600;\nвремя быстрого заряда: 1 час;\nсаморазряд зависит от температуры хранения и степени заряда. При температуре 25 °C и заряде 100 % ≈1,6 % в месяц;\nток нагрузки относительно ёмкости С, представленной в А·ч:\nпостоянный: до 5С;\nимпульсный: до 50С;\nоптимальный: до 1С;\nдиапазон рабочих температур: от −20 °C до +60 °C (оптимальная +23 °C);[8]>>>",
            "В настоящее время в массовом производстве литий-ионных аккумуляторов используются три класса катодных материалов:\n<<<кобальтат лития LiCoO2 и твёрдые растворы на основе изоструктурного ему никелата лития\nлитий-марганцевая шпинель LiMn2O4\nлитий-феррофосфат LiFePO4.>>>",
            "Электрохимические схемы литий-ионных аккумуляторов:\n<<<литий-кобальтовые LiCoO2 + 6C → Li1-xCoO2 + LiC6\nлитий-ферро-фосфатные LiFePO4 + 6C → Li1-xFePO4 + LiC6>>>",
            "Преимущества<<<Низкий саморазряд.\nВысокая токоотдача.\nБольшое число циклов заряд-разряд.\nНе требуют обслуживания.>>>",
            "Широко применяемые литий-ионные аккумуляторы при перезаряде, несоблюдении условий заряда или при механическом повреждении часто бывают чрезвычайно огнеопасными.\n<<<Огнеопасны\nТеряют работоспособность при переразряде\nТеряют ёмкость на холоде>>>",
            "Экология[править | править код]<<<Для производства литий-ионных аккумуляторов требуется литий высокой степени чистоты, для получения одной тонны лития требуется переработка 100 тонн руды.\nявляется токсичным отходом.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Литий-ионный_аккумулятор"
    },
    {
        "task": [
            "В разделе не хватает ссылок на источники (см. рекомендации по поиску). Информация должна быть проверяема, иначе она может быть удалена. Вы можете отредактировать статью, добавив ссылки на авторитетные источники в виде сносок. (18 сентября 2021)<<<Структурированность стандартов цифрового обмена данными алгоритмов;\nШирокое использование компьютерного сохранения и предоставление информации в необходимом виде;\nПередача информации посредством цифровых технологий на практически безграничные расстояния[12].>>>",
            "Информационные технологии охватывают все ресурсы, необходимые для управления информацией, особенно компьютеры, программное обеспечение и сети, необходимые для создания, хранения, управления, передачи и поиска информации.\nИнформационные технологии могут быть сгруппированы следующим образом[14]:\n<<<Технические средства;\nКоммуникационные средства;\nОрганизационно-методическое обеспечение;\nСтандартизация.>>>",
            "Существуют следующие виды сетей передачи данных:\n<<<Телефонные сети — абонентские сети связи, для доступа к которым используются телефонные аппараты, АТС и оборудование передачи данных;\nКомпьютерные сети — сети, оконечными устройствами которых являются компьютеры.>>>",
            "По данным Statista, в октябре 2021 года использование поисковых систем распределялось следующим образом:\n<<<Google — 86,64 %;\nBing — 7 %;\nYahoo! — 2,75 %[19].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Информационные_технологии"
    },
    {
        "task": [
            "Применение<<<Русские счёты>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Десятичная_система_счисления"
    },
    {
        "task": [
            "Виды IP-телефонии<<<Связь осуществляется между компьютерами с соответствующим программным обеспечением (например софтфонами), которые посредством сети Интернет или другой компьютерной сети соединяются с сервером, осуществляющим коммутацию вызовов. Возможны звонки и в телефонную сеть общего пользования (ТСОП), в этом случае сервер находит прокси-сервер (с интегрированными шлюзами) телефонной сети, где находится искомый абонент (например Skype-пользователь).\nАбонент, имеющий телефонный аппарат, подключённый к ТСОП, звонит на телефонный номер провайдера IP-телефонии, проходит аутентификацию по ПИН-коду и набирает нужный ему номер. Прокси-сервер (с интегрированным шлюзом) провайдера находит в сети Интернет прокси-сервер, через шлюз подключённый к телефонной сети, где находится искомый абонент, и соединяется с ним. Благодаря тому, что междугородный разговор проходит не по телефонным каналам, а посредством передачи Интернет-трафика, стоимость такого вызова значительно ниже.\nАбонент, имеющий IP-телефон (не путать с одноименным наименованием компании) с интегрированным VoIP-шлюзом, через Интернет подключён непосредственно к прокси-серверу своего провайдера IP-телефонии, который по набранному телефонному номеру ищет в Интернете соответствующий ему прокси-сервер и соединяется с ним. Тот, в свою очередь, через шлюз подключён к ТСОП, где находится искомый абонент. При обратном звонке Автоматическая телефонная станция определяет, что номер принадлежит IP-телефону и отправляет его на прокси-сервер ТСОП, который соединяется с соответствующим прокси-сервером провайдера IP-телефонии и тот посылает вызов своему абоненту. По такой схеме проходят, например, вызовы на номера с DEF-кодом 800, подключённые посредством IP-телефонии. Номера абонентов IP-телефонии похожи на обычные. Вместо IP-телефона можно использовать VoIP-шлюз с подключённым к нему обычным телефонным аппаратом.\nТелефонная сеть предприятия или телекоммуникационной компании (оператора связи) построена на основе компьютерной IP-сети с применением софтсвитча, IP-АТС или виртуальной АТС. Внутри данной телефонной сети пользователи осуществляют связь посредством технологии IP-телефонии, управление осуществляется VoIP-сервером. Подключение к ТСОП подразумевает взаимодействие через VoIP-шлюз или непосредственно с другим софтсвичом или IP-АТС по сети передачи данных (в том числе, например, через Интернет).>>>",
            "Примеры:\n<<<Возможность передавать более одного телефонного звонка в рамках высокоскоростного телефонного подключения. В рамках технологии передачи данных по IP-сети применяются методики сжатия оцифрованного звука и снижения нагрузки, что в совокупности позволяет экономить до 90 % пропускной способности. Поэтому IP-телефония используется в качестве простого способа для добавления дополнительной телефонной линии дома или в офисе.\nДополнительные функции телефонной связи, такие как:\nопределение номера звонящего\nконференция,\nпереадресация звонка,\nавтоматический набор номера,\nзапись разговора,\nмногоканальный номер>>>",
            "предоставляются значительно проще (порой непосредственно на терминале пользователя) и потому нередко бесплатно, тогда как в традиционных телекоммуникационных компаниях эти возможности требуют применения дополнительного оборудования и технологий и обычно выставляются в счёт, как доп. услуга.\n<<<Безопасные звонки, со стандартизованным протоколом (такие как SRTP). Большинство трудностей для включения безопасных телефонных соединений по традиционным телефонным линиям, такие как оцифровка сигнала, передача цифрового сигнала, уже решено в рамках IP-телефонии. Необходимо лишь произвести шифрование сигнала и его идентификацию для существующего потока данных.\nНезависимость от месторасположения. Нужно только интернет-соединение для подключения к провайдеру IP-телефонии. Например, операторы центра звонков с помощью IP-телефонов могут работать из любого офиса, где есть в наличии эффективное, быстрое и стабильное интернет-подключение.\nДоступна интеграция с другими сервисами через Интернет, включая видеозвонок, обмен сообщениями и данными во время разговора, аудиоконференции, управление адресной книгой и получение информации о том, доступны ли для звонка другие абоненты.\nДополнительные телефонные свойства — такие как маршрутизация звонка, всплывающие окна с информацией о звонящем, альтернативный GSM-роуминг и внедрение IVR — легче и дешевле внедрить и интегрировать. Тот факт, что телефонный звонок находится в той же самой сети передачи данных, что и персональный компьютер пользователя, открывает путь ко многим новым возможностям.>>>",
            "Клиентское оборудование[править | править код]<<<\n\n\nIP-телефон Avaya 1140E\n\n\n\nIP-телефон Cisco 7960 IP Phone\n\n\n\nВидеотелефон AddPac VP-500\n\n\n\nCPE - домашний роутер и ADSL-модем с функцией шлюза IP-телефонии\n\n\n\nIP-телефоны Grandstream, D-Link, Cisco\n\n\n\nVoIP-шлюз Cisco SPA112.jpg\n\n>>>",
            "\n\n\nIP-телефон Avaya 1140E\n\n\n\nIP-телефон Cisco 7960 IP Phone\n\n\n\nВидеотелефон AddPac VP-500\n\n\n\nCPE - домашний роутер и ADSL-модем с функцией шлюза IP-телефонии\n\n\n\nIP-телефоны Grandstream, D-Link, Cisco\n\n\n\nVoIP-шлюз Cisco SPA112.jpg\n\n<<<VoIP-шлюз — устройство, позволяющее подключить аналоговый телефонный аппарат к VoIP-серверу или непосредственно к другому клиентскому устройству IP-телефонии. Каждый аналоговый порт шлюза (FXS) представляется в компьютерной сети как VoIP-терминал. Различают VoIP-шлюзы на 1-2 порта (иногда называемые также «VoIP-адаптерами») и многопортовые устройства, которые называют шлюзами «средней» или «высокой плотности».\nIP-телефон — устройство, которое внешне выглядит как обычный современный телефонный аппарат. В действительности является сетевым устройством, похожим на мини-ПК с собственной сетевой операционной системой. Некоторые модели IP-телефонов комплектуются монохромным или цветным дисплеем для отображения номера звонящего, параметров работы и настройки.\nВидеотелефон — вариант настольного VoIP-телефона с цветным ЖК-дисплеем и встроенной видеокамерой для просмотра и передачи видеоизображения во время разговора\nSIP-DECT-телефон — цифровой беспроводной радиотелефон, работающий по стандарту DECT, базовая радиостанция которого подключается к серверу IP-телефонии посредством компьютерной сети\nПрограммный телефон (софтфон) — программа на настольном ПК или мобильном устройстве, выполняющая роль пользовательского терминала. Звуковая система устройства — звуковая карта и встроенные или внешние динамики или наушники и микрофон или гарнитура - служат в качестве инструмента обеспечения звука. Программный телефон лишь использует драйвер звуковой карты в используемой операционной системе. Функции сетевой связи реализуются также в операционной системе. Нередко программные телефоны по своему дизайну — внешнему виду напоминают телефонный аппарат или мобильный телефон, имеют номеронабиратель, дисплей для отображения номера звонящего или вызываемого пользователя, историю вызовов, а также встроенную адресную книгу для совершения вызова посредством щелчка на контакте, без необходимости набора номера. Нередко программный телефон выполняет роль пользовательского инструмента для унифицированных коммуникаций — обладает функциями не только голосовой связи, но и конференц-связи, видео-связи, обмена текстовыми сообщениями, передачи файлов.>>>",
            "USB-телефон<<<USB-телефон — пользовательское устройство, по внешнему виду, как правило, имитирующее трубку телефонного аппарата или телефонный аппарат. USB-телефон подключается к USB-порту компьютера (отсюда и название). Такое устройство, как правило, требует установки дополнительного ПО в операционную систему (или устанавливает его самостоятельно при первом подключении). В этом случае по сути является вариантом софтфона с внешней гарнитурой или акустической системой для компьютера, с дополнительным управлением из программы. Некоторые USB-телефоны являются просто USB-гарнитурой — динамиком с микрофоном. Распространены также USB-телефоны с встроенной поддержкой протоколов управления вызовами H.323, SIP и Skype и способов передачи медиаданных.>>>",
            "Для работы в сложной сети с большим числом пользователей необходим централизованный коммутатор — устройство или программа, реализующие функционал автоматической телефонной станции в IP-сети, VoIP-сервер. К серверам IP-телефонии относят:\n<<<Сервер многоточечной конференции (англ. Multipoint Control Unit, MCU) — аппаратно-программное устройство, предназначенное для объединения аудио- и видеоконференции в многоточечный режим. Применяется, как правило в корпоративной среде для организации внутренней связи.\nАппаратный VoIP-шлюз с возможностью подключения нескольких аналоговых телефонных аппаратов. Нередко обладает встроенными функциями мини-АТС и в этом случае может выполнять функции VoIP-сервера. VoIP-шлюз может быть подключён к другой аналоговой или цифровой телефонной станции на FXS-порт посредством стандартного телефонного FXO-интерфейса.\nVoIP-GSM-шлюз — разновидность VoIP-шлюза. Устройство, предназначенное для прямой трансляции телефонного сигнала из IP-сетей в сотовую телефонную сеть и обратно.>>>",
            "Также существуют потоковые шлюзы — устройства, позволяющие подсоединить аналоговую или цифровую телефонную станцию к другой IP-АТС посредством компьютерной сети и реализующие функцию преобразования.<<<Цифровая АТС с возможностью подключения VoIP-терминалов пользователей посредством компьютерной сети, благодаря наличию специальной сетевой карты или дополнительной платы расширения с поддержкой подключения к компьютерной сети и реализующей функции VoIP.\nПрограммный коммутатор (софтсвитч) — программа, работающая на любом аппаратном сервере или виртуальной машине под управлением сетевой операционной системы. Благодаря тому, что программное обеспечение легко может быть доработано, в софтсвичах реализуется самая различная логика работы и инструменты интеграции с другими системами. Некоторые софтсвичи интегрированы в специальное отдельное аппаратное устройство и не могут быть установлены в никакое другое устройство.\nВиртуальная АТС — разновидность софтсвича, предлагаемая как услуга какой-либо телекоммуникационной компанией>>>",
            "Протоколы обеспечивают регистрацию клиентского устройства (шлюз, терминал или IP-телефон) на сервере или так называемом привратнике провайдера, вызов и/или переадресацию вызова, установление голосового или видеосоединения, передачу имени и/или номера абонента. В настоящее время широкое распространение получили следующие протоколы:\n<<<RTP/RTCP - парные транспортные протоколы, обеспечивающие пакетную передачу оцифрованных медиаданных в IP-сети. Для управления сеансом связи и его параметрами используются сигнальные протоколы, которые, в частности, определяют параметры передачи медиа-трафика. Для обеспечения безопасности могут применяться SRTP/SRTCP или DTLS\nSIP — протокол сеансового установления связи, обеспечивающий управление взаимодействием и согласование параметров передачи голоса, видео, сообщений систем мгновенного обмена сообщений и произвольной нагрузки, для сигнализации обычно использует порт 5060 UDP. Поддерживает контроль присутствия.\nH.323 — рекомендация ITU-T, стек протоколов, более привязанный к системам традиционной телефонии, чем SIP, сигнализация по порту 1720 TCP, и 1719 TCP для регистрации терминалов на гейткипере.\nMGCP — протокол управления медиашлюзами (заменил SGCP).\nMegaco/H.248 — протокол управления медиашлюзами, развитие MGCP.\nSIGTRAN — набор протоколов туннелирования PSTN-сигнализации ОКС-7 через IP на программный коммутатор (Softswitch).\nSCTP — протокол для организации гарантированной доставки пакетов в IP-сетях.\nSCCP (Skinny) — ранее закрытый протокол управления терминалами (IP-телефонами и медиашлюзами) в продуктах компании Cisco, ныне открытый.\nJingle (дополнение к XMPP / Jabber).\nIAX2 — протокол для обмена данными между IP-PBX Asterisk. Через 4569 UDP-порт передается и сигнализация, и медиатрафик.\nUNIStim — ранее закрытый протокол передачи сигнального трафика в продуктах компании Nortel, ныне открытый.\nWebRTC — веб-технология установления VoIP-соединения внутри протокола HTTP илли HTTPS, медиатрафик передается посредством DTLS. Применяется в современных веб-браузерах.>>>",
            "Кодирование вносит дополнительную задержку порядка 15—45 мс, возникающую по следующим причинам:\n<<<использование буфера для накопления сигнала и учёта статистики последующих отсчётов (алгоритмическая задержка);\nматематические преобразования, выполняемые над речевым сигналом, требуют процессорного времени (вычислительная задержка).>>>",
            "Проведённый в различных исследовательских группах анализ качества передачи речевых данных через Интернет показывает, что основным источником возникновения искажений, снижения качества и разборчивости синтезированной речи является прерывание потока речевых данных, вызванное:\n<<<потерями пакетов при передаче по сети связи;\nпревышением допустимого времени доставки пакета с речевыми данными.>>>",
            "Основными преимуществами IP-телефонии является снижение требований к полосе пропускания, что обеспечивается учётом статистических характеристик речевого трафика:\n<<<блокировкой передачи пауз (диалоговых, слоговых, смысловых и др.), которые могут составлять до 40-50 % времени занятия канала передачи (VAD);\nвысокой избыточностью речевого сигнала и его сжатием (без потери качества при восстановлении) до уровня 20-40 % исходного сигнала (см.: аудиокодек).>>>",
            "При передаче телефонного трафика по технологии IP должны учитываться жёсткие требования стандарта TL9000 к качеству услуг, характеризующие:\n<<<качество установления соединения, определяемое в основном быстротой установления соединения,\nкачество соединения, показателем которого являются сквозные (воспринимаемые пользователем) задержки и качество воспринимаемой речи.>>>",
            "Для решения подобных проблем предлагается комплекс мер[2]:\n<<<использование алгоритмического восстановления потерянных частей голоса (усреднение по соседним данным)\nприоритезация трафика во время транспорта в одной сети при помощи пометки IP-пакетов в поле Type of Service\nиспользование изменяемого джиттер-буфера необходимой длины, который позволяет накапливать пакеты и выдавать их снова с нормальной периодичностью\nотключение проксирования медиаданных на узком месте сети, то есть достижение прямого обмена речью между узлом звонящего и вызываемого абонента при посредничестве промежуточных серверов только на этапе установления и завершения вызова\nприменение кодеков с меньшей алгоритмической задержкой (для уменьшения нагрузки на процессор, осуществляющий АЦП и ЦАП)>>>",
            "Любое VoIP-соединение имеет целый ряд параметров, общепринятых как точные показатели оценки качества соединения. Кроме того, большинство существующих операторов IP-телефонии при оказании услуг позволяет даже выбирать узел, через который пройдет звонок, не только руководствуясь ценой, но и дополнительными статистическими параметрами, характеризующими качество связи:\n<<<ASR/ABR — отношение количества обслуженных звонков к числу попыток позвонить в процентах. Характеризует наилучший дозвон.\nACD — средняя продолжительность звонков через узел на данное направление; процент состоявшихся звонков с длительностью меньше 30 секунд. Характеризует наиболее устойчивую связь во время разговора.\nALOC (англ. Average Length Of Conversation — средняя продолжительность разговора). Усреднённый показатель длительности состоявшихся вызовов на каком-либо направлении. См. документ Международного союза электросвязи (ITU) рекомендации: E.434: «Quality of service, network management and traffic engineering — Network management — Checking the quality of the international telephone service».>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/IP-телефония"
    },
    {
        "task": [
            "В зависимости от назначения различают:\n<<<Библиотеки, используемые одной программой и содержащие критические для работы программы функции. Недостаток: при отсутствии библиотеки программа не сможет работать;\nБиблиотеки, используемые одной программой и содержащие дополнительные функции. Например, библиотеки плагинов используются для расширения функционала программы;\nБиблиотеки общего пользования (англ. shared library). Содержат функции, используемые несколькими программами. Могут загружаться в адресное пространство ОС (англ. system library) для экономии памяти: одна копия библиотеки будет использоваться несколькими процессами. В силу последнего обстоятельства такие библиотеки нередко называют разделяемыми.>>>",
            "Достоинства:\n<<<экономия памяти за счёт использования одной библиотеки несколькими процессами;\nвозможность исправления ошибок (достаточно заменить файл библиотеки и перезапустить работающие программы) без изменения кода основной программы.>>>",
            "Недостатки:\n<<<возможность нарушения API , — при внесении изменений в библиотеку существующие программы могут перестать работать (утратят совместимость по интерфейсу[5]);\nконфликт версий динамических библиотек, — разные программы могут нуждаться в разных версиях библиотеки;\nдоступность одинаковых функций по одинаковым адресам в разных процессах, — упрощает эксплуатацию уязвимостей (для решения проблемы изобретён pic (англ.)).>>>",
            "Например, в исходных текстах распространяются:\n<<<библиотеки для языка Fortran;\nбиблиотека Boost для языка C++.>>>",
            "Достоинства:\n<<<все необходимые функции включаются в один исполняемый файл.>>>",
            "Недостатки:\n<<<исполняемый файл занимает больше места на диске и в памяти, (если присоединяет код из объектных библиотечных файлов целиком, а не выборочно);\nпри обнаружении ошибок в библиотеке требуется пересборка всех программ.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Библиотека_(программирование)"
    },
    {
        "task": [
            "Драйвер состоит из нескольких функций, которые обрабатывают определенные события операционной системы. Обычно основные события следующие:\n<<<Загрузка драйвера: драйвер регистрируется в системе, производит первичную инициализацию и т. п.\nВыгрузка: драйвер освобождает захваченные ресурсы — память, файлы, устройства и т. п.\nОткрытие драйвера: обычно драйвер открывается программой как файл, функциями fopen() в UNIX-подобных системах или CreateFile() в Win32. С этого события начинается основная работа драйвера.\nЧтение/Запись: программа осуществляет обмен данными с устройством, обслуживаемым драйвером.\nЗакрытие: операция, обратная открытию, освобождает занятые при открытии ресурсы и уничтожает дескриптор файла.\nУправление вводом-выводом (англ. IO Control, IOCTL). Зачастую драйвер поддерживает интерфейс ввода-вывода, специфичный для данного устройства. С помощью этого интерфейса программа может послать специальную команду, которую поддерживает данное устройство. Например, для SCSI-устройств можно послать команду GET_INQUIRY, чтобы получить описание устройства. В Win32-системах управление осуществляется через API-функцию DeviceIoControl(), в UNIX-подобных — с помощью ioctl().>>>",
            "Драйвера видеокарты представляют собой программное обеспечение, которое позволяет операционной системе, программам и играм использовать графическое оборудования вашего компьютера. Если вы играете в игры, то желательно обновлять эти драйвера — это может в значительной мере сказаться на FPS и общей производительности системы в играх.\n<<<Драйверы видеокарт с открытым исходным кодом>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Драйвер"
    },
    {
        "task": [
            "Этот раздел не завершён. Вы поможете проекту, исправив и дополнив его.<<<Первые гражданские электромеханические вычислительные машины Z1 и Z2 были созданы в конце 1930-х годов в Германии.\n1941 год — Конрад Цузе создал вычислительную машину Z3, которая имела все свойства современного компьютера.\n1942 год — в университете штата Айова Джон Атанасов и его аспирант Клиффорд Берри создали (а точнее — разработали и начали монтировать) первую в США электронную цифровую вычислительную машину. Хотя эта машина так и не была завершена в связи с уходом Атанасова на войну, она, как пишут историки, оказала большое влияние на Джона Мокли, который, спустя четыре года создал первую в мире ЭВМ ЭНИАК.\nВ начале 1943 года успешные испытания прошла первая американская вычислительная машина Марк I, предназначенная для выполнения сложных баллистических расчётов для ВМС США.\nВ конце 1943 года заработала английская вычислительная машина специального назначения «Колосс». Машина работала над расшифровкой секретных кодов нацистской Германии.\nВ 1944 году Конрад Цузе разработал ещё более быструю вычислительную машину — Z4.\n1946 год стал годом создания первой американской гражданской универсальной электронной цифровой вычислительной машины ЭНИАК.\nВ 1950 году в Киеве под руководством академика С. А. Лебедева был создан первый советский сверхвычислитель МЭСМ, на следующий год в Москве под руководством И. С. Брука была создана ЭВМ М-1.\nВ 1959 году в Париже состоялся Всемирный компьютерный конгресс и была создана международная федерация по обработке информации[3]\nС 1962 года ЭВМ применяются на космических кораблях Союз и Л-1 (облёт Луны).\n1967 стал годом, посвящённым формальным методам проектирования электронных вычислительных машин под руководством Глушкова.\n30 октября 1967 года в СССР произведена первая в мире полностью автоматическая стыковка двух космических аппаратов (беспилотных кораблей «Союз» под названиями «Космос-186» и «Космос-188»[4].\nВ 1969 году ЭВМ ракеты Н-1 обрабатывал данные с более чем 13 тысячи датчиков ракеты.\nК 1984 году в СССР было 10 тыс. компьютеров в школах.>>>",
            "По размеру аппаратной части могут быть выделены различные классы ЭВМ[5].\n<<<Супер ЭВМ (Суперкомпьютеры).\nБольшие ЭВМ (Мэйнфреймы).\nМини-ЭВМ — малая ЭВМ, имеет небольшие размеры и стоимость. Появившись в конце 1960-х годов, мини-ЭВМ имели широкие возможности в решении задач различных классов.\nМикроЭВМ — ЭВМ малых размеров, созданная на базе микропроцессора. Ранее различали микроЭВМ следующих видов: встроенные и персональные, настольные и портативные, профессиональные и бытовые. Термин ПЭВМ (персональная ЭВМ)[6][7] вытеснен синонимом «персональный компьютер» (сокращённо: ПК). В настоящее время персональные компьютеры не относятся к микрокомпьютерам[источник не указан 216 дней].>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Электронная_вычислительная_машина"
    },
    {
        "task": [
            "По зависимости от операционной системы можно различать[2]:\n<<<Независимые утилиты, не требующие для своей работы операционной системы;\nСистемные утилиты, входящие в поставку ОС и требующие её наличия;\nОптимизатор диска для восстановления целостности файловой системы и дефрагментации.>>>",
            "Примеры утилит по функциям<<<Файловый менеджер\nАрхиваторы (с возможным сжатием данных);\nПросмотрщики;\nУтилиты для диагностики аппаратного или программного обеспечения;\nУтилиты восстановления после сбоев;\nОптимизатор диска — вид утилиты для оптимизации размещения файлов на дисковом накопителе, например, путём дефрагментации диска;\nШредеры файлов;\nДеинсталлятор — программа для удаления программного обеспечения[3];\nУтилиты управления процессами.>>>"
        ],
        "link": "https://ru.wikipedia.org/wiki/Утилита"
    }
]