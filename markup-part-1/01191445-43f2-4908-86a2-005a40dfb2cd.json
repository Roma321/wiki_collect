{
  "id": "01191445-43f2-4908-86a2-005a40dfb2cd.json",
  "task": "Трансляция программы как неотъемлемая составляющая компиляции включает в себя:\n\u003c\u003c\u003cЛексический анализ. На этом этапе последовательность символов исходного файла преобразуется в последовательность лексем.\nСинтаксический  анализ. Последовательность лексем преобразуется в древо разбора.\nСемантический анализ. На этой фазе древо разбора обрабатывается с целью установления его семантики  — например, привязка идентификаторов к их объявлениям, типам данных, проверка совместимости, определение типов выражений и т. д. Результат обычно называется «промежуточным представлением/кодом», и может быть дополненным древом разбора, новым деревом, абстрактным набором команд или чем-то ещё, удобным для дальнейшей обработки.\nОптимизация. Выполняется удаление излишних конструкций и упрощение кода с сохранением его смысла. Оптимизация может быть на разных уровнях и этапах — например, над промежуточным кодом или над конечным машинным кодом.\nГенерация кода. Из промежуточного представления порождается код на целевом машинно-ориентированном языке.\u003e\u003e\u003e",
  "correct": [
    [
      "Лексический анализ. На этом этапе последовательность символов исходного файла преобразуется в последовательность лексем.",
      "Синтаксический  анализ. Последовательность лексем преобразуется в древо разбора.",
      "Семантический анализ. На этой фазе древо разбора обрабатывается с целью установления его семантики  — например, привязка идентификаторов к их объявлениям, типам данных, проверка совместимости, определение типов выражений и т. д. Результат обычно называется «промежуточным представлением/кодом», и может быть дополненным древом разбора, новым деревом, абстрактным набором команд или чем-то ещё, удобным для дальнейшей обработки.",
      "Оптимизация. Выполняется удаление излишних конструкций и упрощение кода с сохранением его смысла. Оптимизация может быть на разных уровнях и этапах — например, над промежуточным кодом или над конечным машинным кодом.",
      "Генерация кода. Из промежуточного представления порождается код на целевом машинно-ориентированном языке."
    ],
    [
      "Лексический анализ.",
      "Синтаксический анализ",
      "Семантический анализ",
      "Оптимизация (необязательно)",
      "Генерация кода"
    ],
    [
      "Парсинг лексем",
      "Построение абстрактного синтаксического дерева",
      "Определение семантики лексем",
      "Оптимизация кода",
      "Генерация исполняемого файла"
    ],
    [
      "Лексический анализ",
      "Построение AST",
      "Семантичекий анализ",
      "Оптимизация",
      "Генерация бинарных файлов"
    ],
    [
      "1. Лексический анализ (разбор): Программа разбивается на отдельные элементы, называемые лексемами, такие как ключевые слова, идентификаторы, операторы и т.д.",
      "2. Синтаксический анализ: Проверяется правильность построения программы с точки зрения грамматики языка и создается древовидная структура, отражающая ее синтаксис.",
      "3. Семантический анализ: Анализируется смысл программы, проверяются типы данных, соответствие объявлений и использований переменных, и создается промежуточное представление программы.",
      "4. Оптимизация: Программа преобразуется для повышения ее эффективности, например, удаляются избыточные операции или упрощаются выражения.",
      "5. Генерация кода: Промежуточное представление преобразуется в машинный код, понятный компьютеру."
    ]
  ],
  "wrong": [
    "запуск компилятора",
    "Фонетический анализ",
    "Собачка",
    "Если компилятор генерирует исполняемую машинную программу на машинном языке, то такая программа непосредственно исполняется физической программируемой машиной (например компьютером). В других случаях исполняемая машинная программа выполняется соответствующей виртуальной машиной.",
    "Пересобирает программу, заново транслируя только изменённые фрагменты программы без перетрансляции всей программы.",
    "биометрический анализ",
    "разбор по составу",
    "анализ крови"
  ],
  "meta": {
    "type": "ul",
    "link": "https://ru.wikipedia.org/wiki/Компилятор"
  }
}